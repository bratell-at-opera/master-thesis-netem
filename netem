#!/bin/bash

function printHelp {
    if [ -n "$2" ]; then
        echo "ERROR: $2"
        echo ""
    else
        echo "netem - Web protocol analyzer which simulates a bottleneck link of your choise."
    fi
    echo
    echo "Usage:"
    echo "  $1 [-q|--quic|-h2|--http2|-h1|--http1]"
    echo ""
    echo "-d|--debug"
    echo "      Run browser on primary display. Default is to initialize virtual display."
    echo ""
    echo "-h2|--http2"
    echo "      Use a web server serving pages using HTTP/2."
    echo ""
    echo "-h1|--http1"
    echo "      Use a web server serving pages using HTTP/1.1."
    echo ""
    echo "-q|--quic"
    echo "      Use a web server serving pages using QUIC."
    echo ""
    echo "--loss-rate-dl= / --loss-rate-ul="
    echo "      Specify the loss rate on the down-link/up-link given in percent. 1-3% on down-link in rare cases but mostly below 1% by an order of magnitude. Up-link rarely sees loss in cellular networks. "
    echo ""
    echo "--delay-dl= / --delay-ul"
    echo "      Specify the delay in ms on the down-link/up-link. "
    echo ""
    echo "--delay-deviation-dl= / --delay-deviation-ul"
    echo "      Specify the standard deviation of the delay ms on the down-link/up-link. "
    echo ""
    echo "--loss-rate-dl= / --loss-rate-ul"
    echo "      Specify the tandard deviation of the delay ms on the down-link/up-link. "
    echo ""
    echo "--bandwidth-dl= / --bandwidth-ul"
    echo "      Specify the tandard deviation of the delay ms on the down-link/up-link. "
    exit 1
}

netemFolder=$(realpath $(dirname $0))
myUser=$(logname)
timeout=60
maxRetries=3
caddy=$(su $myUser -c "which caddy")

limitArgs=""

debugMode=false

# Set extblog extension in bash in order for case-switch to work (disabled when executing script)
shopt -s extglob
# Handle in-arguments
for argument in "$@"
do
    case $argument in
        # Debug mode does not initialize a virtual display
        -d|--debug)
            debugMode=true
            shift # past argument=value
            ;;
        -g|--gui)
            guiMode=true
            shift # past argument=value
            ;;
        -q|--quic)
            webProtocol="--quic"
            shift
            ;;
        -h2|--http2)
            webProtocol="--http2"
            shift
            ;;
        -h1|--http1)
            webProtocol="--http1"
            shift
            ;;
        --loss-rate-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --delay-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --delay-deviation-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --bandwidth-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --timeout=*)
            timeout="${argument#*=}"
            shift
            ;;
        --max-retries=*)
            maxRetries="${argument#*=}"
            shift
            ;;
        *)
            printHelp $0 "Invalid argument: $argument"
            ;;
    esac
done


if [ -z "$webProtocol" ]; then
    printHelp $0 "No protocol chosen! Please choose at least one of the protocols QUIC, HTTP2 or HTTP."
fi

# Setup link limits
$netemFolder/net-setup/limit-bottleneck.bash $limitArgs
if [ $? != 0 ]; then
    echo "ERROR: Failed to limit network links!"
    exit 3
fi

# ------------------ RUN
pidFile="/tmp/netem.server.pid"
touch $pidFile
# Setup a webserver of some sort
if [ "$webProtocol" = "--http2" ]; then
    ip netns exec server-ns $caddy -conf="$netemFolder/config/netem.Caddyfile" -pidfile="$pidFile" &
elif [ "$webProtocol" = "--quic" ]; then
    ip netns exec server-ns $caddy -quic -conf="$netemFolder/config/netem.Caddyfile" -pidfile="$pidFile" &
elif [ $webProtocol = "--http1" ]; then
    ip netns exec server-ns $caddy -http2=false -conf="$netemFolder/config/netem.Caddyfile" -pidfile="$pidFile" &
else
    printHelp $0 "No protocol chosen! Please choose at least one of the protocols QUIC, HTTP2 or HTTP1."
fi


# Start Selenium
ip netns exec client-ns2 su $myUser -c "$netemFolder/browser-controller/selenium-bootstrap start"
# Run browser
if [ "$debugMode" = true ]; then
    ip netns exec client-ns2 su $myUser -c "$netemFolder/browser-controller/starter.bash $webProtocol $maxRetries $timeout --debug"
elif [ "$guiMode" = true ]; then
    ip netns exec client-ns2 su $myUser -c "$netemFolder/browser-controller/starter.bash $webProtocol $maxRetries $timeout --with-gui"
else
    ip netns exec client-ns2 su $myUser -c "$netemFolder/browser-controller/starter.bash $webProtocol $maxRetries $timeout"
fi

# ----------------- TEARDOWN
# Close web server of some sort
kill -QUIT $( cat /tmp/netem.server.pid )
# Kill selenium
ip netns exec client-ns2 su $myUser -c "$netemFolder/browser-controller/selenium-bootstrap stop"
