#!/bin/bash

function printHelp {
    if [ -n "$2" ]; then
        echo "ERROR: $2"
        echo ""
    else
        echo "netem - Web protocol analyzer which simulates a bottleneck link of your choise."
    fi
    echo
    echo "Usage:"
    echo "  $1 [-q|--quic|-h2|--http2|-h1|--http1]"
    echo ""
    echo "-d|--debug"
    echo "      Run browser on primary display. Default is to initialize virtual display."
    echo ""
    echo "-h2|--http2"
    echo "      Use a web server serving pages using HTTP/2."
    echo ""
    echo "-h1|--http1"
    echo "      Use a web server serving pages using HTTP/1.1."
    echo ""
    echo "-q|--quic"
    echo "      Use a web server serving pages using QUIC."
    echo ""
    echo "--loss-dl= / --loss-ul="
    echo "      Specify the loss rate on the down-link/up-link given in percent. 1-3% on down-link in rare cases but mostly below 1% by an order of magnitude. Up-link rarely sees loss in cellular networks. "
    echo ""
    echo "--delay-dl= / --delay-ul"
    echo "      Specify the delay in ms on the down-link/up-link. "
    echo ""
    echo "--delay-deviation-dl= / --delay-deviation-ul"
    echo "      Specify the standard deviation of the delay ms on the down-link/up-link. "
    echo ""
    echo "--bandwidth-dl= / --bandwidth-ul"
    echo "      Specify the bandiwdth in Mbit/s on down-link/up-link"
    exit 1
}

if [ "$USER" != "root" ]; then
    printHelp $0 "Must be run as root!"
fi

netem_folder=$(realpath $(dirname $0))
myUser=$(logname)
timeout=60
max_retries=3
caddy=/home/fille/go/bin/caddy

limit_args=""
urlloader_args=""
delay=0

# Set extblog extension in bash in order for case-switch to work (disabled when executing script)
shopt -s extglob
# Handle in-arguments
for argument in "$@"
do
    case $argument in
        -q|--quic)
            web_protocol="--quic"
            urlloader_args="$urlloader_args $argument"
            proto_identifier="QUIC"
            shift
            ;;
        -h2|--http2)
            web_protocol="--http2"
            urlloader_args="$urlloader_args $argument"
            proto_identifier="HTTP2"
            shift
            ;;
        -h1|--http1)
            web_protocol="--http1"
            urlloader_args="$urlloader_args $argument"
            proto_identifier="HTTP"
            shift
            ;;
        --loss-ul=*)
            limit_args="$limit_args $argument"
            loss_rate_ul=${argument#*=}
            shift
            ;;
        --loss-dl=*)
            limit_args="$limit_args $argument"
            loss_rate_dl=${argument#*=}
            shift
            ;;
        --delay-ul=*)
            limit_args="$limit_args $argument"
            delay_ul=$(( $delay + ${argument#*=} ))
            shift
            ;;
        --delay-dl=*)
            limit_args="$limit_args $argument"
            delay_dl=$(( $delay + ${argument#*=} ))
            shift
            ;;
        --delay-deviation-ul=*)
            limit_args="$limit_args $argument"
            deviation_ul=${argument#*=}
            shift
            ;;
        --delay-deviation-dl=*)
            limit_args="$limit_args $argument"
            deviation_dl=${argument#*=}
            shift
            ;;
        --bandwidth-ul=*)
            limit_args="$limit_args $argument"
            bandwidth_ul=${argument#*=}
            shift
            ;;
        --bandwidth-dl=*)
            limit_args="$limit_args $argument"
            bandwidth_dl=${argument#*=}
            shift
            ;;
        --timeout=*)
            urlloader_args="$urlloader_args $argument"
            shift
            ;;
        --max-retries=*)
            urlloader_args="$urlloader_args $argument"
            shift
            ;;
        *)
            printHelp $0 "Invalid argument: $argument"
            ;;
    esac
done


if [ -z "$web_protocol" ]; then
    printHelp $0 "No protocol chosen! Please choose at least one of the protocols QUIC, HTTP2 or HTTP."
fi

# Create an unique identifier for this r-un
identifier="$proto_identifier"-bw-"$bandwidth_dl"-"$bandwidth_ul"-loss-"$loss_rate_dl"-"$loss_rate_ul"-dev-"$deviation_dl"-"$deviation_ul"-delay-"$delay_dl"-"$delay_ul"-
identifier="$identifier""$(date '+%Y-%m-%d-%H-%M')"

urlloader_args="$urlloader_args --identifier=$identifier"

# Setup link limits
$netem_folder/net-setup/limit-bottleneck.bash $limit_args
if [ $? != 0 ]; then
    echo "ERROR: Failed to limit network links!"
    exit 3
fi

# ------------------ RUN
pid_file="/tmp/netem.server.pid"
touch $pid_file
# Setup a webserver of some sort
if [ "$web_protocol" = "--http2" ]; then
    ip netns exec server-ns $caddy -conf="$netem_folder/config/netem.Caddyfile" -pidfile="$pid_file" &
elif [ "$web_protocol" = "--quic" ]; then
    ip netns exec server-ns $caddy -quic -conf="$netem_folder/config/netem.Caddyfile" -pidfile="$pid_file" &
elif [ $web_protocol = "--http1" ]; then
    ip netns exec server-ns $caddy -http2=false -conf="$netem_folder/config/netem.Caddyfile" -pidfile="$pid_file" &
else
    printHelp $0 "No protocol chosen! Please choose at least one of the protocols QUIC, HTTP2 or HTTP1."
fi

# Run browser
ip netns exec client-ns2 su $myUser -c "$netem_folder/browser-controller/urlloader.bash $urlloader_args"

# ----------------- TEARDOWN
# Close web server of some sort
kill -QUIT $( cat $pid_file )

