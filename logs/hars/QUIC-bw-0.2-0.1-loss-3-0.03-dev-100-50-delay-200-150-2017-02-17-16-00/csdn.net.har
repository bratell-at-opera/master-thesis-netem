{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2017-02-17T17:12:32.403Z",
        "id": "page_4",
        "title": "https://web.hfelo.se/csdn.net",
        "pageTimings": {
          "onContentLoad": 49206.3939999789,
          "onLoad": 61193.51200014353
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2017-02-17T17:12:32.403Z",
        "time": 715.6289999838918,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/csdn.net",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 301,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "status",
              "value": "301"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "location",
              "value": "/csdn.net/"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "/csdn.net/",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 134
        },
        "cache": {},
        "timings": {
          "blocked": 0,
          "dns": 0,
          "connect": 0.62100007198751,
          "send": 0.162000069394707,
          "wait": 713.1769999396058,
          "receive": 1.6689999029038063,
          "ssl": 525.979000143707
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:33.120Z",
        "time": 1794.1440001595765,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/csdn.net/",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:50 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd952-17944\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 96580,
            "mimeType": "text/html",
            "text": "<!DOCTYPE HTML>\n<html>\n<head>\n<script id=\"allmobilize\" charset=\"utf-8\" src=\"../a.yunshipei.com/csdnnet/allmobilize.min.js\"></script>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>CSDN.NET - 全球最大中文IT社区，为IT专业技术人员提供最全面的信息传播和服务平台</title>\n<link href=\"../c.csdnimg.cn/www/css/csdn_common.css\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"../www.csdn.net/css/content.css\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"../c.csdnimg.cn/public/favicon.ico\" rel=\"SHORTCUT ICON\">\n<script type=\"text/javascript\">\n  var protocol = window.location.protocol;\n  document.write('<script type=\"text/javascript\" src=\"http://www.csdn.net/'&#32;+protocol+&#32;'//c.csdnimg.cn/pubfooter/js/repoAddr2.js?v='&#32;+&#32;Math.random()&#32;+&#32;'\"></'+'script>');\n</script>\n<!--\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-64962204-1', 'auto');\n  ga('send', 'pageview');\n\n</script>\n-->\n<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"//hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac\";\n  var s = document.getElementsByTagName(\"script\")[0];\n  s.parentNode.insertBefore(hm, s);\n})();\n</script> \n</head>\n<body>\n<ins data-revive-zoneid=\"149\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n<div class=\"pagetop_notice txt_gray\"><cite id=\"login\"><span class=\"login\">您还未登录！</span>|<a href=\"https://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn\">登录</a>|<a href=\"http://passport.csdn.net/account/mobileregister?action=mobileRegister\">注册</a>|<a href=\"https://passport.csdn.net/help/faq\">帮助</a><input type=\"text\" name=\"passwordtwo\" class=\"search\" value=\"搜索\" onfocus=\"if(this.value=='搜索') this.value='';this.style.color='#333'; return true;\" onblur=\"if(this.value=='') this.value='搜索'; this.style.color='#999'; return true;\" id=\"srch1\"></cite><span id=\"showinfo\"></span></div><script type=\"text/javascript\">\nvar _gaq = [];   \nfunction getCookie( name ) {\n    var arr = document.cookie.match(new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\"));\n    if( arr != null )\n    {\n        return decodeURIComponent( arr[ 2 ] );\n    }\n    return null;\n}\n\nfunction csdnShowSpaceNotify( data ) {\n    document.getElementById(\"header_notice_num\").innerHTML = parseInt( data.n ) > 0 ? data.n : 0;\n    if( parseInt( data.l ) > 0 )\n    {\n      document.getElementById(\"header_letter_num\").innerHTML = \"（\"+data.l+\"）\";\n    }\n}\nwindow.csdnShowSpaceNotify = csdnShowSpaceNotify;\n\nvar userName = getCookie( \"UserNick\" );\nif ( userName && userName != \"Guest\" )\n{\n    document.getElementById(\"login\").innerHTML = \"\";\n    document.getElementById(\"showinfo\").innerHTML = \"<a href='http://my.csdn.net/'><em>\"+ userName + \"</em></a><a href=\"http://www.csdn.net/\\&quot;http://notify.csdn.net/dashboard\\&quot;\" class=\\\"notice_num\\\" id=\\\"header_notice_num\\\"></a>我的：<a href=\"http://www.csdn.net/\\&quot;http://msg.csdn.net/letters\\&quot;\">收件箱<span id=\\\"header_letter_num\\\"></span></a><a href='http://download.csdn.net/my' class='red'>资源</a> <a href='http://write.blog.csdn.net/' class='red'>博客</a><a href='http://lib.csdn.net/my/structure' class='red'>知识图谱</a><a href='http://my.csdn.net/my/mycsdn'>我的csdn</a> <a href='http://my.csdn.net/my/account/changepwd'>设置</a>|&nbsp;<a href='https://passport.csdn.net/help/faq'>帮助</a>|&nbsp;<a href='https://passport.csdn.net/account/logout'>退出</a><input type='text' name='passwordtwo' class='search' value='搜索' onfocus=\\\"if(this.value=='搜索') this.value='';this.style.color='#333'; return true;\\\" onblur=\\\"if(this.value=='') this.value='搜索'; this.style.color='#999'; return true;\\\" id='srch1' />\";\n}\n\nif ( userName && userName != \"Guest\" )\n{\n    ( function() {\n        var ca = document.createElement( 'script' );\n        ca.type = 'text/javascript';\n        ca.async = true;\n        ca.src = 'http://svc.notify.csdn.net/letter/getnl?jsonpcallback=csdnShowSpaceNotify';\n        var s = document.getElementsByTagName( 'script' )[ 0 ];\n        s.parentNode.insertBefore( ca, s );\n    } )();\n}\n</script>\n<div class=\"ad_top clearfix\">\n  <div class=\"fl ad_728\" id=\"629732\" adsid=\"home01\"> \n    <ins data-revive-zoneid=\"126\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n  </div>\n  <div class=\"fl\" id=\"629765\" adsid=\"home02\"> \n    <ins data-revive-zoneid=\"129\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n  </div>\n</div>\n<div class=\"header clearfix\"> <a href=\"index.html\" target=\"_blank\"  class=\"logo\"\n\t></a>\n  <div id=\"629767\" style=\"float:right;\" adsid=\"home03\">\n  \t<ins data-revive-zoneid=\"127\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n  </div>\n</div>\n<!--header-->\n<div class=\"nav\">\n  <div class=\"nav_menu\">\n    <div class=\"menu\">\n      <ul class=\"clearfix\">\n        <!--\n        <li><a href=\"http://news.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,348);\">业界</a></li>\n        <li><a href=\"http://cloud.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,349);\">云计算</a></li>\n        <li><a href=\"http://mobile.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,350);\">移动</a></li>\n        <li><a href=\"http://sd.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,351);\">研发</a></li>\n        -->        \n        <li><a href=\"http://geek.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,404);\">极客头条</a></li>\n        <li class=\"parting\"></li>  \n        <li><a href=\"http://lib.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,413);\">知识库</a></li>\n        <li><a href=\"http://edu.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,401);\">学院</a></li>     \n        <li><a href=\"http://bbs.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,352);\">论坛</a></li>\n        <li><a href=\"http://blog.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,353);\">博客</a></li>\n        <li><a href=\"http://download.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,354);\">下载</a></li>\n        <li><a href=\"http://ask.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,355);\">问答</a></li>  \n        <li><a href=\"http://mall.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,402);\">商城</a></li>\n        <li><a href=\"http://www.iteye.com\" target=\"_blank\" onclick=\"LogClickCount(this,356);\">ITeye</a></li>\n        <li class=\"parting\"></li>\n        <li><a href=\"https://code.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,369);\">CODE</a></li>\n        <li><a href=\"http://huiyi.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,357);\">活动</a></li>\n        <li><a href=\"http://cto.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,360);\">CTO</a></li>\n        <!--\n        <li><a href=\"http://bss.csdn.net/m/zone/csdn_ems/new_index\" target=\"_blank\" onclick=\"LogClickCount(this,361);\">年费会员</a></li>\n        -->\n        <li><a href=\"http://www.csto.com\" target=\"_blank\" onclick=\"LogClickCount(this,390);\">外包</a></li>\n        <li class=\"parting\"></li>\n        <li><a href=\"http://special.csdncms.csdn.net/programmer-covers\" target=\"_blank\" onclick=\"LogClickCount(this,405);\">程序员</a></li>\n         \n        <li><a href=\"http://www.csdn.net/app\" target=\"_blank\" onclick=\"LogClickCount(this,406);\">APP</a></li>\n        <li class=\"nav_more\">\n          <div class=\"nav_more_list\" style=\"display: none\"> <a class=\"arrow\"></a>\n            <ul class=\"clearfix\">\n              <li>\n                <h4>内容</h4>\n                <a href=\"http://aws.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">AWS</a> \n                <a href=\"http://hadoop.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">Hadoop</a> \n                <a href=\"http://openstack.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">OpenStack</a> \n                <a href=\"http://docker.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">Docker</a> \n                <a href=\"http://geek.csdn.net/forum/12\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">Swift</a> \n                <a href=\"http://geek.csdn.net/forum/48\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">Spark</a> \n                <a href=\"http://geek.csdn.net/forum/80\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">微信</a> \n                <a href=\"http://geek.csdn.net/forum/132\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">移动开发</a> \n                <a href=\"http://geek.csdn.net/forum/55\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">IOT</a> \n                <a href=\"http://database.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">数据库</a> \n                <a href=\"http://server.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">服务器</a> \n                <a href=\"http://security.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">安全</a> \n                <a href=\"http://storage.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">存储</a> \n                <a href=\"http://special.csdn.net/newssubject/index.html\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">专题</a> \n                <a href=\"http://programmer.csdn.net\" target=\"_blank\">程序员官网</a>\n             </li>\n              <li>\n                <h4>社区</h4>\n                <a href=\"http://bbs.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">论坛</a> \n                <a href=\"http://blog.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">博客</a> \n                <a href=\"http://blog.csdn.net/column.html\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">专栏</a> \n                <a href=\"http://ask.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">问答</a> \n                <a href=\"http://download.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">下载</a> \n                <a href=\"http://so.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">搜索</a> \n                <a href=\"http://www.iteye.com\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">ITeye</a> \n                <a href=\"http://geek.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">极客头条</a> \n                <!--<a href=\"http://share.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">Share</a>--> \n                <a href=\"http://download.csdn.net/album/list\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">精品资源</a> \n               </li>\n              <li>\n                <h4>服务</h4>\n\t\t\t\t<a href=\"http://edu.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">学院</a>\n                <a href=\"https://code.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">CODE</a>\n                <a href=\"http://huiyi.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">活动</a> \n                <a href=\"http://www.csto.com\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">外包（CSTO）</a> \n                <a href=\"http://ems.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">企业会员服务</a> \n                <a href=\"http://student.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">高校俱乐部</a>  \n                <a href=\"http://club.csdn.net/cto\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">CTO俱乐部</a> \n                <a href=\"http://www.itheima.com\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">黑马程序员</a>  \n                <a href=\"http://www.itcast.cn\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">传智播客</a> \n               </li>\n              <li style=\"width:110px; magin-right: -100px;\">\n                <h4>移动客户端</h4>\n                <a  href=\"http://www.csdn.net/app/\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">CSDN 移动客户端</a>\n                <a  href=\"http://dingyue.programmer.com.cn\" target=\"_blank\" onclick=\"LogClickCount(this,362);\">程序员订阅</a>\n                </li>\n            </ul>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div class=\"submenu\">\n      <ul class=\"\">\n        <!--\n        <li><a href=\"http://edu.csdn.net\" target=\"_blank\">学院</a></li>\n        <li><a href=\"http://www.itheima.com\" target=\"_blank\">线下培训</a></li>\n        <li><a href=\"http://java.itcast.cn\" target=\"_blank\">Java</a></li>\n        <li><a href=\"http://ios.itcast.cn\" target=\"_blank\">iOS</a></li>\n        <li><a href=\"http://c.itcast.cn\" target=\"_blank\">C/C++</a></li>\n        <li><a href=\"http://game.itcast.cn\" target=\"_blank\">游戏开发</a></li>\n        <li><a href=\"http://php.itcast.cn\" target=\"_blank\">PHP</a></li>\n        -->\n        <li><a href=\"http://geek.csdn.net/news\" target=\"_blank\" onclick=\"LogClickCount(this,348);\">业界</a></li>\n        <li><a href=\"http://geek.csdn.net/cloud\" target=\"_blank\" onclick=\"LogClickCount(this,349);\">云计算</a></li>\n        <li><a href=\"http://geek.csdn.net/bigdata\" target=\"_blank\" onclick=\"LogClickCount(this,407);\">大数据</a></li>\n        <li><a href=\"http://geek.csdn.net/forum/iot\" target=\"_blank\" onclick=\"LogClickCount(this,408);\">IoT</a></li>\n        <li><a href=\"http://geek.csdn.net/forum/AI\" target=\"_blank\" onclick=\"LogClickCount(this,409);\">人工智能</a></li>\n        <li><a href=\"http://geek.csdn.net/mobile\" target=\"_blank\" onclick=\"LogClickCount(this,410);\">移动开发</a></li>\n        <li><a href=\"http://geek.csdn.net/forum/architecture\" target=\"_blank\" onclick=\"LogClickCount(this,411);\">架构</a></li>\n        <li><a href=\"http://geek.csdn.net/forum/database\" target=\"_blank\" onclick=\"LogClickCount(this,412);\">数据库</a></li>\n        <li>|</li>\n         <li><a href=\"http://azure.csdn.net\" target=\"_blank\">Azure</a></li>\n        <li><a href=\"http://huawei.csdn.net/\" target=\"_blank\">华为云计算</a></li>\n        <li><a href=\"http://intel.csdn.net\" target=\"_blank\">英特尔软件</a></li>\n        <!-- <li><a href=\"http://baidu.csdn.net\" target=\"_blank\">百度开放云</a></li> -->\n        <li><a href=\"http://ibmuniversity.csdn.net\" target=\"_blank\">IBM社区</a></li>\n        <li><a href=\"http://primeton.csdn.net\" target=\"_blank\">普元云计算</a></li>\n        <li><a href=\"http://aws.csdn.net\" target=\"_blank\">AWS</a></li>\n        <li><a href=\"http://qualcomm.csdn.net\" target=\"_blank\">Qualcomm</a></li>\n        <li><a href=\"http://qcloud.csdn.net\" target=\"_blank\">腾讯云</a></li>\n        <li><a href=\"http://bss.csdn.net/m/zone/xunlei_cdn/index\" target=\"_blank\">星域CDN</a></li>\n        <!--<li>|</li>\n        <li><a href=\"http://student.csdn.net\" target=\"_blank\">高校</a></li>-->\n      </ul>\n    </div>\n  </div>\n</div>\n<!--nav-->\n<div class=\"content clearfix\">\n  <div class=\"main fl\">\n    <div class=\"news clearfix\">\n      <div class=\"news_left\">\n        <dl>\n                                  <dt><a title=\"漫谈词向量之基于Softmax与Sampling的方法\" href=\"http://geek.csdn.net/news/detail/135736\" target=\"_blank\" onclick=\"LogClickCount(this,364);\"><img src=\"../images.csdn.net/20170130/new&#32;image&#32;-&#32;0hixn.jpg\"></a><a title=\"漫谈词向量之基于Softmax与Sampling的方法\" href=\"http://geek.csdn.net/news/detail/135736\" target=\"_blank\" onclick=\"LogClickCount(this,364);\">漫谈词向量之基于Softmax与Sampling的方法</a></dt>\n            <dd>\n              降低softmax层计算复杂度是设计更好词向量模型的主要挑战，本文介绍了近几年新提出的几种替代该层的方法            </dd>\n                                                                                                </dl>\n        <ul>\n                                                        <li><a title=\"嵌入式视觉的概念及关键因素解析\" href=\"http://geek.csdn.net/news/detail/135640\" target=\"_blank\" onclick=\"LogClickCount(this,364);\">嵌入式视觉的概念及关键因素解析</a></li>\n                                              <li><a title=\"需要密切关注的六大人工智能领域\" href=\"http://geek.csdn.net/news/detail/135567\" target=\"_blank\" onclick=\"LogClickCount(this,364);\">需要密切关注的六大人工智能领域</a></li>\n                                              <li><a title=\"微信红包订单存储架构变迁的最佳实践\" href=\"http://geek.csdn.net/news/detail/135497\" target=\"_blank\" onclick=\"LogClickCount(this,364);\">微信红包订单存储架构变迁的最佳实践</a></li>\n                              </ul>\n      </div>\n      <div class=\"news_list\">\n        <ul>\n                      <li><a title=\"Facebook的灾难应对机制\" href=\"http://geek.csdn.net/news/detail/135748\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">Facebook的灾难应对机制</a></li>\n                      <li><a title=\"最小可行性区块链原理解析\" href=\"http://geek.csdn.net/news/detail/135684\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">最小可行性区块链原理解析</a></li>\n                      <li><a title=\"下一代Web应用模型 —— Progressive Web App \" href=\"http://geek.csdn.net/news/detail/135595\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">下一代Web应用模型 —— Progressive Web App </a></li>\n                      <li><a title=\"使用Webpack打包单页应用的正确姿势\" href=\"http://geek.csdn.net/news/detail/135599\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">使用Webpack打包单页应用的正确姿势</a></li>\n                      <li><a title=\"移动周刊第 176 期：Android 知识梳理\" href=\"http://geek.csdn.net/news/detail/135570\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">移动周刊第 176 期：Android 知识梳理</a></li>\n                      <li><a title=\"微软任命Kevin Scott为其新CTO\" href=\"http://geek.csdn.net/news/detail/135508\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">微软任命Kevin Scott为其新CTO</a></li>\n                      <li><a title=\"Android系统架构与系统源码目录 \" href=\"http://blog.csdn.net/itachi85/article/details/54695046\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">Android系统架构与系统源码目录 </a></li>\n                      <li><a title=\"IoT黑板报0125：中国电信发布NB-IoT企业标准\" href=\"http://geek.csdn.net/news/detail/135501\" target=\"_blank\" onclick=\"LogClickCount(this,330);\">IoT黑板报0125：中国电信发布NB-IoT企业标准</a></li>\n                  </ul>\n        <a href=\"http://geek.csdn.net\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,330);\">更多</a> </div>\n    </div>\n    <div class=\"ad_news clearfix\">\n      <div class=\"fl ad_650\" id=\"643411\" adsid=\"home04\">\n      \t<ins data-revive-zoneid=\"128\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n    </div>\n    <div class=\"wrap clearfix\">\n      <div class=\"left\">\n        <div class=\"box hot_blog\">\n          <h2><a href=\"http://geek.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">极客头条</a></h2>\n          <ul>\n                          <li><a title=\"黑客老王：一个人的黑客史\" href=\"http://geek.csdn.net/news/detail/135759\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                黑客老王：一个人的黑客史                </a></li>\n                          <li><a title=\"Android架构（一）MVP架构在Android中的实践\" href=\"http://geek.csdn.net/news/detail/135757\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                Android架构（一）MVP架构在Android中的实践                </a></li>\n                          <li><a title=\"全栈必备 网络编程基础\" href=\"http://geek.csdn.net/news/detail/135758\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                全栈必备 网络编程基础                </a></li>\n                          <li><a title=\"漫画 —— 计算鸡中的 80 端口之争\" href=\"http://geek.csdn.net/news/detail/135756\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                漫画 —— 计算鸡中的 80 端口之争                </a></li>\n                          <li><a title=\"ECMAScript 2017：最终功能集\" href=\"http://geek.csdn.net/news/detail/135755\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                ECMAScript 2017：最终功能集                </a></li>\n                          <li><a title=\"程序员2017年10大愿望\" href=\"http://geek.csdn.net/news/detail/135754\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                程序员2017年10大愿望                </a></li>\n                          <li><a title=\"程序员不喜欢开放式办公室\" href=\"http://geek.csdn.net/news/detail/135752\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                程序员不喜欢开放式办公室                </a></li>\n                          <li><a title=\"通过压力测试提升服务器并发性能实例 - 剩菜剩饭的博客 - 博客频道 - CSDN.NET\" href=\"http://geek.csdn.net/news/detail/135751\" target=\"_blank\" onclick=\"LogClickCount(this,363);\">\n                通过压力测试提升服务器并发性能实例 - 剩菜剩饭的博客 - 博客频道 - CSDN.NET                </a></li>\n                      </ul>\n        </div>\n        <div class=\"box special\">\n          <h2><a href=\"http://special.csdn.net/newssubject/index.html\" target=\"_blank\" onclick=\"LogClickCount(this,334);\">专题</a></h2>\n          <dl>\n                          <dt><a title=\"华为企业云-开发者专栏 \" href=\"http://a1791.oadz.com/link/C/1791/130463/aDtfJnXCuPqBQD3.wrIAmOcPofI_/p007/0/http://bss.csdn.net/m/topic/huawei_develop/index\" target=\"_blank\" onclick=\"LogClickCount(this,334);\">\n                华为企业云-开发者专栏                 </a></dt>\n              <dd>\n                                <a title=\"华为企业云-开发者专栏 \" href=\"http://a1791.oadz.com/link/C/1791/130463/aDtfJnXCuPqBQD3.wrIAmOcPofI_/p007/0/http://bss.csdn.net/m/topic/huawei_develop/index\" target=\"_blank\" onclick=\"LogClickCount(this,334);\"><img src=\"../images.csdn.net/20170117/230-115-2.jpg\"></a>\n                              </dd>\n                          <dt><a title=\"CSDN 2016博客之星评选公布\" href=\"http://blog.csdn.net/vote/result.html\" target=\"_blank\" onclick=\"LogClickCount(this,334);\">\n                CSDN 2016博客之星评选公布                </a></dt>\n              <dd>\n                                <a title=\"CSDN 2016博客之星评选公布\" href=\"http://blog.csdn.net/vote/result.html\" target=\"_blank\" onclick=\"LogClickCount(this,334);\"><img src=\"../images.csdn.net/20170112/1.jpg\"></a>\n                              </dd>\n                      </dl>\n        </div>\n        <div class=\"box hot_paper\">\n          <h2><a href=\"http://blog.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,333);\">推荐博客</a></h2>\n          <ul>\n                          <li>\n                                <img style=\"-webkit-user-select: none\" src=\"../avatar.csdn.net/7/1/0/1_jiangwei0910410003.jpg\" data-pinit=\"registered\">\n                                <a title=\"2016这一年，回顾我们一起走过的\"编码美丽\"之路！\" href=\"http://blog.csdn.net/jiangwei0910410003/article/details/54603082\" target=\"_blank\" onclick=\"LogClickCount(this,333);\" onclick=\"LogClickCount(this,333);\">\n                2016这一年，回顾我们一起走过的\"编码美丽\"之路！                </a> </li>\n                          <li>\n                                <img style=\"-webkit-user-select: none\" src=\"../avatar.csdn.net/8/9/2/1_zwgdft.jpg\" data-pinit=\"registered\">\n                                <a title=\"Kafka下的生产消费者模式与订阅发布模式\" href=\"http://blog.csdn.net/zwgdft/article/details/54633105\" target=\"_blank\" onclick=\"LogClickCount(this,333);\" onclick=\"LogClickCount(this,333);\">\n                Kafka下的生产消费者模式与订阅发布模式                </a> </li>\n                          <li>\n                                <img style=\"-webkit-user-select: none\" src=\"../avatar.csdn.net/4/C/A/1_q1056843325.jpg\" data-pinit=\"registered\">\n                                <a title=\"前端自动化构建工具Webpack开发模式入门指南\" href=\"http://blog.csdn.net/q1056843325/article/details/54600090\" target=\"_blank\" onclick=\"LogClickCount(this,333);\" onclick=\"LogClickCount(this,333);\">\n                前端自动化构建工具Webpack开发模式入门指南                </a> </li>\n                          <li>\n                                <img style=\"-webkit-user-select: none\" src=\"../avatar.csdn.net/6/8/8/1_mindfloating.jpg\" data-pinit=\"registered\">\n                                <a title=\"人工智能时代的降临\" href=\"http://blog.csdn.net/mindfloating/article/details/54657576\" target=\"_blank\" onclick=\"LogClickCount(this,333);\" onclick=\"LogClickCount(this,333);\">\n                人工智能时代的降临                </a> </li>\n                          <li>\n                                <img style=\"-webkit-user-select: none\" src=\"../avatar.csdn.net/0/0/8/1_javazejian.jpg\" data-pinit=\"registered\">\n                                <a title=\"关于Spring IOC (DI-依赖注入)你需要知道的一切\" href=\"http://blog.csdn.net/javazejian/article/details/54561302\" target=\"_blank\" onclick=\"LogClickCount(this,333);\" onclick=\"LogClickCount(this,333);\">\n                关于Spring IOC (DI-依赖注入)你需要知道的一切                </a> </li>\n                      </ul>\n        </div>\n        <div class=\"box hot_blog\">\n          <h2><a href=\"http://bbs.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">程序人生</a></h2>\n          <ul>\n                          <li><a title=\" 【话题】年底了你们的年会和年终奖呢？\" href=\"http://bbs.csdn.net/topics/392075994\" target=\"_blank\" onclick=\"LogClickCount(this,335);\"> 【话题】年底了你们的年会和年终奖呢？</a></li>\n                          <li><a title=\" 花样玩转2017，CSDN官方C币免费送\" href=\"http://bbs.csdn.net/topics/392075993\" target=\"_blank\" onclick=\"LogClickCount(this,335);\"> 花样玩转2017，CSDN官方C币免费送</a></li>\n                          <li><a title=\"CSDN社区联合阿里云送福利\" href=\"http://bbs.csdn.net/topics/392076000\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">CSDN社区联合阿里云送福利</a></li>\n                          <li><a title=\" 2017年定个小目标，目标是什么呢？\" href=\"http://bbs.csdn.net/topics/392071738\" target=\"_blank\" onclick=\"LogClickCount(this,335);\"> 2017年定个小目标，目标是什么呢？</a></li>\n                          <li><a title=\"为何CTO这样对我说？\" href=\"http://bbs.csdn.net/topics/392071632\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">为何CTO这样对我说？</a></li>\n                          <li><a title=\"聊聊工作中你遇到的最难的问题\" href=\"http://bbs.csdn.net/topics/392067853\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">聊聊工作中你遇到的最难的问题</a></li>\n                          <li><a title=\"程序员那些事之卸磨杀驴 \" href=\"http://bbs.csdn.net/topics/392068204\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">程序员那些事之卸磨杀驴 </a></li>\n                          <li><a title=\"给女程序员们的一封信\" href=\"http://bbs.csdn.net/topics/392067301\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">给女程序员们的一封信</a></li>\n                          <li><a title=\"找工作真的要看到手的工资！\" href=\"http://bbs.csdn.net/topics/392066409\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">找工作真的要看到手的工资！</a></li>\n                          <li><a title=\"韩国出差见闻-仅个人见解\" href=\"http://bbs.csdn.net/topics/392064908\" target=\"_blank\" onclick=\"LogClickCount(this,335);\">韩国出差见闻-仅个人见解</a></li>\n                      </ul>\n        </div>\n        <div class=\"box hot_blog\">\n          <h2><a href=\"http://download.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">最热下载</a></h2>\n          <ul>\n                          <li><a title=\"2017年新年祝福页面模版 v1.0祝福页面源码\" href=\"http://download.csdn.net/detail/w176363189/9729007\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">2017年新年祝福页面模版 v1.0祝福页面源码</a></li>\n                          <li><a title=\"终极算法：机器学习和人工智能如何重塑世界\" href=\"http://download.csdn.net/detail/kinglear/9735569\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">终极算法：机器学习和人工智能如何重塑世界</a></li>\n                          <li><a title=\"终极算法：机器学习和人工智能如何重塑世界\" href=\"http://download.csdn.net/detail/kinglear/9735569\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">终极算法：机器学习和人工智能如何重塑世界</a></li>\n                          <li><a title=\"用java实现爬虫抓取网页中的表格数据功能\" href=\"http://download.csdn.net/detail/qianniyoushouzuo/9716177\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">用java实现爬虫抓取网页中的表格数据功能</a></li>\n                          <li><a title=\"Android动态更新图标\" href=\"http://download.csdn.net/detail/u013718120/9722223\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">Android动态更新图标</a></li>\n                          <li><a title=\"vue 2.0写的一个小demo \" href=\"http://download.csdn.net/detail/kwgm2015/9715507\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">vue 2.0写的一个小demo </a></li>\n                          <li><a title=\"微信小程序全套源代码（后台、小程序php）\" href=\"http://download.csdn.net/detail/wyx100/9734370\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">微信小程序全套源代码（后台、小程序php）</a></li>\n                          <li><a title=\"捕鱼游戏源码下载\" href=\"http://download.csdn.net/detail/u014801801/9714892\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">捕鱼游戏源码下载</a></li>\n                          <li><a title=\"《TensorFlow Machine Learning Cookbook》 源码\" href=\"http://download.csdn.net/detail/u013003382/9726436\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">《TensorFlow Machine Learning Cookbook》 源码</a></li>\n                          <li><a title=\"springMvc学习指南源码  \" href=\"http://download.csdn.net/detail/liuyinghui523/9720007\" target=\"_blank\" onclick=\"LogClickCount(this,365);\">springMvc学习指南源码  </a></li>\n                      </ul>\n        </div>\n        <!--<div class=\"box special top_news\">\n          <h2>要闻回顾</h2>\n          <dl>\n                      </dl>\n        </div>-->\n        <div class=\"ad_230_230\" id=\"643412\" adsid=\"home05\">\n        \t<ins data-revive-zoneid=\"145\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n\t\t\t\t\t<ins data-revive-zoneid=\"146\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n        </div>\n      </div>\n      <div class=\"center\">\n        <div class=\"box flow\">\n          <h2>滚动</h2>\n          <ul>\n                          <li>\n                <h3><a title=\"基于Alluxio系统的Spark DataFrame高效存储管理技术\" href=\"http://blog.csdn.net/alluxio/article/details/54693775\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  基于Alluxio系统的Spark DataFrame高效存储管理技术                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    越来越多的公司和组织开始将Alluxio和Spark一起部署从而简化数据管理，提升数据访问性能。这篇文章中将介绍如何使用Alluxio帮助Spark变得更高效，具体地，并将展示如何使用Alluxio高效存储Spark DataFrame。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"推荐系统中基于深度学习的混合协同过滤模型\" href=\"http://geek.csdn.net/news/detail/135405\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  推荐系统中基于深度学习的混合协同过滤模型                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    近些年，深度学习在语音识别、图像处理、自然语言处理等领域都取得了很大的突破与成就。相对来说，深度学习在推荐系统领域的研究与应用还处于早期阶段。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"电信公司可以利用物联网获得优势\" href=\"http://geek.csdn.net/news/detail/135389\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  电信公司可以利用物联网获得优势                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    如果电信公司只专注于提供通讯连接，那么他们很容易被提供相同的服务而且价格更便宜的公司所取代。物联网行业现在大热，电信公司也通过提供物联网服务来提升自己的竞争力。                </div>\n                              </li>\n                            <li class=\"ad_flow_text\"> \n                <!-- \n\t\t\t\t<dl>\n\t\t\t\t\t\t\t\t\t\t<dt><a title=\"干爹Oracle到底对Java8做了什么?\" href=\"http://g.csdn.net/5272492\" target=\"_blank\">干爹Oracle到底对Java8做了什么?</a></dt>\n\t\t\t\t\t<dd>经过2年半的努力、屡次的延期和9个里程碑版本，甲骨文的Java开发团队终于发布了Java 8正式版本。Ja...</dd>\n\t\t\t\t\t\t\t\t\t\t<dt><a title=\"【参会必杀技】一张门票也能秒杀团购价\" href=\"http://g.csdn.net/5272400\" target=\"_blank\">【参会必杀技】一张门票也能秒杀团购价</a></dt>\n\t\t\t\t\t<dd>一人购票三人同行，单张门票享5折，大会展位、杂志广告、平台推广统统有，打着灯笼都难找！尽在...</dd>\n\t\t\t\t\t\t\t\t\t</dl>\n\t\t\t\t -->\n                <dl>\n                  <div adsid=\"home06a\">\n                  \t<ins data-revive-zoneid=\"137\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n                  </div>\n                  <div adsid=\"home06b\">\n                  \t<ins data-revive-zoneid=\"138\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n                  </div>\n                </dl>\n              </li>\n                                                      <li>\n                <h3><a title=\"Data & Cloud 周刊第2期：区块链开发技术综述\" href=\"http://letter.csdn.net/news/newsletter/show_book/965/27\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  Data & Cloud 周刊第2期：区块链开发技术综述                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    <a title=\"Data & Cloud 周刊第2期：区块链开发技术综述\" href=\"http://letter.csdn.net/news/newsletter/show_book/965/27\" target=\"_blank\" onclick=\"LogClickCount(this,331);\"><img  class=\"image\"src=\"../images.csdn.net/20170124/大图副本02.jpg\"></a>\n                                                    </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"跨领域推荐，实现个性化服务的技术途径\" href=\"http://geek.csdn.net/news/detail/135454\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  跨领域推荐，实现个性化服务的技术途径                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    推荐系统在我们这个时代扮演了越来越重要的角色。如何利用海量数据，来对用户的行为进行预测，向用户推荐其感兴趣的物品与服务成为各大互联网公司非常关注的问题。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"【Cloudaily】蚂蚁金服与RISELab达成合作，Hadoop成新一波数据库攻击目标\" href=\"http://geek.csdn.net/news/detail/135467\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  【Cloudaily】蚂蚁金服与RISELab达成合作，Hadoop成新一波数据库攻击目标                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    Cloudaily网罗新鲜要闻，每日为你呈现大数据和云计算领域热点新闻。本文为1月24日资讯内容。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"IoT黑板报0123：英国再投资开发统一物联网标准\" href=\"http://geek.csdn.net/news/detail/135310\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  IoT黑板报0123：英国再投资开发统一物联网标准                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    英国技术战略委员会日前宣布，向由英国电信、劳斯莱斯、处理器厂商ARM和军用品厂商BAE等40余家位于英国的公司组成的HyperCat联盟注资160万英镑，用于研发HyperCat标准，为物联网(IoT)开发一种通用规范。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"陌陌直播全景监控系统实践\" href=\"http://geek.csdn.net/news/detail/135309\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  陌陌直播全景监控系统实践                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    陌陌直播上线后，海量的主播和观众开始使用直播社交，系统并发一度达到高峰。在如此高并发的情况下，我们建设了一套直播全景监控系统，实时监控陌陌全平台直播服务质量。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"流处理基本介绍\" href=\"http://blog.csdn.net/ransom0512/article/details/54691618\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  流处理基本介绍                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    流处理是一种被设计来处理无穷数据集的数据处理系统引擎。本文就流处理的几个概念，流处理的六种方式以及流处理的发展目标等进行了详细介绍。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"IoT带来的产业新机遇\" href=\"http://geek.csdn.net/news/detail/135240\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  IoT带来的产业新机遇                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    物联网是基于嵌入式技术的物理对象网络，它能够沟通和感知并与内外部环境进行交互。物联网使用高效的无线通信协议、高性能的传感器以及低成本的处理器作支持。越来越多初创公司和成熟企业选择既有效又经济的IoT来升级解...                </div>\n                              </li>\n                                          <li class=\"ad_flow_text\"> \n                <!-- \n\t\t\t\t<dl>\n\t\t\t\t\t\t\t\t\t\t<dt><a title=\"学Android还花钱？月薪还不到8千？你OUT了！\" href=\"http://g.csdn.net/5272274\" target=\"_blank\">学Android还花钱？月薪还不到8千？你OUT了！</a></dt>\n\t\t\t\t\t<dd>3000余名经考试录取的学员，免费学习4个月，平均起薪8123元/月。找不到工作免费，薪水低了也免费！</dd>\n\t\t\t\t\t\t\t\t\t\t<dt><a title=\"微信大会8月1日前购票8折并赠书\" href=\"http://g.csdn.net/5272495\" target=\"_blank\">微信大会8月1日前购票8折并赠书</a></dt>\n\t\t\t\t\t<dd>微信开发者大会演讲话题包括：企业服务号开发和高级应用、企业号开发、如何与业务系统对接、各种...</dd>\n\t\t\t\t\t\t\t\t\t</dl>\n\t\t\t\t -->\n                <dl>\n                  <div adsid=\"home07a\">\n                  \t<ins data-revive-zoneid=\"139\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n                  </div>\n                  <div adsid=\"home07b\">\n                  \t<ins data-revive-zoneid=\"140\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n                  </div>\n                </dl>\n              </li>\n                                        <li>\n                <h3><a title=\"人工智能时代的降临\" href=\"http://geek.csdn.net/news/detail/135301\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  人工智能时代的降临                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    去年以来关于人工智能（AI）的讨论非常火热，最近读到一篇这个主题的文章觉得非常不错，翻译过来分享下。这不是一篇烧脑的关于人工智能技术文，而是一篇开阔的思辨性文章。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"ZStack发布产品化混合云战略 获阿里云领投数千万A轮\" href=\"http://geek.csdn.net/news/detail/135363\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  ZStack发布产品化混合云战略 获阿里云领投数千万A轮                  </a></h3>\n                              </li>\n                                                      <li>\n                <h3><a title=\"IoT 的价值——“更好更快”\" href=\"http://geek.csdn.net/news/detail/135235\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  IoT 的价值——“更好更快”                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    物联网只是科技界的昙花一现吗？要问物联网到底是什么，科技专家、消费者、媒体、分析人士，甚至开发和宣传IoT解决方案、产品和服务的供应商恐怕也是云里雾里的。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"为什么我们急需推进物联网标准化？\" href=\"http://geek.csdn.net/news/detail/135233\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  为什么我们急需推进物联网标准化？                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    <a title=\"为什么我们急需推进物联网标准化？\" href=\"http://geek.csdn.net/news/detail/135233\" target=\"_blank\" onclick=\"LogClickCount(this,331);\"><img  class=\"image\"src=\"../images.csdn.net/20170123/20170122150230042.jpg\"></a>\n                                                    </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"【Cloudaily】大数据行业图谱，InsideSales完成5000万美元融资\" href=\"http://geek.csdn.net/news/detail/135347\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  【Cloudaily】大数据行业图谱，InsideSales完成5000万美元融资                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    Cloudaily网罗新鲜要闻，每日为你呈现大数据和云计算领域热点新闻。本文为1月23日资讯内容。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"IoT黑板报0122：总连不上Wi-Fi？清华研究出“终极解决办法”\" href=\"http://geek.csdn.net/news/detail/135181\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  IoT黑板报0122：总连不上Wi-Fi？清华研究出“终极解决办法”                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    连不上Wi-Fi？你不是一个人。来自清华的研究团队，在尝试了4亿次连接之后，表示已经找到了失败的症结并给出了最终解决办法。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"跟着小程来学微服务——微服务思想 \" href=\"http://blog.csdn.net/u013970991/article/details/54632092\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  跟着小程来学微服务——微服务思想                   </a></h3>\n                                <div class=\"summary clearfix\">\n                                    <a title=\"跟着小程来学微服务——微服务思想 \" href=\"http://blog.csdn.net/u013970991/article/details/54632092\" target=\"_blank\" onclick=\"LogClickCount(this,331);\"><img  class=\"image\"src=\"../images.csdn.net/20170123/未标题-2.jpg\"></a>\n                                                    </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"【年度充电桩】技术干货，一网打尽！\" href=\"http://edu.csdn.net/yearPromotion/detail/3\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  【年度充电桩】技术干货，一网打尽！                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    <a title=\"【年度充电桩】技术干货，一网打尽！\" href=\"http://edu.csdn.net/yearPromotion/detail/3\" target=\"_blank\" onclick=\"LogClickCount(this,331);\"><img  class=\"image\"src=\"../images.csdn.net/20170123/1.png\"></a>\n                                                    </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"【Cloudaily】Apache Kudu 1.2.0 发布，好未来教育云与阿里云达成战略合作\" href=\"http://geek.csdn.net/news/detail/135218\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  【Cloudaily】Apache Kudu 1.2.0 发布，好未来教育云与阿里云达成战略合作                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    Cloudaily网罗新鲜要闻，每日为你呈现大数据和云计算领域热点新闻。本文为1月22日资讯内容。                </div>\n                              </li>\n                                                      <li>\n                <h3><a title=\"Java老司机倾力奉献，87条超强总结\" href=\"http://lib.csdn.net/u013132051/chart/java%E5%AD%A6%E4%B9%A0%E7%BD%91\" target=\"_blank\" onclick=\"LogClickCount(this,331);\">\n                  Java老司机倾力奉献，87条超强总结                  </a></h3>\n                                <div class=\"summary clearfix\">\n                                    本文来自CSDN知识库。由Java老司机为大家详细绘制了Java学习网络的知识图谱，内容简单直观，共包含87条超强总结，帮你快速梳理Java整体知识。                </div>\n                              </li>\n                                                  </ul>\n          <!--<ul class=\"develop\">\n                          <li><span></span><a title=\"Android FastJson与不规范JSON引发的血案\" href=\"http://blog.csdn.net/sbsujjbcy/article/details/50414188\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                Android FastJson与不规范JSON引发的血案                </a></li>\n                          <li><span></span><a title=\"编译器架构的王者LLVM——（11）深入理解GetElementPtr\" href=\"http://blog.csdn.net/xfxyy_sxfancy/article/details/50413808\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                编译器架构的王者LLVM——（11）深入理解GetElementPtr                </a></li>\n                          <li><span></span><a title=\"xUtils更新到3.0后的基本使用规则\" href=\"http://blog.csdn.net/liyuanjinglyj/article/details/50411950\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                xUtils更新到3.0后的基本使用规则                </a></li>\n                          <li><span></span><a title=\"关于MultiDex方案的一点研究与思考\" href=\"http://blog.csdn.net/zhaokaiqiang1992/article/details/50412975\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                关于MultiDex方案的一点研究与思考                </a></li>\n                          <li><span></span><a title=\"Spark修炼之道（高级篇）——Spark源码阅读：第十二节 Spark SQL 处理流程分析\" href=\"http://blog.csdn.net/lovehuangjiaju/article/details/50375431\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                Spark修炼之道（高级篇）——Spark源码阅读：第十二节 Spark SQL 处理流程分析                </a></li>\n                          <li><span></span><a title=\"猫猫学iOS之UITextField全解\" href=\"http://blog.csdn.net/u013357243/article/details/50418795\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                猫猫学iOS之UITextField全解                </a></li>\n                          <li><span></span><a title=\"如何获取彩色图像中的主色彩\" href=\"http://blog.csdn.net/jia20003/article/details/50414595\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                如何获取彩色图像中的主色彩                </a></li>\n                          <li><span></span><a title=\"深度学习与自然语言处理之五：从RNN到LSTM\" href=\"http://blog.csdn.net/malefactor/article/details/50436735\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                深度学习与自然语言处理之五：从RNN到LSTM                </a></li>\n                          <li><span></span><a title=\"android permission权限与安全机制解析（下）\" href=\"http://blog.csdn.net/self_study/article/details/50186435\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                android permission权限与安全机制解析（下）                </a></li>\n                          <li><span></span><a title=\"使用Python和Splinter实现12306火车票查询与抢票\" href=\"http://blog.csdn.net/liyuefeilong/article/details/50428607\" target=\"_blank\" onclick=\"LogClickCount(this,366);\">\n                使用Python和Splinter实现12306火车票查询与抢票                </a></li>\n                      </ul>-->\n          <div align=\"center\"><a href=\"http://geek.csdn.net\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,331);\">查看更多全站动态</a></div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"sidebar fr\">\n  <div class=\"slide-outer\" style=\"position:relative; z-index:998\">\n    <div class=\"box hot\"> \n      <!-- \n    \t            <a href=\"http://g.csdn.net/5272449\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140722/300X200.jpg\" /></a>\n                    <a href=\"http://g.csdn.net/5272580\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140723/沙龙1-3.jpg\" /></a>\n                    <a href=\"http://g.csdn.net/5272396\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140721/300-20002.jpg\" /></a>\n                    <a href=\"http://g.csdn.net/5272399\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140721/hp-1-homepage-jiaodiantu-300-200.jpg\" /></a>\n                    <a href=\"http://g.csdn.net/5272395\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140721/300-20001.jpg\" /></a>\n                    <a href=\"http://g.csdn.net/5272394\" title=\"\" target=\"_blank\"><img src=\"http://images.csdn.net/20140721/300-200.jpg\" /></a>\n                 -->         \n      <div adsid=\"home08a\" class=\"swapbox1\">\n      \t<ins data-revive-zoneid=\"131\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n      <div adsid=\"home08b\" class=\"swapbox2\">\n      \t<ins data-revive-zoneid=\"132\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n      <div adsid=\"home08c\" class=\"swapbox3\">\n      \t<ins data-revive-zoneid=\"133\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n      <div adsid=\"home08d\" class=\"swapbox4\">\n      \t<ins data-revive-zoneid=\"134\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n      <div adsid=\"home08e\" class=\"swapbox5\">\n      \t<ins data-revive-zoneid=\"135\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>\n      <div adsid=\"home08f\" class=\"swapbox6\">\n      \t<ins data-revive-zoneid=\"136\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      </div>      \n    </div>\n    <ul class=\"clearfix js-tagRoot\">\n     </ul>\n     <div style=\"left: 0px;width: 26px;background: transparent url('../img.ads.csdn.net/2016/201608021757063065.png') no-repeat scroll right top;height: 16px;z-index: 9999;position: absolute;bottom: 26px;\"></div> \n    </div>\n    <div class=\"box quick\">\n      <h2><a onclick=\"LogClickCount(this,337);\" class=\"more\" target=\"_blank\" href=\"http://read.csdn.net\">定制你的个性CSDN内容</a>快速入口</h2>\n      <dl class=\"clearfix\">\n        <dd>\n           <a title=\"知识库\" href=\"http://g.csdn.net/5292022\" target=\"_blank\" onclick=\"LogClickCount(this,337);\">\n            知识库            </a>         </dd>\n        <dt>推荐频道:</dt>\n        <dd>\n           <a title=\"C币兑换\" href=\"http://mall.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,338);\">\n            C币兑换            </a>  <a title=\"博客专栏\" href=\"http://g.csdn.net/5278559\" target=\"_blank\" onclick=\"LogClickCount(this,338);\">\n            博客专栏            </a>  <a title=\"精品资源\" href=\"http://download.csdn.net/doc\" target=\"_blank\" onclick=\"LogClickCount(this,338);\">\n            精品资源            </a>  <a title=\"会议套票\" href=\"http://bss.csdn.net/m/topic/season_ticket\" target=\"_blank\" onclick=\"LogClickCount(this,338);\">\n            会议套票            </a>         </dd>\n        <dt>推荐服务:</dt>\n        <dd>\n           <a title=\"华为企业云\" href=\"http://a1791.oadz.com/link/C/1791/130463/aDtfJnXCuPqBQD3.wrIAmOcPofI_/p007/0/http://bss.csdn.net/m/topic/huawei_develop/index\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            华为企业云            </a>  <a title=\"华为开发者专区\" href=\"http://g.csdn.net/5285907\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            华为开发者专区            </a>  <a title=\"异构开发\" href=\"http://hc.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            异构开发            </a>  <a title=\"Qualcomm开发\" href=\"http://g.csdn.net/5258310\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            Qualcomm开发            </a>  <a title=\"IBM技术社区\" href=\"http://ibmuniversity.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            IBM技术社区            </a>  <a title=\"英特尔软件\" href=\"http://intel.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            英特尔软件            </a>  <a title=\"PowerLinux技术社区\" href=\"http://powerlinux.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            PowerLinux技术社区            </a>  <a title=\"IBM软件资源中心\" href=\"http://ibm.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            IBM软件资源中心            </a>  <a title=\"阿里云栖大讲堂\" href=\"http://bss.csdn.net/m/topic/aliyun_yunqi/index\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            阿里云栖大讲堂            </a>  <a title=\"vuforia中文社区\" href=\"http://vuforia.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,339);\">\n            vuforia中文社区            </a>         </dd>\n        <dt>推荐专区:</dt>\n        <dd>\n           <a title=\"JIRA Software\" href=\"http://g.csdn.net/5292025\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            JIRA Software            </a>  <a title=\"Confluence\" href=\"http://atlassian.csdn.net/m/btc/atlassian/prduct_detail?project=445&module=34&product=10?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            Confluence            </a>  <a title=\"IntelliJ IDEA\" href=\"http://mall.csdn.net/product/623?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            IntelliJ IDEA            </a>  <a title=\"All Products Pack\" href=\"http://mall.csdn.net/product/826?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            All Products Pack            </a>  <a title=\"TeamCity\" href=\"http://g.csdn.net/5292026\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            TeamCity            </a>  <a title=\"Xamarin\" href=\"http://xamarin.csdn.net/?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            Xamarin            </a>  <a title=\"Enterprise Architect\" href=\"http://ea.csdn.net/?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            Enterprise Architect            </a>  <a title=\"MSDN\" href=\"http://msdn.csdn.net?ref=首页快速入口\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            MSDN            </a>  <a title=\"ZOHO\" href=\"http://g.csdn.net/5292027\" target=\"_blank\" onclick=\"LogClickCount(this,388);\">\n            ZOHO            </a>         </dd>\n        <dt>软件商城:</dt>\n      </dl>\n      <ul class=\"ad_text_01\">\n      \t<li adsid=\"home09\">\n      \t<ins data-revive-zoneid=\"130\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n      \t</li>\n      </ul>\n    </div>\n\t\n\t<!--<div class=\"box job\">\n      <h2><a href=\"http://job.csdn.net\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,346);\">查看更多职位信息</a><a href=\"http://job.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,346);\">招聘宣言</a></h2>\n      <dl>\n                  <dt><a title=\"CSDN JOB 最懂程序员的社区招聘\" href=\"http://g.csdn.net/5282764\" target=\"_blank\" onclick=\"LogClickCount(this,346);\">CSDN JOB 最懂程序员的社区招聘</a></dt>\n          <dd>\n            JAVA、PHP、Android、IOS、WEB前端开发，各类高薪职位任你挑选，专属技术简历包装，让你的专业技术脱颖...          </dd>\n              </dl>\n    </div>-->\n    \n\t<div class=\"box enterprise\">\n\t\t<h2>\n\t\t\t<a href=\"http://edu.csdn.net\" target=\"_blank\" class=\"more\">CSDN学院</a>\n\t\t\t<a target=\"_blank\" href=\"http://edu.csdn.net\" onclick=\"LogClickCount(this,403);\">精品课程</a>\n\t\t</h2>\n\t\t<dl>\n\t\t\t\t\t<dd class=\"tracking-ad\" data-mod=\"popu_125\">\n\t\t\t\t<div>\n\t\t\t\t\t<a title=\"UML学以致用\" href=\"http://edu.csdn.net/course/detail/1168\" target=\"_blank\" onclick=\"LogClickCount(this,343);\"><img src=\"../img.bss.csdn.net/201507010655315634.jpg\"></a>\t\t\t\t\t<h4><a title=\"UML学以致用\" href=\"http://edu.csdn.net/course/detail/1168\" target=\"_blank\" onclick=\"LogClickCount(this,343);\">UML学以致用</a></h4>\n\t\t\t\t\t课程全程围绕一个真实项目展开，课程分享的是UML的最新版本2.4，一共有13种图，而不是老版的9种图。\t\t\t\t</div>\n\t\t\t</dd>\n\t    \t\t\t<dd class=\"tracking-ad\" data-mod=\"popu_125\">\n\t\t\t\t<div>\n\t\t\t\t\t<a title=\"C#面向对象编程[通俗易懂]\" href=\"http://edu.csdn.net/course/detail/286\" target=\"_blank\" onclick=\"LogClickCount(this,343);\"><img src=\"../img.bss.csdn.net/201501080056201415.jpg\"></a>\t\t\t\t\t<h4><a title=\"C#面向对象编程[通俗易懂]\" href=\"http://edu.csdn.net/course/detail/286\" target=\"_blank\" onclick=\"LogClickCount(this,343);\">C#面向对象编程[通俗易懂]</a></h4>\n\t\t\t\t\t从基础知识到项目开发，由入门到精通。 以形象的描术，把生涩的技术生动形象化，易理解，易掌握。\t\t\t\t</div>\n\t\t\t</dd>\n\t    \t\t\t<dd class=\"tracking-ad\" data-mod=\"popu_125\">\n\t\t\t\t<div>\n\t\t\t\t\t<a title=\"FFmpeg音视频高级开发实战 iOS&Android\" href=\"http://edu.csdn.net/course/detail/2314\" target=\"_blank\" onclick=\"LogClickCount(this,343);\"><img src=\"../img.bss.csdn.net/201605050006573691.png\"></a>\t\t\t\t\t<h4><a title=\"FFmpeg音视频高级开发实战 iOS&Android\" href=\"http://edu.csdn.net/course/detail/2314\" target=\"_blank\" onclick=\"LogClickCount(this,343);\">FFmpeg音视频高级开发实战 iOS&Android</a></h4>\n\t\t\t\t\t通过学习本课程，深入理解TCP/IP UDP服务器，客户端编程等. 完全掌握iOS, Android, 嵌入式Linux平台音视频开发的相关知识并能够深入运用的自己的各大项目中\t\t\t\t</div>\n\t\t\t</dd>\n\t    \t\t</dl>\n\t</div>\n\t\n\t<div class=\"box enterprise lib-list\">\n\t\t<h2>\n\t    <a href=\"http://lib.csdn.net\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,418);\">查看更多知识库</a>\n\t    <a target=\"_blank\" href=\"http://lib.csdn.net\" onclick=\"LogClickCount(this,418);\">CSDN知识库</a>\n\t  </h2>\n\t  <!--<a target=\"_blank\" class=\"lib-list-banner\" href=\"http://lib.csdn.net\" ><img src=\"http://images.csdn.net/20160321/201502260510226665.jpg\" alt=\"知识库\" title=\"知识库\"/></a>-->\n\t\t<dl>\n\t\t\t\t    <dd class=\"tracking-ad\">\n\t      <a title=\"Java SE知识库\" href=\"http://lib.csdn.net/base/javase\" target=\"_blank\" onclick=\"LogClickCount(this,418);\"><img src=\"../img.knowledge.csdn.net/upload/base/1453169124297_297.jpg\"></a>\n\t      <div class=\"lib-list-right\">\n\t        <h4><a title=\"Java SE知识库\" href=\"http://lib.csdn.net/base/javase\" target=\"_blank\" onclick=\"LogClickCount(this,418);\">Java SE知识库</a></h4>\n\t        <div class=\"lib-list-txt\">\n\t          <span class=\"num\">21199</span><span class=\"txt\">关注</span>\n\t          <span class=\"line\">|</span>\n\t          <span class=\"num\">468</span><span class=\"txt\">收录</span>\n\t        </div>\n\t      </div>\n\t    </dd>\n\t  \t\t    <dd class=\"tracking-ad\">\n\t      <a title=\"微信开发知识库\" href=\"http://lib.csdn.net/base/wechat\" target=\"_blank\" onclick=\"LogClickCount(this,418);\"><img src=\"../img.knowledge.csdn.net/upload/base/1452500582376_376.jpg\"></a>\n\t      <div class=\"lib-list-right\">\n\t        <h4><a title=\"微信开发知识库\" href=\"http://lib.csdn.net/base/wechat\" target=\"_blank\" onclick=\"LogClickCount(this,418);\">微信开发知识库</a></h4>\n\t        <div class=\"lib-list-txt\">\n\t          <span class=\"num\">17594</span><span class=\"txt\">关注</span>\n\t          <span class=\"line\">|</span>\n\t          <span class=\"num\">708</span><span class=\"txt\">收录</span>\n\t        </div>\n\t      </div>\n\t    </dd>\n\t  \t\t    <dd class=\"tracking-ad\">\n\t      <a title=\"React Native知识库\" href=\"http://lib.csdn.net/base/reactnative\" target=\"_blank\" onclick=\"LogClickCount(this,418);\"><img src=\"../img.knowledge.csdn.net/upload/base/1473751990490_490.jpg\"></a>\n\t      <div class=\"lib-list-right\">\n\t        <h4><a title=\"React Native知识库\" href=\"http://lib.csdn.net/base/reactnative\" target=\"_blank\" onclick=\"LogClickCount(this,418);\">React Native知识库</a></h4>\n\t        <div class=\"lib-list-txt\">\n\t          <span class=\"num\">5069</span><span class=\"txt\">关注</span>\n\t          <span class=\"line\">|</span>\n\t          <span class=\"num\">1217</span><span class=\"txt\">收录</span>\n\t        </div>\n\t      </div>\n\t    </dd>\n\t  \t\t    <dd class=\"tracking-ad\">\n\t      <a title=\"CSS3知识库\" href=\"http://lib.csdn.net/base/css3\" target=\"_blank\" onclick=\"LogClickCount(this,418);\"><img src=\"../img.knowledge.csdn.net/upload/base/1478154582437_437.jpg\"></a>\n\t      <div class=\"lib-list-right\">\n\t        <h4><a title=\"CSS3知识库\" href=\"http://lib.csdn.net/base/css3\" target=\"_blank\" onclick=\"LogClickCount(this,418);\">CSS3知识库</a></h4>\n\t        <div class=\"lib-list-txt\">\n\t          <span class=\"num\">8851</span><span class=\"txt\">关注</span>\n\t          <span class=\"line\">|</span>\n\t          <span class=\"num\">1733</span><span class=\"txt\">收录</span>\n\t        </div>\n\t      </div>\n\t    </dd>\n\t  \t\t    <dd class=\"tracking-ad\">\n\t      <a title=\"人工智能知识库\" href=\"http://lib.csdn.net/base/ai\" target=\"_blank\" onclick=\"LogClickCount(this,418);\"><img src=\"../img.knowledge.csdn.net/upload/base/1479972981201_201.jpg\"></a>\n\t      <div class=\"lib-list-right\">\n\t        <h4><a title=\"人工智能知识库\" href=\"http://lib.csdn.net/base/ai\" target=\"_blank\" onclick=\"LogClickCount(this,418);\">人工智能知识库</a></h4>\n\t        <div class=\"lib-list-txt\">\n\t          <span class=\"num\">9122</span><span class=\"txt\">关注</span>\n\t          <span class=\"line\">|</span>\n\t          <span class=\"num\">480</span><span class=\"txt\">收录</span>\n\t        </div>\n\t      </div>\n\t    </dd>\n\t  \t  \t</dl>\n  \t</div>\n    <div class=\"box activity\">\n      <h2><a target=\"_blank\" href=\"http://blog.csdn.net/csdnproduct/article/details/8782812\" class=\"more\" onclick=\"LogClickCount(this,345);\">如何发布我的活动</a><a href=\"http://huiyi.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,345);\">活动日历</a></h2>\n      <ul>\n                  <li>\n            <h4><span>\n              2017/02/09              </span><span>\n              在线              </span></h4>\n            <a title=\"Python WEB开发经典案例实战\" href=\"http://edu.csdn.net/huiyiCourse/detail/270\" target=\"_blank\" onclick=\"LogClickCount(this,345);\">\n            Python WEB开发经典案例实战            </a> </li>\n                  <li>\n            <h4><span>\n              2017/02/13              </span><span>\n              在线              </span></h4>\n            <a title=\"基于CDN平台的DDOS攻击防护\" href=\"http://edu.csdn.net/huiyiCourse/detail/271\" target=\"_blank\" onclick=\"LogClickCount(this,345);\">\n            基于CDN平台的DDOS攻击防护            </a> </li>\n                  <li>\n            <h4><span>\n              2017/02/15              </span><span>\n              在线              </span></h4>\n            <a title=\"程序员简历优化指南\" href=\"http://edu.csdn.net/huiyiCourse/detail/274\" target=\"_blank\" onclick=\"LogClickCount(this,345);\">\n            程序员简历优化指南            </a> </li>\n                  <li>\n            <h4><span>\n              2017/02/23              </span><span>\n              在线              </span></h4>\n            <a title=\"跨平台开发进阶体系与业务实践，从 React Native 说起\" href=\"http://edu.csdn.net/huiyiCourse/detail/268\" target=\"_blank\" onclick=\"LogClickCount(this,345);\">\n            跨平台开发进阶体系与业务实践，从 React Native 说起            </a> </li>\n              </ul>\n    </div>\n    \n    <div class=\"box enterprise\">\n      <h2>行业热点</h2>\n      <dl>\n        <dd adsid=\"home10a\">\n\t\t\t\t\t<ins data-revive-zoneid=\"141\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n\t\t\t\t</dd>\n        <dd adsid=\"home10b\">\n\t\t\t\t\t<ins data-revive-zoneid=\"142\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n\t\t\t\t</dd>\n        <dd adsid=\"home10c\">\n\t\t\t\t\t<ins data-revive-zoneid=\"143\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n\t\t\t\t</dd>\n        <dd adsid=\"home10d\">\n\t\t\t\t\t<ins data-revive-zoneid=\"144\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n\t\t\t\t</dd>\n        <!-- cms:arclist regionid=\"7e69cf3b-6f9e-4fe9-8d6e-2e0ca663217e\" infolen=\"210\">\n      \t<dd>\n\t\t\t\t\t\t<h4><a title=\"跨平台开发进阶体系与业务实践，从 React Native 说起\" href=\"http://edu.csdn.net/huiyiCourse/detail/268\" target=\"_blank\" onclick=\"LogClickCount(this,343);\">跨平台开发进阶体系与业务实践，从 React Native 说起</a></h4>\n\t\t\t        </dd>\n        </cms:arclist -->\n      </dl>\n    </div>\n    \n    <div class=\"box share\">\n      <h2><a target=\"_blank\" href=\"http://download.csdn.net/album/list\" onclick=\"LogClickCount(this,342);\">下载专辑</a></h2>\n      <dl>\n                  <dt class=\"clearfix\">\n                        <a title=\"【好资源，看这里】No.4：深度学习\" href=\"http://download.csdn.net/album/detail/3554\" target=\"_blank\" onclick=\"LogClickCount(this,342);\"><img style=\"height:75px;width:75px;\" src=\"../images.csdn.net/20170124/深度学习100x100.jpg\"></a>\n                        <a title=\"【好资源，看这里】No.4：深度学习\" href=\"http://download.csdn.net/album/detail/3554\" target=\"_blank\" onclick=\"LogClickCount(this,342);\">\n            【好资源，看这里】No.4：深度学习            </a></dt>\n                  <dt class=\"clearfix\">\n                        <a title=\"【好资源，看这里】第二期：微信小程序\" href=\"http://download.csdn.net/album/detail/3536\" target=\"_blank\" onclick=\"LogClickCount(this,342);\"><img style=\"height:75px;width:75px;\" src=\"../images.csdn.net/20170109/第二期：微信小程序100x100.jpg\"></a>\n                        <a title=\"【好资源，看这里】第二期：微信小程序\" href=\"http://download.csdn.net/album/detail/3536\" target=\"_blank\" onclick=\"LogClickCount(this,342);\">\n            【好资源，看这里】第二期：微信小程序            </a></dt>\n                  <dt class=\"clearfix\">\n                        <a title=\"AndroidCustomView(自定义View)\" href=\"http://download.csdn.net/album/detail/3519\" target=\"_blank\" onclick=\"LogClickCount(this,342);\"><img style=\"height:75px;width:75px;\" src=\"../images.csdn.net/20170104/android-view.jpg\"></a>\n                        <a title=\"AndroidCustomView(自定义View)\" href=\"http://download.csdn.net/album/detail/3519\" target=\"_blank\" onclick=\"LogClickCount(this,342);\">\n            AndroidCustomView(自定义View)            </a></dt>\n                  <dt class=\"clearfix\">\n                        <a title=\"微信小程序开发\" href=\"http://download.csdn.net/album/detail/3518/1/1\" target=\"_blank\" onclick=\"LogClickCount(this,342);\"><img style=\"height:75px;width:75px;\" src=\"../images.csdn.net/20161229/微信小程序开发100x100.jpg\"></a>\n                        <a title=\"微信小程序开发\" href=\"http://download.csdn.net/album/detail/3518/1/1\" target=\"_blank\" onclick=\"LogClickCount(this,342);\">\n            微信小程序开发            </a></dt>\n                  <dt class=\"clearfix\">\n                        <a title=\"CSDN 2016 大会PPT年终汇总\" href=\"http://download.csdn.net/album/detail/3517\" target=\"_blank\" onclick=\"LogClickCount(this,342);\"><img style=\"height:75px;width:75px;\" src=\"../images.csdn.net/20161229/100x110.jpg\"></a>\n                        <a title=\"CSDN 2016 大会PPT年终汇总\" href=\"http://download.csdn.net/album/detail/3517\" target=\"_blank\" onclick=\"LogClickCount(this,342);\">\n            CSDN 2016 大会PPT年终汇总            </a></dt>\n              </dl>\n    </div>\n    \n    <div class=\"box job\">\n    \t<h2><a target=\"_blank\" href=\"http://open.itcast.cn\" class=\"more\" onclick=\"LogClickCount(this,368);\">查看更多课程</a>传智播客</h2>\n\t\t<dl>\n      \t\t\t\t<dt><a title=\"传智播客成功挂牌新三板，即将开启颠覆式民办高等教育\" href=\"http://g.csdn.net/5297551\" target=\"_blank\" onclick=\"LogClickCount(this,368);\">传智播客成功挂牌新三板，即将开启颠覆式民办高等教育</a></dt>\n\t\t\t<dd>2016年12月13日，随着传智播客（股票代码：839976）新三板挂牌仪式钟声的响起，在教育行业躬耕不辍...</dd>\n        \t\t\t<dt><a title=\"据有关数据统计，目前市场上的前端开发仍然处于大量紧缺状态\" href=\"http://g.csdn.net/5297557\" target=\"_blank\" onclick=\"LogClickCount(this,368);\">据有关数据统计，目前市场上的前端开发仍然处于大量紧缺状态</a></dt>\n\t\t\t<dd>据统计，前端开发人员对于目前的市场需求来说依然供不应求，大多数中小型企业依旧表明需要大量前...</dd>\n        \t\t\t<dt><a title=\"二线城市PHP程序员年薪过100000的秘密\" href=\"http://g.csdn.net/5297556\" target=\"_blank\" onclick=\"LogClickCount(this,368);\">二线城市PHP程序员年薪过100000的秘密</a></dt>\n\t\t\t<dd>很多程序员在北上深拿过万年薪那都不是什么新鲜事，但如果能在二线城市拿过万年薪，那就需要深厚...</dd>\n        \t\t</dl>\n    </div>\n    \n    <div class=\"box book\">\n      <h2><a onclick=\"LogClickCount(this,340);\" class=\"more\" target=\"_blank\" href=\"http://dingyue.programmer.com.cn\">我要订阅</a><a href=\"http://special.csdncms.csdn.net/programmer-covers/\" target=\"_blank\" onclick=\"LogClickCount(this,340);\">程序员</a></h2>\n              <dl>\n          <dt><a title=\"【2017年1月】区块链技术与应用探索\" href=\"http://geek.csdn.net/news/detail/132424\" target=\"_blank\" onclick=\"LogClickCount(this,340);\">【2017年1月】区块链技术与应用探索</a></dt>\n          <dd>\n            本期封面报道从原理、开发、应用等多个角度出发，带你深入浅出探索区块链技术的方方面面。          </dd>\n        </dl>\n             <a title=\"程序员2017年1月\" href=\"http://geek.csdn.net/news/detail/132424\" target=\"_blank\" class=\"book_cover\" onclick=\"LogClickCount(this,340);\"><img src=\"../images.csdn.net/20170104/1月.png\"></a>     </div>\n    \n    <!-- <div class=\"box job\">\n      <h2><a href=\"http://student.csdn.net\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,400);\">查看更多精彩内容</a><a href=\"http://student.csdn.net\" target=\"_blank\" onclick=\"LogClickCount(this,400);\">大学生园地</a></h2>\n      <dl>\n                  <dt><a title=\"【微信活动】IT公司经典推理面试题 - 拿钻石\" href=\"http://student.csdn.net/mcd/topic/833628/1172831\" target=\"_blank\" onclick=\"LogClickCount(this,400);\">【微信活动】IT公司经典推理面试题 - 拿钻石</a></dt>\n          <dd>\n            一楼到十楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从一楼到十楼，每层楼电梯门...          </dd>\n                  <dt><a title=\"高校俱乐部战神杯编程系列赛3月赛\" href=\"http://student.csdn.net/mcs/paper_list\" target=\"_blank\" onclick=\"LogClickCount(this,400);\">高校俱乐部战神杯编程系列赛3月赛</a></dt>\n          <dd>\n            题目1：互质的整数拆分：给定整数n，m，求将n划分成m个整数a1a2…am...题目2：学习技能：有n个人，m种...          </dd>\n                  <dt><a title=\"【奖】自测有奖活动，就业心理测试\" href=\"http://g.csdn.net/5281367\" target=\"_blank\" onclick=\"LogClickCount(this,400);\">【奖】自测有奖活动，就业心理测试</a></dt>\n          <dd>\n            即将毕业的同学们，你们做好走向工作岗位的准备了吗？面对一个全新的环境，接触全新的人群，从事...          </dd>\n              </dl>\n    </div> -->\n    <!-- <div class=\"box job\">\n      <h2><a href=\"http://hero.pongo.cn\" target=\"_blank\" class=\"more\" onclick=\"LogClickCount(this,367);\">查看更多题目信息</a><a href=\"http://hero.pongo.cn\" target=\"_blank\" onclick=\"LogClickCount(this,367);\">编程挑战</a></h2>\n      <dl>\n                  <dt><a title=\"【奖iPhone6】渣打科营“Mini Code Marathon”大赛-连通块最少\" href=\"http://hero.csdn.net/\" target=\"_blank\" onclick=\"LogClickCount(this,367);\">【奖iPhone6】渣打科营“Mini Code Marathon”大赛-连通块最少</a></dt>\n          <dd>\n            在n*m的01矩阵中，如果一块连通的1中任何两个1的最小距离等于他们下标的距离减一，那么这个全1连通...          </dd>\n                  <dt><a title=\"【专访】雅虎刷题狂人曹鹏：10年理论与实践结合的程序员之路\" href=\"http://student.csdn.net/mcd/topic/163587/941331\" target=\"_blank\" onclick=\"LogClickCount(this,367);\">【专访】雅虎刷题狂人曹鹏：10年理论与实践结合的程序员之路</a></dt>\n          <dd>\n            曹鹏，2006年浙江大学计算机科学专业毕业，2013年中国科学院计算机技术研究所博士毕业。博士期间研...          </dd>\n                  <dt><a title=\"仅7人通过的超5星微软比赛题目-------解题思路&优秀代码分享，邀你来“找茬儿”\" href=\"http://student.csdn.net/mcd/topic/235300/937958\" target=\"_blank\" onclick=\"LogClickCount(this,367);\">仅7人通过的超5星微软比赛题目-------解题思路&优秀代码分享，邀你来“找茬儿...</a></dt>\n          <dd>\n            6月23日英雄会平台发布了一道难度为超5星的微软比赛题目，截止活动结束共有300多名编程爱好者参与...          </dd>\n              </dl>\n    </div> -->\n    \n    <!--<div class=\"box\">\n      <h2></h2>\n      <ul class=\"club\">\n                  <li class=\"clearfix\">\n                        <img src=\"http://images.csdn.net/20150701/111_副本.jpg\">\n                        <a title=\"【CTO讲堂】美国互联网公司A/B测试经验分享\" href=\"http://www.csdn.net/article/2015-06-30/2825084-CTO\" class=\"tit\" target=\"_blank\" onclick=\"LogClickCount(this,347);\">【CTO讲堂】美国互联网公司A/B测试经验分享</br>\n                        </a></li>\n                  <li class=\"clearfix\">\n                        <img src=\"http://images.csdn.net/20150105/90x60.jpg\">\n                        <a title=\"高校会员专属礼品免费兑换\" href=\"http://student.csdn.net/mcd/topic/163587/981532\" class=\"tit\" target=\"_blank\" onclick=\"LogClickCount(this,347);\">高校会员专属礼品免费兑换</br>\n                        </a></li>\n              </ul>\n    </div>-->\n    \n    \n    <div class=\"box follow\">\n      <h2><a target=\"_blank\" href=\"http://newsletter.csdn.net/module/news/newsletter/index/1\" onclick=\"LogClickCount(this,341);\">订阅技术邮件</a></h2>\n      <ul>\n                  <li><a title=\"【移　动】第175期：从阿里 Weex 一窥移动技术发展之路\" href=\"http://letter.csdn.net/news/newsletter/show_book/964/1\" target=\"_blank\" onclick=\"LogClickCount(this,341);\">【移　动】第175期：从阿里 Weex 一窥移动技术发展之路</a></li>\n                  <li><a title=\"【人工智能】第7期：SIGIR 2016信息检索精选论文\" href=\"http://letter.csdn.net/news/newsletter/show_book/963/26\" target=\"_blank\" onclick=\"LogClickCount(this,341);\">【人工智能】第7期：SIGIR 2016信息检索精选论文</a></li>\n                  <li><a title=\"【Hadoop】第121期：\t百分点“数据隧道”玩转大数据平台实时数据复制\" href=\"http://letter.csdn.net/news/newsletter/show_book/960/6\" target=\"_blank\" onclick=\"LogClickCount(this,341);\">【Hadoop】第121期：\t百分点“数据隧道”玩转大数据平台...</a></li>\n                  <li><a title=\"【移　动】第174期：Android 事件分发机制详解\" href=\"http://letter.csdn.net/news/newsletter/show_book/959/1\" target=\"_blank\" onclick=\"LogClickCount(this,341);\">【移　动】第174期：Android 事件分发机制详解</a></li>\n                  <li><a title=\"【Hadoop】第120期：\t蚂蚁金服人工智能部技术总监李小龙：人工智能驱动金融生活\" href=\"http://letter.csdn.net/news/newsletter/show_book/947/6\" target=\"_blank\" onclick=\"LogClickCount(this,341);\">【Hadoop】第120期：\t蚂蚁金服人工智能部技术总监李小龙...</a></li>\n              </ul>\n    </div>   \n  </div>\n</div>\n<!--content-->\n\n</div>\n<div class=\"footer_nav\">\n  <h4>核心技术类目</h4>\n  <div class=\"classify\">\n     <a title=\"全部主题\" href=\"http://www.csdn.net/tag\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      全部主题      </a>  <a title=\"Hadoop\" href=\"http://g.csdn.net/5272865\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Hadoop      </a>  <a title=\"AWS\" href=\"http://g.csdn.net/5272866\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      AWS      </a>  <a title=\"移动游戏\" href=\"http://g.csdn.net/5272870\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      移动游戏      </a>  <a title=\"Java\" href=\"http://g.csdn.net/5272871\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Java      </a>  <a title=\"Android\" href=\"http://g.csdn.net/5272872\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Android      </a>  <a title=\"iOS\" href=\"http://g.csdn.net/5272873\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      iOS      </a>  <a title=\"Swift\" href=\"http://g.csdn.net/5272868\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Swift      </a>  <a title=\"智能硬件\" href=\"http://g.csdn.net/5272869\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      智能硬件      </a>  <a title=\"Docker\" href=\"http://g.csdn.net/5272867\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Docker      </a>  <a title=\"OpenStack\" href=\"http://g.csdn.net/5272925\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      OpenStack      </a>  <a title=\"VPN\" href=\"http://www.csdn.net/tag/vpn\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      VPN      </a>  <a title=\"Spark\" href=\"http://g.csdn.net/5272924\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Spark      </a>  <a title=\"ERP\" href=\"http://www.csdn.net/tag/erp\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      ERP      </a>  <a title=\"IE10\" href=\"http://www.csdn.net/tag/ie10\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      IE10      </a>  <a title=\"Eclipse\" href=\"http://www.csdn.net/tag/eclipse\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Eclipse      </a>  <a title=\"CRM\" href=\"http://www.csdn.net/tag/crm\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      CRM      </a>  <a title=\"JavaScript\" href=\"http://www.csdn.net/tag/javascript\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      JavaScript      </a>  <a title=\"数据库\" href=\"http://www.csdn.net/tag/数据库\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      数据库      </a>  <a title=\"Ubuntu\" href=\"http://www.csdn.net/tag/ubuntu\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Ubuntu      </a>  <a title=\"NFC\" href=\"http://www.csdn.net/tag/nfc\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      NFC      </a>  <a title=\"WAP\" href=\"http://www.csdn.net/tag/wap\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      WAP      </a>  <a title=\"jQuery\" href=\"http://www.csdn.net/tag/jquery\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      jQuery      </a>  <a title=\"BI\" href=\"http://www.csdn.net/tag/bi\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      BI      </a>  <a title=\"HTML5\" href=\"http://www.csdn.net/tag/html5\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      HTML5      </a>  <a title=\"Spring\" href=\"http://www.csdn.net/tag/spring\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Spring      </a>  <a title=\"Apache\" href=\"http://www.csdn.net/tag/apache\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Apache      </a>  <a title=\".NET\" href=\"http://www.csdn.net/tag/.net\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      .NET      </a>  <a title=\"API\" href=\"http://www.csdn.net/tag/api\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      API      </a>  <a title=\"HTML\" href=\"http://www.csdn.net/tag/html\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      HTML      </a>  <a title=\"SDK\" href=\"http://www.csdn.net/tag/sdk\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      SDK      </a>  <a title=\"IIS\" href=\"http://www.csdn.net/tag/iis\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      IIS      </a>  <a title=\"Fedora\" href=\"http://www.csdn.net/tag/fedora\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Fedora      </a>  <a title=\"XML\" href=\"http://www.csdn.net/tag/xml\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      XML      </a>  <a title=\"LBS\" href=\"http://www.csdn.net/tag/lbs\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      LBS      </a>  <a title=\"Unity\" href=\"http://www.csdn.net/tag/unity\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Unity      </a>  <a title=\"Splashtop\" href=\"http://www.csdn.net/tag/splashtop\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Splashtop      </a>  <a title=\"UML\" href=\"http://www.csdn.net/tag/uml\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      UML      </a>  <a title=\"components\" href=\"http://www.csdn.net/tag/components\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      components      </a>  <a title=\"Windows Mobile\" href=\"http://www.csdn.net/tag/windowsmobile\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Windows Mobile      </a>  <a title=\"Rails\" href=\"http://www.csdn.net/tag/rails\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Rails      </a>  <a title=\"QEMU\" href=\"http://www.csdn.net/tag/qemu\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      QEMU      </a>  <a title=\"KDE\" href=\"http://www.csdn.net/tag/kde\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      KDE      </a>  <a title=\"Cassandra\" href=\"http://www.csdn.net/tag/cassandra\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Cassandra      </a>  <a title=\"CloudStack\" href=\"http://www.csdn.net/tag/cloudstack\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      CloudStack      </a>  <a title=\"FTC\" href=\"http://www.csdn.net/tag/ftc\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      FTC      </a>  <a title=\"coremail\" href=\"http://www.csdn.net/tag/coremail\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      coremail      </a>  <a title=\"OPhone \" href=\"http://www.csdn.net/tag/ophone \" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      OPhone       </a>  <a title=\"CouchBase\" href=\"http://www.csdn.net/tag/couchbase\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      CouchBase      </a>  <a title=\"云计算\" href=\"http://www.csdn.net/tag/云计算\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      云计算      </a>  <a title=\"iOS6\" href=\"http://www.csdn.net/tag/iOS6\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      iOS6      </a>  <a title=\"Rackspace \" href=\"http://www.csdn.net/tag/rackspace \" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Rackspace       </a>  <a title=\"Web App\" href=\"http://www.csdn.net/tag/webapp\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Web App      </a>  <a title=\"SpringSide\" href=\"http://www.csdn.net/tag/springside\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      SpringSide      </a>  <a title=\"Maemo\" href=\"http://www.csdn.net/tag/maemo\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Maemo      </a>  <a title=\"Compuware\" href=\"http://www.csdn.net/tag/compuware\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Compuware      </a>  <a title=\"大数据\" href=\"http://www.csdn.net/tag/大数据\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      大数据      </a>  <a title=\"aptech\" href=\"http://www.csdn.net/tag/aptech\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      aptech      </a>  <a title=\"Perl\" href=\"http://www.csdn.net/tag/perl\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Perl      </a>  <a title=\"Tornado\" href=\"http://www.csdn.net/tag/tornado\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Tornado      </a>  <a title=\"Ruby\" href=\"http://www.csdn.net/tag/ruby\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Ruby      </a>  <a title=\"Hibernate\" href=\"http://www.csdn.net/hibernate\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Hibernate      </a>  <a title=\"ThinkPHP\" href=\"http://www.csdn.net/tag/thinkphp\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      ThinkPHP      </a>  <a title=\"HBase\" href=\"http://www.csdn.net/tag/hbase\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      HBase      </a>  <a title=\"Pure\" href=\"http://www.csdn.net/tag/pure\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Pure      </a>  <a title=\"Solr\" href=\"http://www.csdn.net/tag/solr\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Solr      </a>  <a title=\"Angular\" href=\"http://www.csdn.net/tag/angular\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Angular      </a>  <a title=\"Cloud Foundry\" href=\"http://www.csdn.net/tag/cloudfoundry\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Cloud Foundry      </a>  <a title=\"Redis\" href=\"http://www.csdn.net/tag/redis\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Redis      </a>  <a title=\"Scala\" href=\"http://www.csdn.net/tag/scala\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Scala      </a>  <a title=\"Django\" href=\"http://www.csdn.net/tag/django\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Django      </a>  <a title=\"Bootstrap\" href=\"http://www.csdn.net/tag/bootstrap\" target=\"_blank\" onclick=\"LogClickCount(this,336);\">\n      Bootstrap      </a>   </div>\n  <h4>感受CSDN丰富的服务</h4>\n  <div class=\"service clearfix\"> <a href=\"http://geek.csdn.net/admin/news_service/rss\" target=\"_blank\" class=\"icon_rss\">RSS</a><a href=\"http://huiyi.csdn.net\" target=\"_blank\" class=\"icon_activity\">活动</a><a href=\"mailto:webmaster@csdn.net\" target=\"_blank\" class=\"icon_email\">邮件</a><a href=\"http://weibo.com/csdn?s=6cm7D0\" target=\"_blank\" class=\"icon_weibo\">关注微博</a><a href=\"http://www.csdn.net/article/2012-11-16/2811946\" target=\"_blank\" class=\"icon_weixin\">订阅微信</a><a href=\"http://www.csdn.net/app/\" target=\"_blank\" class=\"icon_share\">移动客户端</a><a href=\"http://dingyue.programmer.com.cn\" target=\"_blank\" class=\"icon_ipad\">程序员订阅</a><a href=\"http://www.csto.com\" target=\"_blank\" class=\"icon_csto\">发布项目</a> </div>\n</div>\n<div class=\"footer\">\n<div class=\"pub_footer\">\n        <dl>\n   <dd class=\"backblue\"><a href=\"http://www.csdn.net/company/about.html\" target=\"_blank\">公司简介</a>|<a href=\"http://www.csdn.net/company/recruit.html\" target=\"_blank\">招贤纳士</a>|<a href=\"http://www.csdn.net/company/marketing.html\" target=\"_blank\">广告服务</a>|<a href=\"http://www.csdn.net/company/contact.html\" target=\"_blank\">联系方式</a>|<a href=\"http://www.csdn.net/company/statement.html\" target=\"_blank\">版权声明</a>|<a href=\"http://www.csdn.net/company/layer.html\" target=\"_blank\">法律顾问</a>|<a href=\"index.html#\" onclick=\"window.location.href='mai'+'lto:'+'webma'+'ster@c'+'sdn.n'+'et?subject=Report To CSDN';return false\">问题报告</a>|<a href=\"http://www.csdn.net/friendlink.html\" target=\"_blank\">合作伙伴</a>|<a href='http://bbs.csdn.net/forums/Service' target='_blank'>论坛反馈</a>|<a href='http://subject.csdn.net/supervisal' target='_blank'>网游监管</a></dd>\n<dt>\n<a href=\"http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010\" target=\"_blank\"><img src=\"../c.csdnimg.cn/www/images/pic_foot_gongshang.png\" alt=\"\" title=\"\"></a>\n<a href=\"http://www.bnia.cn/\" target=\"_blank\"><img src=\"../c.csdnimg.cn/www/images/pic_foot_BNIA.png\" alt=\"\" title=\"\"></a>\n\n<a href=\"http://net.china.com.cn/index.htm\" target=\"_blank\"><img src=\"../c.csdnimg.cn/www/images/pic_foot_report.png\" alt=\"\" title=\"\"></a>\n<!--<a href=\"http://www.netbj.org.cn/\" target=\"_blank\"><img src=\"http://c.csdnimg.cn/www/images/link_logo04.gif\" alt=\"\" title=\"\" /></a>-->\n<a href=\"http://www.bj.cyberpolice.cn/index.htm\" target=\"_blank\"><img src=\"../c.csdnimg.cn/www/images/pic_foot_report110.png\" alt=\"\" title=\"\"></a> </dt>\n   \n   <dd>\n   <a href=\"http://wpa.qq.com/msgrd?v=3&uin=2431299880&site=qq&menu=yes\" target=\"_blank\" class=\"qq\">网站客服</a> <a href='http://wpa.qq.com/msgrd?v=3&uin=2251809102&site=qq&menu=yes' target='_blank' class='qq'>杂志客服</a>\n   <a href=\"http://e.weibo.com/csdnsupport/profile\" target=\"_blank\" class=\"weibo\">微博客服</a>\n   <a href=\"mailto:webmaster@csdn.net\" class=\"email\" title=\"联系邮箱\">webmaster@csdn.net</a>\n   <span class=\"phone\" title=\"服务热线\">400-600-2320</span>\n   </dd>\n   <dd>北京创新乐知信息技术有限公司 版权所有&nbsp;&nbsp;|&nbsp;&nbsp;江苏知之为计算机有限公司&nbsp;&nbsp;江苏乐知网络技术有限公司 提供商务支持</dd>\n   <dd><a href=\"http://www.miibeian.gov.cn/\" target=\"_blank\">京ICP证09002463号</a>　京公网安备号：110105000969<a href=\"http://subject.csdn.net/license.html\" target=\"_blank\">　京网文[2014]0452-102号</a></dd>\n   <dd><a href=\"http://www.csdn.net/company/icp.html\">电信业务审批[2007]字第380号</a>　<a href=\"http://www.csdn.net/company/pifu.html\">电信与信息服务业务经营许可证070598号</a></dd>\n   <dd><img src=\"../c.csdnimg.cn/www/images/ali.png\" alt=\"\" title=\"\"></dd>\n   <!--<dd> 文明上网违法信息举报电话：13552009689&nbsp;<img src=\"http://c.csdnimg.cn/www/images/csdnindex_pic55.gif\" alt=\"\" title=\"\" /></dd> -->\n   <dd class=\"small\">Copyright © 1999-2017, CSDN.NET, All Rights Reserved</dd>\n\n  <!-- <dd><a href=\"http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010\" target=\"_blank\"><img src=\"http://c.csdnimg.cn/www/images/gongshang_logos.gif\" alt=\"GongshangLogo\" alt=\"' title=\"\" /></a></dd> -->\n   </dl>\n        </div>\n</div> \n<ins data-revive-zoneid=\"150\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n<ins data-revive-zoneid=\"151\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n<ins data-revive-zoneid=\"152\" data-revive-id=\"8c38e720de1c90a6f6ff52f3f89c4d57\"></ins>\n</body>\n<script src=\"../c.csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"../ads.csdn.net/js/tracking.js\" type=\"text/javascript\"></script>\n<script src=\"../www.csdn.net/js/swapImg_openLayer.js\" type=\"text/javascript\"></script>\n<script src=\"../counter.csdn.net/a/js/AreaCounter.js\" type=\"text/javascript\"></script>\n<!-- ask 全局悬浮按钮  -->\n<link href=\"../c.csdnimg.cn/comm_ask/css/ask_float_block.css\" rel=\"stylesheet\" type=\"text/css\" />\n<script type=\"text/javascript\" src=\"../c.csdnimg.cn/comm_ask/js/libs/wmd.js\"></script>\n<script type=\"text/javascript\" src=\"../c.csdnimg.cn/comm_ask/js/libs/showdown.js\"></script>\n<script type=\"text/javascript\" src=\"../c.csdnimg.cn/comm_ask/js/libs/prettify.js\"></script>\n<script type=\"text/javascript\" src=\"../c.csdnimg.cn/comm_ask/js/apps/ask_float_block.js\"></script>\n<script>\ndocument.write('<script type=\"text/javascript\" charset=\"utf-8\" src=\"../www.csdn.net/ui/scripts/Csdn/counter.js\"></'+'script>');\n</script>\n<script language=\"javascript\" type=\"text/javascript\" src=\"../ads.csdn.net/js/async_new.js\"></script>\n<script type=\"text/javascript\">\ndocument.write('<script id=\"noticeScript\" type=\"text/javascript\" charset=\"utf-8\" btnId=\"header_notice_num\" wrapId=\"note1\" count=\"5\" subCount=\"5\"  src=\"../c.csdnimg.cn/rabbit/notev2/js/notify.js%3F'%2520+%2520(new%2520Date()%252F120000%257C0)%2520+%2520'=\"></'+'script>');\ndocument.write('<script src=\"../c.csdnimg.cn/pubfooter/js/tracking.js%3F'+(new%2520Date()%252F120000%257C0)+'=\"></'+'script>');\n\n$( function () {\n\t// swapImg_openLayer.js\n    /* csdn.SwapImage.swap( {\n        swapRoot: $( '.hot' )\n    } ); */\n\n    csdn.openLayer.layer( {\n        layer: $( '.nav_more' ).find( '.nav_more_list' ),\n        openBtn: $( '.nav_more' )\n    } );\n    \n    //搜索\n    $( \"#srch1\" ).keydown( function( event ) {\n        if( event.keyCode == 13 )\n        {\n            var val = $( this ).val();\n            val\n                ? window.open( 'http://so.csdn.net/Default.aspx?q=' + encodeURIComponent( val ) )\n                : alert( '请输入搜索内容' );\n        }\n    } );\n});\n</script>\n<script src=\"../csdnimg.cn/pubfooter/js/repoAddr2.js%3Fv=0.4674630036781866\"></script>\n<script src=\"../csdnimg.cn/rabbit/tracking-ad/main.js%3F75eacd6\"></script>\n<script type=\"text/javascript\" src=\"../cbjs.baidu.com/js/m.js\"></script>\n<script type=\"text/javascript\">\n//网站客服\n$(function(){\n\t$(\".qq:first\").click(function(event){\n\t\tvar qqs = [2431299880, 3456678348, 3455921142];\n\t\tvar qq = (new Date().getDay() == 0 || new Date().getDay() == 6) ? qqs[0] : qqs[Math.floor(Math.random() * qqs.length)];;\n\t\t$(this).attr('href','http://wpa.qq.com/msgrd?v=3&uin='+qq+'&site=qq&menu=yes');\n\t});\n});\n</script>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 21538
        },
        "cache": {},
        "timings": {
          "blocked": 0.37200003862381,
          "dns": -1,
          "connect": -1,
          "send": 0.07900013588368904,
          "wait": 761.5349998231975,
          "receive": 1032.1580001618715,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:33.891Z",
        "time": 32954.32300004177,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/a.yunshipei.com/csdnnet/allmobilize.min.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Wed, 30 Sep 2015 11:13:32 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"560bc3dc-15978\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 88440,
            "mimeType": "application/javascript",
            "text": "/* Front-end hackers, welcome to join us jobs@yunshipei.com. Copyright(c) AllMobilize/YunShiPei 3.111 (2015/6/29 11:06:54) #pro# */\n!function(t,e){t._amVersion={preview:0,debug:0,vas:{analytics:{status:10,aaID:1557},qing:{qingID:\"3629691\",status:20},upyun:{status:10,bucket_name:\"ysp7f2466bd6abb4131\"}},keepz:0,splitmode:0,autodestroy:1,suspend:0,noConvert:0,version:1455811200000,devices:{phone:1},modules:{mobilizer:1,preprocess:1,imageresize:1,analytics:1,errorlog:1},files:{engine:\"allmobilize.min.js\",page:\"page.min.js\",style:\"style.min.css\",script:\"script.min.js\"}};var n=t.AMPlatform=t.AMPlatform||{id:\"allmobilize\",attr:\"data-entry\",page:\"data-page\",entry:0,state:0,m:[],p:{data:{},md:{},tpl:{}},__timing:[[+new Date,\"allmobilize\"]]};if(function(t,e){function r(e){var n=e.match(/ip(hone|od|ad)/i),r=(e.match(/android (\\d)/i)||{})[1],i={width:t.outerWidth,height:t.outerHeight};if(!n){if(r>3)return i;var o=t.devicePixelRatio||1;return i.width=Math.round(i.width/o),i.height=Math.round(i.height/o),i}var a=t.orientation%180;return a?(i.height=t.screen.width,i.width=t.screen.height):(i.width=t.screen.width,i.height=t.screen.height),i}function i(e){var n=t.devicePixelRatio||1;return{width:Math.round(e.width*n),height:Math.round(e.height*n)}}var o=function(){var n=!1,r=function(r){var i=function(){return n?void 0:(n=!0,r())},o=function(){if(!n){try{e.documentElement.doScroll(\"left\")}catch(t){return void setTimeout(o,1)}return i()}};if(\"complete\"===e.readyState)return i();if(e.addEventListener)e.addEventListener(\"DOMContentLoaded\",i,!1),t.addEventListener(\"load\",i,!1);else if(e.attachEvent){e.attachEvent(\"onreadystatechange\",i),t.attachEvent(\"onload\",i);var a=!1;try{a=null==t.frameElement}catch(s){}if(e.documentElement.doScroll&&a)return o()}};return r}(),a=function(e){var n=t.onload;t.onload=\"function\"!=typeof t.onload?e:function(){n&&n(),e()}},s=function(t,e){if(n.config.options.autodestroy||e){var r=n.util;try{delete t.AMPlatform}catch(i){t.AMPlatform=void 0}t.AMPlatform={util:r}}},c=n.config=n.config||{},l=c.options=t._amVersion||{};l.modules=c.options.modules||{},l.modules.capture=1,c.debug=l.debug;var u=n.srcElement=e.getElementById(n.id);if(n.runOnce=++n.entry>1||u.getAttribute(n.attr),!(n.runOnce&&(n.config&&(l.keepz&&n.$&&(t.Zepto=t.$=n.$,delete n.$),o(function(){n.state=1e3,n.event.fire(n.event.onMobilizedDocReady,{doc:e})}),a(function(){n.state=1001,n.event.fire(n.event.onMobilizedWinLoad,{win:t}),s(t)})),n.state>0))){var p=c.ua=(t.navigator.userAgent||t.navigator.vendor||t.opera||\"\").toLowerCase();c.isOldBrowsers=p.match(/msie [678]\\./),c.weixin=p.match(/micromessenger/),c.lang=(t.navigator.userLanguage||t.navigator.language||\"en-US\").split(\"-\")[0],c.lang=\"en\"===c.lang||\"zh\"===c.lang?c.lang:\"en\",c.screen=r(p),c.physicalSize=i(c.screen),c.srcUrl=u?u.src:\"\";var d=c.srcUrl.lastIndexOf(\"/\"),h=c.srcRoot=-1!==d?c.srcUrl.substring(0,d+1):\"\";if(c.srcRoot)try{c.siteId=h.substring(h.lastIndexOf(\"/\",h.length-2)+1,h.length-1)}catch(f){c.siteId=\"\"}c.pageId=u?u.getAttribute(n.page):\"\";var m=t.onerror;t.onerror=function(t,e,n){return c.isOldBrowsers?!0:m?m(t,e,n):!1},o(function(){var r=n.event;r.fire(r.onOriginalDocReady,{doc:e}),c.render||(n.state=10,a(function(){n.state=11,r.fire(r.onOriginalWinLoad,{win:t}),s(t,!0)}))})}}(t,e),function(t,e){\"object\"==typeof exports?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.Spinner=e()}(this,function(){\"use strict\";function t(t,n){var r,i=e.createElement(t||\"div\");for(r in n)i[r]=n[r];return i}function n(t){for(var e=1,n=arguments.length;n>e;e++)t.appendChild(arguments[e]);return t}function r(t,e,n,r){var i=[\"opacity\",e,~~(100*t),n,r].join(\"-\"),o=.01+n/r*100,a=Math.max(1-(1-t)/e*(100-o),t),s=u.substring(0,u.indexOf(\"Animation\")).toLowerCase(),c=s&&\"-\"+s+\"-\"||\"\";return d[i]||(h.insertRule(\"@\"+c+\"keyframes \"+i+\"{0%{opacity:\"+a+\"}\"+o+\"%{opacity:\"+t+\"}\"+(o+.01)+\"%{opacity:1}\"+(o+e)%100+\"%{opacity:\"+t+\"}100%{opacity:\"+a+\"}}\",h.cssRules.length),d[i]=1),i}function i(t,e){var n,r,i=t.style;for(e=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<p.length;r++)if(n=p[r]+e,void 0!==i[n])return n;return void 0!==i[e]?e:void 0}function o(t,e){for(var n in e)t.style[i(t,n)||n]=e[n];return t}function a(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)void 0===t[r]&&(t[r]=n[r])}return t}function s(t,e){return\"string\"==typeof t?t:t[e%t.length]}function c(t){this.opts=a(t||{},c.defaults,f)}function l(){function e(e,n){return t(\"<\"+e+' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">',n)}h.addRule(\".spin-vml\",\"behavior:url(#default#VML)\"),c.prototype.lines=function(t,r){function i(){return o(e(\"group\",{coordsize:u+\" \"+u,coordorigin:-l+\" \"+-l}),{width:u,height:u})}function a(t,a,c){n(d,n(o(i(),{rotation:360/r.lines*t+\"deg\",left:~~a}),n(o(e(\"roundrect\",{arcsize:r.corners}),{width:l,height:r.width,left:r.radius,top:-r.width>>1,filter:c}),e(\"fill\",{color:s(r.color,t),opacity:r.opacity}),e(\"stroke\",{opacity:0}))))}var c,l=r.length+r.width,u=2*l,p=2*-(r.width+r.length)+\"px\",d=o(i(),{position:\"absolute\",top:p,left:p});if(r.shadow)for(c=1;c<=r.lines;c++)a(c,-2,\"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)\");for(c=1;c<=r.lines;c++)a(c);return n(t,d)},c.prototype.opacity=function(t,e,n,r){var i=t.firstChild;r=r.shadow&&r.lines||0,i&&e+r<i.childNodes.length&&(i=i.childNodes[e+r],i=i&&i.firstChild,i=i&&i.firstChild,i&&(i.opacity=n))}}var u,p=[\"webkit\",\"Moz\",\"ms\",\"O\"],d={},h=function(){var r=t(\"style\",{type:\"text/css\"});return n(e.getElementsByTagName(\"head\")[0],r),r.sheet||r.styleSheet}(),f={lines:12,length:7,width:5,radius:10,rotate:0,corners:1,color:\"#000\",direction:1,speed:1,trail:100,opacity:.25,fps:20,zIndex:2e9,className:\"spinner\",top:\"50%\",left:\"50%\",position:\"absolute\"};c.defaults={},a(c.prototype,{spin:function(e){this.stop();{var n=this,r=n.opts,i=n.el=o(t(0,{className:r.className}),{position:r.position,width:0,zIndex:r.zIndex});r.radius+r.length+r.width}if(o(i,{left:r.left,top:r.top}),e&&e.insertBefore(i,e.firstChild||null),i.setAttribute(\"role\",\"progressbar\"),n.lines(i,n.opts),!u){var a,s=0,c=(r.lines-1)*(1-r.direction)/2,l=r.fps,p=l/r.speed,d=(1-r.opacity)/(p*r.trail/100),h=p/r.lines;!function f(){s++;for(var t=0;t<r.lines;t++)a=Math.max(1-(s+(r.lines-t)*h)%p*d,r.opacity),n.opacity(i,t*r.direction+c,a,r);n.timeout=n.el&&setTimeout(f,~~(1e3/l))}()}return n},stop:function(){var t=this.el;return t&&(clearTimeout(this.timeout),t.parentNode&&t.parentNode.removeChild(t),this.el=void 0),this},lines:function(e,i){function a(e,n){return o(t(),{position:\"absolute\",width:i.length+i.width+\"px\",height:i.width+\"px\",background:e,boxShadow:n,transformOrigin:\"left\",transform:\"rotate(\"+~~(360/i.lines*l+i.rotate)+\"deg) translate(\"+i.radius+\"px,0)\",borderRadius:(i.corners*i.width>>1)+\"px\"})}for(var c,l=0,p=(i.lines-1)*(1-i.direction)/2;l<i.lines;l++)c=o(t(),{position:\"absolute\",top:1+~(i.width/2)+\"px\",transform:i.hwaccel?\"translate3d(0,0,0)\":\"\",opacity:i.opacity,animation:u&&r(i.opacity,i.trail,p+l*i.direction,i.lines)+\" \"+1/i.speed+\"s linear infinite\"}),i.shadow&&n(c,o(a(\"#000\",\"0 0 4px #000\"),{top:\"2px\"})),n(e,n(c,a(s(i.color,l),\"0 0 1px rgba(0,0,0,.1)\")));return e},opacity:function(t,e,n){e<t.childNodes.length&&(t.childNodes[e].style.opacity=n)}});var m=o(t(\"group\"),{behavior:\"url(#default#VML)\"});return!i(m,\"transform\")&&m.adj?l():u=i(m,\"animation\"),c}),function(t,e){if(!t.runOnce&&!e.isOldBrowsers){var n={en:\"Loading\",zh:\"页面加载中\"},r=n[e.lang]||n.en;t.loader={selector:\".allmobilize_loader\",html:'<div class=\"allmobilize_loader\" style=\"position:fixed;top:50%;left:50%;width:120px;height:120px;margin-top:-60px;margin-left:-60px;text-align:center;\"><div id=\"allmobilize_spinner\" style=\"position: relative; height: 50px;\"></div><p style=\"margin:10px 0;color:#666;font-size:1em;font-family:\\'Microsoft YaHei\\',\\'微软雅黑\\',Helvetica,Arial,sans-serif\">'+r+' ...</p></div><script class=\"allmobilize_loader\">var spinner = new Spinner({length:8,color: \"#666\"}).spin(document.getElementById(\"allmobilize_spinner\")); </script>'}}}(n,n.config),function(t,e,n,r,i){if(!n.runOnce&&!r.isOldBrowsers){var o='<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" class=\"allmobilize_loader\" />'+i.html+'<plaintext style=\"display:none\">',a=\"allmobilize\",s=\"_\"+a,c=\"_allmobads=1\",l=\"phone\",u=\"tablet\",p=\"desktop\",d=\"http://s.yunshipei.com/at/m.min.js\",h=function(e){e=e.replace(/[\\[]/,\"\\\\[\").replace(/[\\]]/,\"\\\\]\");var n=\"[\\\\?&]\"+e+\"=([^&#]*)\",r=new RegExp(n),i=r.exec(t.location.href);return null==i?\"\":decodeURIComponent(i[1].replace(/\\+/g,\" \"))},f=function(t){var e=t.lastIndexOf(s);return-1!=e?t.substr(0,e-1):t},m=function(n){n&&(e.cookie=n),t.location=f(t.location.href)},g=h(s+\"dev\");if(g)return g!=p&&g!=u&&g!=l&&(g=l),void m(a+\"=\"+g+\"; path=/;\");var v=r.weixin=r.weixin||h(\"sukey\"),y=h(s+\"ads\");if(y)return void m(c+\"; path=/;\");r.showAds=y=y||r.options.ads||-1!=e.cookie.indexOf(c);var b=function(t){return/(yunshipei|allmobilize)\\.(com|net)/.test(t)||/192\\.168/.test(t)||/localhost/.test(t)||/ysp\\.www\\.gov\\.cn/.test(t)},w=function(e){if(e){var n=t.location.hostname,r=new RegExp(e,\"i\");return r.test(n)||b(n)}return!0},x=function(t){return b(t)},E=function(t){var e=(new Date).getTime();return!t||parseInt(t)>=e},_=n.ls=!r.options.suspend&&w(r.options.domains)&&E(r.options.version)&&x(r.srcRoot),C={tablet:function(t){return/ipad|GT-P7500/i.test(t)||/tablet/.test(t)&&r.screen.width<=1024?!0:!1},phone:function(t){return t?/(bb\\d+|meego).+mobile|ucweb|ucbrowser|mqqbrowser|360browser|micromessenger|avantgo|bada\\/|blackberry|android|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/.test(t.substr(0,4))?!0:!1:r.screen.width<=720},desktop:function(){return!0}},M=function(t){for(k in C)if(C.hasOwnProperty(k)&&C[k](t))return k;return\"\"},S=function(t){return-1!=e.cookie.indexOf(a+\"=\"+t)},T=function(){return/(proxy|qing)\\.(yunshipei|allmobilize|ysp)\\.(com|net)/.test(t.location.hostname)},k=r.realDevice=M(r.ua);k=v&&k==p?l:k,\"discuzdefault\"===r.siteId&&k===u&&(k=l),k=t.name==s?l:k,k=t.name==s+u?u:k,k=t.name==s+p?p:k,(r.debug||r.options.preview)&&(k=S(l)?l:S(u)?u:p,T()&&k===p&&(k=l)),k=S(p)?p:k,r.device=k;var O=r.render=r.options.devices[k]&&_&&!r.isOldBrowsers;if(O)e.write(o),n.state=1;else if(r.realDevice!=p){var A=e.createElement(\"script\");A.setAttribute(\"type\",\"text/javascript\"),A.setAttribute(\"defer\",\"\"),A.setAttribute(\"src\",d);var j=e.getElementsByTagName(\"head\"),P=j?j[0]:null;P&&P.appendChild(A)}n.__timing.push([+new Date,\"router\"])}}(t,e,n,n.config,n.loader),n.config&&!n.config.isOldBrowsers){var r=function(){function e(t){return null==t?String(t):W[G.call(t)]||\"object\"}function n(t){return\"function\"==e(t)}function r(t){return null!=t&&t==t.window}function i(t){return null!=t&&t.nodeType==t.DOCUMENT_NODE}function o(t){return\"object\"==e(t)}function a(t){return o(t)&&!r(t)&&Object.getPrototypeOf(t)==Object.prototype}function s(t){return\"number\"==typeof t.length}function c(t){return A.call(t,function(t){return null!=t})}function l(t){return t.length>0?C.fn.concat.apply([],t):t}function u(t){return t.replace(/::/g,\"/\").replace(/([A-Z]+)([A-Z][a-z])/g,\"$1_$2\").replace(/([a-z\\d])([A-Z])/g,\"$1_$2\").replace(/_/g,\"-\").toLowerCase()}function p(t){return t in N?N[t]:N[t]=new RegExp(\"(^|\\\\s)\"+t+\"(\\\\s|$)\")}function d(t,e){return\"number\"!=typeof e||z[u(t)]?e:e+\"px\"}function h(t){var e,n;return P[t]||(e=j.createElement(t),j.body.appendChild(e),n=getComputedStyle(e,\"\").getPropertyValue(\"display\"),e.parentNode.removeChild(e),\"none\"==n&&(n=\"block\"),P[t]=n),P[t]}function f(t){return\"children\"in t?O.call(t.children):C.map(t.childNodes,function(t){return 1==t.nodeType?t:void 0})}function m(t,e,n){for(_ in e)n&&(a(e[_])||K(e[_]))?(a(e[_])&&!a(t[_])&&(t[_]={}),K(e[_])&&!K(t[_])&&(t[_]=[]),m(t[_],e[_],n)):e[_]!==E&&(t[_]=e[_])}function g(t,e){return null==e?C(t):C(t).filter(e)}function v(t,e,r,i){return n(e)?e.call(t,r,i):e}function y(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function b(t,e){var n=t.className,r=n&&n.baseVal!==E;return e===E?r?n.baseVal:n:void(r?n.baseVal=e:t.className=e)}function w(t){var e;try{return t?\"true\"==t||(\"false\"==t?!1:\"null\"==t?null:/^0/.test(t)||isNaN(e=Number(t))?/^[\\[\\{]/.test(t)?C.parseJSON(t):t:e):t}catch(n){return t}}function x(t,e){e(t);for(var n=0,r=t.childNodes.length;r>n;n++)x(t.childNodes[n],e)}var E,_,C,M,S,T,k=[],O=k.slice,A=k.filter,j=t.document,P={},N={},z={\"column-count\":1,columns:1,\"font-weight\":1,\"line-height\":1,opacity:1,\"z-index\":1,zoom:1},D=/^\\s*<(\\w+|!)[^>]*>/,R=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,$=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,I=/^(?:body|html)$/i,L=/([A-Z])/g,B=[\"val\",\"css\",\"html\",\"text\",\"data\",\"width\",\"height\",\"offset\"],H=[\"after\",\"prepend\",\"before\",\"append\"],q=j.createElement(\"table\"),F=j.createElement(\"tr\"),U={tr:j.createElement(\"tbody\"),tbody:q,thead:q,tfoot:q,td:F,th:F,\"*\":j.createElement(\"div\")},V=/complete|loaded|interactive/,Z=/^[\\w-]*$/,W={},G=W.toString,Y={},J=j.createElement(\"div\"),X={tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},K=Array.isArray||function(t){return t instanceof Array};return Y.matches=function(t,e){if(!e||!t||1!==t.nodeType)return!1;var n=t.webkitMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.matchesSelector;if(n)return n.call(t,e);var r,i=t.parentNode,o=!i;return o&&(i=J).appendChild(t),r=~Y.qsa(i,e).indexOf(t),o&&J.removeChild(t),r},S=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():\"\"})},T=function(t){return A.call(t,function(e,n){return t.indexOf(e)==n})},Y.fragment=function(t,e,n){var r,i,o;return R.test(t)&&(r=C(j.createElement(RegExp.$1))),r||(t.replace&&(t=t.replace($,\"<$1></$2>\")),e===E&&(e=D.test(t)&&RegExp.$1),e in U||(e=\"*\"),o=U[e],o.innerHTML=\"\"+t,r=C.each(O.call(o.childNodes),function(){o.removeChild(this)})),a(n)&&(i=C(r),C.each(n,function(t,e){B.indexOf(t)>-1?i[t](e):i.attr(t,e)})),r},Y.Z=function(t,e){return t=t||[],t.__proto__=C.fn,t.selector=e||\"\",t},Y.isZ=function(t){return t instanceof Y.Z},Y.init=function(t,e){var r;if(!t)return Y.Z();if(\"string\"==typeof t)if(t=t.trim(),\"<\"==t[0]&&D.test(t))r=Y.fragment(t,RegExp.$1,e),t=null;else{if(e!==E)return C(e).find(t);r=Y.qsa(j,t)}else{if(n(t))return C(j).ready(t);if(Y.isZ(t))return t;if(K(t))r=c(t);else if(o(t))r=[t],t=null;else if(D.test(t))r=Y.fragment(t.trim(),RegExp.$1,e),t=null;else{if(e!==E)return C(e).find(t);r=Y.qsa(j,t)}}return Y.Z(r,t)},C=function(t,e){return Y.init(t,e)},C.extend=function(t){var e,n=O.call(arguments,1);return\"boolean\"==typeof t&&(e=t,t=n.shift()),n.forEach(function(n){m(t,n,e)}),t},Y.qsa=function(t,e){var n,r=\"#\"==e[0],o=!r&&\".\"==e[0],a=r||o?e.slice(1):e,s=Z.test(a);return i(t)&&s&&r?(n=t.getElementById(a))?[n]:[]:1!==t.nodeType&&9!==t.nodeType?[]:O.call(s&&!r?o?t.getElementsByClassName(a):t.getElementsByTagName(e):t.querySelectorAll(e))},C.contains=j.documentElement.contains?function(t,e){return t!==e&&t.contains(e)}:function(t,e){for(;e&&(e=e.parentNode);)if(e===t)return!0;return!1},C.type=e,C.isFunction=n,C.isWindow=r,C.isArray=K,C.isPlainObject=a,C.isEmptyObject=function(t){var e;for(e in t)return!1;return!0},C.inArray=function(t,e,n){return k.indexOf.call(e,t,n)},C.camelCase=S,C.trim=function(t){return null==t?\"\":String.prototype.trim.call(t)},C.uuid=0,C.support={},C.expr={},C.map=function(t,e){var n,r,i,o=[];if(s(t))for(r=0;r<t.length;r++)n=e(t[r],r),null!=n&&o.push(n);else for(i in t)n=e(t[i],i),null!=n&&o.push(n);return l(o)},C.each=function(t,e){var n,r;if(s(t)){for(n=0;n<t.length;n++)if(e.call(t[n],n,t[n])===!1)return t}else for(r in t)if(e.call(t[r],r,t[r])===!1)return t;return t},C.grep=function(t,e){return A.call(t,e)},t.JSON&&(C.parseJSON=JSON.parse),C.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(t,e){W[\"[object \"+e+\"]\"]=e.toLowerCase()}),C.fn={forEach:k.forEach,reduce:k.reduce,push:k.push,sort:k.sort,indexOf:k.indexOf,concat:k.concat,map:function(t){return C(C.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return C(O.apply(this,arguments))},ready:function(t){return V.test(j.readyState)&&j.body?t(C):j.addEventListener(\"DOMContentLoaded\",function(){t(C)},!1),this},get:function(t){return t===E?O.call(this):this[t>=0?t:t+this.length]},toArray:function(){return this.get()},size:function(){return this.length},remove:function(){return this.each(function(){null!=this.parentNode&&this.parentNode.removeChild(this)})},each:function(t){return k.every.call(this,function(e,n){return t.call(e,n,e)!==!1}),this},filter:function(t){return n(t)?this.not(this.not(t)):C(A.call(this,function(e){return Y.matches(e,t)}))},add:function(t,e){return C(T(this.concat(C(t,e))))},is:function(t){return this.length>0&&Y.matches(this[0],t)},not:function(t){var e=[];if(n(t)&&t.call!==E)this.each(function(n){t.call(this,n)||e.push(this)});else{var r=\"string\"==typeof t?this.filter(t):s(t)&&n(t.item)?O.call(t):C(t);this.forEach(function(t){r.indexOf(t)<0&&e.push(t)})}return C(e)},has:function(t){return this.filter(function(){return o(t)?C.contains(this,t):C(this).find(t).size()})},eq:function(t){return-1===t?this.slice(t):this.slice(t,+t+1)},first:function(){var t=this[0];return t&&!o(t)?t:C(t)},last:function(){var t=this[this.length-1];return t&&!o(t)?t:C(t)},find:function(t){var e,n=this;return e=t?\"object\"==typeof t?C(t).filter(function(){var t=this;return k.some.call(n,function(e){return C.contains(e,t)})}):1==this.length?C(Y.qsa(this[0],t)):this.map(function(){return Y.qsa(this,t)}):[]},closest:function(t,e){var n=this[0],r=!1;for(\"object\"==typeof t&&(r=C(t));n&&!(r?r.indexOf(n)>=0:Y.matches(n,t));)n=n!==e&&!i(n)&&n.parentNode;return C(n)},parents:function(t){for(var e=[],n=this;n.length>0;)n=C.map(n,function(t){return(t=t.parentNode)&&!i(t)&&e.indexOf(t)<0?(e.push(t),t):void 0});return g(e,t)},parent:function(t){return g(T(this.pluck(\"parentNode\")),t)},children:function(t){return g(this.map(function(){return f(this)}),t)},contents:function(){return this.map(function(){return O.call(this.childNodes)})},siblings:function(t){return g(this.map(function(t,e){return A.call(f(e.parentNode),function(t){return t!==e})}),t)},empty:function(){return this.each(function(){this.innerHTML=\"\"})},pluck:function(t){return C.map(this,function(e){return e[t]})},show:function(){return this.each(function(){\"none\"==this.style.display&&(this.style.display=\"\"),\"none\"==getComputedStyle(this,\"\").getPropertyValue(\"display\")&&(this.style.display=h(this.nodeName))})},replaceWith:function(t){return this.before(t).remove()},wrap:function(t){var e=n(t);if(this[0]&&!e)var r=C(t).get(0),i=r.parentNode||this.length>1;return this.each(function(n){C(this).wrapAll(e?t.call(this,n):i?r.cloneNode(!0):r)})},wrapAll:function(t){if(this[0]){C(this[0]).before(t=C(t));for(var e;(e=t.children()).length;)t=e.first();C(t).append(this)}return this},wrapInner:function(t){var e=n(t);return this.each(function(n){var r=C(this),i=r.contents(),o=e?t.call(this,n):t;i.length?i.wrapAll(o):r.append(o)})},unwrap:function(){return this.parent().each(function(){C(this).replaceWith(C(this).children())}),this},clone:function(){return this.map(function(){return this.cloneNode(!0)})},hide:function(){return this.css(\"display\",\"none\")},toggle:function(t){return this.each(function(){var e=C(this);(t===E?\"none\"==e.css(\"display\"):t)?e.show():e.hide()})},prev:function(t){return C(this.pluck(\"previousElementSibling\")).filter(t||\"*\")},next:function(t){return C(this.pluck(\"nextElementSibling\")).filter(t||\"*\")},html:function(t){return 0 in arguments?this.each(function(e){var n=this.innerHTML;C(this).empty().append(v(this,t,e,n))}):0 in this?this[0].innerHTML:null},text:function(t){return 0 in arguments?this.each(function(e){var n=v(this,t,e,this.textContent);this.textContent=null==n?\"\":\"\"+n}):0 in this?this[0].textContent:null},attr:function(t,e){var n;return\"string\"!=typeof t||1 in arguments?this.each(function(n){if(1===this.nodeType)if(o(t))for(_ in t)y(this,_,t[_]);else y(this,t,v(this,e,n,this.getAttribute(t)))}):this.length&&1===this[0].nodeType?!(n=this[0].getAttribute(t))&&t in this[0]?this[0][t]:n:E},removeAttr:function(t){return this.each(function(){1===this.nodeType&&y(this,t)})},prop:function(t,e){return t=X[t]||t,1 in arguments?this.each(function(n){this[t]=v(this,e,n,this[t])}):this[0]&&this[0][t]},data:function(t,e){var n=\"data-\"+t.replace(L,\"-$1\").toLowerCase(),r=1 in arguments?this.attr(n,e):this.attr(n);return null!==r?w(r):E},val:function(t){return 0 in arguments?this.each(function(e){this.value=v(this,t,e,this.value)}):this[0]&&(this[0].multiple?C(this[0]).find(\"option\").filter(function(){return this.selected}).pluck(\"value\"):this[0].value)},offset:function(e){if(e)return this.each(function(t){var n=C(this),r=v(this,e,t,n.offset()),i=n.offsetParent().offset(),o={top:r.top-i.top,left:r.left-i.left};\"static\"==n.css(\"position\")&&(o.position=\"relative\"),n.css(o)});if(!this.length)return null;var n=this[0].getBoundingClientRect();return{left:n.left+t.pageXOffset,top:n.top+t.pageYOffset,width:Math.round(n.width),height:Math.round(n.height)}},css:function(t,n){if(arguments.length<2){var r=this[0],i=getComputedStyle(r,\"\");if(!r)return;if(\"string\"==typeof t)return r.style[S(t)]||i.getPropertyValue(t);if(K(t)){var o={};return C.each(K(t)?t:[t],function(t,e){o[e]=r.style[S(e)]||i.getPropertyValue(e)}),o}}var a=\"\";if(\"string\"==e(t))n||0===n?a=u(t)+\":\"+d(t,n):this.each(function(){this.style.removeProperty(u(t))});else for(_ in t)t[_]||0===t[_]?a+=u(_)+\":\"+d(_,t[_])+\";\":this.each(function(){this.style.removeProperty(u(_))});return this.each(function(){this.style.cssText+=\";\"+a})},index:function(t){return t?this.indexOf(C(t)[0]):this.parent().children().indexOf(this[0])},hasClass:function(t){return t?k.some.call(this,function(t){return this.test(b(t))},p(t)):!1},addClass:function(t){return t?this.each(function(e){M=[];var n=b(this),r=v(this,t,e,n);r.split(/\\s+/g).forEach(function(t){C(this).hasClass(t)||M.push(t)},this),M.length&&b(this,n+(n?\" \":\"\")+M.join(\" \"))}):this},removeClass:function(t){return this.each(function(e){return t===E?b(this,\"\"):(M=b(this),v(this,t,e,M).split(/\\s+/g).forEach(function(t){M=M.replace(p(t),\" \")}),void b(this,M.trim()))})},toggleClass:function(t,e){return t?this.each(function(n){var r=C(this),i=v(this,t,n,b(this));i.split(/\\s+/g).forEach(function(t){(e===E?!r.hasClass(t):e)?r.addClass(t):r.removeClass(t)})}):this},scrollTop:function(t){if(this.length){var e=\"scrollTop\"in this[0];return t===E?e?this[0].scrollTop:this[0].pageYOffset:this.each(e?function(){this.scrollTop=t}:function(){this.scrollTo(this.scrollX,t)})}},scrollLeft:function(t){if(this.length){var e=\"scrollLeft\"in this[0];return t===E?e?this[0].scrollLeft:this[0].pageXOffset:this.each(e?function(){this.scrollLeft=t}:function(){this.scrollTo(t,this.scrollY)})}},position:function(){if(this.length){var t=this[0],e=this.offsetParent(),n=this.offset(),r=I.test(e[0].nodeName)?{top:0,left:0}:e.offset();return n.top-=parseFloat(C(t).css(\"margin-top\"))||0,n.left-=parseFloat(C(t).css(\"margin-left\"))||0,r.top+=parseFloat(C(e[0]).css(\"border-top-width\"))||0,r.left+=parseFloat(C(e[0]).css(\"border-left-width\"))||0,{top:n.top-r.top,left:n.left-r.left}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||j.body;t&&!I.test(t.nodeName)&&\"static\"==C(t).css(\"position\");)t=t.offsetParent;return t})}},C.fn.detach=C.fn.remove,[\"width\",\"height\"].forEach(function(t){var e=t.replace(/./,function(t){return t[0].toUpperCase()});C.fn[t]=function(n){var o,a=this[0];return n===E?r(a)?a[\"inner\"+e]:i(a)?a.documentElement[\"scroll\"+e]:(o=this.offset())&&o[t]:this.each(function(e){a=C(this),a.css(t,v(this,n,e,a[t]()))})}}),H.forEach(function(n,r){var i=r%2;C.fn[n]=function(){var n,o,a=C.map(arguments,function(t){return n=e(t),\"object\"==n||\"array\"==n||null==t?t:Y.fragment(t)}),s=this.length>1;return a.length<1?this:this.each(function(e,n){o=i?n:n.parentNode,n=0==r?n.nextSibling:1==r?n.firstChild:2==r?n:null;var c=C.contains(j.documentElement,o);a.forEach(function(e){if(s)e=e.cloneNode(!0);else if(!o)return C(e).remove();o.insertBefore(e,n),c&&x(e,function(e){null==e.nodeName||\"SCRIPT\"!==e.nodeName.toUpperCase()||e.type&&\"text/javascript\"!==e.type||e.src||t.eval.call(t,e.innerHTML)})})})},C.fn[i?n+\"To\":\"insert\"+(r?\"Before\":\"After\")]=function(t){return C(t)[n](this),this}}),Y.Z.prototype=C.fn,Y.uniq=T,Y.deserializeValue=w,C.zepto=Y,C}();t.Zepto=r,void 0===t.$&&(t.$=r),function(n){function r(t){return t._zid||(t._zid=f++)}function i(t,e,n,i){if(e=o(e),e.ns)var s=a(e.ns);return(y[r(t)]||[]).filter(function(t){return!(!t||e.e&&t.e!=e.e||e.ns&&!s.test(t.ns)||n&&r(t.fn)!==r(n)||i&&t.sel!=i)})}function o(t){var e=(\"\"+t).split(\".\");return{e:e[0],ns:e.slice(1).sort().join(\" \")}}function a(t){return new RegExp(\"(?:^| )\"+t.replace(\" \",\" .* ?\")+\"(?: |$)\")}function s(t,e){return t.del&&!w&&t.e in x||!!e}function c(t){return E[t]||w&&x[t]||t}function l(t,i,a,l,u,d,f){var m=r(t),g=y[m]||(y[m]=[]);i.split(/\\s/).forEach(function(r){if(\"ready\"==r)return n(e).ready(a);var i=o(r);i.fn=a,i.sel=u,i.e in E&&(a=function(t){var e=t.relatedTarget;return!e||e!==this&&!n.contains(this,e)?i.fn.apply(this,arguments):void 0}),i.del=d;var m=d||a;i.proxy=function(e){if(e=p(e),!e.isImmediatePropagationStopped()){e.data=l;var n=m.apply(t,e._args==h?[e]:[e].concat(e._args));return n===!1&&(e.preventDefault(),e.stopPropagation()),n}},i.i=g.length,g.push(i),\"addEventListener\"in t&&t.addEventListener(c(i.e),i.proxy,s(i,f))})}function u(t,e,n,o,a){var l=r(t);(e||\"\").split(/\\s/).forEach(function(e){i(t,e,n,o).forEach(function(e){delete y[l][e.i],\"removeEventListener\"in t&&t.removeEventListener(c(e.e),e.proxy,s(e,a))})})}function p(t,e){return(e||!t.isDefaultPrevented)&&(e||(e=t),n.each(S,function(n,r){var i=e[n];t[n]=function(){return this[r]=_,i&&i.apply(e,arguments)},t[r]=C}),(e.defaultPrevented!==h?e.defaultPrevented:\"returnValue\"in e?e.returnValue===!1:e.getPreventDefault&&e.getPreventDefault())&&(t.isDefaultPrevented=_)),t}function d(t){var e,n={originalEvent:t};for(e in t)M.test(e)||t[e]===h||(n[e]=t[e]);return p(n,t)}var h,f=1,m=Array.prototype.slice,g=n.isFunction,v=function(t){return\"string\"==typeof t},y={},b={},w=\"onfocusin\"in t,x={focus:\"focusin\",blur:\"focusout\"},E={mouseenter:\"mouseover\",mouseleave:\"mouseout\"};b.click=b.mousedown=b.mouseup=b.mousemove=\"MouseEvents\",n.event={add:l,remove:u},n.proxy=function(t,e){var i=2 in arguments&&m.call(arguments,2);if(g(t)){var o=function(){return t.apply(e,i?i.concat(m.call(arguments)):arguments)};return o._zid=r(t),o}if(v(e))return i?(i.unshift(t[e],t),n.proxy.apply(null,i)):n.proxy(t[e],t);throw new TypeError(\"expected function\")},n.fn.bind=function(t,e,n){return this.on(t,e,n)},n.fn.unbind=function(t,e){return this.off(t,e)},n.fn.one=function(t,e,n,r){return this.on(t,e,n,r,1)};var _=function(){return!0},C=function(){return!1},M=/^([A-Z]|returnValue$|layer[XY]$)/,S={preventDefault:\"isDefaultPrevented\",stopImmediatePropagation:\"isImmediatePropagationStopped\",stopPropagation:\"isPropagationStopped\"};n.fn.delegate=function(t,e,n){return this.on(e,t,n)},n.fn.undelegate=function(t,e,n){return this.off(e,t,n)},n.fn.live=function(t,r){return n(e.body).delegate(this.selector,t,r),this},n.fn.die=function(t,r){return n(e.body).undelegate(this.selector,t,r),this},n.fn.on=function(t,e,r,i,o){var a,s,c=this;return t&&!v(t)?(n.each(t,function(t,n){c.on(t,e,r,n,o)}),c):(v(e)||g(i)||i===!1||(i=r,r=e,e=h),(g(r)||r===!1)&&(i=r,r=h),i===!1&&(i=C),c.each(function(c,p){o&&(a=function(t){return u(p,t.type,i),i.apply(this,arguments)}),e&&(s=function(t){var r,o=n(t.target).closest(e,p).get(0);return o&&o!==p?(r=n.extend(d(t),{currentTarget:o,liveFired:p}),(a||i).apply(o,[r].concat(m.call(arguments,1)))):void 0}),l(p,t,i,r,e,s||a)}))},n.fn.off=function(t,e,r){var i=this;return t&&!v(t)?(n.each(t,function(t,n){i.off(t,e,n)}),i):(v(e)||g(r)||r===!1||(r=e,e=h),r===!1&&(r=C),i.each(function(){u(this,t,r,e)}))},n.fn.trigger=function(t,e){return t=v(t)||n.isPlainObject(t)?n.Event(t):p(t),t._args=e,this.each(function(){\"dispatchEvent\"in this?this.dispatchEvent(t):n(this).triggerHandler(t,e)})},n.fn.triggerHandler=function(t,e){var r,o;return this.each(function(a,s){r=d(v(t)?n.Event(t):t),r._args=e,r.target=s,n.each(i(s,t.type||t),function(t,e){return o=e.proxy(r),r.isImmediatePropagationStopped()?!1:void 0})}),o},\"focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error\".split(\" \").forEach(function(t){n.fn[t]=function(e){return e?this.bind(t,e):this.trigger(t)}}),[\"focus\",\"blur\"].forEach(function(t){n.fn[t]=function(e){return e?this.bind(t,e):this.each(function(){try{this[t]()}catch(e){}}),this}}),n.Event=function(t,n){v(t)||(n=t,t=n.type);var r=e.createEvent(b[t]||\"Events\"),i=!0;if(n)for(var o in n)\"bubbles\"==o?i=!!n[o]:r[o]=n[o];return r.initEvent(t,i,!0),p(r)}}(r),function(e){function n(t,n,r){var i=e.Event(n);return e(t).trigger(i,r),!i.isDefaultPrevented()}function r(t,e,r,i){return t.global?n(e||b,r,i):void 0}function i(t){t.global&&0===e.active++&&r(t,null,\"ajaxStart\")}function o(t){t.global&&!--e.active&&r(t,null,\"ajaxStop\")}function a(t,e){var n=e.context;return e.beforeSend.call(n,t,e)===!1||r(e,n,\"ajaxBeforeSend\",[t,e])===!1?!1:void r(e,n,\"ajaxSend\",[t,e])}function s(t,e,n,i){var o=n.context,a=\"success\";n.success.call(o,t,a,e),i&&i.resolveWith(o,[t,a,e]),r(n,o,\"ajaxSuccess\",[e,n,t]),l(a,e,n)}function c(t,e,n,i,o){var a=i.context;i.error.call(a,n,e,t),o&&o.rejectWith(a,[n,e,t]),r(i,a,\"ajaxError\",[n,i,t||e]),l(e,n,i)}function l(t,e,n){var i=n.context;n.complete.call(i,e,t),r(n,i,\"ajaxComplete\",[e,n]),o(n)}function u(){}function p(t){return t&&(t=t.split(\";\",2)[0]),t&&(t==C?\"html\":t==_?\"json\":x.test(t)?\"script\":E.test(t)&&\"xml\")||\"text\"}function d(t,e){return\"\"==e?t:(t+\"&\"+e).replace(/[&?]{1,2}/,\"?\")}function h(t){t.processData&&t.data&&\"string\"!=e.type(t.data)&&(t.data=e.param(t.data,t.traditional)),!t.data||t.type&&\"GET\"!=t.type.toUpperCase()||(t.url=d(t.url,t.data),t.data=void 0)}function f(t,n,r,i){return e.isFunction(n)&&(i=r,r=n,n=void 0),e.isFunction(r)||(i=r,r=void 0),{url:t,data:n,success:r,dataType:i}\n}function m(t,n,r,i){var o,a=e.isArray(n),s=e.isPlainObject(n);e.each(n,function(n,c){o=e.type(c),i&&(n=r?i:i+\"[\"+(s||\"object\"==o||\"array\"==o?n:\"\")+\"]\"),!i&&a?t.add(c.name,c.value):\"array\"==o||!r&&\"object\"==o?m(t,c,r,n):t.add(n,c)})}var g,v,y=0,b=t.document,w=/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,x=/^(?:text|application)\\/javascript/i,E=/^(?:text|application)\\/xml/i,_=\"application/json\",C=\"text/html\",M=/^\\s*$/;e.active=0,e.ajaxJSONP=function(n,r){if(!(\"type\"in n))return e.ajax(n);var i,o,l=n.jsonpCallback,u=(e.isFunction(l)?l():l)||\"jsonp\"+ ++y,p=b.createElement(\"script\"),d=t[u],h=function(t){e(p).triggerHandler(\"error\",t||\"abort\")},f={abort:h};return r&&r.promise(f),e(p).on(\"load error\",function(a,l){clearTimeout(o),e(p).off().remove(),\"error\"!=a.type&&i?s(i[0],f,n,r):c(null,l||\"error\",f,n,r),t[u]=d,i&&e.isFunction(d)&&d(i[0]),d=i=void 0}),a(f,n)===!1?(h(\"abort\"),f):(t[u]=function(){i=arguments},p.src=n.url.replace(/\\?(.+)=\\?/,\"?$1=\"+u),b.head.appendChild(p),n.timeout>0&&(o=setTimeout(function(){h(\"timeout\")},n.timeout)),f)},e.ajaxSettings={type:\"GET\",beforeSend:u,success:u,error:u,complete:u,context:null,global:!0,xhr:function(){return new t.XMLHttpRequest},accepts:{script:\"text/javascript, application/javascript, application/x-javascript\",json:_,xml:\"application/xml, text/xml\",html:C,text:\"text/plain\"},crossDomain:!1,timeout:0,processData:!0,cache:!0},e.ajax=function(n){var r=e.extend({},n||{}),o=e.Deferred&&e.Deferred();for(g in e.ajaxSettings)void 0===r[g]&&(r[g]=e.ajaxSettings[g]);i(r),r.crossDomain||(r.crossDomain=/^([\\w-]+:)?\\/\\/([^\\/]+)/.test(r.url)&&RegExp.$2!=t.location.host),r.url||(r.url=t.location.toString()),h(r);var l=r.dataType,f=/\\?.+=\\?/.test(r.url);if(f&&(l=\"jsonp\"),r.cache!==!1&&(n&&n.cache===!0||\"script\"!=l&&\"jsonp\"!=l)||(r.url=d(r.url,\"_=\"+Date.now())),\"jsonp\"==l)return f||(r.url=d(r.url,r.jsonp?r.jsonp+\"=?\":r.jsonp===!1?\"\":\"callback=?\")),e.ajaxJSONP(r,o);var m,y=r.accepts[l],b={},w=function(t,e){b[t.toLowerCase()]=[t,e]},x=/^([\\w-]+:)\\/\\//.test(r.url)?RegExp.$1:t.location.protocol,E=r.xhr(),_=E.setRequestHeader;if(o&&o.promise(E),r.crossDomain||w(\"X-Requested-With\",\"XMLHttpRequest\"),w(\"Accept\",y||\"*/*\"),(y=r.mimeType||y)&&(y.indexOf(\",\")>-1&&(y=y.split(\",\",2)[0]),E.overrideMimeType&&E.overrideMimeType(y)),(r.contentType||r.contentType!==!1&&r.data&&\"GET\"!=r.type.toUpperCase())&&w(\"Content-Type\",r.contentType||\"application/x-www-form-urlencoded\"),r.headers)for(v in r.headers)w(v,r.headers[v]);if(E.setRequestHeader=w,E.onreadystatechange=function(){if(4==E.readyState){E.onreadystatechange=u,clearTimeout(m);var t,n=!1;if(E.status>=200&&E.status<300||304==E.status||0==E.status&&\"file:\"==x){l=l||p(r.mimeType||E.getResponseHeader(\"content-type\")),t=E.responseText;try{\"script\"==l?(1,eval)(t):\"xml\"==l?t=E.responseXML:\"json\"==l&&(t=M.test(t)?null:e.parseJSON(t))}catch(i){n=i}n?c(n,\"parsererror\",E,r,o):s(t,E,r,o)}else c(E.statusText||null,E.status?\"error\":\"abort\",E,r,o)}},a(E,r)===!1)return E.abort(),c(null,\"abort\",E,r,o),E;if(r.xhrFields)for(v in r.xhrFields)E[v]=r.xhrFields[v];var C=\"async\"in r?r.async:!0;E.open(r.type,r.url,C,r.username,r.password);for(v in b)_.apply(E,b[v]);return r.timeout>0&&(m=setTimeout(function(){E.onreadystatechange=u,E.abort(),c(null,\"timeout\",E,r,o)},r.timeout)),E.send(r.data?r.data:null),E},e.get=function(){return e.ajax(f.apply(null,arguments))},e.post=function(){var t=f.apply(null,arguments);return t.type=\"POST\",e.ajax(t)},e.getJSON=function(){var t=f.apply(null,arguments);return t.dataType=\"json\",e.ajax(t)},e.fn.load=function(t,n,r){if(!this.length)return this;var i,o=this,a=t.split(/\\s/),s=f(t,n,r),c=s.success;return a.length>1&&(s.url=a[0],i=a[1]),s.success=function(t){o.html(i?e(\"<div>\").html(t.replace(w,\"\")).find(i):t),c&&c.apply(o,arguments)},e.ajax(s),this};var S=encodeURIComponent;e.param=function(t,e){var n=[];return n.add=function(t,e){this.push(S(t)+\"=\"+S(e))},m(n,t,e),n.join(\"&\").replace(/%20/g,\"+\")}}(r),function(t){t.fn.serializeArray=function(){var e,n=[];return t([].slice.call(this.get(0).elements)).each(function(){e=t(this);var r=e.attr(\"type\");\"fieldset\"!=this.nodeName.toLowerCase()&&!this.disabled&&\"submit\"!=r&&\"reset\"!=r&&\"button\"!=r&&(\"radio\"!=r&&\"checkbox\"!=r||this.checked)&&n.push({name:e.attr(\"name\"),value:e.val()})}),n},t.fn.serialize=function(){var t=[];return this.serializeArray().forEach(function(e){t.push(encodeURIComponent(e.name)+\"=\"+encodeURIComponent(e.value))}),t.join(\"&\")},t.fn.submit=function(e){if(e)this.bind(\"submit\",e);else if(this.length){var n=t.Event(\"submit\");this.eq(0).trigger(n),n.isDefaultPrevented()||this.get(0).submit()}return this}}(r),function(e){\"__proto__\"in{}||e.extend(e.zepto,{Z:function(t,n){return t=t||[],e.extend(t,e.fn),t.selector=n||\"\",t.__Z=!0,t},isZ:function(t){return\"array\"===e.type(t)&&\"__Z\"in t}});try{getComputedStyle(void 0)}catch(n){var r=getComputedStyle;t.getComputedStyle=function(t){try{return r(t)}catch(e){return null}}}}(r),function(t){function e(t){var e=this.os={},n=this.browser={},r=t.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/),i=t.match(/(Android);?[\\s\\/]+([\\d.]+)?/),o=!!t.match(/\\(Macintosh\\; Intel /),a=t.match(/(iPad).*OS\\s([\\d_]+)/),s=t.match(/(iPod)(.*OS\\s([\\d_]+))?/),c=!a&&t.match(/(iPhone\\sOS)\\s([\\d_]+)/),l=t.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/),u=t.match(/Windows Phone ([\\d.]+)/),p=l&&t.match(/TouchPad/),d=t.match(/Kindle\\/([\\d.]+)/),h=t.match(/Silk\\/([\\d._]+)/),f=t.match(/(BlackBerry).*Version\\/([\\d.]+)/),m=t.match(/(BB10).*Version\\/([\\d.]+)/),g=t.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/),v=t.match(/PlayBook/),y=t.match(/Chrome\\/([\\d.]+)/)||t.match(/CriOS\\/([\\d.]+)/),b=t.match(/Firefox\\/([\\d.]+)/),w=t.match(/MSIE\\s([\\d.]+)/)||t.match(/Trident\\/[\\d](?=[^\\?]+).*rv:([0-9.].)/),x=!y&&t.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/),E=x||t.match(/Version\\/([\\d.]+)([^S](Safari)|[^M]*(Mobile)[^S]*(Safari))/);(n.webkit=!!r)&&(n.version=r[1]),i&&(e.android=!0,e.version=i[2]),c&&!s&&(e.ios=e.iphone=!0,e.version=c[2].replace(/_/g,\".\")),a&&(e.ios=e.ipad=!0,e.version=a[2].replace(/_/g,\".\")),s&&(e.ios=e.ipod=!0,e.version=s[3]?s[3].replace(/_/g,\".\"):null),u&&(e.wp=!0,e.version=u[1]),l&&(e.webos=!0,e.version=l[2]),p&&(e.touchpad=!0),f&&(e.blackberry=!0,e.version=f[2]),m&&(e.bb10=!0,e.version=m[2]),g&&(e.rimtabletos=!0,e.version=g[2]),v&&(n.playbook=!0),d&&(e.kindle=!0,e.version=d[1]),h&&(n.silk=!0,n.version=h[1]),!h&&e.android&&t.match(/Kindle Fire/)&&(n.silk=!0),y&&(n.chrome=!0,n.version=y[1]),b&&(n.firefox=!0,n.version=b[1]),w&&(n.ie=!0,n.version=w[1]),E&&(o||e.ios)&&(n.safari=!0,o&&(n.version=E[1])),x&&(n.webview=!0),e.tablet=!!(a||v||i&&!t.match(/Mobile/)||b&&t.match(/Tablet/)||w&&!t.match(/Phone/)&&t.match(/Touch/)),e.phone=!(e.tablet||e.ipod||!(i||c||l||f||m||y&&t.match(/Android/)||y&&t.match(/CriOS\\/([\\d.]+)/)||b&&t.match(/Mobile/)||w&&t.match(/Touch/)))}e.call(t,navigator.userAgent),t.__detect=e}(r),function(){var n=[],r=t.Zepto;if(r&&!n.__proto__){var i=function(t){return n.push.apply(this,t),this};r.zepto.Z=function(t,e){t=t||[];var n=new i(t);return n.selector=e||\"\",n},r.zepto.Z.prototype=i.prototype=r.fn,r.fn.concat=function(){var t=[];return t.push.apply(t,this),r.each(arguments,function(e,n){\"object\"==typeof n&&\"number\"==typeof n.length?t.push.apply(t,n):t.push(n)}),t},r.fn.empty=function(){return this.each(function(t,e){for(;e.firstChild;)e.removeChild(e.firstChild)})};var o=/^\\s*<(\\w+)[^>]*>/,a=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,s={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],area:[1,\"<map>\",\"</map>\"],\"*\":[0,\"\",\"\"]};s.optgroup=s.option,s.tbody=s.tfoot=s.colgroup=s.caption=s.thead,s.th=s.td,r.zepto.fragment=function(t,r){void 0===r&&(r=o.test(t)&&RegExp.$1),t=t.toString().replace(a,\"<$1></$2>\");var i=s[r]||s[\"*\"],c=i[0],l=e.createElement(\"div\");for(l.innerHTML=i[1]+t+i[2];c--;)l=l.lastChild;return n.slice.call(l.childNodes)}}}(),function(t,e,n){e.runOnce||n.isOldBrowsers||(t.$&&t.$.noConflict?e.$=t.$.noConflict(!0):(e.$=t.Zepto,e.$.support=e.$.support||{},t.$&&t.Zepto===t.$&&delete t.$,t.Zepto&&delete t.Zepto))}(t,n,n.config);var i=function(){var t=function(){\"use strict\";function t(t){this.string=t}var e;return t.prototype.toString=function(){return\"\"+this.string},e=t}(),e=function(t){\"use strict\";function e(t){return s[t]||\"&amp;\"}function n(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}function r(t){return t instanceof a?t.toString():t||0===t?(t=\"\"+t,l.test(t)?t.replace(c,e):t):\"\"}function i(t){return t||0===t?d(t)&&0===t.length?!0:!1:!0}var o={},a=t,s={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},c=/[&<>\"'`]/g,l=/[&<>\"'`]/;o.extend=n;var u=Object.prototype.toString;o.toString=u;var p=function(t){return\"function\"==typeof t};p(/x/)&&(p=function(t){return\"function\"==typeof t&&\"[object Function]\"===u.call(t)});var p;o.isFunction=p;var d=Array.isArray||function(t){return t&&\"object\"==typeof t?\"[object Array]\"===u.call(t):!1};return o.isArray=d,o.escapeExpression=r,o.isEmpty=i,o}(t),n=function(){\"use strict\";function t(){for(var t=Error.prototype.constructor.apply(this,arguments),e=0;e<n.length;e++)this[n[e]]=t[n[e]]}var e,n=[\"description\",\"fileName\",\"lineNumber\",\"message\",\"name\",\"number\",\"stack\"];return t.prototype=new Error,e=t}(),r=function(t,e){\"use strict\";function n(t,e){this.helpers=t||{},this.partials=e||{},r(this)}function r(t){t.registerHelper(\"helperMissing\",function(t){if(2===arguments.length)return void 0;throw new Error(\"Missing helper: '\"+t+\"'\")}),t.registerHelper(\"blockHelperMissing\",function(e,n){var r=n.inverse||function(){},i=n.fn;return d(e)&&(e=e.call(this)),e===!0?i(this):e===!1||null==e?r(this):p(e)?e.length>0?t.helpers.each(e,n):r(this):i(e)}),t.registerHelper(\"each\",function(t,e){var n,r=e.fn,i=e.inverse,o=0,a=\"\";if(d(t)&&(t=t.call(this)),e.data&&(n=g(e.data)),t&&\"object\"==typeof t)if(p(t))for(var s=t.length;s>o;o++)n&&(n.index=o,n.first=0===o,n.last=o===t.length-1),a+=r(t[o],{data:n});else for(var c in t)t.hasOwnProperty(c)&&(n&&(n.key=c,n.index=o,n.first=0===o),a+=r(t[c],{data:n}),o++);return 0===o&&(a=i(this)),a}),t.registerHelper(\"if\",function(t,e){return d(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||a.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper(\"unless\",function(e,n){return t.helpers[\"if\"].call(this,e,{fn:n.inverse,inverse:n.fn,hash:n.hash})}),t.registerHelper(\"with\",function(t,e){return d(t)&&(t=t.call(this)),a.isEmpty(t)?void 0:e.fn(t)}),t.registerHelper(\"log\",function(e,n){var r=n.data&&null!=n.data.level?parseInt(n.data.level,10):1;t.log(r,e)})}function i(t,e){m.log(t,e)}var o={},a=t,s=e,c=\"1.2.1\";o.VERSION=c;var l=4;o.COMPILER_REVISION=l;var u={1:\"<= 1.0.rc.2\",2:\"== 1.0.0-rc.3\",3:\"== 1.0.0-rc.4\",4:\">= 1.0.0\"};o.REVISION_CHANGES=u;var p=a.isArray,d=a.isFunction,h=a.toString,f=\"[object Object]\";o.HandlebarsEnvironment=n,n.prototype={constructor:n,logger:m,log:i,registerHelper:function(t,e,n){if(h.call(t)===f){if(n||e)throw new s(\"Arg not supported with multiple helpers\");a.extend(this.helpers,t)}else n&&(e.not=n),this.helpers[t]=e},registerPartial:function(t,e){h.call(t)===f?a.extend(this.partials,t):this.partials[t]=e}};var m={methodMap:{0:\"debug\",1:\"info\",2:\"warn\",3:\"error\"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:3,log:function(t,e){if(m.level<=t){var n=m.methodMap[t];\"undefined\"!=typeof console&&console[n]&&console[n].call(console,e)}}};o.logger=m,o.log=i;var g=function(t){var e={};return a.extend(e,t),e};return o.createFrame=g,o}(e,n),i=function(t,e,n){\"use strict\";function r(t){var e=t&&t[0]||1,n=d;if(e!==n){if(n>e){var r=h[n],i=h[e];throw new Error(\"Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (\"+r+\") or downgrade your runtime to an older version (\"+i+\").\")}throw new Error(\"Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (\"+t[1]+\").\")}}function i(t,e){if(!e)throw new Error(\"No environment passed to template\");var n=function(t,n,r,i,o,a){var s=e.VM.invokePartial.apply(this,arguments);if(null!=s)return s;if(e.compile){var c={helpers:i,partials:o,data:a};return o[n]=e.compile(t,{data:void 0!==a},e),o[n](r,c)}throw new p(\"The partial \"+n+\" could not be compiled when running in runtime-only mode\")},r={escapeExpression:u.escapeExpression,invokePartial:n,programs:[],program:function(t,e,n){var r=this.programs[t];return n?r=a(t,e,n):r||(r=this.programs[t]=a(t,e)),r},merge:function(t,e){var n=t||e;return t&&e&&t!==e&&(n={},u.extend(n,e),u.extend(n,t)),n},programWithDepth:e.VM.programWithDepth,noop:e.VM.noop,compilerInfo:null};return function(n,i){i=i||{};var o,a,s=i.partial?i:e;i.partial||(o=i.helpers,a=i.partials);var c=t.call(r,s,n,o,a,i.data);return i.partial||e.VM.checkRevision(r.compilerInfo),c}}function o(t,e,n){var r=Array.prototype.slice.call(arguments,3),i=function(t,i){return i=i||{},e.apply(this,[t,i.data||n].concat(r))};return i.program=t,i.depth=r.length,i}function a(t,e,n){var r=function(t,r){return r=r||{},e(t,r.data||n)};return r.program=t,r.depth=0,r}function s(t,e,n,r,i,o){var a={partial:!0,helpers:r,partials:i,data:o};if(void 0===t)throw new p(\"The partial \"+e+\" could not be found\");return t instanceof Function?t(n,a):void 0}function c(){return\"\"}var l={},u=t,p=e,d=n.COMPILER_REVISION,h=n.REVISION_CHANGES;return l.checkRevision=r,l.template=i,l.programWithDepth=o,l.program=a,l.invokePartial=s,l.noop=c,l}(e,n,r),o=function(t,e,n,r,i){\"use strict\";var o,a=t,s=e,c=n,l=r,u=i,p=function(){var t=new a.HandlebarsEnvironment;return l.extend(t,a),t.SafeString=s,t.Exception=c,t.Utils=l,t.VM=u,t.template=function(e){return u.template(e,t)},t},d=p();return d.create=p,o=d}(r,t,n,e,i);return o}()}!function(t,e){if(!t.runOnce&&!e.isOldBrowsers){var n=t.logger=t.logger||{times:[].concat(t.__timing),images:[],errors:[]};delete t.__timing,n.time=function(t,e){var n=e||+new Date;return this.times.push([n,t]),n},n.error=function(t,e,n){var r=n||+new Date;this.errors.push([r,t,e])},n.imagesize=function(t,e,n){this.images.push([t,e,n])},n.print=function(t,e,n){console&&console.log(n?t+\"\t\t\"+e:t+\"\t\t\"+e)},n.getErrors=function(){return this.errors},n.getImageSizes=function(){return this.images},n.dump=function(t){var n=0,r=this.times.length?this.times[0][0]:0;if(t){this.print(\"--------- AM Timings (in milliseconds) ----------\",\"\");for(var i=0,o=this.times.length;o>i;i++){var a=this.times[i];this.print(a[0]-r,a[1])}this.print(\"--------- AM Image Sizes ----------\",\"\");for(var i=0,o=this.images.length;o>i;i++){var a=this.images[i];this.print(a[0]+\"x\"+a[1]+\"|\"+e.screen.width,a[2])}n=1}if(this.errors.length){this.print(\"---------------- AM Errors ----------------------\",\"\");for(var i=0,o=this.errors.length;o>i;i++){var a=this.errors[i];this.print(a[0]-r,a[1]+\": \"+a[2],!0)}n=1}return n&&this.print(\"-------------------------------------------------\",\"\"),1}}}(n,n.config),function(t,e,n,r){function i(t,e){var n=t.split(\"?\");if(n.length>=2){for(var r=n[1].split(/[&;]/g),i=r.length;i-->0;)for(var o=0,a=e.length;a>o;o++){var s=encodeURIComponent(e[o])+\"=\";if(r[i]&&-1!==r[i].lastIndexOf(s,0)){r.splice(i,1);break}}return n[0]+(r.length?\"?\"+r.join(\"&\"):\"\")}return t}if(!n.runOnce&&!r.isOldBrowsers){var o=n.util=n.util||{};o.extend=function(t){return Array.prototype.forEach&&[].slice.call(arguments,1).forEach(function(e){for(var n in e)void 0!==e[n]&&(t[n]=e[n])}),t},o.keys=function(t){var e=[];for(var n in t)t.hasOwnProperty(n)&&e.push(n);return e},o.values=function(t){var e=[];for(var n in t)t.hasOwnProperty(n)&&e.push(t[n]);return e},o.clone=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e};var a=e.createElement(\"a\");o.absolutify=function(t){return a.href=t,a.href};var s=/^https?/;o.httpUrl=function(t){return s.test(t)};var c,l=[\"sukey\",\"from\",\"isappinstalled\"];o.getDocUrlPath=function(){return c?c:(c=t.location.pathname+(t.location.search?t.location.search:\"\"),r.weixin&&(c=i(c,l)),c)},o.gotoUrl=function(e){t.location.href=e},o.outerHTML=function(t){if(t.outerHTML)return t.outerHTML;var n=e.createElement(\"div\");n.appendChild(t.cloneNode(!0));var r=n.innerHTML;return n=null,r},o.getDoctype=function(t){t=t||e;var n=t.doctype||[].filter.call(t.childNodes,function(t){return t.nodeType==Node.DOCUMENT_TYPE_NODE})[0];return n?\"<!DOCTYPE HTML\"+(n.publicId?' PUBLIC \"'+n.publicId+'\"':\"\")+(n.systemId?' \"'+n.systemId+'\"':\"\")+\">\":\"\"},o.getDocProtocol=function(t){return\"https:\"==t.location.protocol?\"https\":\"http\"},o.removeBySelector=function(t,n){n=n||e;var r=n.querySelectorAll(t);return o.removeElements(r,n)},o.removeElements=function(t,n){n=n||e;for(var r=0,i=t.length;i>r;r++){var o=t[r];o.parentNode.removeChild(o)}return t},o.createElement=function(t,n,r){r=r||e;var i=r.createElement(t);for(var o in n)n.hasOwnProperty(o)&&i.setAttribute(o,n[o]);return i},o.insertAfter=function(t,e){t.parentNode.insertBefore(e,t.nextSibling)},o.imgUrl=function(t){return t},o.domIsReady=function(t){var t=t||e;return t.attachEvent?\"complete\"===t.readyState:\"loading\"!==t.readyState},o.waitForReady=function(t,e){var n=this,r=!1,i=function(){r||(r=!0,o&&clearInterval(o),e(t))},o=setInterval(function(){n.domIsReady(t)&&i()},100);t.addEventListener(\"readystatechange\",i,!1)},o.isIEBrowser=function(){return\"Microsoft Internet Explorer\"==t.navigator.appName},o.isMobileDevice=function(){return\"phone\"==r.realDevice},o.switchView=function(n){if(e.cookie=\"allmobilize=\"+n+\"; path=/;\",this.isIEBrowser()){var r=\"javascript:window.location='\"+t.location.href+\"'\";t.location.href=r}else t.location.reload()},o.goDesktop=function(){this.switchView(\"desktop\")},o.injectJSCode=function(t,e,r,i){var o=this.createElement(\"script\",{charset:\"utf-8\",defer:\"\",async:\"\",src:e,id:r||\"\"},t);i&&(o.readyState?o.onreadystatechange=function(){(\"loaded\"==o.readyState||\"complete\"==o.readyState)&&(o.onreadystatechange=null,i(o))}:o.onload=function(){i(o)});var a=t.getElementById(n.id);if(a)this.insertAfter(a,o);else if(t.body)t.body.appendChild(o);else{var s=t.getElementsByTagName(\"head\")[0];s&&s.appendChild(o)}},o.base64Encode=function(t){var e,n,r,i,o,a,s,c,l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",u=0,p=0,d=\"\",h=[];if(!t)return t;do e=t.charCodeAt(u++),n=t.charCodeAt(u++),r=t.charCodeAt(u++),c=e<<16|n<<8|r,i=c>>18&63,o=c>>12&63,a=c>>6&63,s=63&c,h[p++]=l.charAt(i)+l.charAt(o)+l.charAt(a)+l.charAt(s);while(u<t.length);d=h.join(\"\");var f=t.length%3;return(f?d.slice(0,f-3):d)+\"===\".slice(f||3)};var u={_keyStr:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",_f:String.fromCharCode,compressToBase64:function(t){if(null==t)return\"\";var e,n,r,i,o,a,s,c=\"\",l=0;for(t=u.compress(t);l<2*t.length;)l%2==0?(e=t.charCodeAt(l/2)>>8,n=255&t.charCodeAt(l/2),r=l/2+1<t.length?t.charCodeAt(l/2+1)>>8:0/0):(e=255&t.charCodeAt((l-1)/2),(l+1)/2<t.length?(n=t.charCodeAt((l+1)/2)>>8,r=255&t.charCodeAt((l+1)/2)):n=r=0/0),l+=3,i=e>>2,o=(3&e)<<4|n>>4,a=(15&n)<<2|r>>6,s=63&r,isNaN(n)?a=s=64:isNaN(r)&&(s=64),c=c+u._keyStr.charAt(i)+u._keyStr.charAt(o)+u._keyStr.charAt(a)+u._keyStr.charAt(s);return c},compress:function(t){if(null==t)return\"\";var e,n,r,i={},o={},a=\"\",s=\"\",c=\"\",l=2,p=3,d=2,h=\"\",f=0,m=0,g=u._f;for(r=0;r<t.length;r+=1)if(a=t.charAt(r),Object.prototype.hasOwnProperty.call(i,a)||(i[a]=p++,o[a]=!0),s=c+a,Object.prototype.hasOwnProperty.call(i,s))c=s;else{if(Object.prototype.hasOwnProperty.call(o,c)){if(c.charCodeAt(0)<256){for(e=0;d>e;e++)f<<=1,15==m?(m=0,h+=g(f),f=0):m++;for(n=c.charCodeAt(0),e=0;8>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1}else{for(n=1,e=0;d>e;e++)f=f<<1|n,15==m?(m=0,h+=g(f),f=0):m++,n=0;for(n=c.charCodeAt(0),e=0;16>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1}l--,0==l&&(l=Math.pow(2,d),d++),delete o[c]}else for(n=i[c],e=0;d>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1;l--,0==l&&(l=Math.pow(2,d),d++),i[s]=p++,c=String(a)}if(\"\"!==c){if(Object.prototype.hasOwnProperty.call(o,c)){if(c.charCodeAt(0)<256){for(e=0;d>e;e++)f<<=1,15==m?(m=0,h+=g(f),f=0):m++;for(n=c.charCodeAt(0),e=0;8>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1}else{for(n=1,e=0;d>e;e++)f=f<<1|n,15==m?(m=0,h+=g(f),f=0):m++,n=0;for(n=c.charCodeAt(0),e=0;16>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1}l--,0==l&&(l=Math.pow(2,d),d++),delete o[c]}else for(n=i[c],e=0;d>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1;l--,0==l&&(l=Math.pow(2,d),d++)}for(n=2,e=0;d>e;e++)f=f<<1|1&n,15==m?(m=0,h+=g(f),f=0):m++,n>>=1;for(;;){if(f<<=1,15==m){h+=g(f);break}m++}return h}};o.compressAndEncode=function(t){return u.compressToBase64(t)}}}(t,e,n,n.config),function(t,e,n){var r=t.event=t.event||{};r.onPlatformReady=\"onPlatformReady\",r.onOriginalDocReady=\"onOriginalDocReady\",r.onOriginalWinLoad=\"onOriginalWinLoad\",r.onBeforeMobilize=\"onBeforeMobilize\",r.onPageTmplLoad=\"onPageTmplLoad\",r.onPreprocessDoc=\"onPreprocessDoc\",r.onBeforeRender=\"onBeforeRender\",r.onMobilizedDocReady=\"onMobilizedDocReady\",r.onMobilizedWinLoad=\"onMobilizedWinLoad\",r.fire=function(r,i){n.time(r);for(var o={cancel:!1,lastModule:\"\"},a=0,s=t.m.length;s>a&&!o.cancel;a++){var c=t.m[a];if(c[r]&&e.options.modules[c.name]){{c[r](o,i)}o.lastModule=c.name,e.debug&&n.time(r+\" done @ \"+c.name)}}return o},r.registerModule=function(r){for(var i=0,o=t.m.length;o>i;i++)if(t.m[i].name==r.name)return;t.m.push(r),e.debug&&n.time(\"Load module: \"+r.name)}}(n,n.config,n.logger),function(t,e,n,r,i,o){if(!n.runOnce&&!r.isOldBrowsers){var a={name:\"capture\"};i.registerModule(a);var s,c,l=function(t,e){var r=i.fire(t,e);return r.cancel||(n.state=150,e.renderCapturedDoc()),r},u=function(){return r.srcRoot+r.device+\".\"+r.options.files.page},p=function(t,r){var i=e.createElement(\"script\");i.type=\"text/javascript\",r&&(i.readyState?i.onreadystatechange=function(){(\"loaded\"==i.readyState||\"complete\"==i.readyState)&&(i.onreadystatechange=null,r())}:i.onload=function(){r()}),i.src=t,n.srcElement.parentNode.insertBefore(i,n.srcElement)},d=function(){s||(void 0!==t.stop?t.stop():void 0!==e.execCommand&&e.execCommand(\"Stop\",!1),s=!0)};a.onOriginalDocReady=function(t){r.render&&(n.p.loading||r.weixin||d(),n.state=Math.max(n.state,101),t.cancel=!0)},a.onPlatformReady=function(t){if(r.render){if(r.options.splitmode){n.p.loading=!0;var e=u();p(e,function(){n.p.loading=!1,d(),110===n.state&&l(i.onPageTmplLoad,c)})}n.doc.init(function(t){n.state=102,c=t;var e=l(i.onBeforeMobilize,t);e.redirect&&(d(),o.gotoUrl(e.redirect))}),t.cancel=!0}}}}(t,e,n,n.config,n.event,n.util,n.logger),function(t,e,n,r,i,o,a){function s(t){return t.nodeName.toLowerCase()}function c(t){return t.replace('\"',\"&quot;\")}function l(t){return t?[].map.call(t.childNodes,function(t){var e=s(t);return\"#comment\"==e?\"<!--\"+t.textContent+\"-->\":\"plaintext\"==e?t.textContent:\"script\"==e&&(/allmobilize|yunshipei/.test(t.src)||/allmobilize|yunshipei/i.test(t.textContent))?\"\":t.outerHTML||t.nodeValue||i.outerHTML(t)}).join(\"\"):\"\"}if(!n.runOnce&&!r.isOldBrowsers){var u=/(<script[\\s\\S]*?>)/gi,p={style:' media=\"x-media\"',script:' type=\"text/x-script\"'},d=new RegExp(i.values(p).join(\"|\"),\"g\"),h={img:[\"src\"],source:[\"src\"],iframe:[\"src\"],script:[\"src\",\"type\"],link:[\"href\"],style:[\"media\"]},f=new RegExp(\"<(\"+i.keys(h).join(\"|\")+\")([\\\\s\\\\S]*?)>\",\"gi\"),m={},g={};for(var v in h)if(h.hasOwnProperty(v)){var y=h[v];y.forEach(function(t){g[t]=!0}),m[v]=new RegExp(\"\\\\s+((?:\"+y.join(\"|\")+\")\\\\s*=\\\\s*(?:('|\\\")[\\\\s\\\\S]+?\\\\2))\",\"gi\")}var b=e.createElement(\"div\"),w=function(t,e){this.sourceDoc=t,this.prefix=e||\"x-\"};w.init=function(t,n,r){var n=n||e,o=function(t,e,n){var r=new w(e,n),o=r.createDocumentFragmentsStrings(r.sourceDoc);i.extend(r,o);var a=r.createDocumentFragments();i.extend(r,a),t(r)};i.domIsReady(n)?o(t,n,r):i.waitForReady(n,function(){o(t,n,r)})},w.removeClosingTagsAtEndOfString=function(t){var e=t.match(/((<\\/[^>]+>)+)$/);return e?t.substring(0,t.length-e[0].length):t},w.removeTargetSelf=function(t){return t.replace(/target=(\"_self\"|\\'_self\\')/gi,\"\")},w.cloneAttributes=function(t,e){var n=t.match(/^<(\\w+)([\\s\\S]*)$/i);return b.innerHTML=\"<div\"+n[2],[].forEach.call(b.firstChild.attributes,function(t){try{e.setAttribute(t.nodeName,t.nodeValue)}catch(n){console.error(\"Error copying attributes while capturing: \",n)}}),e},w.disable=function(t,e){var n=function(){return function(t,n,r){return lowercaseTagName=n.toLowerCase(),result=\"<\"+lowercaseTagName+(p[lowercaseTagName]||\"\")+r.replace(m[lowercaseTagName],\" \"+e+\"$1\")+\">\"}}(),r=/(<!--[\\s\\S]*?-->)|(?=<\\/script)/i,i=t.split(r),o=i.map(function(t){var e;return t?/^<!--/.test(t)?t:(e=t.split(u),e[0]=e[0].replace(f,n),e[1]&&(e[1]=e[1].replace(f,n)),e):\"\"});return[].concat.apply([],o).join(\"\")},w.enable=function(t,e){var n=new RegExp(\"\\\\s\"+e+\"(\"+i.keys(g).join(\"|\")+\")\",\"gi\");return t.replace(n,\" $1\").replace(d,\"\")},w.openTag=function(t){if(!t)return\"\";t.length&&(t=t[0]);var e=[];return[].forEach.call(t.attributes,function(t){e.push(\" \",t.name,'=\"',c(t.value),'\"')}),\"<\"+s(t)+e.join(\"\")+\">\"},w.prototype.createDocumentFragmentsStrings=function(t){var e=t.getElementsByTagName(\"head\")[0]||t.createElement(\"head\"),n=t.getElementsByTagName(\"body\")[0]||t.createElement(\"body\"),r=t.getElementsByTagName(\"html\")[0];i.removeBySelector(a.selector,t);var o={doctype:i.getDoctype(t),htmlOpenTag:w.openTag(r),headOpenTag:w.openTag(e),bodyOpenTag:w.openTag(n),headContent:l(e),bodyContent:l(n)};o.all=function(t){return this.doctype+this.htmlOpenTag+this.headOpenTag+(t||\"\")+this.headContent+this.bodyOpenTag+this.bodyContent};var s=/<!--(?:[\\s\\S]*?)-->|(<\\/head\\s*>|<body[\\s\\S]*$)/gi,c=o.bodyContent=o.headContent+o.bodyContent;o.headContent=\"\";for(var u;u=s.exec(c);u)if(u[1]){o.headContent=c.slice(0,u.index);var p=new RegExp(\"^[\\\\s\\\\S]*(<head(?:[^>'\\\"]*|'[^']*?'|\\\"[^\\\"]*?\\\")*>)([\\\\s\\\\S]*)$\").exec(o.headContent);if(p&&(o.headOpenTag=p[1],o.headContent=p[2]),\"/\"!=u[1][1]){o.bodyContent=u[0];var d=/^((?:[^>'\"]*|'[^']*?'|\"[^\"]*?\")*>)([\\s\\S]*)$/.exec(o.bodyContent);d&&(o.bodyOpenTag=d[1],o.bodyContent=d[2]);break}o.bodyContent=c.slice(u.index+u[1].length)}return o},w.prototype.restoreOriginalDoc=function(){var t=this;i.waitForReady(e,function(){t.render(t.all())})},w.prototype.setElementContentFromString=function(t,e){for(b.innerHTML=e;b.firstChild;t.appendChild(b.firstChild));},w.prototype.createDocumentFragments=function(){var t={},n=t.capturedDoc=e.implementation.createHTMLDocument(\"\"),r=t.htmlEl=n.documentElement,i=t.headEl=r.firstChild,o=t.bodyEl=r.lastChild;w.cloneAttributes(this.htmlOpenTag,r),w.cloneAttributes(this.headOpenTag,i),w.cloneAttributes(this.bodyOpenTag,o),o.innerHTML=w.disable(this.bodyContent,this.prefix);var a=w.disable(this.headContent,this.prefix);try{i.innerHTML=a}catch(s){var c=i.getElementsByTagName(\"title\")[0];c&&i.removeChild(c),this.setElementContentFromString(i,a)}return r.appendChild(i),r.appendChild(o),t},w.prototype.escapedHTMLString=function(){var t=this.capturedDoc,e=w.enable(i.outerHTML(t.documentElement),this.prefix),n=this.doctype+e;return n},w.prototype.render=function(t){var e;e=t?w.enable(t,this.prefix):this.escapedHTMLString();var n=this.sourceDoc;setTimeout(function(){n.open(\"text/html\",\"replace\"),n.write(e),n.close()})},w.prototype.getCapturedDoc=function(){return this.capturedDoc},w.prototype.insertPlatformScripts=function(t){var e={charset:\"utf-8\",id:n.id,src:r.srcUrl};e[n.attr]=1,r.pageId&&(e[n.page]=r.pageId);var o=i.createElement(\"script\",e);if(\"object\"==typeof t){var a=t.head||t.getElementsByTagName(\"head\")[0];a.insertBefore(o,a.firstChild)}else if(\"string\"==typeof t){var s=i.outerHTML(o);t=t.replace(/<\\s*head[^>]*>/im,\"$&\"+s)}return t},w.prototype.renderCapturedDoc=function(){this.insertPlatformScripts(this.getCapturedDoc()),this.render()},n.doc=n.doc||w}}(t,e,n,n.config,n.util,n.logger,n.loader),function(t,e,n,r,i,o,a,s,c){if(!n.runOnce&&!i.isOldBrowsers){var l={name:\"mobilizer\"};r.registerModule(l);var u=function(t){var e=\"\";if(t.length){var n=t.length?t[0]:t;e=n.outerHTML?n.outerHTML:s(\"<div>\").append(s(n).clone()).html(),\"string\"==typeof e&&(e=s.trim(e))}return e},p=function(t){var e=function(t,e,r){return(s.fn.init||s.zepto.init).call(this,t,e||n.context(),r)},n=s.sub(e);return n.context=function(){return t||\"<div>\"},n.zepto||(n.fn.init=e,n.fn.init.prototype=s.fn),n};s.sub=s.sub||function(t){return s.extend(t,s),t.zepto=s.extend({},s.zepto),t},s.fn.anchor=function(){return p(this)},s.fn.src=function(){return s(this).attr(\"x-src\")||s(this).attr(\"src\")},s.fn.href=function(){var t=s(this).attr(\"href\");if(i.options.domains){var e=new RegExp(i.options.domains),n=e.exec(t);if(n&&n.length>0){var r=n[0],o=t.indexOf(r);o>=0&&8>=o&&(t=t.substring(t.indexOf(\"/\",o+1)))}}return t},s.fn.outerHTML=function(){return u(s(this))};var d,h,f=function(){var t=n.p.md;for(var e in t)t.hasOwnProperty(e)&&c.registerPartial(e,c.template(t[e]));c.registerHelper(\"ifCond\",function(t,e,n,r){switch(e){case\"==\":return t==n?r.fn(this):r.inverse(this);case\"===\":return t===n?r.fn(this):r.inverse(this);case\"<\":return n>t?r.fn(this):r.inverse(this);case\"<=\":return n>=t?r.fn(this):r.inverse(this);case\">\":return t>n?r.fn(this):r.inverse(this);case\">=\":return t>=n?r.fn(this):r.inverse(this);default:return r.inverse(this)}return r.inverse(this)}),c.registerHelper(\"parseLayout\",function(t){var e=this.content.___AM_PRIVATE_CHILDREN[t],n=[];return s.each(e,function(t,e){var r=\"blank\"===e.__type?e.id:e.__type,i=c.partials[r];i?n.push(i(e)):a.error(\"module_missing\",r)}),n.join(\"\\n\")})},m=function(t,e){var r=t.content&&t.content.template;!r&&t.content&&t.content._templates&&(r=t.content._templates[e]);var i=n.p.tpl[r];return i?(i=c.template(i))(t):\"\"},g=function(t,e){return f(),m(t,e)},v=function(t,e){return e&&(e.jquery||t.zepto&&t.zepto.isZ&&t.zepto.isZ(e)||e.selector&&e.length||e.innerHTML)?u(e):\"object\"==typeof e?e:e&&e.toString()||\"\"},y=function(t,e,n){if(\"function\"==typeof t){var r=extractor(e,n);return v(e,r)}var i={};return s.each(t,function(t,r){if(\"_\"!=t[0]){var o;\"function\"==typeof r?(o=r(e,n),o=v(e,o)):o=\"object\"==typeof r?y(r,e,n):r,i[t]=o}else i[t]=r}),i},b={select:function(t){var e=this,n={};return s.each(t,function(t,c){a.time(\"Pattern: \"+t);var l=!1;if(\"$\"==t[0]&&\"$\"==t[1]&&e._patterns){var u=e._patterns[t.substring(2)];l=u(e.$)}return l||i.pageId&&c.template===i.pageId||new RegExp(t,\"i\").test(o.getDocUrlPath())?(c._options&&s.extend(e._options,c._options),r.fire(r.onPreprocessDoc,{options:e._options,$:e.$}),n=y(c,e.$,e),!1):void 0}),n},_helpers:{},__clone:function(){var t=[\"select\",\"__clone\",\"_helpers\",\"_options\"],e=s.extend({},this);return s.each(t,function(t,n){delete e[n]}),e}},w=function(t,e){var n=s.extend(!0,{},e,b);return n.$=p(t.documentElement),n.Handlebars=c,n.__root=i.srcRoot,n.__lang=i.lang,n.__ads=i.showAds,y(e,n.$,n)},x={en:\"<h2>Failed to mobilize</h2>\",zh:\"<h2>适配失败</h2>\"},E={en:\"Error in JavaScript code\",zh:\"脚本执行错误\"},_={en:\"No template matched\",zh:\"没有找到匹配的网页模板\"},C=function(t,e,s,c){var l=s?g(s,c):\"\";if(l){l=e.insertPlatformScripts(l);var u={docHtml:l};n.state=200,r.fire(r.onBeforeRender,u),e.render(u.docHtml),t.cancel=!0,a.time(\"mobilization succeeded\")}else h?(i.debug&&(l=x[i.lang]+\"<hr /><h3>\"+E[i.lang]+\"</h3><pre>\"+h+\"</pre>\"),a.error(\"extraction_err\",h)):(i.debug&&(l=x[i.lang]+\"<hr /><h3>\"+_[i.lang]+\"</h3><p>\"+o.getDocUrlPath()+\"</p>\"),a.error(\"template_missing\",o.getDocUrlPath())),a.time(\"mobilization failed\")};l.onBeforeMobilize=function(t,e){a.time(\"mobilizing\");var r=i.device,o=e.getCapturedDoc();try{d=w(o,n.p.data[r])}catch(s){d=null,h=s.stack}if(d){if(d.content&&d.content.redirect)return t.redirect=d.content.redirect,void(t.cancel=!0);d.__device=r,d.__root=i.srcRoot,d.__lang=i.lang,d.__stylePath=d.__root+i.options.files.style,d.__jsPath=d.__root+i.options.files.script}i.options.splitmode&&n.p.loading?(n.state=110,t.cancel=!0):C(t,e,d,r)},l.onPageTmplLoad=function(t,e){C(t,e,d)};var M={en:\"View Mobile Site\",zh:\"回到云适配版\"},S=function(n,r){var i=M[r],o=e.createElement(\"div\"),a=e.createElement(\"span\"),s=e.createTextNode(i);\no.appendChild(a),a.appendChild(s),o.id=\"_allmobilizeGoMo\",o.style.textAlign=\"center\",o.style.clear=\"both\",o.style.padding=0,o.style.margin=\"20px 0\",o.style.zIndex=\"99999\",o.style.position=\"relative\",a.style.background=\"#222\",a.style.color=\"#FFF\",a.style.margin=0,a.style.padding=\"10px 20px\",a.style.borderRadius=\"5px\",a.style.font=\"14px 'Microsoft YaHei',SimSun,Arial,Sans-Serif\",a.style.cursor=\"pointer\",a.onclick=function(){e.cookie=\"allmobilize=; path=/;\",t.location.reload()},e.body.appendChild(o)};l.onOriginalDocReady=function(){/allmobilize=desktop/.test(e.cookie)&&S(s,i.lang,1)}}}(t,e,n,n.event,n.config,n.util,n.logger,n.$,i),function(t,e,n,r,i){if(!n.runOnce&&!i.isOldBrowsers){var o={name:\"preprocess\"};r.registerModule(o);var a={openLinkInSameWindow:!1,removeStyle:!0,cleanImg:!1,cleanTable:!1,cleanFrame:!1,cleanEmbed:!1},s=\"style\",c=\"width\",l=\"height\",u=function(t,e){t.openLinkInSameWindow&&e(\"a\").removeAttr(\"target\"),t.removeStyle&&(e(\"*\").removeAttr(s),e(s).remove()),e.cleanImg&&e('img, input[type=\"image\"]').removeAttr(l).removeAttr(c).removeAttr(\"align\"),t.cleanTable&&(e(\"table\").removeAttr(l).removeAttr(c),e(\"tr, th, td\").removeAttr(l).removeAttr(c).removeAttr(\"bgcolor\")),t.cleanFrame&&e(\"iframe\").removeAttr(c),t.cleanEmbed&&e(\"embed\").removeAttr(c)};o.onPreprocessDoc=function(t,e){var n=e.$.extend(a,e.options);u(n,e.$)}}}(t,e,n,n.event,n.config),function(e,n,r,i,o,a,s){if(!r.runOnce&&!o.isOldBrowsers){var c={name:\"imageresize\"};i.registerModule(c);var l,u,p,d=[240,320,480,540,640,720],h=d[d.length-1],f=\"data-am-src\",m=\"data-am-width\",g=\"data-am-height\",v=[\"x-src\",\"src\"],y=\".yunshipei.cn/\",b=\"http://s.yunshipei.com/loader.gif\",w=\"data-src\",x=\"data-src-retina\",E=function(t){for(var e=0,n=d.length;n>e;e++)if(d[e]>=t)return d[e];return t},_=function(t){if(void 0===l&&(l=!o.screen.width||!o.options.vas.upyun||!o.options.vas.upyun.bucket_name||!(o.options.vas.upyun.status>=20)||o.screen.width>h),void 0!==u||l||(u=\"http://\"+o.options.vas.upyun.bucket_name+y),l||(o.lazyLoading=p=o.options.vas.upyun.status>=30),l||!u||0===t.indexOf(u))return t;t=a.absolutify(t);var e=encodeURIComponent(t).replace(/[!'()]/g,escape).replace(/\\*/g,\"%2A\"),n=E(o.screen.width),r=\"type=fw&size=\"+n+\"&src=\",i=a.base64Encode(r+a.base64Encode(e)),s=u+i;return s},C=function(e){e.fn.unveil=function(n,r){function i(){var t=u.filter(function(){var t=e(this),n=e.zepto?\"none\"===t.css(\"display\"):t.is(\":hidden\");if(!n){var r=a.scrollTop(),i=r+a.height(),o=t.offset().top,c=o+t.height();return c>=r-s&&i+s>=o}});o=t.trigger(\"unveil\"),u=u.not(o)}var o,a=e(t),s=n||0,c=t.devicePixelRatio>1,l=c?x:w,u=this;return this.one(\"unveil\",function(){var t=this.getAttribute(l);t=t||this.getAttribute(w),t&&(this.setAttribute(\"src\",t),\"function\"==typeof r&&r.call(this))}),a.scroll(i),a.resize(i),i(),this}};a.imgUrl=_,c.onPreprocessDoc=function(t,e){var n=e.$;n(\"img\").each(function(t,e){if(!n(e).attr(f))for(var r=0,i=v.length;i>r;r++){var o=n(e).attr(v[r]);if(o){var a=_(o);a!==o&&(p?(n(e).attr(v[r],b),n(e).attr(w,a),n(e).attr(f,o)):(n(e).attr(v[r],a),n(e).attr(f,o)));break}}})},c.onBeforeMobilize=function(t,e){for(var n=e.getCapturedDoc(),r=n.querySelectorAll(\"img\"),i=0,o=r.length;o>i;i++){var a=r[i];if(\"IMG\"===a.nodeName&&!a.hasAttribute(\"STORAGE_ATTR\"))for(var s=0,c=v.length;c>s;s++){var l=a.getAttribute(v[s]);if(l){var u=_(l);u!==l&&(p?(a.setAttribute(v[s],b),a.setAttribute(w,u),a.setAttribute(f,l)):(a.setAttribute(v[s],u),a.setAttribute(f,l)));break}}}},c.onMobilizedDocReady=function(){if(!this.entryDocReady){this.entryDocReady=1;var t=e.$;if(p)try{t.fn.unveil||C(t),t(\"img\").unveil()}catch(n){s.error(\"image_resize\",n.stack)}l||t(\"img\").on(\"error\",function(){var e=t(this).attr(f),n=t(this).attr(v[1]);e&&t(this).attr(v[1],e),s.error(\"image_broken\",a.absolutify(n))}).on(\"load\",function(){t(this).attr(m,t(this).width()),t(this).attr(g,t(this).height()),s.imagesize(t(this).width(),t(this).height(),a.absolutify(t(this).attr(f)||t(this).attr(v[1])))})}}}}(t,e,n,n.event,n.config,n.util,n.logger),function(t,e,n,r,i,o){var a={name:\"analytics\"};r.registerModule(a);var s=\"http://\",c=s+\"n.yunshipei.com/z/\",l=s+\"n.yunshipei.com/g/\",u=s+\"s.yunshipei.com/javascript/sm.min.js\",p=function(t,e){e&&\"&\"!=e.charAt(e.length-1)&&(e+=\"&\"),e+=\"_t=\"+(new Date).getTime();var n=new Image(1,1);n.src=t+o.compressAndEncode(e)},d=function(){t.navigator.geolocation&&!this.trackGeo&&(this.trackGeo=1,t.navigator.geolocation.getCurrentPosition(function(t){var e=\"lat=\"+encodeURIComponent(t.coords.latitude)+\"&long=\"+encodeURIComponent(t.coords.longitude)+\"&acc=\"+encodeURIComponent(t.coords.accuracy);p(l,e),i.geoLoc=t},function(t){var e=\"err=\"+encodeURIComponent(t.code)+\"&msg=\"+encodeURIComponent(t.message);p(l,e)},{enableHighAccuracy:!1,timeout:1e4,maximumAge:0}))},h=function(e){if(!i.debug&&i.options.vas.analytics&&i.options.vas.analytics.status>=20){for(var n=[[\"aaId\",i.options.vas.analytics.aaID],[\"YSPId\",i.siteId],[\"mobilize\",i.realDevice!==i.device?\"-\":i.render],[\"ua\",i.ua],[\"screen\",i.screen.width+\"x\"+i.screen.height],[\"dpr\",t.devicePixelRatio||1],[\"device\",i.realDevice]],r=\"\",a=0,s=n.length;s>a;a++)r+=n[a][0]+\"=\"+encodeURIComponent(n[a][1])+\"&\";p(c,r),o.isMobileDevice()&&i.options.vas.analytics.geo&&d(),i.options.vas.analytics.sm&&o.injectJSCode(e,u)}return 1};a.onOriginalDocReady=function(t,e){this.entry||(this.entry=h(e.doc))},a.onMobilizedDocReady=function(t,e){this.entry||(this.entry=h(e.doc))}}(t,e,n,n.event,n.config,n.util),function(t,e,n,r,i,o,a){var s={name:\"errorlog\"};r.registerModule(s);var c=\"http://\",l=c+\"n.yunshipei.com/err/\",u=function(t,e){var n=t+o.compressAndEncode(e),r=new Image(1,1);r.src=n},p=function(){var e=a.getErrors();if(e&&e.length&&!i.debug){for(var n='{\"errors\":[',r=0,o=e.length;o>r;r++){var s=e[r];n+=\"[\"+s[0]+',\"'+s[1]+'\",\"'+s[2]+'\"]',r!==o-1&&(n+=\",\")}n+='], \"siteid\":\"'+i.siteId+'\",\"host\":\"'+t.location.host+'\"}',u(l,n)}return 1};s.onOriginalDocReady=function(){this.entry||(this.entry=p())},s.onMobilizedDocReady=function(){this.entry||(this.entry=p()),this.dump||(this.dump=a.dump())}}(t,e,n,n.event,n.config,n.util,n.logger),n.p.md.powered_by=function(t,e,n,r,i){function o(t,e){var r,i,o,c=\"\";return c+='\\n  <div class=\"md-am-bar\">\\n    ',o={hash:{},inverse:u.program(4,s,e),fn:u.program(2,a,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.powerBy,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o):p.call(t,\"ifCond\",(r=t&&t.powerBy,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o),(i||0===i)&&(c+=i),c+=\"\\n  </div>\\n\"}function a(){return'\\n      <div class=\"yunshipei-bar\">\\n        <a href=\"http://www.yunshipei.com\" data-role=\"none\" data-rel=\"external\">Powered By <strong>AllMobilize</strong></a>\\n      </div>\\n    '}function s(){return'\\n      <div class=\"yunshipei-bar\">\\n        <a href=\"http://www.yunshipei.com\" data-role=\"none\" data-rel=\"external\">本手机网页使用<strong>云适配</strong>创建</a>\\n      </div>\\n    '}this.compilerInfo=[4,\">= 1.0.0\"],n=this.merge(n,t.helpers),i=i||{};var c,l,u=this,p=n.helperMissing,d=\"function\",h=n.blockHelperMissing;return c=typeof e===d?e.apply(e):e,l=h.call(e,c,{hash:{},inverse:u.noop,fn:u.program(1,o,i),data:i}),l||0===l?l:\"\"},n.p.md.switch_mode=function(t,e,n,r,i){function o(t,e){var r,i,o,u=\"\";return u+='\\n  <div class=\"ysp-switcher md-switch',i=n[\"if\"].call(t,(r=t&&t.switchMode,null==r||r===!1?r:r.theme),{hash:{},inverse:O.noop,fn:O.program(2,a,e),data:e}),(i||0===i)&&(u+=i),u+='\">\\n    <span class=\"current md-sm-ysp\"\\n          data-target=\"#md-switch-modal',i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.id),{hash:{},inverse:O.noop,fn:O.program(4,s,e),data:e}),(i||0===i)&&(u+=i),u+='\"',i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.modal),{hash:{},inverse:O.noop,fn:O.program(6,c,e),data:e}),(i||0===i)&&(u+=i),u+=\">\\n      \",i=n.unless.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.switchName),{hash:{},inverse:O.program(13,d,e),fn:O.program(8,l,e),data:e}),(i||0===i)&&(u+=i),u+='\\n    </span>\\n    <span class=\"divider\"> | </span>\\n    <a id=\"godesktop\" class=\"md-sm-desktop\" href=\"#\" data-role=\"none\" onclick=\"AMPlatform.util.goDesktop();\">\\n      ',o={hash:{},inverse:O.program(17,f,e),fn:O.program(15,h,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o):A.call(t,\"ifCond\",(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o),(i||0===i)&&(u+=i),u+='\\n    </a>\\n  </div>\\n  <div id=\"md-switch-modal',i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.id),{hash:{},inverse:O.noop,fn:O.program(4,s,e),data:e}),(i||0===i)&&(u+=i),u+='\"\\n       class=\"modal md-switch-modal',i=n[\"if\"].call(t,(r=t&&t.switchMode,null==r||r===!1?r:r.theme),{hash:{},inverse:O.noop,fn:O.program(19,m,e),data:e}),(i||0===i)&&(u+=i),u+='\">\\n    <div class=\"md-sm-m-wrap\">\\n      <div class=\"md-sm-m-hd\">\\n        <a href=\"javascript:void(0)\" data-dismiss=\"modal\" class=\"md-sm-m-close\">Close</a>\\n      </div>\\n      <div class=\"md-sm-m-bd\">\\n        ',o={hash:{},inverse:O.program(34,_,e),fn:O.program(21,g,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.siteType),\"==\",\"ec\",o):A.call(t,\"ifCond\",(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.siteType),\"==\",\"ec\",o),(i||0===i)&&(u+=i),u+=\"\\n      </div>\\n    </div>\\n  </div>\\n\"}function a(t){var e,n=\"\";return n+=\" md-sm-t-\"+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.theme,typeof e===T?e.apply(t):e))}function s(t){var e,n=\"\";return n+=\"-\"+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.options,e=null==e||e===!1?e:e.id,typeof e===T?e.apply(t):e))}function c(){return'\\n          data-toggle=\"modal\"'}function l(t,e){var r,i,o,a=\"\";return a+=\"\\n        \",o={hash:{},inverse:O.program(11,p,e),fn:O.program(9,u,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o):A.call(t,\"ifCond\",(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o),(i||0===i)&&(a+=i),a+=\"\\n        \"}function u(){return\"\\n          Mobilized\\n        \"}function p(){return\"\\n          云适配版\\n        \"}function d(t){var e,n=\"\";return n+=\"\\n          \"+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.content,e=null==e||e===!1?e:e.switchName,typeof e===T?e.apply(t):e))+\"\\n      \"}function h(){return\"\\n        Desktop\\n      \"}function f(){return\"\\n        电脑版\\n      \"}function m(t){var e,n=\"\";return n+=\" md-sm-mt-\"+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.theme,typeof e===T?e.apply(t):e))}function g(t,e){var r,i,o,a=\"\";return a+=\"\\n          \",o={hash:{},inverse:O.program(24,y,e),fn:O.program(22,v,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o):A.call(t,\"ifCond\",(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o),(i||0===i)&&(a+=i),i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.owner),{hash:{},inverse:O.noop,fn:O.program(26,b,e),data:e}),(i||0===i)&&(a+=i),i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.org),{hash:{},inverse:O.noop,fn:O.program(28,w,e),data:e}),(i||0===i)&&(a+=i),a+='<span\\n            class=\"md-sm-slogan\">',i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.slogan),{hash:{},inverse:O.program(32,E,e),fn:O.program(30,x,e),data:e}),(i||0===i)&&(a+=i),a+=\"</span>\\n        \"}function v(){return\"You are visiting \"}function y(){return\"\\n            您正在浏览的是\"}function b(t){var e,n=\"\";return n+='<span\\n            class=\"md-sm-owner\">'+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.content,e=null==e||e===!1?e:e.owner,typeof e===T?e.apply(t):e))+\"</span>\"}function w(t){var e,n=\"\";return n+='<span\\n            class=\"md-sm-org\">'+k((e=t&&t.switchMode,e=null==e||e===!1?e:e.content,e=null==e||e===!1?e:e.org,typeof e===T?e.apply(t):e))+\"</span>\"}function x(t){var e,n;return e=t&&t.switchMode,e=null==e||e===!1?e:e.content,e=null==e||e===!1?e:e.slogan,n=typeof e===T?e.apply(t):e,n||0===n?n:\"\"}function E(){return\"为您当前手机定做的移动网站。轻动手指尖，移动随心购！\"}function _(t,e){var r,i,o,a=\"\";return a+=\"\\n          \",o={hash:{},inverse:O.program(24,y,e),fn:O.program(22,v,e),data:e},r=n.ifCond||t&&t.ifCond,i=r?r.call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o):A.call(t,\"ifCond\",(r=t&&t.switchMode,r=null==r||r===!1?r:r.options,null==r||r===!1?r:r.lang),\"==\",\"en\",o),(i||0===i)&&(a+=i),i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.owner),{hash:{},inverse:O.noop,fn:O.program(26,b,e),data:e}),(i||0===i)&&(a+=i),i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.org),{hash:{},inverse:O.noop,fn:O.program(28,w,e),data:e}),(i||0===i)&&(a+=i),a+='<span\\n            class=\"md-sm-slogan\">',i=n[\"if\"].call(t,(r=t&&t.switchMode,r=null==r||r===!1?r:r.content,null==r||r===!1?r:r.slogan),{hash:{},inverse:O.program(35,C,e),fn:O.program(30,x,e),data:e}),(i||0===i)&&(a+=i),a+=\"</span>\\n        \"}function C(){return\"为您当前手机定做的移动网站。\"}this.compilerInfo=[4,\">= 1.0.0\"],n=this.merge(n,t.helpers),i=i||{};var M,S,T=\"function\",k=this.escapeExpression,O=this,A=n.helperMissing,j=n.blockHelperMissing;return M=typeof e===T?e.apply(e):e,S=j.call(e,M,{hash:{},inverse:O.noop,fn:O.program(1,o,i),data:i}),S||0===S?S:\"\"},n.p.tpl.index=function(t,e,n,r,i){function o(t,e){var r,i=\"\";return i+='\\n                <div class=\"md\" id=\"',(r=n.name)?r=r.call(t,{hash:{},data:e}):(r=t&&t.name,r=typeof r===p?r.call(t,{hash:{},data:e}):r),i+=d(r)+'\">\\n                      ',(r=n.content)?r=r.call(t,{hash:{},data:e}):(r=t&&t.content,r=typeof r===p?r.call(t,{hash:{},data:e}):r),(r||0===r)&&(i+=r),i+=\"\\n                </div>\\n            \"}function a(t,e){var r,i,o=\"\";return o+='\\n                    <ul class=\"tag_list\">\\n                        ',i=n.each.call(t,(r=t&&t.content,r=null==r||r===!1?r:r.html,null==r||r===!1?r:r.topics),{hash:{},inverse:h.noop,fn:h.program(4,s,e),data:e}),(i||0===i)&&(o+=i),o+=\"\\n                    </ul>\\n                \"}function s(t){var e=\"\";return e+='\\n                            <li><a href=\"http://m.csdn.net/tag_list.html?tag='+d(typeof t===p?t.apply(t):t)+'\">'+d(typeof t===p?t.apply(t):t)+\"</a></li>\\n                        \"}this.compilerInfo=[4,\">= 1.0.0\"],n=this.merge(n,t.helpers),r=this.merge(r,t.partials),i=i||{};var c,l,u=\"\",p=\"function\",d=this.escapeExpression,h=this;return u+='<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta name=\"viewport\" content=\"initial-scale=1, minimum-scale=1, maximum-scale=1\">\\n  <title>',(c=n.title)?c=c.call(e,{hash:{},data:i}):(c=e&&e.title,c=typeof c===p?c.call(e,{hash:{},data:i}):c),u+=d(c)+'</title>\\n  <link rel=\"stylesheet\" href=\"',(c=n.__stylePath)?c=c.call(e,{hash:{},data:i}):(c=e&&e.__stylePath,c=typeof c===p?c.call(e,{hash:{},data:i}):c),u+=d(c)+'\" />\\n</head>\\n<body class=\"cn\">\\n<!-- top ad -->\\n    <div class=\"top_box\">\\n        <img src=\"http://a.yunshipei.com/csdnnet/logo.png\" alt=\"\">\\n        <a href=\"http://ms.csdn.net/download.html\" class=\"open_btn\">立即打开</a>\\n    </div>\\n<!--  -->\\n<!-- ad -->\\n    <div class=\"ad_box\"> \\n        <div class=\"ad_bg\"></div>\\n        <div class=\"ad_con\">\\n            <div class=\"ad_l\">即使是一小步<br>也想与你分享</div>\\n            <div class=\"ad_r\">\\n                <span class=\"ad_close\" onclick=\"$(\\'.ad_box\\').css(\\'display\\',\\'none\\');\"></span>\\n                <a href=\"http://ms.csdn.net/download.html\" class=\"open_btn\">立即打开</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n<!--  -->\\n\t<div data-role=\"page\" class=\"page\">\\n\t\t<div class=\"hd i-hd\">\\n            <h1><a href=\"http://www.csdn.net/\">CSDN.NET</a></h1>\\n            <a href=\"#nav\" class=\"nav-link\"><em></em><span>Menu</span></a>\\n\t\t</div>\\n        <nav id=\"nav\">\\n            <ul>\\n                <li><a href=\"http://m.csdn.net\" target=\"_blank\">资讯</a></li>\\n                <li><a href=\"http://geek.csdn.net/\" target=\"_blank\">极客头条</a></li>\\n                <li><a href=\"http://m.blog.csdn.net\" target=\"_blank\">博客</a></li>\\n            </ul>\\n        </nav>\\n\t\t<div data-role=\"content\" data-theme=\"c\" class=\"content\">\\n            ',l=n.each.call(e,(c=e&&e.content,c=null==c||c===!1?c:c.html,null==c||c===!1?c:c.news),{hash:{},inverse:h.noop,fn:h.program(1,o,i),data:i}),(l||0===l)&&(u+=l),u+='\\n            <div class=\"md\" id=\"topics\">\\n                <h2><a href=\"#\">热门主题</a></h2>\\n                ',l=n[\"if\"].call(e,(c=e&&e.content,c=null==c||c===!1?c:c.html,null==c||c===!1?c:c.topics),{hash:{},inverse:h.noop,fn:h.program(3,a,i),data:i}),(l||0===l)&&(u+=l),u+='\\n            </div>\\n\\n\t\t</div>\\n        <div class=\"syp-bar ft\">\\n            ',l=h.invokePartial(r.switch_mode,\"switch_mode\",e,n,r,i),(l||0===l)&&(u+=l),u+='\\n            <p class=\"ft-cr\">&copy; 1999-2012, CSDN.NET, All Rights Reserved.</p>\\n        </div>\\n        ',l=h.invokePartial(r.powered_by,\"powered_by\",e,n,r,i),(l||0===l)&&(u+=l),u+='\\n\\n    </div>\\n\\n    <script src=\"http://s.yunshipei.com/javascript/jquery-1.9.1.min.js\"></script>\\n    <script src=\"http://counter.csdn.net/a/js/AreaCounter.js\" type=\"text/javascript\"></script>\\n    <script type=\"text/javascript\">\\n        (function ($) {\\n            $(function () {\\n                $(\".nav-link\").click(function () {\\n                    $(\"#nav\").slideToggle();\\n                    return false;\\n                });\\n                $(\".md h2\").each(function () {\\n                    var $t = $(this);\\n                    $t.append(\"<span class=\\'expander\\'>—</span>\");\\n                    $t.siblings().wrapAll(\"<div class=\\'md-bd\\'></div>\");\\n                    var $ex = $(this).find(\".expander\");\\n\\n                    $ex.text($t.next(\".md-bd\").is(\":hidden\") ? \"+\" : \"—\");\\n\\n                    $t.click(function () {\\n                        $ex.text(($ex.text() == \"+\") ? \"—\" : \"+\");\\n                        $t.next(\".md-bd\").slideToggle(\"fast\");\\n                        return false;\\n                    });\\n                });\\n\\n                $(\"#geek li\").each(function (i) {\\n                    var index = \"0\" + (i + 1);\\n                    $(\"<span class=\\'order\\'>\" + index + \"<span>\").insertBefore($(this).find(\"a\"));\\n                });\\n            });\\n        })(jQuery);\\n\\n        //google计数器\\n        var _gaq = _gaq || [];\\n        _gaq.push([\\'_setAccount\\', \\'UA-535605-6\\']);\\n        _gaq.push([\\'_setDomainName\\', \\'csdn.net\\']);\\n        _gaq.push([\\'_trackPageview\\']);\\n        (function() {\\n            var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.async = true;\\n            ga.src = (\\'https:\\' == document.location.protocol ? \\'https://ssl\\' : \\'http://www\\') + \\'.google-analytics.com/ga.js\\';\\n            var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(ga, s);\\n        })();\\n    </script>\\n</body>\\n</html>\\n'},n.p.tpl.general=function(t,e,n,r,i){this.compilerInfo=[4,\">= 1.0.0\"],n=this.merge(n,t.helpers),r=this.merge(r,t.partials),i=i||{};var o,a,s=\"\",c=\"function\",l=this.escapeExpression,u=this;return s+='<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\">\\n  <meta name=\"viewport\" content=\"initial-scale=1, minimum-scale=1, maximum-scale=1\">\\n  <title>',(o=n.title)?o=o.call(e,{hash:{},data:i}):(o=e&&e.title,o=typeof o===c?o.call(e,{hash:{},data:i}):o),s+=l(o)+'</title>\\n  <meta name=\"format-detection\" content=\"telephone=no\">\\n  <link rel=\"stylesheet\" href=\"',(o=n.__stylePath)?o=o.call(e,{hash:{},data:i}):(o=e&&e.__stylePath,o=typeof o===c?o.call(e,{hash:{},data:i}):o),s+=l(o)+'\" />\\n</head>\\n<body class=\"cn\">\\n\t<div data-role=\"page\" class=\"page\">\\n        <div class=\"hd i-hd\">\\n            <h1><a href=\"http://www.csdn.net/\">CSDN.NET</a></h1>\\n            <a href=\"#nav\" class=\"nav-link\"><em></em><span>Menu</span></a>\\n        </div>\\n        <nav id=\"nav\">\\n            <ul>\\n                <li><a href=\"http://m.csdn.net\" target=\"_blank\">资讯</a></li>\\n                <li><a href=\"http://geek.csdn.net/\" target=\"_blank\">极客头条</a></li>\\n                <li><a href=\"http://m.blog.csdn.net\" target=\"_blank\">博客</a></li>\\n            </ul>\\n        </nav>\\n\t\t<div data-role=\"content\" data-theme=\"c\" class=\"content\">\\n\t\t\t',o=e&&e.content,o=null==o||o===!1?o:o.html,a=typeof o===c?o.apply(e):o,(a||0===a)&&(s+=a),s+='\\n\t\t</div>\\n        <div class=\"syp-bar ft\">\\n            ',a=u.invokePartial(r.switch_mode,\"switch_mode\",e,n,r,i),(a||0===a)&&(s+=a),s+='\\n            <p class=\"ft-cr\">&copy; 1999-2012, CSDN.NET, All Rights Reserved.</p>\\n        </div>\\n        ',a=u.invokePartial(r.powered_by,\"powered_by\",e,n,r,i),(a||0===a)&&(s+=a),s+='\\n    </div>\\n    <script src=\"http://s.yunshipei.com/javascript/jquery-1.9.1.min.js\"></script>\\n    <script src=\"http://counter.csdn.net/a/js/AreaCounter.js\" type=\"text/javascript\"></script>\\n    <script type=\"text/javascript\">\\n    (function($) {\\n        $(function () {\\n            $(\".nav-link\").click(function () {\\n                $(\"#nav\").slideToggle();\\n                return false;\\n            });\\n\\n            var $nl = $(\".news_list\");\\n\\n            $nl.find(\"dt\").each(function () {\\n                var $t = $(this);\\n                $t.append(\"<span class=\\'arrow\\'></span>\");\\n                $t.click(function () {\\n                    $t.next(\"dd\").slideToggle(\"fast\");\\n                    $t.find(\".arrow\").toggleClass(\"expanded\");\\n                });\\n            });\\n            $nl.find(\"dt\").eq(0).next(\"dd\").slideDown().\\n                    end().find(\".arrow\").addClass(\"expanded\");\\n\\n        });\\n    })(jQuery);\\n\\n    //google计数器\\n    var _gaq = _gaq || [];\\n    _gaq.push([\\'_setAccount\\', \\'UA-535605-6\\']);\\n    _gaq.push([\\'_setDomainName\\', \\'csdn.net\\']);\\n    _gaq.push([\\'_trackPageview\\']);\\n    (function() {\\n        var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.async = true;\\n        ga.src = (\\'https:\\' == document.location.protocol ? \\'https://ssl\\' : \\'http://www\\') + \\'.google-analytics.com/ga.js\\';\\n        var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(ga, s);\\n    })();\\n</script>\\n</body>\\n</html>\\n'},n.p.data.phone={_options:{openLinkInSameWindow:!1,removeStyle:!0,cleanImg:!1,cleanTable:!1,cleanFrame:!1,cleanEmbed:!1},_helpers:{getHost:function(){return t.location.host}},title:function(t){return t(\"title\").html()},footer:function(t){return t(\".footer\").html()},mdData:function(){var t={};return t.slidenav=[{link:\"http://m.csdn.net\",title:\"资讯\"},{link:\"http://m.blog.csdn.net\",title:\"Blog\"},{link:\"http://geek.csdn.net/\",title:\"Geek头条\"}],t},content:function(t,e){return e.select({\"^/($|\\\\?)\":{template:\"index\",html:function(t){var e={};e.news=[];var n=t(\".news\");t(\".news\").find(\".news_left ul\").remove(),n.find(\"dt a\").eq(0).appendTo(n.find(\"dt\")),t(\".news_list > a\").text(\"更多 +\"),e.news.push({name:\"news\",content:n.html()});var r=t(\".flow\");r.find(\"ul.develop\").remove(),r.find(\".ad_flow_text\").remove(),r.find(\"ul li\").slice(10).remove(),r.find(\".more\").text(\"更多 +\"),e.news.push({name:\"flow\",content:r.html()});var i=t(\".hot_blog\").eq(0);return i.find(\"h2 .more\").text(\"更多 +\").appendTo(i),e.news.push({name:\"geek\",content:i.html()}),e.topics=[\"开放平台\",\"HTML5\",\"开源\",\"移动开发\",\"iOS\",\"Android\",\"云计算\",\"大数据\",\"Hadoop\",\"OpenStack\"],e}},\"^/(.+)$\":{template:\"general\",html:function(t){return t(\".content .left\").html()}}})}},!function(t,e,n){if(!e.runOnce&&!n.isOldBrowsers){e.state=100;var r=e.event;r&&r.fire(r.onPlatformReady)}}(t,n,n.config)}(window,document);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 33373
        },
        "cache": {},
        "timings": {
          "blocked": 0.980000011622906,
          "dns": -1,
          "connect": -1,
          "send": 0.12999982573092406,
          "wait": 1188.001000089566,
          "receive": 31765.212000114847,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:33.891Z",
        "time": 8009.411999955773,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/css/csdn_common.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:05:46 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b88a-66e\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1646,
            "mimeType": "text/css",
            "text": "@charset \"utf-8\";\r\n/* csdn 2013-2-17 */\r\n/*\r\nYUI 3.8.0 (build 5744)\r\nCopyright 2012 Yahoo! Inc. All rights reserved.\r\nLicensed under the BSD License.\r\nhttp://yuilibrary.com/license/\r\n*/\r\nhtml{color:#000; font-size:100%; background:#FFF;word-break: break-all; word-wrap:break-word;}\r\nbody,div,dl,dt,dd,ul,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0;}\r\ntable{border-collapse:collapse;border-spacing:0;table-layout: fixed;}\r\nfieldset,img{border:0}\r\naddress,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal}\r\nul{list-style:none}\r\ncaption,th{text-align:left}\r\nh1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}\r\nq:before,q:after{content:''}\r\nabbr,acronym{border:0;font-variant:normal}\r\nsup{vertical-align:text-top}\r\nsub{vertical-align:text-bottom}\r\ninput,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit}\r\ninput,textarea,select{*font-size:100%}\r\nlegend{color:#000}\r\n/* Copyright (c) 2012, Yahoo! Inc.  All rights reserved. */\r\nbody, input, select, button, textarea { font:normal 12px/24px Helvetica, Tahoma, Arial, sans-serif;}\r\nbutton { cursor: pointer; }\r\ni,em,cite { font-style: normal; }\r\na,a:link,a:visited { color: #333; text-decoration: none; }\r\na:active,a:hover { text-decoration: underline; color:#c00; }\r\na:focus { outline: none; }\r\n.clearfix {_zoom: 1;}\r\n.clearfix:after {content: \".\";display: block;visibility: hidden;clear: both;height: 0px;}\r\n.more { float: right; }\r\n.more a { font-weight: normal; font-size: 12px; }\r\n.fl{ float: left; }\r\n.fr{ float: right; }\r\n.red{ color:#c00;}\r\n.black{ color:#333;}\r\n.grey{ color:#999;}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1027
        },
        "cache": {},
        "timings": {
          "blocked": 0.836000079289079,
          "dns": -1,
          "connect": -1,
          "send": 0.10100007057189897,
          "wait": 2232.921999879179,
          "receive": 5775.552999926733,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:33.892Z",
        "time": 17581.108999904245,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/css/content.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:55 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd957-41ca\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 16842,
            "mimeType": "text/css",
            "text": "@charset \"UTF-8\";/* CSS Document */\na:hover{ text-decoration:none;}\n.clearfix { display:block;*display:inline-block;}\n.clearfix:after { content:\".\";display:block;height:0;clear:both;visibility:hidden;}\nbody{word-break:normal;}\n/*header*/\n.header,\n.ad_top{ width:980px;margin:auto;margin-bottom:5px;line-height:0;}\n\n.ad_728{ margin-right:2px;}\n.header a.logo{ float:left;}\n.logo{ display:inline-block;width: 240px;height:90px;background:url(logo.png) no-repeat;margin-right:12px;}\n/*nav*/\n/*.nav{ height:100px;background:url(x.png) repeat-x;}*/\n.nav_menu{ width:980px;margin:auto;height:95px;background:url(x.png) repeat-x;}\n.menu li{ float:left;font:normal 16px/26px \"Microsoft YaHei\";height:42px;}\n.menu {padding-left: 5px;}\n.nav_menu .menu a{ display:block;_display:inline-block;color:#fff;height:42px;line-height:42px;padding:0 8px;}\n.nav_menu .menu ul li:last-first{ padding-left:40px;}\n.menu .nav_more{ float:right;position:relative;width:50px;background:url(y.png) 17px -888px;z-index:2000}\n.menu .nav_more:hover {background:#900 url(y.png) 17px -888px;}\n.menu .nav_more a{width:20px;background:url(y.png) 15px -888px;}\n.menu .nav_more a:hover{background:#900 url(y.png) 15px -888px;}\n.menu a:hover{ text-decoration: none;background:#900}\n.menu .parting{ width:12px;background:url( y.png) no-repeat 7px -980px;_width:2px;_background:url( y.png) no-repeat 0 -981px;}\n.submenu{padding: 0 15px;}\n.submenu ul{text-align: center ;display:table; margin:auto auto;}\n.submenu li{ display: block;float: left;height: 32px;line-height: 32px; padding: 0 2px; *padding: 0 1px;}\n.submenu a{ height:32px;padding:0 4px 0 5px;_padding:0 4px;}\n.submenu .parting{ width:15px;background:url(y.png) 7px -1028px no-repeat;}\n.nav_more_list{ position:absolute;background:#fff;border:4px #900 solid;right:0;top:43px;z-index:1000;padding:20px;width:465px;-moz-box-shadow: 0px 5px 8px #666;-webkit-box-shadow: 0px 5px 8px #666;box-shadow: 0px 5px 8px #666;}\n.nav_more_list ul{ width:600px;}\n.nav_more_list li{ width: 100px;float:left;margin-right:18px;height:auto;}\n.nav_more_list li:last-child{ margin-right:0;}\n.nav_more_list h4{ border-bottom:1px #333 solid;}\n.nav_more .nav_more_list li a{ width:auto;background:none;color:#333;font-size:12px;line-height:30px;height:auto;padding:0;border-bottom:1px #ccc solid;}\n.nav_more .nav_more_list li a:hover{ background:none;color:#c00;}\n.nav_more .nav_more_list li a:last-child{ border-bottom:none;}\n.nav_more_list a.arrow{ display:block;width: 42px;height: 43px;position: absolute;right:-4px;top:-47px;background:#fff url(y.png) 13px -937px;border:4px #900 solid;border-bottom:none;-moz-box-shadow: 0px 5px 8px #666;-webkit-box-shadow: 0px 5px 8px #666;box-shadow: 3px -2px 4px #ddd;padding: 0;}\n.nav_more_list a.arrow:hover{background:#fff url(y.png) 13px -937px;}\n/*content*/\n.content{ width:980px;margin:0 auto;}\n.box{ margin-bottom:20px;}\n.box h2{ color:#c00;font:normal 18px/30px \"Microsoft YaHei\";border-bottom:2px #333 solid;margin-bottom:15px;}\n.box h2 a{ color:#c00;}\n.content dt{ font-weight:bold;font-size:14px;}\n.content dd{ color:#888;}\n/*sidebar*/\n.sidebar{ width:300px;margin-left:15px;}\n.slide-outer{\n  width:300px;height:227px;overflow:hidden; margin-bottom:5px;position:relative;\n}\n.hot{ width:300px;height:200px;overflow:hidden;position:absolute;left:0;top:0;}\n.hot .swapbox1,\n.hot .swapbox2,\n.hot .swapbox3,\n.hot .swapbox4,\n.hot .swapbox5,\n.hot .swapbox6{position: absolute;left: 0;top:0;}\n.hot a { position:absolute; }\n.hot img{ width:300px;height:200px; }\n/*.hot ul{width:110px;background:url(y.png) 0 -1130px no-repeat;position:absolute;bottom:5px;right:5px;padding:0 10px;}*/\n.slide-outer ul{width:110px;position:absolute;bottom:5px;left:50%;margin-left:-60px;padding:0 10px; z-index: 111;}\n.slide-outer ul li{ float:left;width:18px;height:20px;background:url(y.png) 0 -1100px no-repeat;cursor: pointer;}\n.slide-outer ul li.current,\n.slide-outer ul li.cur,\n.slide-outer ul li:hover{ background-position:0 -1080px;}\n.quick dt{ width:60px;float:left;font-size:12px;font-weight:bolder;color:#333;}\n.quick dd{ float:right;width:240px;}\n.quick dd a{ margin-right:10px;}\n\n/*tmp*/\n.tmp{}\n.tmp dl {margin-bottom: 10px;border-bottom: 1px #ccc dotted;padding-bottom: 10px;}\n.tmp dl:last-child {border-bottom: none;margin-bottom: 0;padding-bottom: 0;}\n.tmp dl .img{margin:0 auto 10px; width: 180px; height: 120px}\n.tmp dl .img img{ width: 180px; height: 120px}\n.tmp dl dt{margin-bottom: 5px;font-weight: bold;font-size: 14px;text-align: center;}\n.tmp dl dd {color:#666; line-height: 20px; }\n\n\n.book{}\n.book dl{ margin-left:10px;_margin-left:0;float:right;width:170px;}\n.book dd{margin-top:10px;}\n.book_cover img{ width:120px;height:170px;}\n.follow ul li{ overflow: hidden; white-space: nowrap; text-overflow: ellipsis;}\n.enterprise{}\n.enterprise h4 {margin-bottom:5px; font-size:14px; font-weight:bold;}\n.enterprise img{ float:left;margin-right:10px;width:90px;height:60px;}\n.enterprise dd{ margin-bottom:10px;padding-bottom:10px;border-bottom:1px #ccc dotted;}\n.enterprise ul li,\n.share ul li{white-space: nowrap;text-overflow: ellipsis;overflow: hidden;}\n.box .more{ color:#c00;font-size:12px;}\n.job dd{ margin-bottom:10px;padding-bottom:10px;border-bottom:1px #ccc dotted;}\n.job dd:last-child{ border:none;margin:0;padding:0;}\n.activity h2{ background:url(y.png) 0 -1170px no-repeat;padding-left:20px;}\n.activity h4{ font-size:16px;color:#666;margin-bottom:10px;padding-top: 10px;}\n.activity h4 span{ margin-right:10px;}\n.activity li{ font-size:14px;padding-bottom: 10px;border-bottom: 1px #ccc dotted;}\n.activity li:nth-child(2n) {background-color: #f8f8f8;}\n.share dt{ margin-bottom:10px;padding-bottom:10px;border-bottom:1px #ccc dotted;}\n.share dt img{ float:left;margin-right:10px;width:150px;}\nul.club li{ border:1px #ccc solid;padding:1px;margin-bottom:20px; height:100px; overflow:hidden;}\nul.club li img{ float:right; margin-left:5px; width:100px; height:100px;}\nul.club li .tit{ display:block; padding:13px 10px;font:normal 16px/26px \"Microsoft YaHei\";}\n/*main*/\n.main{ width:650px;padding-right:14px;border-right:1px #ddd solid;overflow:hidden;}\n.news{ margin-bottom:10px;padding-bottom:20px;border-bottom:1px #ddd solid;}\n.news_left{ float:left;width:380px;margin-right:20px;font-size:14px;}\n.news_left img{ width:380px;height:253px;}\n.news_left dt{ font:normal 28px/36px \"Microsoft YaHei\";padding-bottom:10px;}\n.news_left dd{ font-size:14px;padding-bottom:10px;margin-bottom:10px;border-bottom:1px #ddd solid;}\n.news_left h4{ font-weight:bold;}\n.news_left h4 .more{font-size:12px;}\n.news_list{ width:250px;float:left;}\n.news_list dt{ font:normal 16px/26px \"Microsoft YaHei\";height:52px;overflow:hidden;margin-bottom:4px;font-weight:bold;}\n.news_list dd{margin-bottom:8px;padding-bottom:8px;border-bottom:1px #ccc dotted;height:49px;overflow:hidden}\n.news_list dd:last-child{ padding:0;border:0;}\n.news_list li{ font:normal 16px/24px \"Microsoft YaHei\"; margin-bottom:8px;padding-bottom:8px;border-bottom:1px #ccc dotted;overflow:hidden;}\n.news_list .more{  background:#900 url(y.png) 35px -1200px;display:inline-block;padding:0 20px 0 10px;color:#fff;text-decoration:none;}\n.news_list li:last-child{ padding:0;border:0;}\n.news_list .more:hover{ background-color:#a00;}\n.wrap{}\n.wrap .left{ width:230px;float:left;margin-right:30px;}\n.hot_news img{ display:block;margin-bottom:10px;width:230px;height:153px;}\n.hot_news dt{ font-weight:inherit; font: normal 16px/22px \"Microsoft YaHei\";margin-bottom:10px;padding-bottom:10px;border-bottom:1px #ddd dotted;}\n.hot_news dt:last-child{padding:0;margin:0;border-bottom:none;}\n.hot_blog ul{ background:url(y.png) 5px -1270px no-repeat;padding-left:50px;}\n.hot_blog li{ overflow:hidden;margin-bottom:20px;height:44px;font:normal 16px/22px \"Microsoft YaHei\";}\n.special dt{ font-weight:inherit;font-size:16px;margin-bottom:10px;}\n.special dd{padding-bottom:10px;margin-bottom:10px;border-bottom:1px #ddd dotted;}\n.special dd:last-child{padding:0;margin:0;border-bottom:none;}\n.special img{ width:230px; height:115px; display:block;}\n.top_news dd img {display: block;height: 120px;margin: 0 auto;width: 180px;}\n.flow{ margin-bottom:0;}\n.flow h4{ font-size:12px;}\n.flow h3{font:normal 18px/28px \"Microsoft YaHei\";margin-bottom:5px; font-weight:bold;}\n.flow ul.develop li{ padding-bottom:6px; margin-bottom:6px; border-bottom: 1px #ddd dotted; font-size:14px; }\n.flow ul.develop li:last-child{ border:none;padding:0;}\n.flow ul.develop span{ display:inline-block; width:16px; height:16px; color:#666; margin-right:5px; background: url(../../my.csdn.net/images/ico_pub_blog.gif) no-repeat;background-position: 1px 0;}\n.flow li{padding-bottom:13px;margin-bottom:13px;border-bottom:1px #ddd dotted;display:block;*display:inline-block;}\n.flow li:after{content:\".\";display:block;height:0;clear:both;visibility:hidden;}\n.flow li img{ float:left;margin-right:10px;width:120px;height:80px;padding-top:6px;}\n.flow li .summary{ color:#666;margin-bottom:5px;}\n.flow li .summary .image{ display:block;float:none;width:389px;height:195px;margin:0 auto;}\n.flow li h5 a{ color:#666;margin-right:10px;}\n.flow li h5 a:hover{ color:#c00;}\n.flow .more{ width:100%;height:50px; margin-top:20px;background:none;border:none;cursor:pointer;font-size:20px;color:#999; line-height: 50px;}\n.flow .more:hover{ color:#c00;}\n.wrap .center{width:389px;float:left;}\n/*ad*/\n.ad_300_60{ width:300px;height:60px;overflow:hidden;}\n.ad_news{ width: 660px;}\n.ad_news .ad_322{ width:322px;height:90px;margin-right:5px;}\n.ad_news .ad_650 {width: 650px;margin-right: 5px;}\n.ad_160_600 {margin: 0 auto;width: 160px;height: 600px;margin-bottom: 30px;}\n.ad_160_600 img{ width:160px;height:600px;}\n.flow li.ad_flow_text{ border:1px #999 dotted;padding:1px;}\n.flow li.ad_flow_text dl{ background:#f8f8f8;padding:10px 15px;}\n/*footer_nav*/\n.footer_nav{ width:980px;margin:0 auto;padding:10px 0;}\n.footer_nav h4{font-size:14px;margin-bottom:5px;}\n.classify a{ margin-right:20px;white-space:nowrap;}\n.classify{ border-top:1px #ccc solid;border-bottom:1px #ccc dotted;padding:10px 0;margin:10px 0;}\n.service{ margin:10px 0;}\n.service a{ background:url(y.png) no-repeat;height:25px;padding-left:30px;margin-right:25px;display:block;float:left;font-size:14px;line-height:40px;}\n.service a:last-child{ margin-right:0;}\na.icon_rss{ background-position:0 -75px;}\na.icon_activity{ background-position:0 -165px;}\na.icon_email{ background-position:0 -255px;}\na.icon_weibo{ background-position:0 -348px;}\na.icon_weixin{ background-position:0 -442px;}\na.icon_ipad{ background-position:0 -533px;}\na.icon_share{ background-position:0 -623px;}\na.icon_pongo{ background-position:0 -715px;}\na.icon_csto{ background-position:0 -807px;}\na.icon_rss:hover{ background-position:0 -120px;}\na.icon_activity:hover{ background-position:0 -210px;}\na.icon_email:hover{ background-position:0 -301px;}\na.icon_weibo:hover{ background-position:0 -394px;}\na.icon_weixin:hover{ background-position:0 -488px;}\na.icon_ipad:hover{ background-position:0 -578px;}\na.icon_share:hover{ background-position:0 -669px;}\na.icon_pongo:hover{ background-position:0 -761px;}\na.icon_csto:hover{ background-position:0 -852px;}\n.box{ display:block;*display:inline-block;}\n.box:after { content:\".\";display:block;height:0;clear:both;visibility:hidden;}\n/*top notice*/\n.pagetop_notice{ width:980px; margin:0 auto; height:28px; background:#fff; line-height:28px; text-align:left; text-align:right; margin-bottom:2px;}\n.pagetop_notice{padding-bottom:3px\\9;}\n.pagetop_notice a{padding:0 6px; text-decoration:none;}\n.pagetop_notice a:hover,\n.pagetop_notice a:active{color:#f00;}\npagetop_notice div{padding-top:2px;}\n.pagetop_notice span{margin:0;}\n.pagetop_notice span.login{margin-right:6px; display:inline; color:#f00;}\n.pagetop_notice span em{color:#f00; padding:0 6px 0 3px;margin-right: 20px;}\n.pagetop_notice span a.notice_num{display:none; width:auto; height:11px; margin:0 20px 0 0; padding:2px 5px; border-radius:3px; -webkit-border-radius:3px; -moz-border-radius:3px; -khtml-border-radius:3px; background:#ddd; color:#666 !important; line-height:11px; text-decoration:none;}\n.pagetop_notice span a{padding:0 5px;}\n.pagetop_notice span .red{color:#f00;}\n.pagetop_notice img{margin:0 2px -3px;float:right;}\n.pagetop_notice .search{width:178px; height:20px; margin:2px 0 2px 5px; padding:2px 3px; border:solid 1px #ccc; background:#fff url(../../c.csdnimg.cn/www/images/ico_sear_top.gif) no-repeat 160px 2px; color:#999; line-height:14px; vertical-align:middle;}\n.pagetop_notice .search{margin-top:2px\\9; margin-bottom:0\\9;padding-top:2px\\9;}\n\n/*pub_footer*/\n.pub_footer{display:block; clear:both; width:980px; margin:0 auto; padding:10px 0 0; color:#333; font:normal 12px/24px Helvetica, Tahoma, Arial, sans-serif; text-align:center;}\n.pub_footer a:hover,\n.pub_footer a:active{color:#f00 !important; text-decoration:none !important;}\n.pub_footer dl{padding:0 0 3px; overflow:hidden; border-top:solid 1px #ccc;}\n.pub_footer dd a{color:#333;}\n.pub_footer dt {height:49px; padding:5px 0 10px; text-align:center;}\n.pub_footer dt a{padding:0; margin:0 5px;}\n.pub_footer dt a img{height:47px; /*width:115px; height:45px;*/ border:1px solid #ccc;}\n.pub_footer dd.backblue{padding:8px 0 5px; /*border-top:solid 1px #ccc; background:#96c3ea;*/ color:#666;}\n.pub_footer dd.backblue a{padding:0 10px; font-weight:normal; color:#333;}\n.pub_footer dd.backblue a:link, .pub_footer dd.backblue a:visited, .pub_footer dd.backblue a:hover, .pub_footer dd.backblue a:active{font-weight:normal; color:#333;}\n/* 增加客服联系方式 */\n.pub_footer .qq,\n.pub_footer .weibo,\n.pub_footer .online,\n.pub_footer .email,\n.pub_footer .phone{margin-right:15px;}\n.pub_footer .qq { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -111px; display: inline-block; padding-left: 17px; }\n.pub_footer .qq:hover { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -138px; display: inline-block; padding-left: 17px; }\n.pub_footer .weibo { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -14px -52px; display: inline-block; padding-left: 22px; }\n.pub_footer .weibo:hover { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -13px -81px; display: inline-block; padding-left: 22px; }\n.pub_footer .online { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -165px; display: inline-block; padding-left: 20px; }\n.pub_footer .online:hover { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -193px; display: inline-block; padding-left: 20px; }\n.pub_footer .email { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -220px; display: inline-block; padding-left: 20px; }\n.pub_footer .email:hover { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -248px; display: inline-block; padding-left: 20px; }\n.pub_footer .phone { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px 1px; display: inline-block; padding-left: 20px; }\n.pub_footer .phone:hover { background: url( ../../c.csdnimg.cn/www/images/pic_footer_icon.png ) no-repeat -17px -27px; display: inline-block; padding-left: 20px; }\n.ad_text_01{padding-top:10px; margin-top:10px; border-top:1px #ccc dotted;}\n.ad_text_01 li iframe {height: 24px;}\n/* 最热博客文章 */\n.hot_paper li{ font-weight:inherit; font: normal 16px/22px \"Microsoft YaHei\";margin-bottom:10px;padding-bottom:10px;border-bottom:1px #ddd dotted;_zoom: 1;}\n.hot_paper li:last-child{padding:0;margin:0;border-bottom:none;}\n.hot_paper li:after {content: \".\";display: block;visibility: hidden;clear: both;height: 0px;}\n.hot_paper li img{ float:left; margin-right:10px; width: 75px; height: 75px;}\n.hot_paper li a{}\n.top_arrow { border: 0 none; bottom: 150px; cursor: pointer; display: block; height: auto; margin: 0; opacity: 0.5; padding: 0; position: fixed; right: 40px; width: 35px; z-index: 2147483647;}\n\n/* 知识库 */\n  .lib-list{font-family:\"Microsoft YaHei\";}\n  .lib-list a.lib-list-banner{display:block; clear:both; overflow:hidden;margin:-10px 0 10px;}\n  .lib-list a.lib-list-banner img{width:300px; height:60px;margin:0;}\n  .lib-list a.lib-list-banner img{width:300px; height:60px;}\n  .lib-list dl dd.tracking-ad{clear:both;overflow:hidden;}\n  .lib-list dl dd.tracking-ad img{width:60px; height:60px;border:1px solid #e9e9e9;}\n  .lib-list dl dd.tracking-ad .lib-list-right{float:left; padding-top:5px;}\n  .lib-list dl dd.tracking-ad .lib-list-right h4,.lib-list dl dd.tracking-ad .lib-list-right .lib-list-txt{clear:both;overflow:hidden;}\n  .lib-list dl dd.tracking-ad .lib-list-right span{display:block;float:left;margin-right:5px;}\n  .lib-list dl dd:hover .lib-list-right h4 a,.lib-list dl dd:hover .lib-list-right .lib-list-txt span.txt{color:#cc0000;}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 4186
        },
        "cache": {},
        "timings": {
          "blocked": 0.884999986737967,
          "dns": -1,
          "connect": -1,
          "send": 0.07499987259507102,
          "wait": 2233.027000213047,
          "receive": 15347.121999831865,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.050Z",
        "time": 24108.038999838755,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170130/new%20image%20-%200hixn.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 30 Jan 2017 07:43:57 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588eeebd-a155\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "41301"
            }
          ],
          "cookies": [],
          "content": {
            "size": 41301,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 41440
        },
        "cache": {},
        "timings": {
          "blocked": 0.410999869927764,
          "dns": -1,
          "connect": -1,
          "send": 0.08699996396899201,
          "wait": 2075.5890000145932,
          "receive": 22031.951999990266,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.117Z",
        "time": 27007.67399999313,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170117/230-115-2.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 17 Jan 2017 06:33:44 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"587dbac8-90b0\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "37040"
            }
          ],
          "cookies": [],
          "content": {
            "size": 37040,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 37179
        },
        "cache": {},
        "timings": {
          "blocked": 3.61900008283556,
          "dns": -1,
          "connect": -1,
          "send": 0.1280000433325701,
          "wait": 2125.786999939012,
          "receive": 24878.13999992795,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.117Z",
        "time": 12649.381999857724,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170112/1.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 12 Jan 2017 11:33:07 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58776973-2803\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "10243"
            }
          ],
          "cookies": [],
          "content": {
            "size": 10243,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 10382
        },
        "cache": {},
        "timings": {
          "blocked": 3.44199989922345,
          "dns": -1,
          "connect": -1,
          "send": 0.07800012826919023,
          "wait": 2126.1670000385475,
          "receive": 10519.694999791684,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.118Z",
        "time": 11628.942999988794,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/avatar.csdn.net/7/1/0/1_jiangwei0910410003.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 02 Nov 2016 08:24:41 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5819a2c9-21e9\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "8681"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8681,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 8818
        },
        "cache": {},
        "timings": {
          "blocked": 3.3400000538677,
          "dns": -1,
          "connect": -1,
          "send": 0.07799989543855013,
          "wait": 2126.243999926374,
          "receive": 9499.281000113115,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.118Z",
        "time": 26639.69500013627,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/avatar.csdn.net/8/9/2/1_zwgdft.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 01 Nov 2016 00:19:54 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5817dfaa-7b67\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "31591"
            }
          ],
          "cookies": [],
          "content": {
            "size": 31591,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 33061
        },
        "cache": {},
        "timings": {
          "blocked": 3.1290000770241,
          "dns": -1,
          "connect": -1,
          "send": 0.07700012065469997,
          "wait": 2205.7159999385512,
          "receive": 24430.77300000004,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.118Z",
        "time": 24124.685999937356,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/avatar.csdn.net/4/C/A/1_q1056843325.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 03 Dec 2016 13:47:50 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5842cd06-6778\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "26488"
            }
          ],
          "cookies": [],
          "content": {
            "size": 26488,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 26627
        },
        "cache": {},
        "timings": {
          "blocked": 2.91400006972253,
          "dns": -1,
          "connect": -1,
          "send": 0.07599988020957005,
          "wait": 2494.713000021878,
          "receive": 21626.982999965545,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.119Z",
        "time": 13705.967999994755,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/avatar.csdn.net/6/8/8/1_mindfloating.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 10 Nov 2015 18:31:38 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5642380a-24a5\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "9381"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9381,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 9519
        },
        "cache": {},
        "timings": {
          "blocked": 2.78900004923344,
          "dns": -1,
          "connect": -1,
          "send": 0.07699988782405986,
          "wait": 2472.2080000210526,
          "receive": 11230.894000036646,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.119Z",
        "time": 29369.518999941647,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/avatar.csdn.net/0/0/8/1_javazejian.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 16 Jul 2016 03:05:15 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5789a46b-b47f\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "46207"
            }
          ],
          "cookies": [],
          "content": {
            "size": 46207,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 46346
        },
        "cache": {},
        "timings": {
          "blocked": 2.32699979096651,
          "dns": -1,
          "connect": -1,
          "send": 0.07900013588369026,
          "wait": 2471.6389998793597,
          "receive": 26895.474000135437,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.279Z",
        "time": 33667.10299998522,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170124/%E5%A4%A7%E5%9B%BE%E5%89%AF%E6%9C%AC02.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 24 Jan 2017 09:00:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588717a7-10558\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "66904"
            }
          ],
          "cookies": [],
          "content": {
            "size": 66904,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 67044
        },
        "cache": {},
        "timings": {
          "blocked": 0.616000033915043,
          "dns": -1,
          "connect": -1,
          "send": 0.09799981489777598,
          "wait": 2520.9080001804973,
          "receive": 31145.480999955907,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.455Z",
        "time": 34092.88899996318,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170123/20170122150230042.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 23 Jan 2017 07:19:55 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5885ae9b-102f2\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "66290"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 66290,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 66429
        },
        "cache": {},
        "timings": {
          "blocked": 0.789999961853027,
          "dns": -1,
          "connect": -1,
          "send": 0.07300009019672904,
          "wait": 2318.93099984154,
          "receive": 31773.09500006959,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.455Z",
        "time": 33762.735000113025,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170123/%E6%9C%AA%E6%A0%87%E9%A2%98-2.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 23 Jan 2017 02:30:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58856abf-ffcc\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "65484"
            }
          ],
          "cookies": [],
          "content": {
            "size": 65484,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 66800
        },
        "cache": {},
        "timings": {
          "blocked": 0.815999926999211,
          "dns": -1,
          "connect": -1,
          "send": 0.048000132665038,
          "wait": 2443.1659998372156,
          "receive": 31318.705000216145,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.456Z",
        "time": 37865.502999862656,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170123/1.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 23 Jan 2017 02:03:04 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58856458-21a6d\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "137837"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 137837,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 137977
        },
        "cache": {},
        "timings": {
          "blocked": 0.701999990269542,
          "dns": -1,
          "connect": -1,
          "send": 0.04099984653294109,
          "wait": 2448.4960001427676,
          "receive": 35416.263999883085,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.563Z",
        "time": 19006.7440001294,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.bss.csdn.net/201507010655315634.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 01 Jul 2015 06:55:31 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"55938ee3-43d7\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "17367"
            }
          ],
          "cookies": [],
          "content": {
            "size": 17367,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 17506
        },
        "cache": {},
        "timings": {
          "blocked": 0.774000072851777,
          "dns": -1,
          "connect": -1,
          "send": 0.07300009019672904,
          "wait": 2463.4930000174813,
          "receive": 16542.40399994887,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.564Z",
        "time": 19006.623999914154,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.bss.csdn.net/201501080056201415.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 08 Jan 2015 00:56:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"54add5b7-438b\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "17291"
            }
          ],
          "cookies": [],
          "content": {
            "size": 17291,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 17430
        },
        "cache": {},
        "timings": {
          "blocked": 0.676000025123358,
          "dns": -1,
          "connect": -1,
          "send": 0.04499987699091401,
          "wait": 2463.533000089226,
          "receive": 16542.369999922816,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.564Z",
        "time": 28233.82900003344,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.bss.csdn.net/201605050006573691.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 04 May 2016 16:06:58 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"572a1e22-8b67\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "35687"
            }
          ],
          "cookies": [],
          "content": {
            "size": 35687,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 35825
        },
        "cache": {},
        "timings": {
          "blocked": 0.661999918520451,
          "dns": -1,
          "connect": -1,
          "send": 0.04400010220706396,
          "wait": 2462.9470000509223,
          "receive": 25770.17599996179,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.628Z",
        "time": 8266.215999843553,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.knowledge.csdn.net/upload/base/1453169124297_297.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 19 Jan 2016 02:05:25 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"569d99e5-b81\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "2945"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2945,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABGAAD/4QNyaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjUtYzAxNCA3OS4xNTE0ODEsIDIwMTMvMDMvMTMtMTI6MDk6MTUgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NDBCMzBDNUVBRTk3MTFFNUE3MUNDMEE1RDFCQUQ2RjUiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTkzRDY3MjdCODIyMTFFNTkwNThDN0U2N0IyMEFFQjYiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTkzRDY3MjZCODIyMTFFNTkwNThDN0U2N0IyMEFFQjYiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjllMGJmMTYxLTk5MDItOTA0Ni05YzM5LWIyMGY4MTVhOTM3OCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MEIzMEM1RUFFOTcxMUU1QTcxQ0MwQTVEMUJBRDZGNSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3082
        },
        "cache": {},
        "timings": {
          "blocked": 2.33799987472594,
          "dns": -1,
          "connect": -1,
          "send": 0.0839999411255099,
          "wait": 2506.5780000295485,
          "receive": 5757.215999998152,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.629Z",
        "time": 8266.152000054717,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.knowledge.csdn.net/upload/base/1452500582376_376.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 11 Jan 2016 08:23:03 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"56936667-a7f\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "2687"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2687,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMqaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjUtYzAxNCA3OS4xNTE0ODEsIDIwMTMvMDMvMTMtMTI6MDk6MTUgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NDBCMzBDNURBRTk3MTFFNUE3MUNDMEE1RDFCQUQ2RjUiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NDBCMzBDNUVBRTk3MTFFNUE3MUNDMEE1RDFCQUQ2RjUiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MEIzMEM1QkFFOTcxMUU1QTcxQ0MwQTVEMUJBRDZGNSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MEIzMEM1Q0FFOTcxMUU1QTcxQ0MwQTVEMUJBRDZGNSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEAAYEBAQFBAYFBQYJBgUGCQsIBgYI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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2824
        },
        "cache": {},
        "timings": {
          "blocked": 2.25499994121492,
          "dns": -1,
          "connect": -1,
          "send": 0.04400010220706019,
          "wait": 2671.998000005258,
          "receive": 5591.855000006037,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.629Z",
        "time": 10835.150999948382,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.knowledge.csdn.net/upload/base/1473751990490_490.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 13 Sep 2016 07:33:14 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"57d7abba-132c\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "4908"
            }
          ],
          "cookies": [],
          "content": {
            "size": 4908,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABGAAD/4QNyaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjUtYzAxNCA3OS4xNTE0ODEsIDIwMTMvMDMvMTMtMTI6MDk6MTUgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NDBCMzBDNUVBRTk3MTFFNUE3MUNDMEE1RDFCQUQ2RjUiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NkQ4QTUxMDk3ODkwMTFFNkI2QkNCOEVCRjA3RTMzNjciIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NkQ4QTUxMDg3ODkwMTFFNkI2QkNCOEVCRjA3RTMzNjciIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjNiN2Y5YjdjLTA5YTUtOTQ0Yy05ODQ1LTljMDVhMWM1MzAxMyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MEIzMEM1RUFFOTcxMUU1QTcxQ0MwQTVEMUJBRDZGNSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5046
        },
        "cache": {},
        "timings": {
          "blocked": 2.45699984952807,
          "dns": -1,
          "connect": -1,
          "send": 0.04500010982156022,
          "wait": 3182.56599991582,
          "receive": 7650.083000073213,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.629Z",
        "time": 20516.406000126153,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.knowledge.csdn.net/upload/base/1478154582437_437.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 03 Nov 2016 06:29:46 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"581ad95a-4d8f\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "19855"
            }
          ],
          "cookies": [],
          "content": {
            "size": 19855,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 19995
        },
        "cache": {},
        "timings": {
          "blocked": 2.39000003784895,
          "dns": -1,
          "connect": -1,
          "send": 0.04200008697808011,
          "wait": 2671.841999981553,
          "receive": 17842.132000019774,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.629Z",
        "time": 10885.259999893606,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.knowledge.csdn.net/upload/base/1479972981201_201.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 07:36:25 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58369879-17c8\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "6088"
            }
          ],
          "cookies": [],
          "content": {
            "size": 6088,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 6227
        },
        "cache": {},
        "timings": {
          "blocked": 2.30999989435077,
          "dns": -1,
          "connect": -1,
          "send": 0.04200008697808011,
          "wait": 2890.0939999148213,
          "receive": 7992.8139999974555,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.629Z",
        "time": 13904.100000159815,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170124/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0100x100.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 24 Jan 2017 06:50:20 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5886f92c-20b6\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "8374"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8374,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 8512
        },
        "cache": {},
        "timings": {
          "blocked": 2.23199999891222,
          "dns": -1,
          "connect": -1,
          "send": 0.02500019036232981,
          "wait": 2932.2569998912554,
          "receive": 10969.586000079285,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.630Z",
        "time": 10827.759000007063,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170109/%E7%AC%AC%E4%BA%8C%E6%9C%9F%EF%BC%9A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F100x100.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 09 Jan 2017 05:48:33 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58732431-14e8\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "5352"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5352,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QONaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzA2NyA3OS4xNTc3NDcsIDIwMTUvMDMvMzAtMjM6NDA6NDIgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MDBmYTE5ZWMtMDcyOC1lZDQ5LTlmM2YtZTVjN2M4ODU2YTUzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjM1RTQ2NUUwRDYyRjExRTZCQzgxRjA3Njk5NURCNkNCIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjM1RTQ2NURGRDYyRjExRTZCQzgxRjA3Njk5NURCNkNCIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1IChXaW5kb3dzKSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOmU4ODAzYzY5LWM4MDMtYTY0ZC1hMjlmLTk1MTc2ZWNhMGQxYyIgc3RSZWY6ZG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmMxZmJhZDhmLWQzZDgtMTFlNi04ZThiLWU3Y2JkMThmZjcwZiIvPiA8L3Jk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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5490
        },
        "cache": {},
        "timings": {
          "blocked": 2.05700006335974,
          "dns": -1,
          "connect": -1,
          "send": 0.018999911844729933,
          "wait": 2890.4810000676657,
          "receive": 7935.2019999641925,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.630Z",
        "time": 8432.008999865502,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170104/android-view.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 04 Jan 2017 03:49:25 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"586c70c5-b54\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "2900"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2900,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMvaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzA2NyA3OS4xNTc3NDcsIDIwMTUvMDMvMzAtMjM6NDA6NDIgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpCNkI2MDQ1MEQyMzAxMUU2ODdCOEIwMTUwNzU3RjkwNiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpCNkI2MDQ1MUQyMzAxMUU2ODdCOEIwMTUwNzU3RjkwNiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkI2QjYwNDRFRDIzMDExRTY4N0I4QjAxNTA3NTdGOTA2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkI2QjYwNDRGRDIzMDExRTY4N0I4QjAxNTA3NTdGOTA2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJ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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3037
        },
        "cache": {},
        "timings": {
          "blocked": 1.93799985572696,
          "dns": -1,
          "connect": -1,
          "send": 0.018000137060879995,
          "wait": 2890.210999874402,
          "receive": 5539.8419999983125,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.630Z",
        "time": 9649.244999978691,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20161229/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91100x100.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 29 Dec 2016 06:27:54 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5864acea-e40\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "3648"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3648,
            "mimeType": "image/jpeg",
            "text": "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMvaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzA2NyA3OS4xNTc3NDcsIDIwMTUvMDMvMzAtMjM6NDA6NDIgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowRjBGNEZGNkNEOEYxMUU2QjY3OERFQkIzRjk2QTIxMCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDowRjBGNEZGN0NEOEYxMUU2QjY3OERFQkIzRjk2QTIxMCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjBGMEY0RkY0Q0Q4RjExRTZCNjc4REVCQjNGOTZBMjEwIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjBGMEY0RkY1Q0Q4RjExRTZCNjc4REVCQjNGOTZBMjEwIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJ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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3785
        },
        "cache": {},
        "timings": {
          "blocked": 1.82999996468425,
          "dns": -1,
          "connect": -1,
          "send": 0.018999911844729933,
          "wait": 2971.261000027881,
          "receive": 6676.135000074281,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.630Z",
        "time": 9649.231999879703,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20161229/100x110.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 29 Dec 2016 06:24:44 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5864ac2c-1043\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "4163"
            }
          ],
          "cookies": [],
          "content": {
            "size": 4163,
            "mimeType": "image/jpeg",
            "text": "/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+EDLWh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMwNjcgNzkuMTU3NzQ3LCAyMDE1LzAzLzMwLTIzOjQwOjQyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjcwOUVBNUY5Q0Q4RjExRTY5MzdBQkRCODQwODQ1MEUzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjcwOUVBNUZBQ0Q4RjExRTY5MzdBQkRCODQwODQ1MEUzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NzA5RUE1RjdDRDhGMTFFNjkzN0FCREI4NDA4NDUwRTMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NzA5RUE1RjhDRDhGMTFFNjkzN0FCREI4NDA4NDUwRTMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYGCAsMCgoL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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 4301
        },
        "cache": {},
        "timings": {
          "blocked": 1.69099983759224,
          "dns": -1,
          "connect": -1,
          "send": 0.022000167518860136,
          "wait": 2889.485999941829,
          "receive": 6758.032999932762,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.674Z",
        "time": 27703.14500015229,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/images.csdn.net/20170104/1%E6%9C%88.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 04 Jan 2017 02:12:14 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"586c59fe-89b4\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "35252"
            }
          ],
          "cookies": [],
          "content": {
            "size": 35252,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 35390
        },
        "cache": {},
        "timings": {
          "blocked": 0.645000021904707,
          "dns": -1,
          "connect": -1,
          "send": 0.12700003571808305,
          "wait": 3209.183000028137,
          "receive": 24493.19000006653,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.871Z",
        "time": 8290.19399988465,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/pic_foot_gongshang.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:28 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8b4-b14\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "2836"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2836,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2972
        },
        "cache": {},
        "timings": {
          "blocked": 2.19899998046458,
          "dns": -1,
          "connect": -1,
          "send": 0.08999998681247012,
          "wait": 3010.929999873043,
          "receive": 5276.97500004433,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.871Z",
        "time": 8290.110000176355,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/pic_foot_BNIA.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:28 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8b4-c84\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "3204"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3204,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3340
        },
        "cache": {},
        "timings": {
          "blocked": 2.07499996758997,
          "dns": -1,
          "connect": -1,
          "send": 0.056000193580989954,
          "wait": 3164.150999858979,
          "receive": 5123.828000156205,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.871Z",
        "time": 8290.078999940306,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/pic_foot_report.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:28 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8b4-aac\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "2732"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2732,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2868
        },
        "cache": {},
        "timings": {
          "blocked": 2.22499994561076,
          "dns": -1,
          "connect": -1,
          "send": 0.06400002166629015,
          "wait": 3270.155000034723,
          "receive": 5017.634999938306,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.871Z",
        "time": 8290.02399998717,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/pic_foot_report110.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:29 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8b5-aa3\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "2723"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2723,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2859
        },
        "cache": {},
        "timings": {
          "blocked": 2.13099992834032,
          "dns": -1,
          "connect": -1,
          "send": 0.05599996075034008,
          "wait": 3163.9540002215695,
          "receive": 5123.88299987651,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.872Z",
        "time": 7168.403999879956,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/ali.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 14 Sep 2016 03:00:04 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"57d8bd34-706\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "1798"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1798,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAKQAAAAaCAYAAAA5dfdEAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyFpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDE0IDc5LjE1MTQ4MSwgMjAxMy8wMy8xMy0xMjowOToxNSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RDdGQzI4RTA3QTFDMTFFNkI5QzZGREY2QkM4RTFDQkIiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RDdGQzI4REY3QTFDMTFFNkI5QzZGREY2QkM4RTFDQkIiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjUxRjA5QkU1NzhDRjExRTZBMjA5RUY4Njk4RDc5RUE1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjUxRjA5QkU2NzhDRjExRTZBMjA5RUY4Njk4RDc5RUE1Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+a0u3QQAAA3tJREFUeNrsm11oTnEcx895tmdjs81bImTy0ooL8rK2C0beX4rJyw0tL4mSuMINxS7kgpV3V6SQFXJDeS+GNhpjWSYWw0I2s5nZHt9f+576ObbMcqFzft/6dP7nnP9z2s7zPb+X/+lxY7GYYzL9L4rYLTCZIU0mM6TJDGkymSFNZkiTyQxpCqLiw/KPZmVlyyYfrAHdgAuivAclIJNTl4MToJm08Hgx2ARKfZeO45wo91u5beED3+q71z/U51zO04vBUe57x1zvc0VFd8yQAdIOsK2Dc9fVWL71ryBZmUw0BdwEw8EHHisEo0AtKAALwSCQCFLBAbAPHAQzwUdes5VGE5LAenCVn98Dvrdj5FXgthkyONroM+BDcIvbKnWuEvQHGTShGG4u6AvSwDKwn0aSOTfANPCGkXUweAFOqign1zkHjoA8sBLkgkZwAWTTkI/AZmVGXVq9tJQdLCVxexnM+sPceqboYu7PAxc5HqBS7lPwDlwDdYyEYsKtjKZeJK0A7xnlMmmwdeA8uOt7GCqthgyHmkBCFyPNKzVuVrWipNyljIbdeayMETGOOEzhEg2vcN5AcIlGTVF14iT+nS6jcYuqKyXd3zdDBjdSao1janZYv0nk+qbOp6qxbjbE4OUgnbVlGdNuT0ZBb246U/1Z0I9NlaT20WA260bRTjCepq+geWO81utORHYzZMjVm533BrAAVKvIqe/vLjCSxo7SYMmMoItVUyWNzz3Wlfl8eCJ8OFxL2cFUQzvHSkhHqlNj19ds1NOEiYyEEvmeM9ImcN4ZpvZGNkcNrD8TfA2V13WfYupuYjQ9StMHXmFaGE/kdmgXPjtEjaMqddeAQ6AP2AsmgjHswnsp80rNOJ+M5bk53J+qrp3DaFiujsn+BLDEImTwIqNEpBm+ZZ8Hvigl6tHOso+nt+phHgaeOW1rnE9oyAYuMU0Gazk3jcb9AhaBEeAw7388a87PrBFTaMxkGvoTU/t0cMwMGRzJwvV2FYlyWP+JdoMtHIvJSmkIv2QB/DTH0gE/5hJPlerGM2j6XLWEs5pmq6WRqxlFI0zReU7bgnwNG5oCnnNZDojJC8PwJblh+QnDX7w6XAGOO51/dfjbPXV+fRXoqEZGrqVfHXpBQR+P+Dr0ONajThheHbr2mxqTNTUmkxnSZIY0mcyQJjOkyfSP9FOAAQBDHM/Hsu60fAAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1934
        },
        "cache": {},
        "timings": {
          "blocked": 2.03499989584088,
          "dns": -1,
          "connect": -1,
          "send": 0.03300001844763978,
          "wait": 3270.2389999758416,
          "receive": 3896.096999989826,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.872Z",
        "time": 39951.952000148594,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Wed, 23 Mar 2016 03:55:30 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"56f213b2-17630\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 95792,
            "mimeType": "application/javascript",
            "text": "/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */\r\n!function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=\"1.11.1\",m=function(a,b){return new m.fn.init(a,b)},n=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,o=/^-ms-/,p=/-([\\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:\"jQuery\"+(l+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===m.type(a)},isArray:Array.isArray||function(a){return\"array\"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,\"constructor\")&&!j.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?h[i.call(a)]||\"object\":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,\"ms-\").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(n,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,\"string\"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(a,b){h[\"[object \"+b+\"]\"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return\"function\"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C=\"undefined\",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",N=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",O=N.replace(\"w\",\"w#\"),P=\"\\\\[\"+M+\"*(\"+N+\")(?:\"+M+\"*([*^$|!~]?=)\"+M+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+O+\"))|)\"+M+\"*\\\\]\",Q=\":(\"+N+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+P+\")*)|.*)\\\\)|)\",R=new RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),S=new RegExp(\"^\"+M+\"*,\"+M+\"*\"),T=new RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=new RegExp(\"=\"+M+\"*([^\\\\]'\\\"]*?)\"+M+\"*\\\\]\",\"g\"),V=new RegExp(Q),W=new RegExp(\"^\"+O+\"$\"),X={ID:new RegExp(\"^#(\"+N+\")\"),CLASS:new RegExp(\"^\\\\.(\"+N+\")\"),TAG:new RegExp(\"^(\"+N.replace(\"w\",\"w*\")+\")\"),ATTR:new RegExp(\"^\"+P),PSEUDO:new RegExp(\"^\"+Q),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+L+\")$\",\"i\"),needsContext:new RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\\d$/i,$=/^[^{]+\\{\\s*\\[native \\w/,_=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ab=/[+~]/,bb=/'|\\\\/g,cb=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+M+\"?|(\"+M+\")|.)\",\"ig\"),db=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||\"string\"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&\"object\"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute(\"id\"))?s=r.replace(bb,\"\\\\$&\"):b.setAttribute(\"id\",s),s=\"[id='\"+s+\"'] \",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(\",\")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute(\"id\")}}}return i(a.replace(R,\"$1\"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split(\"|\"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener(\"unload\",function(){m()},!1):g.attachEvent&&g.attachEvent(\"onunload\",function(){m()})),c.attributes=ib(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML=\"<div class='a'></div><div class='a i'></div>\",a.firstChild.className=\"i\",2===a.getElementsByClassName(\"i\").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML=\"<select msallowclip=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowclip^='']\").length&&q.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+M+\"*(?:value|\"+L+\")\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\")}),ib(function(a){var b=e.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+M+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",Q)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,\"='$1']\"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||\"\").replace(cb,db),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+M+\")\"+a+\"(\"+M+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,\"$1\"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||\"\")||fb.error(\"unsupported lang: \"+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(R,\"$1\"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q=\"0\",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG(\"*\",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ib(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||jb(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||jb(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute(\"disabled\")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[\":\"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,v=/^.[^:#\\[\\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if(\"string\"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+\" \"+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,\"string\"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if(\"string\"==typeof a){if(c=\"<\"===a.charAt(0)&&\">\"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?\"undefined\"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||\"string\"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?\"string\"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,\"parentNode\")},parentsUntil:function(a,b,c){return m.dir(a,\"parentNode\",c)},next:function(a){return D(a,\"nextSibling\")},prev:function(a){return D(a,\"previousSibling\")},nextAll:function(a){return m.dir(a,\"nextSibling\")},prevAll:function(a){return m.dir(a,\"previousSibling\")},nextUntil:function(a,b,c){return m.dir(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return m.dir(a,\"previousSibling\",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,\"iframe\")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a=\"string\"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);\"function\"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&\"string\"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",m.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",m.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",m.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler(\"ready\"),m(y).off(\"ready\")))}}});function I(){y.addEventListener?(y.removeEventListener(\"DOMContentLoaded\",J,!1),a.removeEventListener(\"load\",J,!1)):(y.detachEvent(\"onreadystatechange\",J),a.detachEvent(\"onload\",J))}function J(){(y.addEventListener||\"load\"===event.type||\"complete\"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),\"complete\"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener(\"DOMContentLoaded\",J,!1),a.addEventListener(\"load\",J,!1);else{y.attachEvent(\"onreadystatechange\",J),a.attachEvent(\"onload\",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll(\"left\")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K=\"undefined\",L;for(L in m(k))break;k.ownLast=\"0\"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement(\"div\");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+\" \").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute(\"classid\")===b};var M=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d=\"data-\"+b.replace(N,\"-$1\").toLowerCase();if(c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if((\"data\"!==b||!m.isEmptyObject(a[b]))&&\"toJSON\"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;\r\nif(k&&j[k]&&(e||j[k].data)||void 0!==d||\"string\"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),(\"object\"==typeof b||\"function\"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),\"string\"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(\" \")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{\"applet \":!0,\"embed \":!0,\"object \":\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,\"parsedAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,\"parsedAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks(\"once memory\").add(function(){m._removeData(a,b+\"queue\"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=m._data(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=[\"Top\",\"Right\",\"Bottom\",\"Left\"],U=function(a,b){return a=b||a,\"none\"===m.css(a,\"display\")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement(\"input\"),b=y.createElement(\"div\"),c=y.createDocumentFragment();if(b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName(\"tbody\").length,k.htmlSerialize=!!b.getElementsByTagName(\"link\").length,k.html5Clone=\"<:nav></:nav>\"!==y.createElement(\"nav\").cloneNode(!0).outerHTML,a.type=\"checkbox\",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML=\"<textarea>x</textarea>\",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML=\"<input type='radio' checked='checked' name='t'/>\",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent(\"onclick\",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement(\"div\");for(b in{submit:!0,change:!0,focusin:!0})c=\"on\"+b,(k[b+\"Bubbles\"]=c in a)||(d.setAttribute(c,\"t\"),k[b+\"Bubbles\"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||\"\").match(E)||[\"\"],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||\"\").split(\".\").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(\".\")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent(\"on\"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||\"\").match(E)||[\"\"],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&(\"**\"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,\"events\"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,\"type\")?b.type:b,q=j.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(\".\")>=0&&(q=p.split(\".\"),p=q.shift(),q.sort()),g=p.indexOf(\":\")<0&&\"on\"+p,b=b[m.expando]?b:new m.Event(p,\"object\"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join(\".\"),b.namespace_re=b.namespace?new RegExp(\"(^|\\\\.)\"+q.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,\"events\")||{})[b.type]&&m._data(h,\"handle\"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,\"events\")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||\"click\"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+\" \",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return m.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d=\"on\"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,\"form\")?!1:void m.event.add(this,\"click._submit keypress._submit\",function(a){var b=a.target,c=m.nodeName(b,\"input\")||m.nodeName(b,\"button\")?b.form:void 0;c&&!m._data(c,\"submitBubbles\")&&(m.event.add(c,\"submit._submit\",function(a){a._submit_bubble=!0}),m._data(c,\"submitBubbles\",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate(\"submit\",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,\"form\")?!1:void m.event.remove(this,\"._submit\")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(m.event.add(this,\"propertychange._change\",function(a){\"checked\"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,\"click._change\",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate(\"change\",this,a,!0)})),!1):void m.event.add(this,\"beforeactivate._change\",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,\"changeBubbles\")&&(m.event.add(b,\"change._change\",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate(\"change\",this.parentNode,a,!0)}),m._data(b,\"changeBubbles\",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||\"radio\"!==b.type&&\"checkbox\"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,\"._change\"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if(\"object\"==typeof a){\"string\"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&(\"string\"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||\"function\"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split(\"|\"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",fb=/ jQuery\\d+=\"(?:null|\\d+)\"/g,gb=new RegExp(\"<(?:\"+eb+\")[\\\\s/>]\",\"i\"),hb=/^\\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,jb=/<([\\w:]+)/,kb=/<tbody/i,lb=/<|&#?\\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\\s*(?:[^=]|=\\s*.checked.)/i,ob=/^$|\\/(?:java|ecma)script/i,pb=/^true\\/(.*)/,qb=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,rb={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:k.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},sb=db(y),tb=sb.appendChild(y.createElement(\"div\"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||\"*\"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||\"*\"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,\"table\")&&m.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function xb(a){return a.type=(null!==m.find.attr(a,\"type\"))+\"/\"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,\"globalEval\",!b||m._data(b[d],\"globalEval\"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}\"script\"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):\"object\"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):\"input\"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):\"option\"===c?b.defaultSelected=b.selected=a.defaultSelected:(\"input\"===c||\"textarea\"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test(\"<\"+a.nodeName+\">\")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,\"script\"),d.length>0&&zb(d,!i&&ub(a,\"script\")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if(\"object\"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement(\"div\")),i=(jb.exec(f)||[\"\",\"\"])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,\"<$1></$2>\")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f=\"table\"!==i||kb.test(f)?\"<table>\"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],\"tbody\")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent=\"\";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,\"input\"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),\"script\"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||\"\")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,\"script\")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,\"select\")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,\"\"):void 0;if(!(\"string\"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||[\"\",\"\"])[1].toLowerCase()])){a=a.replace(ib,\"<$1></$2>\");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&\"string\"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,\"script\"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,\"script\"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||\"\")&&!m._data(d,\"globalEval\")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||\"\").replace(qb,\"\")));i=c=null}return this}}),m.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],\"display\");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),\"none\"!==c&&c||(Cb=(Cb||m(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName(\"body\")[0],c&&c.style?(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\",b.appendChild(y.createElement(\"div\")).style.width=\"5px\",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp(\"^(\"+S+\")(?!px)[a-z%]+$\",\"i\"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(\"\"!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+\"\"}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left=\"fontSize\"===b?\"1em\":g,g=h.pixelLeft+\"px\",h.left=d,f&&(e.left=f)),void 0===g?g:g+\"\"||\"auto\"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement(\"div\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=d&&d.style){c.cssText=\"float:left;opacity:.5\",k.opacity=\"0.5\"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip=\"content-box\",b.cloneNode(!0).style.backgroundClip=\"\",k.clearCloneStyle=\"content-box\"===b.style.backgroundClip,k.boxSizing=\"\"===c.boxSizing||\"\"===c.MozBoxSizing||\"\"===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),b.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\",e=f=!1,h=!0,a.getComputedStyle&&(e=\"1%\"!==(a.getComputedStyle(b,null)||{}).top,f=\"4px\"===(a.getComputedStyle(b,null)||{width:\"4px\"}).width,i=b.appendChild(y.createElement(\"div\")),i.style.cssText=b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",i.style.marginRight=i.style.width=\"0\",b.style.width=\"1px\",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",i=b.getElementsByTagName(\"td\"),i[0].style.cssText=\"margin:0;border:0;padding:0;display:none\",g=0===i[0].offsetHeight,g&&(i[0].style.display=\"\",i[1].style.display=\"none\",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\\([^)]*\\)/i,Nb=/opacity\\s*=\\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp(\"^(\"+S+\")(.*)$\",\"i\"),Qb=new RegExp(\"^([+-])=(\"+S+\")\",\"i\"),Rb={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Sb={letterSpacing:\"0\",fontWeight:\"400\"},Tb=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&U(d)&&(f[g]=m._data(d,\"olddisplay\",Fb(d.nodeName)))):(e=U(d),(c&&\"none\"!==c||!e)&&m._data(d,\"olddisplay\",e?c:m.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||\"px\"):b}function Xb(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=m.css(a,c+T[f],!0,e)),d?(\"content\"===c&&(g-=m.css(a,\"padding\"+T[f],!0,e)),\"margin\"!==c&&(g-=m.css(a,\"border\"+T[f]+\"Width\",!0,e))):(g+=m.css(a,\"padding\"+T[f],!0,e),\"padding\"!==c&&(g+=m.css(a,\"border\"+T[f]+\"Width\",!0,e)));return g}function Yb(a,b,c){var d=!0,e=\"width\"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?\"border\":\"content\"),d,f)+\"px\"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":k.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,\"string\"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f=\"number\"),null!=c&&c===c&&(\"number\"!==f||m.cssNumber[h]||(c+=\"px\"),k.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),!(g&&\"set\"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&\"get\"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),\"normal\"===f&&b in Sb&&(f=Sb[b]),\"\"===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each([\"height\",\"width\"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,\"display\"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":b?\"1\":\"\"},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?\"alpha(opacity=\"+100*b+\")\":\"\",f=d&&d.filter||c.filter||\"\";c.zoom=1,(b>=1||\"\"===b)&&\"\"===m.trim(f.replace(Mb,\"\"))&&c.removeAttribute&&(c.removeAttribute(\"filter\"),\"\"===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+\" \"+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:\"inline-block\"},Jb,[a,\"marginRight\"]):void 0}),m.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||\"swing\",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?\"\":\"px\")\r\n},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp(\"^(?:([+-])=|)(\"+S+\")([a-z%]*)$\",\"i\"),cc=/queueHooks$/,dc=[ic],ec={\"*\":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?\"\":\"px\"),g=(m.cssNumber[a]||\"px\"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||\".5\",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d[\"margin\"+c]=d[\"padding\"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,\"fxshow\");c.queue||(h=m._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,\"display\"),l=\"none\"===j?m._data(a,\"olddisplay\")||Fb(a.nodeName):j,\"inline\"===l&&\"none\"===m.css(a,\"float\")&&(k.inlineBlockNeedsLayout&&\"inline\"!==Fb(a.nodeName)?p.zoom=1:p.display=\"inline-block\")),c.overflow&&(p.overflow=\"hidden\",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(q?\"hide\":\"show\")){if(\"show\"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))\"inline\"===(\"none\"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?\"hidden\"in r&&(q=r.hidden):r=m._data(a,\"fxshow\",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,\"fxshow\");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=[\"*\"]):a=a.split(\" \");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&\"object\"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=m._data(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc(\"show\"),slideUp:gc(\"hide\"),slideToggle:gc(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||\"fx\",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement(\"div\"),b.setAttribute(\"className\",\"t\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=y.createElement(\"select\"),e=c.appendChild(y.createElement(\"option\")),a=b.getElementsByTagName(\"input\")[0],d.style.cssText=\"top:1px\",k.getSetAttribute=\"t\"!==b.className,k.style=/top/.test(d.getAttribute(\"style\")),k.hrefNormalized=\"/a\"===d.getAttribute(\"href\"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement(\"form\").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement(\"input\"),a.setAttribute(\"value\",\"\"),k.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),k.radioValue=\"t\"===a.value}();var lc=/\\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":m.isArray(e)&&(e=m.map(e,function(a){return null==a?\"\":a+\"\"})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(lc,\"\"):null==c?\"\":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,\"value\");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute(\"disabled\"))||c.parentNode.disabled&&m.nodeName(c.parentNode,\"optgroup\"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each([\"radio\",\"checkbox\"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&\"get\"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&\"set\"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+\"\"),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase(\"default-\"+c)]=a[d]=!1:m.attr(a,c,\"\"),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&\"radio\"===b&&m.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase(\"default-\"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase(\"default-\"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,\"input\")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+=\"\",\"value\"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&\"\"!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,\"\"===b?!1:b,c)}},m.each([\"width\",\"height\"],function(a,b){m.attrHooks[b]={set:function(a,c){return\"\"===c?(a.setAttribute(b,\"auto\"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+\"\"}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,\"tabindex\");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each([\"href\",\"src\"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype=\"encoding\");var uc=/[\\t\\r\\n\\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\" \")){f=0;while(e=b[f++])d.indexOf(\" \"+e+\" \")<0&&(d+=e+\" \");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\"\")){f=0;while(e=b[f++])while(d.indexOf(\" \"+e+\" \")>=0)d=d.replace(\" \"+e+\" \",\" \");g=a?m.trim(d):\"\",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if(\"string\"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||\"boolean\"===c)&&(this.className&&m._data(this,\"__className__\",this.className),this.className=this.className||a===!1?\"\":m._data(this,\"__className__\")||\"\")})},hasClass:function(a){for(var b=\" \"+a+\" \",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(\" \"+this[c].className+\" \").replace(uc,\" \").indexOf(b)>=0)return!0;return!1}}),m.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)}});var vc=m.now(),wc=/\\?/,xc=/(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+\"\");var c,d=null,e=m.trim(b+\"\");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,\"\")}))?Function(\"return \"+e)():m.error(\"Invalid JSON: \"+b)},m.parseXML=function(b){var c,d;if(!b||\"string\"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,\"text/xml\")):(c=new ActiveXObject(\"Microsoft.XMLDOM\"),c.async=\"false\",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName(\"parsererror\").length||m.error(\"Invalid XML: \"+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\\/\\//,Gc=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,Hc={},Ic={},Jc=\"*/\".concat(\"*\");try{zc=location.href}catch(Kc){zc=y.createElement(\"a\"),zc.href=\"\",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])\"+\"===d.charAt(0)?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+\" \"+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:\"GET\",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Jc,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":m.parseJSON,\"text xml\":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){\"object\"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks(\"once memory\"),q=k.statusCode||{},r={},s={},t=0,u=\"canceled\",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+\"\").replace(Ac,\"\").replace(Fc,yc[1]+\"//\"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||\"*\").toLowerCase().match(E)||[\"\"],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||(\"http:\"===c[1]?\"80\":\"443\"))===(yc[3]||(\"http:\"===yc[1]?\"80\":\"443\")))),k.data&&k.processData&&\"string\"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger(\"ajaxStart\"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?\"&\":\"?\")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,\"$1_=\"+vc++):e+(wc.test(e)?\"&\":\"?\")+\"_=\"+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader(\"If-Modified-Since\",m.lastModified[e]),m.etag[e]&&v.setRequestHeader(\"If-None-Match\",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader(\"Content-Type\",k.contentType),v.setRequestHeader(\"Accept\",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+(\"*\"!==k.dataTypes[0]?\", \"+Jc+\"; q=0.01\":\"\"):k.accepts[\"*\"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u=\"abort\";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger(\"ajaxSend\",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort(\"timeout\")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,\"No Transport\");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||\"\",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader(\"Last-Modified\"),w&&(m.lastModified[e]=w),w=v.getResponseHeader(\"etag\"),w&&(m.etag[e]=w)),204===a||\"HEAD\"===k.type?x=\"nocontent\":304===a?x=\"notmodified\":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x=\"error\",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+\"\",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?\"ajaxSuccess\":\"ajaxError\",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger(\"ajaxComplete\",[v,k]),--m.active||m.event.trigger(\"ajaxStop\")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,\"json\")},getScript:function(a,b){return m.get(a,void 0,b,\"script\")}}),m.each([\"get\",\"post\"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,\"body\")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&\"none\"===(a.style&&a.style.display||m.css(a,\"display\"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\\[\\]$/,Sc=/\\r?\\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+\"[\"+(\"object\"==typeof e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==m.type(b))d(a,b);else for(e in b)Vc(a+\"[\"+e+\"]\",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join(\"&\").replace(Qc,\"+\")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,\"elements\");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(\":disabled\")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,\"\\r\\n\")}}):{name:b.name,value:c.replace(Sc,\"\\r\\n\")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on(\"unload\",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&\"withCredentials\"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c[\"X-Requested-With\"]||(c[\"X-Requested-With\"]=\"XMLHttpRequest\");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+\"\");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,\"string\"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=\"\"}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}m.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\",a.global=!1)}),m.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c=y.head||m(\"head\")[0]||y.documentElement;return{send:function(d,e){b=y.createElement(\"script\"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,\"success\"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\\?(?=&|$)|\\?\\?/;m.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=_c.pop()||m.expando+\"_\"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?\"url\":\"string\"==typeof b.data&&!(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&ad.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,\"$1\"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||m.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),m.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if(\"string\"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(f=\"POST\"),g.length>0&&m.ajax({url:a,type:f,dataType:\"html\",data:b}).done(function(a){e=arguments,g.html(d?m(\"<div>\").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,\"position\"),l=m(a),n={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=m.css(a,\"top\"),i=m.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&m.inArray(\"auto\",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),\"using\"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return\"fixed\"===m.css(d,\"position\")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],\"html\")||(c=a.offset()),c.top+=m.css(a[0],\"borderTopWidth\",!0),c.left+=m.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-c.top-m.css(d,\"marginTop\",!0),left:b.left-c.left-m.css(d,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,\"html\")&&\"static\"===m.css(a,\"position\"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each([\"top\",\"left\"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+\"px\":c):void 0})}),m.each({Height:\"height\",Width:\"width\"},function(a,b){m.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});\r\n\r\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 33643
        },
        "cache": {},
        "timings": {
          "blocked": 1.84000004082918,
          "dns": -1,
          "connect": -1,
          "send": 0.025999965146190185,
          "wait": 3714.3330001272248,
          "receive": 36235.75300001539,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.872Z",
        "time": 21641.39200001955,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/ads.csdn.net/js/tracking.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Wed, 04 May 2016 10:48:04 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5729d364-279a\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 10138,
            "mimeType": "application/javascript",
            "text": "/*\n\t@function adv tracking\n\t@editer fjj\n\t@create_time 20151201\n**/\n(function(widnow,$csdn_iteye_jq,undefined){\n\tfunction TrackAdv(){\n\t\tthis.advs=[];  // 被载入广告位集合\n\t\tthis.advFlag={};  //  用于载入广告位去重\n\t\tthis.dataArr=[]; //缓存需要提交数据的广告对象\n\t\tthis.dataTimer=null;\n\t\tthis.swapImgSet=false;  //第一个轮播图广告位载入时 触发轮播图方法  之后不再不再触发\n\t\tthis.init();\n\t}\n\tTrackAdv.prototype={\n\t\tconstructor:\"Track\",\n\t\tinit:function(){\n\t\t\tvar self=this;\n\t\t\t//滚动处理函数  采用了事件节流 每隔100毫米计算一次\n\t\t\tvar scrollHandle=(function(){\n\t\t\t\tvar timer=null;\n\t\t\t\treturn function(){\n\t\t\t\t\tif(timer){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\ttimer=setTimeout(function(){\n\t\t\t\t\t\ttimer=null;\n\t\t\t\t\t\t/*if(self.advs.length === 0){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var i=0;i<self.advs.length;i++){\n\n\t\t\t\t\t\t\tif(self.advs[i].view && self.posTest(self.advs[i])){\n\t\t\t\t\t\t\t\tif(self.advs[i].ele.data(\"swapimg\") && !self.advs[i].ele.hasClass(\"curSwap\")){\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.advs[i].viewed=true;\n\t\t\t\t\t\t\t\t//self.sendData(self.advs[i]);\n\t\t\t\t\t\t\t\tif(!self.dataTimer){\n\t\t\t\t\t\t\t\t\tself.discreteSend();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.dataArr.push(self.advs[i]);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\tself.insertData();\n\t\t\t\t\t},100)\n\t\t\t\t}\n\t\t\t})();\n\t\t\t//关闭浏览器 关闭当前页 跳转到其他页面时 将没有提交的数据一次行提交\n\t\t\tvar unloadHandle=function(){\n\t\t\t\tif(self.dataArr.length ===0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor(var i=0,len=self.dataArr.length;i<len;i++){\n\t\t\t\t\tself.sendData(self.dataArr[i]);\n\t\t\t\t}\n\t\t\t\tself.dataArr=[];\n\t\t\t}\n\t\t\t//$csdn_iteye_jq(window).on(\"scroll\",scrollHandle);\n\t\t\t//$csdn_iteye_jq(window).on(\"unload\",unloadHandle);\n\t\t},\n\t\t//载入广告对象\n\t\taddAdvs:function(eleStr,opt){\n\t\t\tvar self=this,\n\t\t\t\teleStr=eleStr || \".J_adv\",\n\t\t\t\topt=typeof opt === \"object\"?opt:{},\n\t\t\t\toAdvs=$csdn_iteye_jq(eleStr),\n\t\t\t\tnAdvLen=oAdvs.length,\n\t\t\t\tpreAdr=document.referrer || \"-\";   // 前一个文档地址\n\t\t\tif(nAdvLen === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor(var i=0;i<nAdvLen;i++){\n\t\t\t\tvar adv={};\n\t\t\t\tvar mod=$csdn_iteye_jq(oAdvs[i]).data(\"mod\");\n\t\t\t\tif(this.advFlag[mod]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tadv.ele=$csdn_iteye_jq(oAdvs[i]);\n\t\t\t\tadv.top=$csdn_iteye_jq(oAdvs[i]).offset().top;\n\t\t\t\tadv.height=$csdn_iteye_jq(oAdvs[i]).height()?$csdn_iteye_jq(oAdvs[i]).height():$csdn_iteye_jq(oAdvs[i]).find(\"img\").height();\n\t\t\t\tadv.view=typeof $csdn_iteye_jq(oAdvs[i]).data(\"view\") === \"undefined\" ?true:$csdn_iteye_jq(oAdvs[i]).data(\"view\");  //  对应广告位是否需要曝光\n\t\t\t\tadv.viewed=false;   //被曝光时为true\n\t\t\t\tadv.data={\n\t\t\t\t\tuid:\"-\",\n\t\t\t\t\tref:preAdr,\n\t\t\t\t\tmod:adv.ele.data(\"mod\") || \"-\",\n\t\t\t\t\tmtp:opt.mtp || adv.ele.data(\"mtp\") || 1,\n\t\t\t\t\tcon:self.exportData(adv),\n\t\t\t\t\tck:\"-\"\n\t\t\t\t};\n\t\t\t\tif(adv.ele.data(\"swapimg\") && !this.swapImgSet){\n\t\t\t\t\t//只触发一次轮播图方法\n\t\t\t\t\t//adv.ele.addClass(\"curSwap\").parent().css(\"z-index\",100);\n\t\t\t\t\tcsdn.SwapImage.swap({\n\t\t        swapRoot: $csdn_iteye_jq( '.hot' )\n\t\t    \t});\n\t\t\t\t\tthis.swapImgSet=true;\n\t\t\t\t}\n\t\t\t\tif(this.posTest(adv) && adv.view){\n\t\t\t\t\tif($csdn_iteye_jq(oAdvs[i]).data(\"swapimg\")){  //是轮播图广告位的情况\n\t\t\t\t\t\tif($csdn_iteye_jq(oAdvs[i]).hasClass(\"curSwap\")){\n\t\t\t\t\t\t\tadv.viewed=true;\n\t\t\t\t\t\t\tthis.sendData(adv);\n\t\t\t\t\t\t\t/*this.dataArr.push(adv);\n\t\t\t\t\t\t\tif(!this.dataTimer){\n\t\t\t\t\t\t\t\tthis.discreteSend();\n\t\t\t\t\t\t\t}*/\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{ //如果不是轮播图的只要进入屏幕区域就算曝光\n\t\t\t\t\t\tadv.viewed=true;\n\n\t\t\t\t\t\t/*//如果定时提交数据的定时器没有开启的话，开启定时器\n\t\t\t\t\t\tthis.dataArr.push(adv);\n\t\t\t\t\t\tif(!this.dataTimer){\n\t\t\t\t\t\t\tthis.discreteSend();\n\t\t\t\t\t\t}*/\n\n\t\t\t\t\t\tthis.sendData(adv);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tthis.advs.push(adv);\n\t\t\t\tthis.linkNodes(adv);\n\t\t\t\t//this.expAdvs.push(adv);\n\t\t\t\tthis.advFlag[mod]=true;\n\t\t\t}\n\t\t},\n\n\t\t//判断广告位是否进入屏幕 进入即将广告对象缓存到(dataArr)中\n\t\tinsertData:function(){\n\t\t\tvar self=this;\n\t\t\tif(self.advs.length === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor(var i=0;i<self.advs.length;i++){\n\t\t\t\tif(self.advs[i].view && self.posTest(self.advs[i])){\n\t\t\t\t\tif(self.advs[i].ele.data(\"swapimg\") && !self.advs[i].ele.hasClass(\"curSwap\")){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tself.advs[i].viewed=true;\n\t\t\t\t\tself.sendData(self.advs[i]);\n\t\t\t\t\t/*//将广告对象添加到数据队列(dataArr)即可并等待提交\n\t\t\t\t\tself.dataArr.push(self.advs[i]);\n\n\t\t\t\t\t//如果定时提交数据的定时器没有开启的话，开启定时器\n\t\t\t\t\tif(!self.dataTimer){\n\t\t\t\t\t\tself.discreteSend();\n\t\t\t\t\t}*/\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\t//每隔1秒提交一次曝光数据(1条)\n\t\tdiscreteSend:function(){\n\t\t\tvar self=this;\n\t\t\tvar discreteHandle=function(){\n\t\t\t\tif(self.dataArr.length ===0){\n\t\t\t\t\tclearInterval(self.dataTimer);\n\t\t\t\t\tself.dataTimer=null;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvar i=0;\n\t\t\t\twhile(i<1){\n\t\t\t\t\tif(self.dataArr[0]){\n\t\t\t\t\t\tself.sendData(self.dataArr[0]);\n\t\t\t\t\t\tself.dataArr.shift();\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tclearInterval(self.dataTimer);\n\t\t\t\t\t\tself.dataTimer=null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.dataTimer=setInterval(discreteHandle,20);\n\t\t},\n\t\t// 获取曝光内容即广告位中所有连接的内容\n\t\texportData:function(adv){\n\t\t\tvar con=adv.ele.data(\"con\") || \"-\";\n\t\t\treturn !!adv.ele.data(\"order\")?con+\",ad_order_\"+adv.ele.data(\"order\"):con+\"-\"\n\t\t},\n\t\t// 测试广告位是否在曝光区域\n\t\tposTest:function(adv){\n\t\t\t//修改曝光规则\n\t\t\tif(adv.viewed){\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t// 获取广告位中所有的连接且添加click事件\n\t\tlinkNodes:function(adv){\n\t\t\tvar self=this;\n\t\t\tvar aLinks=adv.ele.find(\"a\");\n\t\t\tvar iframeLinks=adv.ele.find(\"iframe\")\n\t\t\tif(aLinks.length === 0 && iframeLinks.length === 0 ){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\taLinks.each(function(){\n\t\t\t\tif($csdn_iteye_jq(this).attr(\"target\") == undefined){\n\t\t\t\t\t$csdn_iteye_jq(this).attr(\"target\",\"_blank\");\n\t\t\t\t}\n\t\t\t\t$csdn_iteye_jq(this).on(\"click\",function(){\n\t\t\t\t\tcon=self.linkData(this);\n\t\t\t\t\tself.sendData(adv,con);\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\t//获取点击元素的内容\n\t\tlinkData:function(that){\n\t\t\tvar ck=\"\"+that.href;\n\t\t\tvar conStr;\n\t\t\tif($csdn_iteye_jq(that).find(\"img\").length){\n\t\t\t\tconStr=$csdn_iteye_jq(that).find(\"img\").eq(0).attr(\"title\") || $csdn_iteye_jq(that).find(\"img\").eq(0).attr(\"alt\")\n\n\t\t\t}else{\n\t\t\t\tconStr=$csdn_iteye_jq(that).html();\n\t\t\t}\n\t\t\tck+=conStr?\";\"+conStr:\"\";\n\t\t\treturn ck;\n\t\t},\n\t\t//获取用户ID\n\t\tgetUserId:function(){\n\t\t\tvar result=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(widnow.document.cookie);\n\t\t\tvar uid= (result != null ? result[3] : void 0) || '-';\n\t\t\treturn uid;\n\t\t},\n\t\t//提交数据\n\t\tsendData:function(adv,con){\n\t\t\tadv.data.uid=this.getUserId();\n\t\t\tprotocol=\"http:\";\n\t\t\tif(typeof con === \"string\"){\n\t\t\t\tadv.data.ck=con;\n\t\t\t}\n\t\t\tvar dataStr=this.paramData(adv.data);\n\t\t\tvar img =new Image();\n\t\t\timg.onload=img.onerror=function(){\n\t\t\t\timg.onload=img.onerror=null;\n\t\t\t\timg=null;\n\t\t\t}\n\t\t\tif(typeof con === \"string\"){\n\t\t\t\timg.src=protocol+\"//dc.csdn.net/re?\"+dataStr;\n\t\t\t}\n\t\t},\n\t\t//数据转换为字符串形式\n\t\tparamData:function(data){\n\t\t\tvar dataArr=[];\n\t\t\tfor(var key in data){\n\t\t\t\tvar text=key+\"=\"+data[key];\n\t\t\t\ttext.replace(/^\\s+|\\s+$/g,\"\");\n\t\t\t\tdataArr.push(text);\n\t\t\t}\n\t\t\treturn dataArr.join(\"&\")\n\t\t}\n\t\t//处理url\n\t\t/*handleUrl:function(url){\n\t\t\tif(typeof url === \"string\" && url.length >0 ){\n\t\t\t\tvar hostStr=url.split(\"://\")[1];\n\t\t\t\thostName=hostStr.split(\".\")[0];\n\t\t\t\tstrArr=hostStr.split(\"?\")[0].split(\"/\");\n\t\t\t\tfileName=strArr[strArr.length-1];\n\t\t\t\treturn hostName+\"_\"+fileName;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}*/\n\t}\n\t//轮播图   淡入淡出\n/*\tfunction SwapImg(opts,obj){\n\t\tif(!(this instanceof SwapImg)){\n\t\t\treturn new SwapImg(opts,obj);\n\n\t\t}\n\t\tthis.obj=obj;\n\t\tthis.parentSelector=opts.parentSelector || \".hot\";\n\t\tthis.swapSelector=opts.swapSelector || \".hot .J_adv\";\n\t\tthis.swapCur=\"curSwap\";\n\t\tthis.iconSelector=opts.iconSelector || \".js-tagRoot\";\n\t\tthis.iconCur=\"current\";\n\t\tthis.duration=opts.duration || 500;\n\t\tthis.interval=opts.interval || 3000;\n\t\tthis.lastIndex=-1;\n\t\tthis.index=0;\n\t\tthis.swapFlag=false; //是否正在轮播中\n\t\tthis.timer=null;\n\t\tthis.init();\n\t}\n\tSwapImg.prototype={\n\t\tconstructor:SwapImg,\n\t\tinit:function(){\n\t\t\tvar self=this,\n\t\t\t\tswapNode=$csdn_iteye_jq(this.swapSelector),\n\t\t\t\tswapLen=swapNode.length,\n\t\t\t\ticonNode=$csdn_iteye_jq(this.iconSelector),\n\t\t\t\ticonStr=\"\";\n\t\t\tfor(var i=0;i<swapLen;i++){\n\t\t\t\ticonStr+=i==0?\"<li class='current'></li>\":\"<li></li>\";\n\t\t\t}\n\t\t\ticonNode.html(iconStr);\n\t\t\ticonNode.find(\"li\").each(function(i){\n\t\t\t\t$csdn_iteye_jq(this).on(\"click\",function(){\n\t\t\t\t\t//clearInterval(self.timer);\n\t\t\t\t\tif($csdn_iteye_jq(this).hasClass(\"current\") || self.swapFlag ){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tself.swapHandle(i);\n\t\t\t\t})\n\t\t\t});\n\t\t\tself.timer=setInterval(function(){\n\t\t\t\tself.swapHandle();\n\t\t\t},self.interval)\n\n\t\t\t$csdn_iteye_jq(self.parentSelector).hover(function(){\n\t\t\t\tclearInterval(self.timer)\n\t\t\t},function(){\n\t\t\t\tself.timer=setInterval(function(){\n\t\t\t\t\tself.swapHandle();\n\t\t\t\t},self.interval)\n\t\t\t});\n\t\t},\n\t\tswapHandle:function(i){\n\t\t\tvar self=this;\n\t\t\tself.swapFlag=true;\n\t\t\tself.lastIndex=self.index;\n\t\t\tself.index=typeof i === 'number'?i:++self.index%$(self.swapSelector).length;  //i || ....\n\t\t\t//self.index=i || ++self.index%$(self.swapSelector).length;\n\t\t\t$csdn_iteye_jq(self.iconSelector).find(\"li\").removeClass(\"current\").eq(self.index).addClass(\"current\");\n\t\t\t$csdn_iteye_jq(self.swapSelector).removeClass(\"curSwap\").eq(self.index).addClass(\"curSwap\");\n\t\t\t$csdn_iteye_jq(self.swapSelector).eq(self.index).animate({opacity:1},self.duration,function(){\n\t\t\t\t//$csdn_iteye_jq(this).parent().css(\"z-index\",100)\n\t\t\t\t$csdn_iteye_jq(this).parent().css({\"position\":\"absolute\",\"z-index\":\"100\",\"height\":\"200\",\"top\":\"0\",\"left\":\"0\"})\n\t\t\t});\n\t\t\t$csdn_iteye_jq(self.swapSelector).eq(self.lastIndex).animate({opacity:0},self.duration,function(){\n\t\t\t\t$csdn_iteye_jq(this).parent().css(\"z-index\",0)\n\t\t\t\tif(self.obj && typeof self.obj.insertData === \"function\"){\n\t\t\t\t\tself.obj.insertData();\n\t\t\t\t}\n\t\t\t\tself.swapFlag=false;\n\t\t\t})\n\t\t}\n\t}*/\n\twidnow.CSDN=widnow.CSDN?widnow.CSDN:{};\n\treturn window.CSDN.track=new TrackAdv();\n})(window,jQuery)"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 3663
        },
        "cache": {},
        "timings": {
          "blocked": 1.71099998988211,
          "dns": -1,
          "connect": -1,
          "send": 0.023999949917200114,
          "wait": 3396.4810001198207,
          "receive": 18243.17599995993,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.916Z",
        "time": 18175.026000011712,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/js/swapImg_openLayer.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 30 Jan 2017 10:20:02 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588f1352-1fcd\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8141,
            "mimeType": "application/javascript",
            "text": "/**\n * CSDN首页中\"图片轮播\"和\"导航展开\"功能\n * @author  liuwei@csdn.net(瓜籽：可以再好一点点！)\n */\nvar csdn = csdn || {};\n\ncsdn.SwapImage = ( function () {\n   /**\n    * 图片轮播\n    * @param   [ Object ]   ops\n    * @description\n    *      ops.imgArray:   轮播图片\n    */\n    function _SwapImage ( ops ) {\n        this.imgArray = ops.swapRoot.find( '.J_adv' );\n        this.maxImgLength = this.imgArray.length;\n\n        this.tagArray = null;\n        this.currentImage = null;\n        this.currentTag = null;\n        this.nextImage = null;\n        this.intervalTime = null;\n\n        this.duration = 500;    // 图片渐变的速度\n        this.swapTime = 3000;   // 图片交换的间隔\n        this.index = -1;    // 图片下标，默认从-1开始\n        this.nextIndex = -1; // 下一张图片的下标，默认从-1开始\n\n        this.init();\n    };\n\n    _SwapImage.prototype = {\n        init: function () {\n            var me = this;\n\n            this.imgArray.each( function ( i, item ) {\n                i == 0\n                    ? $( item ).css( { 'opacity': 1, 'display': 'list-item' } )\n                    : $( item ).css( { 'opacity': 0, 'display': 'none' } );\n            } );\n\n            this.creatImgTags();\n            setTimeout( function () {\n                me.reCall.call( me );\n                me.tagEvent.call( me );\n                me.imgEvent.call( me );\n            }, 1500 );\n        },\n\n        /**\n         * 重复调用swapImg()函数\n         * @description\n         *      方法之间需要重复调用swapImg()时，调用此方法\n         */\n        reCall: function () {\n            var me = this;\n            var img, nextIndex;\n\n            this.index++;\n            this.nextIndex = this.index + 1;\n            this.currentImage = this.index < this.maxImgLength ? this.imgArray.get( this.index ) : this.imgArray.get( 0 );\n            this.nextImage = this.index < this.maxImgLength - 1 ? this.imgArray.get( this.index + 1 ) : this.imgArray.get( 0 );\n            this.index = this.index < this.maxImgLength - 1 ? this.index : -1;\n            this.nextIndex = this.nextIndex < this.maxImgLength ? this.nextIndex : 0;\n\n            this.swapImg( this.currentImage, this.nextImage );\n        },\n\n        /**\n         * 图片交换\n         * @param   [ Object ]  cur\n         * @param   [ Object ]  next\n         * @description\n         *      cur:    当前图片\n         *      next:   下一张图片\n         */\n        swapImg: function ( cur, next ) {\n            var me = this;\n\n            // 消失效果\n            this.animate( {\n                img: cur,\n                opc: 0,\n                complete: function () {\n                    $( cur ).css( 'display', 'none' );\n                    $( me.currentImage ).css( 'opacity', '' );\n                }\n            } );\n\n            // 显示效果\n            $( next ).css( {\n                display: 'list-item',\n                opacity: 0\n            } );\n\n            this.animate( {\n                img: next,\n                opc: 1,\n                complete: function () {\n                    $( me.nextImage ).css( 'opacity', '' );\n                    me.currentImage = next;\n                    me.swapTag.call( me, me.nextIndex );\n                    me.intervalCall();\n                }\n            } );\n        },\n\n        /**\n         * 交换功能动画\n         * @param   [ Object ]  conf\n         * @description\n         *      conf.img:   当前图片\n         *      conf.opc:   当前图片透明度\n         */\n        animate: function ( conf ) {\n            var me = this;\n            var img = $( conf.img );\n\n            img.animate( {\n                opacity: conf.opc\n            }, {\n                duration: me.duration,\n                easing: 'swing',\n                step: function () {\n                    var step = ( typeof conf.step == 'function' ) ? conf.step : function () {};\n                    step();\n                },\n                complete: function () {\n                    var complete = ( typeof conf.complete == 'function' ) ? conf.complete : function () {};\n                    complete();\n                }\n            } );\n        },\n\n        /**\n         * 循环调用reCall()\n         */\n        intervalCall: function () {\n            var me  = this;\n\n            this.intervalTime = setTimeout( function () {\n                me.reCall.call( me );\n                clearTimeout( me.intervalTime );\n            }, this.swapTime );\n        },\n\n        /**\n         * 创建图片对应的标志\n         * @description\n         *      根据图片的个数，创建对应的状态标志\n         */\n        creatImgTags: function () {\n            var tagRoot = $( '.js-tagRoot' );\n\n            for ( var i = 0; i < this.maxImgLength; i++ )\n            {\n                i == 0 ? tagRoot.append( '<li class=\"current\"></li>' ) : tagRoot.append( '<li></li>' );\n            }\n            this.tagArray = $( '.slide-outer' ).find( 'li' );\n            this.currentTag = this.tagArray.get( 0 );\n        },\n\n        /**\n         * 交换显示图片所对应的指示标志\n         * @param   [ Number ]  index\n         * @description\n         *      index:  当前图片所对应标志的下标\n         */\n        swapTag: function ( index ) {\n            var curTag = this.tagArray.get( index );\n\n            this.currentTag && $( this.currentTag ).removeClass( 'current' );\n            $( curTag ).addClass( 'current' );\n            this.currentTag = curTag;\n        },\n\n        // 选择指示标志交换相应图片\n        tagEvent: function () {\n            var me = this;\n\n            this.tagArray.each( function ( i, item ) {\n                $( item ).bind( 'click', function () {\n                    if ( !$( this ).hasClass( 'current' ) )\n                    {\n                        var cur = me.imgArray.get( i );\n                        var next = me.imgArray.get( i + 1 );\n\n                        clearTimeout( me.intervalTime );\n                        me.index = i - 1;\n                        me.nextIndex = me.index + 1;\n\n                        $( me.currentImage ).stop( true, true );\n                        $( me.nextImage ).stop( true, true );\n\n                        me.swapImg( me.currentImage, cur );\n                        me.swapTag( i );\n                    }\n                } );\n            } );\n        },\n\n        // 暂停图片轮播\n        imgEvent: function () {\n            var me = this;\n\n            this.imgArray.each( function ( i, item ) {\n                $( item ).bind( 'mouseover', function () {\n                    var over = me.imgArray.get( i );\n\n                    $( over ).stop( true, true );\n                    clearTimeout( me.intervalTime );\n                } );\n\n                $( item ).bind( 'mouseout', function () {\n                    me.intervalCall();\n                } );\n            } );\n        }\n    };\n\n    return {\n        swap: function ( ops ) {\n            new _SwapImage( ops );\n        }\n    }\n} )();\n\n/**\n * 导航展开\n * @param   [ Object ]  ops\n * @description\n *      ops.layer:  显示层\n *      ops.openBtn:    显示开关\n */\ncsdn.openLayer = ( function () {\n    function _layer ( ops ) {\n        var layer = ops.layer;\n        var openBtn = ops.openBtn;\n        var fadeTime = 100;\n\n        openBtn.bind( {\n            mouseenter: function () {\n                layer.stop( true, true );\n                layer.fadeIn( fadeTime );\n            },\n            mouseleave: function () {\n                layer.stop( true, true );\n                layer.fadeOut( fadeTime );\n            }\n        } );\n\n        openBtn.bind( 'click', function() {\n            if ( layer.css( 'display' ) == 'none' )\n            {\n                layer.stop( true, true );\n                layer.fadeIn( fadeTime );\n            }\n            else\n            {\n                layer.stop( true, true );\n                layer.fadeOut( fadeTime );\n            }\n        } );\n    };\n\n    return {\n        layer: function ( ops ) {\n            _layer( ops );\n        }\n    }\n} )();\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 2210
        },
        "cache": {},
        "timings": {
          "blocked": 3.78000014461577,
          "dns": -1,
          "connect": -1,
          "send": 0.13199984095991013,
          "wait": 3788.263000082224,
          "receive": 14382.850999943912,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.916Z",
        "time": 10622.066000010818,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/counter.csdn.net/a/js/AreaCounter.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 30 Nov 2010 12:16:42 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"4cf4eb2a-18d\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 397,
            "mimeType": "application/javascript",
            "text": "// JScript 文件\r\nfunction LogClickCount(link,areaId)\r\n{\r\n    var url=window.location.href;\r\n    var myImage=new Image(0,0);\r\n    if(link!=null && link!='')\r\n    {\r\n        myImage.src=\"http://counter.csdn.net/a/Counter.aspx?area=\" + areaId+\"&u=\"+ escape(link);\r\n    }\r\n    else\r\n    {\r\n        myImage.src=\"http://counter.csdn.net/a/Counter.aspx?area=\" + areaId+\"&u=\"+ escape(link);\r\n    }\r\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 398
        },
        "cache": {},
        "timings": {
          "blocked": 3.58700007200241,
          "dns": -1,
          "connect": -1,
          "send": 0.07499987259507002,
          "wait": 3787.8000000491725,
          "receive": 6830.604000017049,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.916Z",
        "time": 28865.09500001557,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/css/ask_float_block.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:55 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd957-8eaf\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 36527,
            "mimeType": "text/css",
            "text": "@font-face {\n  font-family: 'FontAwesome';\n  src: url(\"../../../ask.csdn.net/assets/fontawesome-webfont-d8970a29b6bda4953188db1bf11caa77.eot%3Fv=3.2.1\");\n  src: url(\"../../../ask.csdn.net/assets/fontawesome-webfont-d8970a29b6bda4953188db1bf11caa77.eot%3F\") format(\"embedded-opentype\"), url(\"../../../ask.csdn.net/assets/fontawesome-webfont-b6eacf39cdd874409fca9bbfa0fd5524.woff%3Fv=3.2.1\") format(\"woff\"), url(\"../../../ask.csdn.net/assets/fontawesome-webfont-e6510d64f0dee7530f4c35b4eccbe2eb.ttf%3Fv=3.2.1\") format(\"truetype\"), url(\"../../../ask.csdn.net/assets/fontawesome-webfont-4bb899176c47fb8cc6662a8929eebc8a.svg\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n.clearfix:after {\n  content: '.';\n  height: 0;\n  visibility: hidden;\n  display: block;\n  clear: both;\n}\nbody > .marker {\n  position: absolute;\n  background: #000;\n  width: 0;\n  height: 0;\n  top: 0;\n  left: 0;\n  z-index: 900;\n  opacity: 0;\n  transition: all 0.5s ease-in;\n}\nbody > .pop_edit {\n  font-family: 'microsoft yahei';\n  clear: both;\n  position: fixed;\n  background: #fff;\n  border: 1px solid #dcdcdc;\n  top: 50%;\n  left: 50%;\n  margin-left: -333px;\n  margin-top: -270px;\n  z-index: 1000;\n  opacity: 0;\n}\nbody > .pop_edit * {\n  box-sizing: border-box;\n}\nbody > .pop_edit .icon-preview.active:before {\n  z-index: 10002;\n  position: relative;\n  color: #04c !important;\n}\nbody > .pop_edit .icon-preview.active:after {\n  content: '';\n  position: absolute;\n  z-index: 3;\n  width: 600px;\n  height: 40px;\n  background: rgba(255,255,255,0.7);\n  margin: -10px 0 0 -520px;\n}\nbody > .pop_edit .cm_box {\n  position: relative;\n}\nbody > .pop_edit .cm_box .cm_dialog {\n  position: fixed;\n  z-index: 10000;\n  display: none;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0,0,0,0.01);\n}\nbody > .pop_edit .pop_cm {\n  position: absolute;\n  z-index: 10001;\n  top: 48px;\n  margin: -5px 0 0 275px;\n  width: 300px;\n  padding: 10px;\n  background: #fff;\n  border: 1px solid #ccc;\n  display: none;\n  box-shadow: 2px 2px 10px rgba(0,0,0,0.3);\n}\nbody > .pop_edit .pop_cm:after,\nbody > .pop_edit .pop_cm:before {\n  content: '';\n  position: absolute;\n  border: 10px solid transparent;\n  border-bottom-color: #ccc;\n  top: -20px;\n  left: 40px;\n}\nbody > .pop_edit .pop_cm:after {\n  border-bottom-color: #fff;\n  top: -19px;\n}\nbody > .pop_edit .pop_cm.cm_add_img {\n  margin-left: 310px;\n}\nbody > .pop_edit .pop_cm .nav-tabs {\n  border-bottom: 1px solid #ddd;\n  font-size: 12px;\n  height: 30px;\n  margin: -5px -10px 10px;\n  padding: 5px 10px;\n}\nbody > .pop_edit .pop_cm .nav-tabs a {\n  border: 1px solid transparent;\n  display: inline-block;\n  padding: 3px 20px;\n  color: #999;\n  height: 25px;\n  text-decoration: none;\n}\nbody > .pop_edit .pop_cm .nav-tabs a.active {\n  color: #666;\n  border-color: #ddd;\n  border-bottom-color: #fff;\n  border-radius: 3px 3px 0 0;\n}\nbody > .pop_edit .pop_cm .up_img_loading {\n  background: #fff 9;\n  background: rgba(255,255,255,0.8);\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  line-height: 100px;\n  position: absolute;\n  z-index: 2;\n  text-align: center;\n  display: none;\n}\nbody > .pop_edit .pop_cm .up_img_loading.active {\n  display: block;\n}\nbody > .pop_edit .pop_cm .tab_panel {\n  display: none;\n}\nbody > .pop_edit .pop_cm .tab_panel.active {\n  display: block;\n}\nbody > .pop_edit .pop_cm .set_img {\n  height: 101px;\n  margin: 0;\n  position: relative;\n}\nbody > .pop_edit .pop_cm .set_img iframe {\n  border: 0;\n  width: 100%;\n  height: 101px;\n}\nbody > .pop_edit .pop_cm .set_img .markdown_file_name {\n  color: #999;\n  overflow: hidden;\n  padding: 5px;\n  width: 100%;\n}\nbody > .pop_edit .pop_cm .set_img label {\n  background: none repeat scroll 0 0 #ddd;\n  border-left: 1px solid #ccc;\n  font-weight: normal;\n  font-size: 12px;\n  line-height: 28px;\n  padding: 0 15px;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\nbody > .pop_edit .pop_cm .markdown_file_msg {\n  font-size: 14px;\n  margin: -10px 0 10px;\n}\nbody > .pop_edit .pop_cm input {\n  width: 278px;\n  padding: 5px 10px;\n  border: 1px solid #ddd;\n  margin-bottom: 10px;\n}\nbody > .pop_edit .pop_cm .text-right {\n  text-align: right;\n}\nbody > .pop_edit .pop_cm .btn {\n  font: 12px/20px \"microsoft yahei\";\n  background: #999;\n  color: #fff;\n  display: inline-block;\n  padding: 2px 10px;\n  cursor: pointer;\n}\nbody > .pop_edit h3 {\n  position: relative;\n  font-weight: normal;\n  font-size: 18px;\n  color: #666;\n  padding-left: 19px;\n  border-bottom: 1px solid #f0f0f0;\n  margin-bottom: 10px;\n  margin-top: 0px;\n  height: 50px;\n  line-height: 50px;\n  font-family: microsoft yahei;\n}\nbody > .pop_edit h3 .err {\n  position: absolute;\n  font-size: 12px;\n  width: 99%;\n  left: 0;\n  top: inherit;\n  margin: 0;\n  bottom: -23px;\n  text-align: left;\n  padding-left: 5px;\n}\nbody > .pop_edit .close {\n  position: absolute;\n  text-decoration: none;\n  right: 19px;\n  top: 8px;\n  font-size: 30px;\n  color: #555;\n  background: none;\n}\nbody > .pop_edit .close:hover {\n  color: #58c;\n}\nbody > .pop_edit .ask_float_channel:link,\nbody > .pop_edit .ask_float_channel:visited,\nbody > .pop_edit .ask_float_channel:hover,\nbody > .pop_edit .ask_float_channel:focus {\n  color: #458bca;\n  cursor: pointer;\n}\nbody > .pop_edit .ask_float_span {\n  color: #666;\n  font-size: 14px;\n  position: absolute;\n  top: 14px;\n  left: 70px;\n  font-family: 'microsoft yahei';\n}\nbody > .pop_edit .context {\n  padding: 0 20px 10px;\n  font-size: 16px;\n  color: #333;\n}\nbody > .pop_edit .red {\n  position: absolute;\n  display: inline-block;\n  left: -11px;\n  top: 50%;\n  margin-top: -10px;\n  padding: 0;\n  color: #f00;\n}\nbody > .pop_edit .success {\n  border-top: 1px solid #f0f0f0;\n  text-align: right;\n  padding: 15px 20px 20px 20px;\n}\nbody > .pop_edit .success a {\n  display: inline-block;\n  zoom: 1;\n  width: 80px;\n  height: 28px;\n  line-height: 28px;\n  text-align: center;\n  color: #fff;\n  text-decoration: none;\n  margin-left: 10px;\n  font-size: 14px;\n}\nbody > .pop_edit .success .cancel {\n  background: #999;\n}\nbody > .pop_edit .success .ok {\n  background: #be0000;\n}\nbody > .pop_edit .success .del {\n  background: #999;\n  display: none;\n}\n.ask_first {\n  position: absolute;\n  left: 50%;\n  top: 250px;\n  height: 560px;\n  width: 667px;\n  display: none;\n  text-align: left;\n}\n.ask_first .askFirst_desc {\n  height: 370px;\n}\n.ask_first .askFirst_desc .afd_p {\n  line-height: 21px;\n  font-size: 14px;\n  color: #333;\n}\n.ask_first .askFirst_desc .afd_p a {\n  color: #2b81a9;\n  cursor: pointer;\n}\n.ask_first .askFirst_se {\n  font-size: 16px;\n  color: #333;\n  margin-bottom: 10px;\n}\n.ask_first .search_div {\n  width: 100%;\n  height: 35px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n.ask_first .search_div input {\n  width: 100%;\n}\n.ask_second {\n  display: none;\n  text-align: left;\n}\n.ask_second .err_div {\n  width: 100%;\n  border: 1px solid #ffdada;\n  margin-bottom: 5px;\n  height: 28px;\n}\n.ask_second .err_div .err_ico {\n  background: url(\"http://c.csdnimg.cn/comm_ask/images/ph_pop_err_icon.fw.png\") no-repeat 0px 0px;\n  margin-top: 6px;\n  margin-right: 10px;\n  margin-left: 5px;\n  width: 16px;\n  height: 16px;\n  display: inline-block;\n  float: left;\n}\n.ask_second .err_div .err_txt {\n  font-size: 12px;\n  color: #b74d46;\n  height: 16px;\n  display: inline-block;\n  margin-top: 2px;\n  float: left;\n}\n.ask_second .input_div {\n  width: 100%;\n  height: 35px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n.ask_second .input_div input {\n  box-sizing: border-box;\n  font-size: 16px;\n  color: #656565;\n  width: 100%;\n  height: 35px;\n  border: 1px solid #dcdcdc;\n  text-indent: 5px;\n}\n.ask_second .second_se {\n  font-size: 16px;\n  color: #656565;\n  display: inline-block;\n  margin: 5px 0;\n}\n.ask_second .div_rich_editor {\n  height: 245px;\n  width: 100%;\n  border: 1px solid #ddd;\n  position: relative;\n}\n.ask_second .div_tags {\n  width: 100%;\n  height: 35px;\n}\n.ask_second .tags_con {\n  width: 100%;\n  height: 35px;\n  font-size: 14px;\n  padding: 0 5px;\n  float: left;\n  border: 1px solid #dcdcdc;\n  overflow-y: auto;\n}\n.ask_second .tags_con.focus {\n  border-color: #59d;\n  outline: 1px solid #6be;\n}\n.ask_second .tags_con input {\n  height: 20px;\n  width: 200px;\n  border: 0px;\n  margin-top: 7px;\n  float: left;\n  outline: none;\n}\n.ask_second .tags_con .tag {\n  display: block;\n  background: #f0f4f7;\n  float: left;\n  height: 22px;\n  line-height: 22px;\n  padding: 0 10px;\n  margin-top: 5px;\n  margin-right: 5px;\n  color: #3d8daf;\n  overflow: hidden;\n  border-radius: 15px;\n}\n.ask_second .tags_con .tag span {\n  display: block;\n  float: left;\n}\n.ask_second .tags_con .tag a {\n  display: block;\n  float: left;\n  color: #49b;\n  height: 20px;\n  font-size: 14px;\n  margin-left: 5px;\n  text-decoration: none;\n}\n.ask_second .tags_con .tag a:hover {\n  color: #c30;\n}\n.ask_second .drt_tagRecomm {\n  height: 20px;\n  margin-top: 20px;\n  margin-bottom: 15px;\n}\n.ask_second .drt_tagRecomm .drt_tit {\n  font-size: 14px;\n  color: #656565;\n}\n.ask_second .left_area {\n  display: inline-block;\n  float: left;\n}\n.ask_second .left_area > * {\n  vertical-align: middle;\n}\n.ask_second .left_area .wyxs {\n  font-size: 14px;\n  color: #666;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n.ask_second .left_area .cb_num {\n  width: 157px;\n  line-height: 23px;\n  border: 1px solid #dcdcdc;\n}\n.ask_second .left_area .phib_rii {\n  text-align: left;\n  margin-left: 10px;\n  width: 183px;\n  height: 20px;\n  display: inline-block;\n  color: #f9bf47;\n}\n.ask_second .left_area .phib_rii span {\n  background: url(\"../images/ph_right_cb.fw.png\") no-repeat 0px 2px;\n  display: inline-block;\n  padding-left: 20px;\n  height: 25px;\n  margin-top: 0px;\n  line-height: 21px;\n}\n#float_ask_img {\n  z-index: 9;\n  right: 50px;\n  top: 200px;\n  POSITION: fixed;\n}\n.complete_list {\n  background: #fff;\n  overflow: hidden;\n  position: fixed;\n  z-index: 9999;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  box-shadow: 2px 2px 5px rgba(0,0,0,0.3);\n  padding: 1px;\n  margin: 0;\n  display: none;\n}\n.complete_list li {\n  padding: 2px 10px;\n  font: 12px/20px \"microsoft yahei\";\n  cursor: default;\n}\n.complete_list .outborder {\n  background: #f5f5f5;\n}\n.ask_second .se_key {\n  background-color: #f2f2f2;\n  border-radius: 10px;\n  padding: 0px 15px;\n  height: 21px;\n  text-align: center;\n  line-height: 21px;\n  font-size: 12px;\n  font-weight: normal;\n  color: #656565;\n  display: inline-block;\n  margin-right: 15px;\n}\n.ask_second .se_key:hover {\n  background-color: #bd1921;\n  color: #fff;\n  text-decoration: none;\n}\n.ask_second textarea {\n  font-size: 12px;\n  font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;\n}\n.ask_second pre {\n  margin: 0 0 7px 0;\n  background: #eee;\n  font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;\n  max-height: 600px;\n  overflow: auto;\n  padding: 5px;\n  width: auto;\n}\n.ask_second code {\n  padding: 2px 5px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  background-color: #eee;\n  color: #666;\n  font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;\n  display: block;\n}\n.ask_second p code {\n  padding: 1px 5px;\n}\n.ask_second blockquote {\n  background-color: #eee;\n  margin-bottom: 0 0 10px 0;\n  padding: 10px 10px 1px;\n}\n.ask_second hr {\n  background-color: #aaa;\n  border: 0;\n  height: 1px;\n  margin: 0 0 20px 0;\n}\n.wmd-prompt-dialog * {\n  margin: 0;\n  padding: 0;\n}\n.ask_second .str {\n  color: #800000;\n}\n.ask_second .kwd {\n  color: #00008b;\n  font-weight: bold;\n}\n.ask_second .com {\n  color: #808080;\n}\n.ask_second .typ {\n  color: #2b91af;\n  font-weight: bold;\n}\n.ask_second .lit {\n  color: #800000;\n}\n.ask_second .pun,\n.ask_second .pln {\n  color: #000;\n}\n.ask_second .tag {\n  color: #800000;\n  font-weight: bold;\n}\n.ask_second .atn {\n  color: #f00;\n}\n.ask_second .atv {\n  color: #00f;\n}\n.ask_second .dec {\n  color: #800080;\n}\n.ask_second .wmd {\n  width: 660px;\n  position: relative;\n}\n.ask_second #wmd-button-bar {\n  background-color: #fff;\n  clear: both;\n  height: 25px;\n  margin: 0;\n  width: 405px;\n  display: inline-block;\n  margin-top: 10px;\n}\n.ask_second #wmd-input {\n  height: 200px;\n  line-height: 18px;\n  padding: 0 3px;\n  width: 626px;\n  margin: 0;\n  resize: none;\n  border: 1px solid #dcdcdc;\n}\n.ask_second #wmd-preview {\n  display: none;\n  border: 2px dotted #ccc;\n  clear: both;\n  font-size: 12px;\n  padding: 3px;\n}\n.grippie {\n  display: none;\n  background-image: url(\"../images/drag.gif\");\n  background-repeat: no-repeat;\n  background-position: center 1px;\n  margin-bottom: 6px;\n  background-color: #eee;\n  border-color: #ddd;\n  border-style: solid;\n  border-width: 0 1px 1px;\n  cursor: s-resize;\n  height: 9px;\n  overflow: hidden;\n  line-height: 9px;\n}\n#wmd-preview p {\n  word-wrap: break-word;\n}\n.wmd-button-row {\n  height: 20px;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.wmd-spacer {\n  background-color: Silver;\n  display: inline-block;\n  height: 20px;\n  list-style: none outside none;\n  margin-left: 14px;\n  position: absolute;\n  width: 1px;\n}\n.wmd-button {\n  background-image: url(\"../images/wmd-buttons.png\");\n  background-position: 0 0;\n  background-repeat: no-repeat;\n  display: inline-block;\n  height: 20px;\n  list-style: none outside none;\n  margin-left: 5px;\n  margin-right: 5px;\n  position: absolute;\n  width: 20px;\n}\n.wmd-button > a {\n  display: inline-block;\n  height: 20px;\n  position: absolute;\n  width: 20px;\n}\n.wmd-bold-button {\n  left: 0px;\n  background-position: 0px 0;\n}\n.wmd-italic-button {\n  left: 25px;\n  background-position: -20px 0;\n}\n.wmd-spacer1 {\n  left: 50px;\n}\n.wmd-link-button {\n  left: 75px;\n  background-position: -40px 0;\n}\n.wmd-quote-button {\n  left: 100px;\n  background-position: -60px 0;\n}\n.wmd-code-button {\n  left: 125px;\n  background-position: -80px 0;\n}\n.wmd-image-button {\n  left: 150px;\n  background-position: -100px 0;\n}\n.wmd-spacer2 {\n  left: 175px;\n}\n.wmd-olist-button {\n  left: 200px;\n  background-position: -120px 0;\n}\n.wmd-ulist-button {\n  left: 225px;\n  background-position: -140px 0;\n}\n.wmd-heading-button {\n  left: 250px;\n  background-position: -160px 0;\n}\n.wmd-hr-button {\n  left: 275px;\n  background-position: -180px 0;\n}\n.wmd-spacer3 {\n  left: 300px;\n}\n.wmd-undo-button {\n  left: 325px;\n  background-position: -200px 0;\n}\n.wmd-redo-button {\n  left: 350px;\n  background-position: -220px 0;\n}\n.wmd-help-button {\n  right: 0px;\n  background-position: -240px 0;\n}\n.wmd-at-button {\n  left: 375px;\n}\n.wmd-prompt-background {\n  background-color: Black;\n}\n.wmd-prompt-dialog {\n  background-color: #ddd;\n  border-color: #fff #999 #999 #fff;\n  border-right: 3px solid #999;\n  border-style: solid;\n  border-width: 3px;\n}\n.wmd-mini-button {\n  color: #444;\n  margin: 5px;\n  padding: 3px 8px;\n  text-decoration: none;\n  display: inline-block;\n}\n.wmd-mini-button:visited {\n  color: #444;\n  margin: 5px;\n  padding: 3px 8px;\n  text-decoration: none;\n  display: inline-block;\n}\n.wmd-mini-button:hover {\n  border-radius: 15px 15px 15px 15px;\n  -moz-border-radius: 15px 15px 15px 15px;\n  -webkit-border-radius: 15px 15px 15px 15px;\n  background-color: #ccc;\n  text-decoration: none;\n}\n.wmd-mini-button.selected {\n  border-radius: 15px 15px 15px 15px;\n  -moz-border-radius: 15px 15px 15px 15px;\n  -webkit-border-radius: 15px 15px 15px 15px;\n  background-color: #ccc;\n  text-decoration: none;\n  background-color: #888;\n  color: #eee;\n}\n.wmd-mini-button.selected:hover {\n  background-color: #888;\n  color: #eee;\n}\n.dialog-input,\n#upload-url-input input,\n#shadow-filename {\n  border: 1px solid #999;\n  padding: 3px 0 0 2px;\n  height: 23px;\n  font-family: Trebuchet MS, Liberation Sans, DejaVu Sans, sans-serif;\n}\n.dialog-button,\n#ok-dialog-button,\n#close-dialog-button,\n#choose-file {\n  border: 1px solid #999;\n  background-color: #f0f0f0;\n  height: 28px;\n  cursor: pointer;\n  font-family: Trebuchet MS, Liberation Sans, DejaVu Sans, sans-serif;\n}\n#image-upload-progress {\n  text-indent: -9999px;\n  height: 5px;\n  background: url(\"http://c.csdnimg.cn/comm_ask/css/images/progress-dots.gif\") no-repeat center center;\n}\n#qlink_box {\n  position: absolute;\n  z-index: 999;\n  display: none;\n  background: #efefef;\n  border-width: 1px;\n  border-style: solid;\n  border-color: #efefef;\n  padding: 3px 3px 2px 3px;\n  border-radius: 5px;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n}\n#qlink_box input {\n  width: 400px;\n  height: 24px;\n  font-size: 100%;\n  padding: 0px;\n  border: 1px solid #b1b1b1;\n  background: #fff;\n  border-radius: 2px;\n  -moz-border-radius: 2px;\n  -webkit-border-radius: 2px;\n}\n#qlink_suggest {\n  position: absolute;\n  left: 3px;\n  top: 44px;\n  padding: 1px 0;\n  width: 400px;\n  border: 1px solid #b1b1b1;\n  border-top: 0;\n  background: #fff;\n}\n#qlink_suggest dl {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n#qlink_suggest dd {\n  margin: 0;\n  padding: 0 5px;\n  line-height: 28px;\n  display: block;\n}\n#qlink_suggest dd.active {\n  background: #efefef;\n}\n#qlink_suggest dd:hover {\n  background: #efefef;\n  cursor: pointer;\n}\n.ask_second textarea,\n.ask_second #notes-preview {\n  border: 1px solid #808080;\n}\n#notes-preview {\n  overflow-x: hidden;\n}\nbody .searchContainer {\n  border: solid 1px #ddd;\n  position: absolute;\n  width: 628px;\n  background-color: #fff;\n  min-height: 90px;\n  display: none;\n}\nbody .searchContainer span {\n  line-height: 30px;\n}\nbody .searchContainer .sTitle {\n  margin-right: 10px;\n  margin-left: 10px;\n  line-height: 30px;\n  font-size: 14px;\n  color: #656565;\n  border-bottom: solid 1px #ddd;\n}\nbody .searchContainer .sItem {\n  cursor: pointer;\n  padding: 0 10px;\n}\nbody .searchContainer .sItem .sfirst {\n  font-size: 14px;\n  color: #999;\n  float: left;\n  width: 85%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  text-align: left;\n}\nbody .searchContainer .sItem .ssecond {\n  font-size: 14px;\n  color: #999;\n  float: right;\n  width: 15%;\n  text-align: right;\n  white-space: nowrap;\n}\nbody .searchContainer .sItemHover {\n  background-color: #ccc;\n  color: #fff;\n}\nbody .searchContainer .sItemHover .sfirst,\nbody .searchContainer .sItemHover .ssecond {\n  color: #fff;\n}\nbody .searchContainer .sFooter {\n  border-top: solid 1px #ddd;\n  background-color: #f5f5f5;\n}\nbody .searchContainer .sFooter .sFirstNewAsk {\n  float: right;\n  margin-right: 10px;\n  font-size: 14px;\n  color: #656565;\n  text-decoration: none;\n  cursor: pointer;\n  line-height: 27px;\n}\nbody .searchContainer .sFooter a:link {\n  color: #656565;\n}\n.ask_second .searchContainer .sFooter a:visited {\n  color: #656565;\n}\nbody .searchContainer .sFooter a:hover,\nbody .searchContainer .sFooter a:focus {\n  color: #be1a21;\n}\n/*�����ʴ�*/\n#com-ask-float-block {\n  cursor: pointer;\n  border: 0px;\n  bottom: 124px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -318px;\n  z-index: 9999999;\n}\n#com-ask-float-block:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -318px;\n}\n/*加入二维码start*/\n\n#com-app-float-block {\n    cursor: pointer;\n    border: 0px;\n    bottom: 124px;\n    min-width: 40px;\n    height: 28px;\n    width: 90px;\n    margin: 0px;\n    padding: 0px;\n    position: fixed;\n    right: 40px;\n    border-radius: 0;\n    line-height: 16px;\n    color: #fff;\n    background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px 0px;\n    z-index: 999998;\n}\n#com-app-float-block:hover {\n    background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px 0px;\n}\n\n#com-appcode-float-block {\n    cursor: pointer;\n    border: 0px;\n    bottom: 124px;\n    min-width: 40px;\n    height: 112px;\n    width: 90px;\n    margin: 0px;\n    padding: 0px;\n    position: fixed;\n    right: 40px;\n    border-radius: 0;\n    line-height: 16px;\n    color: #fff;\n    background: #fff url(\"../images/common_float_block.png\") no-repeat scroll  0px -198px;\n    z-index: 9999999;\n}\n#com-appcode-float-block:hover {\n    background: #fff url(\"../images/common_float_block.png\") no-repeat scroll -100px -198px;\n}\n#com-appcode-float-block:hover  #appcode-close{\n    background: #fff url(\"../images/common_float_block.png\") no-repeat scroll -177px -201px;\n}\n#com-appcode-float-block #appcode-close{\n    display: inline-block;\n    width: 10px;\n    height: 10px;\n    background: transparent url(\"../images/common_float_block.png\") no-repeat scroll  -77px -201px;\n    cursor: pointer;\n    float: right;\n    margin-right: 3px;\n    margin-top: 3px;\n}\n\n\n\n\n\n\n/*加入二维码end*/\n\n\n\n/*���ٻظ�*/\n#com-quick-reply {\n  cursor: pointer;\n  border: 0px;\n  bottom: 82px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -33px;\n  z-index: 9999999;\n}\n#com-quick-reply:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -33px;\n}\n\n/* 我要收藏 */\n#com-quick-collect {\n  cursor: pointer;\n  border: 0px;\n  bottom: 82px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -502px;\n  z-index: 9999999;\n}\n#com-quick-collect:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -502px;\n}\n/*我要收藏 开始*/\n.pop_CA_cover{\n  position: fixed;\n  left: 0;\n  top:0;\n  width: 100%;\n  height: 100%;\n  z-index:10000000 ;\n  display: none;\n}\n.pop.pop_CA{\n  display: none;\n  position: fixed;\n  left: 50%;\n  top:50%;\n  margin-left: -325px;\n  margin-top: -179px;\n  width: 650px;\n  background: #fff;\n  border: 1px solid #cecece;\n  box-shadow:0 0 10px 0  #cecece  ;\n  z-index:10000001 ;\n}\n.pop .CA_header{\n  height: 50px ;\n  line-height: 50px;\n  padding: 0 20px;\n  border-bottom: 1px solid #cecece;\n  position: relative;\n  text-align: left;\n  font-size: 16px;\n  color: #333;\n}\n.pop .CA_header .cancel_icon{\n  display: block;\n  width: 15px;\n  height: 15px;\n  position: absolute;\n  right: 16px;\n  top: 18px;\n  background: url(http://c.csdnimg.cn/comm_ask/css/images/cancel_icon.png) no-repeat center;\n  cursor: pointer;\n}\n.pop .CA_header .cancel_icon:hover{\n  opacity: 0.8;\n}\n.pop .CA_box{\n  font-family: \"Microsoft YaHei\";\n  padding: 8px 20px 16px;\n  text-align: left;\n}\n.pop .CA_box .CA_tit{\n  background: none;\n  border: none;\n  padding:18px 0 8px;\n  font-weight: normal;\n  line-height: 24px;\n  font-size: 14px ;\n  color: #333;\n}\n.pop .CA_box .CA_tit span {\n  line-height: 24px;\n  color: #d71c1c;\n}\n.pop .CA_box .CA_titCon{\n  width: 590px;\n  height: 30px;\n  line-height: 30px;\n  background: #f0f4f6;\n  border: 1px solid #ddd;\n  color: #666;\n  font-size: 14px !important;\n  padding:0 10px ;\n  outline: none;\n}\n.pop .CA_box .CA_typeBox{\n\n}\n.pop .CA_box .CA_typeBox select{\n  width: 258px;\n  height: 30px;\n  background:#f0f4f6;\n  border: 1px solid #ddd;\n  line-height: 30px;\n  font-size:14px !important;\n  padding: 0 10px;\n  color: #666;\n  outline: none;\n}\n.pop .CA_box .CA_typeBox option{\n  height: 30px;\n  line-height: 30px;\n  padding: 0 10px;\n}\n.pop .CA_box .CA_typeBox span{\n  margin: 0 8px;\n  color:#666 ;\n  font-size:14px;\n}\n.pop .CA_box .CA_typeBox a{\n  font-size:14px;\n  text-decoration: none;\n  color:#2983d7;\n}\n.pop .CA_box .CA_typeBox a:hover{\n  color: rgba(41,131,215,0.8);\n}\n.pop .CA_box .CA_btn{\n  padding: 20px 0;\n}\n.pop .CA_btn a{\n  display: inline-block;\n  width: 102px;\n  height: 34px;\n  text-decoration: none;\n  border-radius: 3px;\n  line-height: 34px;\n  text-align: center;\n  color: #fff;\n  font-size: 14px;\n}\n.pop .CA_btn .CA_btnY{\n  margin-right: 10px;\n  background: #2983d7;\n}\n.pop .CA_btn .CA_btnY:hover{\n  background: rgba(41,131,215,0.8);\n}\n.pop .CA_btn .CA_btnN{\n  background: #9babba;\n}\n.pop .CA_btn .CA_btnN:hover{\n  background: rgba(155,171,186,0.8);\n}\n.pop .CA_box .CA_tip{\n  padding-top: 20px;\n  border-top:1px dashed #c1c1c1;\n  font-size: 12px;\n  color: #999;\n}\n.pop .CA_box .CA_tip a{\n  text-decoration: none;\n  color: #2983d7;\n}\n.pop .CA_box .CA_tip a:hover{\n  color: rgba(41,131,215,0.8);\n}\n\n/*我要收藏 结束*/\n\n/*�ص�����*/\n#com-d-top-a {\n  cursor: pointer;\n  border: 0px;\n  bottom: 40px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  display: none;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -165px;\n  z-index: 9999999;\n}\n#com-d-top-a:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -165px;\n}\n/*ѧԺ�ͷ�*/\n#com-edu-call-center {\n  cursor: pointer;\n  border: 0px;\n  bottom: 40px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -132px;\n  z-index: 9999999;\n}\n#com-edu-call-center:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -132px;\n}\n/*��̳�Ŀ��ٻظ�*/\n#com-quick-reply-bbs {\n  cursor: pointer;\n  border: 0px;\n  bottom: 82px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -33px;\n  z-index: 9999999;\n}\n#com-quick-reply-bbs:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -33px;\n}\n\n/*��̳�Ŀ��ٻظ�*/\n#com-quick-collect-bbs {\n  cursor: pointer;\n  border: 0px;\n  bottom: 82px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -502px;\n  z-index: 9999999;\n}\n#com-quick-collect-bbs:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -502px;\n}\n\n/*�ص�Ƶ��*/\n#com-back-channel {\n  cursor: pointer;\n  border: 0px;\n  bottom: 40px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -66px;\n  z-index: 9999999;\n}\n#com-back-channel:hover {\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -66px;\n}\n/*�ص���ҳ*/\n#com-back-home {\n  cursor: pointer;\n  border: 0px;\n  bottom: 40px;\n  min-width: 40px;\n  height: 28px;\n  width: 90px;\n  margin: 0px;\n  padding: 0px;\n  position: fixed;\n  right: 40px;\n  border-radius: 0;\n  line-height: 16px;\n  color: #fff;\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll 0px -99px;\n  z-index: 9999999;\n}\n#com-back-home:hover{\n  background: transparent url(\"../images/common_float_block.png\") no-repeat scroll -100px -99px;\n}\n\n#previw-button {\n  width: 44px;\n  height: 14px;\n  background: url(\"../images/preview-img.png\");\n  margin-top: 12px;\n  float: right;\n  margin-right: 5px;\n}\n.editor-preview img {\n  max-width: 80%;\n  max-height: 200px;\n}\n#picture_dialog_form {\n  width: 1px;\n  height: 1px;\n  position: fixed;\n  top: 50%;\n  overflow: hidden;\n}\n.editor-toolbar .icon-preview:before {\n  content: \"\\f06e\";\n}\n.editor-toolbar .icon-preview.active:before {\n  content: \"\\f070\";\n}\n.editor-toolbar .icon-info:before {\n  content: \"\\f05a\";\n}\n.editor-toolbar .icon-headline:before {\n  content: \"H1\";\n  font: bold 18px/24px \"Times\";\n}\n.editor-toolbar .icon-heading:before {\n  content: \"H2\";\n  font: bold 18px/24px \"Times\";\n}\n.editor-toolbar .icon-code {\n  margin-right: 6px;\n}\n.editor-toolbar .icon-code:before {\n  content: \"</>\";\n  font-weight: bold;\n  letter-spacing: -3px;\n}\n.ask_second.pop_edit .CodeMirror {\n  width: 630px;\n  height: 200px;\n}\n.CodeMirror {\n  border: 1px solid #eee;\n}\n.CodeMirror-scroll {\n  overflow: auto;\n}\n.CodeMirror-lines {\n  padding: 4px 0;\n}\n.CodeMirror pre {\n  padding: 0 4px;\n}\n.CodeMirror-scrollbar-filler {\n  background-color: #fff;\n}\n.CodeMirror div.CodeMirror-cursor {\n  border-left: 1px solid #000;\n  z-index: 3;\n}\n.CodeMirror div.CodeMirror-secondarycursor {\n  border-left: 1px solid #c0c0c0;\n}\n.CodeMirror.cm-keymap-fat-cursor div.CodeMirror-cursor {\n  width: auto;\n  border: 0;\n  background: #7e7;\n  z-index: 1;\n}\n.cm-strong,\n.cm-em {\n  color: #854;\n}\n.cm-s-paper .cm-keyword {\n  color: #555;\n}\n.cm-s-paper .cm-atom,\n.cm-s-paper .cm-number {\n  color: #7f8c8d;\n}\n.cm-s-paper .cm-def {\n  color: #00f;\n}\n.cm-s-paper .cm-variable {\n  color: #000;\n}\n.cm-s-paper .cm-variable-2 {\n  color: #586;\n}\n.cm-s-paper .cm-variable-3 {\n  color: #085;\n}\n.cm-s-paper .cm-property,\n.cm-s-paper .cm-operator {\n  color: #000;\n}\n.cm-s-paper .cm-comment {\n  color: #959595;\n}\n.cm-s-paper .cm-string {\n  color: #47e;\n}\n.cm-s-paper .cm-string-2 {\n  color: #f50;\n}\n.cm-s-paper .cm-meta {\n  color: #555;\n}\n.cm-s-paper .cm-error {\n  color: #f00;\n}\n.cm-s-paper .cm-qualifier,\n.cm-s-paper .cm-builtin {\n  color: #555;\n}\n.cm-s-paper .cm-bracket {\n  color: #997;\n}\n.cm-s-paper .cm-tag,\n.cm-s-paper .cm-attribute {\n  color: #7f8c8d;\n}\n.cm-s-paper .cm-header {\n  color: #000;\n}\n.cm-s-paper .cm-quote {\n  color: #888;\n}\n.cm-s-paper .cm-hr {\n  color: #999;\n}\n.cm-s-paper .cm-link {\n  color: #578;\n}\n.cm-negative {\n  color: #d44;\n}\n.cm-positive {\n  color: #292;\n}\n.cm-header,\n.cm-strong {\n  font-weight: bold;\n}\n.cm-em {\n  font-style: italic;\n}\n.cm-link {\n  text-decoration: underline;\n}\n.cm-invalidchar {\n  color: #f00;\n}\ndiv.CodeMirror span.CodeMirror-matchingbracket {\n  color: #0f0;\n}\ndiv.CodeMirror span.CodeMirror-nonmatchingbracket {\n  color: #f22;\n}\n.CodeMirror {\n  position: relative;\n  overflow: hidden;\n}\n.CodeMirror-scroll {\n  margin-bottom: -30px;\n  margin-right: -30px;\n  padding-bottom: 30px;\n  padding-right: 30px;\n  height: 100%;\n  outline: none;\n  position: relative;\n}\n.CodeMirror-sizer {\n  position: relative;\n}\n.CodeMirror-vscrollbar,\n.CodeMirror-hscrollbar,\n.CodeMirror-scrollbar-filler {\n  position: absolute;\n  z-index: 6;\n  display: none;\n}\n.CodeMirror-vscrollbar {\n  right: 0;\n  top: 0;\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n.CodeMirror-hscrollbar {\n  bottom: 0;\n  left: 0;\n  overflow-y: hidden;\n  overflow-x: scroll;\n}\n.CodeMirror-scrollbar-filler {\n  right: 0;\n  bottom: 0;\n  z-index: 6;\n}\n.CodeMirror-lines {\n  cursor: text;\n}\n.CodeMirror pre {\n  -moz-border-radius: 0;\n  -webkit-border-radius: 0;\n  -o-border-radius: 0;\n  border-radius: 0;\n  border-width: 0;\n  background: transparent;\n  font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;\n  font-size: inherit;\n  margin: 0;\n  white-space: pre-wrap;\n  word-wrap: normal;\n  line-height: inherit;\n  color: inherit;\n  z-index: 2;\n  position: relative;\n  overflow: visible;\n}\n.CodeMirror ul,\n.CodeMirror ol,\n.CodeMirror li {\n  margin: auto !important;\n  padding: inherit !important;\n  list-style-position: inside !important;\n}\n.CodeMirror ul {\n  list-style-type: initial !important;\n}\n.CodeMirror ul li {\n  list-style-type: initial !important;\n}\n.CodeMirror ol {\n  list-style-type: decimal !important;\n}\n.CodeMirror ol li {\n  list-style-type: decimal !important;\n}\n.CodeMirror-wrap pre {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  word-break: normal;\n}\n.CodeMirror-linebackground {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 0;\n}\n.CodeMirror-linewidget {\n  position: relative;\n  z-index: 2;\n  overflow: auto;\n}\n.CodeMirror-widget {\n  display: inline-block;\n}\n.CodeMirror-wrap .CodeMirror-scroll {\n  overflow-x: hidden;\n}\n.CodeMirror-measure {\n  position: absolute;\n  width: 100%;\n  height: 0px;\n  overflow: hidden;\n  visibility: hidden;\n}\n.CodeMirror-measure pre {\n  position: static;\n}\n.CodeMirror div.CodeMirror-cursor {\n  position: absolute;\n  visibility: hidden;\n  border-right: none;\n  width: 0;\n}\n.CodeMirror-focused div.CodeMirror-cursor {\n  visibility: visible;\n}\n.CodeMirror-selected {\n  background: #d9d9d9;\n}\n.CodeMirror-focused .CodeMirror-selected {\n  background: #bdc3c7;\n}\n.cm-searching {\n  background: #ffa;\n  background: rgba(255,255,0,0.4);\n}\n@media print {\n  .CodeMirror div.CodeMirror-cursor {\n    visibility: hidden;\n  }\n}\n:-webkit-full-screen {\n  background: #f9f9f5;\n  padding: 0.5em 1em;\n  width: 100%;\n  height: 100%;\n}\n:-moz-full-screen {\n  padding: 0.5em 1em;\n  background: #f9f9f5;\n  width: 100%;\n  height: 100%;\n}\n.editor-wrapper {\n  font: 16px/1.62 \"Helvetica Neue\", \"Xin Gothic\", \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\", \"Microsoft YaHei\", sans-serif;\n  color: #2c3e50;\n}\n.editor-wrapper input.title {\n  font: 18px \"Helvetica Neue\", \"Xin Gothic\", \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\", \"Microsoft YaHei\", sans-serif;\n  background: transparent;\n  padding: 4px;\n  width: 100%;\n  border: none;\n  outline: none;\n  opacity: 0.6;\n}\n.editor-toolbar {\n  position: relative;\n  opacity: 0.6;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n}\n.editor-toolbar:before,\n.editor-toolbar:after {\n  display: block;\n  content: ' ';\n  height: 1px;\n  background-color: #bdc3c7;\n  background: -moz-linear-gradient(45deg, #f9f9f9, #bdc3c7, #f9f9f9);\n  background: -webkit-linear-gradient(45deg, #f9f9f9, #bdc3c7, #f9f9f9);\n  background: -ms-linear-gradient(45deg, #f9f9f9, #bdc3c7, #f9f9f9);\n  background: linear-gradient(45deg, #f9f9f9, #bdc3c7, #f9f9f9);\n}\n.editor-toolbar:before {\n  margin-bottom: 8px;\n}\n.editor-toolbar:after {\n  margin-top: 8px;\n}\n.editor-wrapper input.title:hover,\n.editor-wrapper input.title:focus {\n  opacity: 0.8;\n}\n.editor-toolbar:hover {\n  opacity: 0.8;\n}\n.editor-toolbar a {\n  display: inline-block;\n  text-align: center;\n  text-decoration: none !important;\n  color: #2c3e50 !important;\n  width: 24px;\n  height: 24px;\n  font-size: 16px;\n  margin: 0 4px;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  cursor: pointer;\n}\n.editor-toolbar a:hover,\n.editor-toolbar a.active {\n  background: #fcfcfc;\n  border-color: #95a5a6;\n}\n.editor-toolbar a:before {\n  line-height: 24px;\n}\n.editor-toolbar i.separator {\n  display: inline-block;\n  width: 0;\n  border-left: 1px solid #d9d9d9;\n  border-right: 1px solid #fff;\n  color: transparent;\n  text-indent: -10px;\n  margin: 0 6px;\n}\n.editor-toolbar i.separator:first-child {\n  margin-left: 0px;\n}\n.editor-toolbar i.separator:last-child {\n  margin-right: 0px;\n}\n.editor-toolbar a.icon-fullscreen {\n  position: absolute;\n  right: 0;\n}\n.editor-statusbar {\n  padding: 2px 5px 8px 0px;\n  font-size: 12px;\n  color: #959694;\n  text-align: right;\n}\n.editor-statusbar span {\n  display: inline-block;\n  min-width: 4em;\n  margin-left: 1em;\n}\n.editor-statusbar .lines:before {\n  content: 'lines: ';\n}\n.editor-statusbar .words:before {\n  content: 'words: ';\n}\n.editor-preview {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 100%;\n  background: #fcfdfe;\n  z-index: 9999;\n  overflow: auto;\n  padding: 5px;\n  box-sizing: border-box;\n  -webkit-transition: left 0.2s ease;\n  -moz-transition: left 0.2s ease;\n  -ms-transition: left 0.2s ease;\n  transition: left 0.2s ease;\n}\n.editor-preview-active {\n  left: 0;\n}\n.editor-preview > p {\n  margin-top: 0;\n}\n[class^=\"icon-\"],\n[class*=\" icon-\"] {\n  font-family: FontAwesome;\n  font-weight: normal;\n  font-style: normal;\n  text-decoration: inherit;\n  -webkit-font-smoothing: antialiased;\n}\n[class^=\"icon-\"]:before,\n[class*=\" icon-\"]:before {\n  text-decoration: inherit;\n  display: inline-block;\n  speak: none;\n}\n.icon-bold:before {\n  content: \"\\f032\";\n}\n.icon-italic:before {\n  content: \"\\f033\";\n}\n.icon-quote-left:before {\n  content: \"\\f10d\";\n}\n.icon-list-ul:before {\n  content: \"\\f0ca\";\n}\n.icon-list-ol:before {\n  content: \"\\f0cb\";\n}\n.icon-link:before {\n  content: \"\\f0c1\";\n}\n.icon-picture:before {\n  content: \"\\f03e\";\n}\n.icon-reply:before {\n  content: \"\\f112\";\n}\n.icon-share-alt:before {\n  content: \"\\f064\";\n}\n.icon-preview:before {\n  content: \"\\f06e\";\n}\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 7137
        },
        "cache": {},
        "timings": {
          "blocked": 3.52000002749264,
          "dns": -1,
          "connect": -1,
          "send": 0.07699988782405986,
          "wait": 3788.117000134663,
          "receive": 25073.380999965593,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.916Z",
        "time": 28571.94900000468,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/js/libs/wmd.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 10:35:25 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b16d-65b8\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 26040,
            "mimeType": "application/javascript",
            "text": "/**\r\n * marked - a markdown parser\r\n * Copyright (c) 2011-2013, Christopher Jeffrey. (MIT Licensed)\r\n * https://github.com/chjj/marked\r\n */\r\n\r\n;(function() {\r\n\r\n/**\r\n * Block-Level Grammar\r\n */\r\n\r\nvar block = {\r\n  newline: /^\\n+/,\r\n  code: /^( {4}[^\\n]+\\n*)+/,\r\n  fences: noop,\r\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\r\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\r\n  nptable: noop,\r\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\r\n  blockquote: /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+/,\r\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\r\n  html: /^ *(?:comment|closed|closing) *(?:\\n{2,}|\\s*$)/,\r\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\r\n  table: noop,\r\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\r\n  text: /^[^\\n]+/\r\n};\r\n\r\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\r\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\r\nblock.item = replace(block.item, 'gm')\r\n  (/bull/g, block.bullet)\r\n  ();\r\n\r\nblock.list = replace(block.list)\r\n  (/bull/g, block.bullet)\r\n  ('hr', /\\n+(?=(?: *[-*_]){3,} *(?:\\n+|$))/)\r\n  ();\r\n\r\nblock._tag = '(?!(?:'\r\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\r\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\r\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|@)\\\\b';\r\n\r\nblock.html = replace(block.html)\r\n  ('comment', /<!--[\\s\\S]*?-->/)\r\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\r\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\r\n  (/tag/g, block._tag)\r\n  ();\r\n\r\nblock.paragraph = replace(block.paragraph)\r\n  ('hr', block.hr)\r\n  ('heading', block.heading)\r\n  ('lheading', block.lheading)\r\n  ('blockquote', block.blockquote)\r\n  ('tag', '<' + block._tag)\r\n  ('def', block.def)\r\n  ();\r\n\r\n/**\r\n * Normal Block Grammar\r\n */\r\n\r\nblock.normal = merge({}, block);\r\n\r\n/**\r\n * GFM Block Grammar\r\n */\r\n\r\nblock.gfm = merge({}, block.normal, {\r\n  fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\r\n  paragraph: /^/\r\n});\r\n\r\nblock.gfm.paragraph = replace(block.paragraph)\r\n  ('(?!', '(?!'\r\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\r\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\r\n  ();\r\n\r\n/**\r\n * GFM + Tables Block Grammar\r\n */\r\n\r\nblock.tables = merge({}, block.gfm, {\r\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\r\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\r\n});\r\n\r\n/**\r\n * Block Lexer\r\n */\r\n\r\nfunction Lexer(options) {\r\n  this.tokens = [];\r\n  this.tokens.links = {};\r\n  this.options = options || marked.defaults;\r\n  this.rules = block.normal;\r\n\r\n  if (this.options.gfm) {\r\n    if (this.options.tables) {\r\n      this.rules = block.tables;\r\n    } else {\r\n      this.rules = block.gfm;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Expose Block Rules\r\n */\r\n\r\nLexer.rules = block;\r\n\r\n/**\r\n * Static Lex Method\r\n */\r\n\r\nLexer.lex = function(src, options) {\r\n  var lexer = new Lexer(options);\r\n  return lexer.lex(src);\r\n};\r\n\r\n/**\r\n * Preprocessing\r\n */\r\n\r\nLexer.prototype.lex = function(src) {\r\n  src = src\r\n    .replace(/\\r\\n|\\r/g, '\\n')\r\n    .replace(/\\t/g, '    ')\r\n    .replace(/\\u00a0/g, ' ')\r\n    .replace(/\\u2424/g, '\\n');\r\n\r\n  return this.token(src, true);\r\n};\r\n\r\n/**\r\n * Lexing\r\n */\r\n\r\nLexer.prototype.token = function(src, top) {\r\n  var src = src.replace(/^ +$/gm, '')\r\n    , next\r\n    , loose\r\n    , cap\r\n    , bull\r\n    , b\r\n    , item\r\n    , space\r\n    , i\r\n    , l;\r\n\r\n  while (src) {\r\n    // newline\r\n    if (cap = this.rules.newline.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      if (cap[0].length > 1) {\r\n        this.tokens.push({\r\n          type: 'space'\r\n        });\r\n      }\r\n    }\r\n\r\n    // code\r\n    if (cap = this.rules.code.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      cap = cap[0].replace(/^ {4}/gm, '');\r\n      this.tokens.push({\r\n        type: 'code',\r\n        text: !this.options.pedantic\r\n          ? cap.replace(/\\n+$/, '')\r\n          : cap\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // fences (gfm)\r\n    if (cap = this.rules.fences.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'code',\r\n        lang: cap[2],\r\n        text: cap[3]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // heading\r\n    if (cap = this.rules.heading.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'heading',\r\n        depth: cap[1].length,\r\n        text: cap[2]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // table no leading pipe (gfm)\r\n    if (top && (cap = this.rules.nptable.exec(src))) {\r\n      src = src.substring(cap[0].length);\r\n\r\n      item = {\r\n        type: 'table',\r\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\r\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\r\n      };\r\n\r\n      for (i = 0; i < item.align.length; i++) {\r\n        if (/^ *-+: *$/.test(item.align[i])) {\r\n          item.align[i] = 'right';\r\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n          item.align[i] = 'center';\r\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n          item.align[i] = 'left';\r\n        } else {\r\n          item.align[i] = null;\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < item.cells.length; i++) {\r\n        item.cells[i] = item.cells[i].split(/ *\\| */);\r\n      }\r\n\r\n      this.tokens.push(item);\r\n\r\n      continue;\r\n    }\r\n\r\n    // lheading\r\n    if (cap = this.rules.lheading.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'heading',\r\n        depth: cap[2] === '=' ? 1 : 2,\r\n        text: cap[1]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // hr\r\n    if (cap = this.rules.hr.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'hr'\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // blockquote\r\n    if (cap = this.rules.blockquote.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n\r\n      this.tokens.push({\r\n        type: 'blockquote_start'\r\n      });\r\n\r\n      cap = cap[0].replace(/^ *> ?/gm, '');\r\n\r\n      // Pass `top` to keep the current\r\n      // \"toplevel\" state. This is exactly\r\n      // how markdown.pl works.\r\n      this.token(cap, top);\r\n\r\n      this.tokens.push({\r\n        type: 'blockquote_end'\r\n      });\r\n\r\n      continue;\r\n    }\r\n\r\n    // list\r\n    if (cap = this.rules.list.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      bull = cap[2];\r\n\r\n      this.tokens.push({\r\n        type: 'list_start',\r\n        ordered: bull.length > 1\r\n      });\r\n\r\n      // Get each top-level item.\r\n      cap = cap[0].match(this.rules.item);\r\n\r\n      next = false;\r\n      l = cap.length;\r\n      i = 0;\r\n\r\n      for (; i < l; i++) {\r\n        item = cap[i];\r\n\r\n        // Remove the list item's bullet\r\n        // so it is seen as the next token.\r\n        space = item.length;\r\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\r\n\r\n        // Outdent whatever the\r\n        // list item contains. Hacky.\r\n        if (~item.indexOf('\\n ')) {\r\n          space -= item.length;\r\n          item = !this.options.pedantic\r\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\r\n            : item.replace(/^ {1,4}/gm, '');\r\n        }\r\n\r\n        // Determine whether the next list item belongs here.\r\n        // Backpedal if it does not belong in this list.\r\n        if (this.options.smartLists && i !== l - 1) {\r\n          b = block.bullet.exec(cap[i + 1])[0];\r\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\r\n            src = cap.slice(i + 1).join('\\n') + src;\r\n            i = l - 1;\r\n          }\r\n        }\r\n\r\n        // Determine whether item is loose or not.\r\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\r\n        // for discount behavior.\r\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\r\n        if (i !== l - 1) {\r\n          next = item.charAt(item.length - 1) === '\\n';\r\n          if (!loose) loose = next;\r\n        }\r\n\r\n        this.tokens.push({\r\n          type: loose\r\n            ? 'loose_item_start'\r\n            : 'list_item_start'\r\n        });\r\n\r\n        // Recurse.\r\n        this.token(item, false);\r\n\r\n        this.tokens.push({\r\n          type: 'list_item_end'\r\n        });\r\n      }\r\n\r\n      this.tokens.push({\r\n        type: 'list_end'\r\n      });\r\n\r\n      continue;\r\n    }\r\n\r\n    // html\r\n    if (cap = this.rules.html.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: this.options.sanitize\r\n          ? 'paragraph'\r\n          : 'html',\r\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\r\n        text: cap[0]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // def\r\n    if (top && (cap = this.rules.def.exec(src))) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.links[cap[1].toLowerCase()] = {\r\n        href: cap[2],\r\n        title: cap[3]\r\n      };\r\n      continue;\r\n    }\r\n\r\n    // table (gfm)\r\n    if (top && (cap = this.rules.table.exec(src))) {\r\n      src = src.substring(cap[0].length);\r\n\r\n      item = {\r\n        type: 'table',\r\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\r\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\r\n      };\r\n\r\n      for (i = 0; i < item.align.length; i++) {\r\n        if (/^ *-+: *$/.test(item.align[i])) {\r\n          item.align[i] = 'right';\r\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n          item.align[i] = 'center';\r\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n          item.align[i] = 'left';\r\n        } else {\r\n          item.align[i] = null;\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < item.cells.length; i++) {\r\n        item.cells[i] = item.cells[i]\r\n          .replace(/^ *\\| *| *\\| *$/g, '')\r\n          .split(/ *\\| */);\r\n      }\r\n\r\n      this.tokens.push(item);\r\n\r\n      continue;\r\n    }\r\n\r\n    // top-level paragraph\r\n    if (top && (cap = this.rules.paragraph.exec(src))) {\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'paragraph',\r\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\r\n          ? cap[1].slice(0, -1)\r\n          : cap[1]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // text\r\n    if (cap = this.rules.text.exec(src)) {\r\n      // Top-level should never reach here.\r\n      src = src.substring(cap[0].length);\r\n      this.tokens.push({\r\n        type: 'text',\r\n        text: cap[0]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    if (src) {\r\n      throw new\r\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\r\n    }\r\n  }\r\n\r\n  return this.tokens;\r\n};\r\n\r\n/**\r\n * Inline-Level Grammar\r\n */\r\n\r\nvar inline = {\r\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\r\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\r\n  url: noop,\r\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\r\n  link: /^!?\\[(inside)\\]\\(href\\)/,\r\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\r\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\r\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\r\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\r\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\r\n  br: /^ {2,}\\n(?!\\s*$)/,\r\n  del: noop,\r\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\r\n};\r\n\r\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\r\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\r\n\r\ninline.link = replace(inline.link)\r\n  ('inside', inline._inside)\r\n  ('href', inline._href)\r\n  ();\r\n\r\ninline.reflink = replace(inline.reflink)\r\n  ('inside', inline._inside)\r\n  ();\r\n\r\n/**\r\n * Normal Inline Grammar\r\n */\r\n\r\ninline.normal = merge({}, inline);\r\n\r\n/**\r\n * Pedantic Inline Grammar\r\n */\r\n\r\ninline.pedantic = merge({}, inline.normal, {\r\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\r\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\r\n});\r\n\r\n/**\r\n * GFM Inline Grammar\r\n */\r\n\r\ninline.gfm = merge({}, inline.normal, {\r\n  escape: replace(inline.escape)('])', '~|])')(),\r\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\r\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\r\n  text: replace(inline.text)\r\n    (']|', '~]|')\r\n    ('|', '|https?://|')\r\n    ()\r\n});\r\n\r\n/**\r\n * GFM + Line Breaks Inline Grammar\r\n */\r\n\r\ninline.breaks = merge({}, inline.gfm, {\r\n  br: replace(inline.br)('{2,}', '*')(),\r\n  text: replace(inline.gfm.text)('{2,}', '*')()\r\n});\r\n\r\n/**\r\n * Inline Lexer & Compiler\r\n */\r\n\r\nfunction InlineLexer(links, options) {\r\n  this.options = options || marked.defaults;\r\n  this.links = links;\r\n  this.rules = inline.normal;\r\n\r\n  if (!this.links) {\r\n    throw new\r\n      Error('Tokens array requires a `links` property.');\r\n  }\r\n\r\n  if (this.options.gfm) {\r\n    if (this.options.breaks) {\r\n      this.rules = inline.breaks;\r\n    } else {\r\n      this.rules = inline.gfm;\r\n    }\r\n  } else if (this.options.pedantic) {\r\n    this.rules = inline.pedantic;\r\n  }\r\n}\r\n\r\n/**\r\n * Expose Inline Rules\r\n */\r\n\r\nInlineLexer.rules = inline;\r\n\r\n/**\r\n * Static Lexing/Compiling Method\r\n */\r\n\r\nInlineLexer.output = function(src, links, options) {\r\n  var inline = new InlineLexer(links, options);\r\n  return inline.output(src);\r\n};\r\n\r\n/**\r\n * Lexing/Compiling\r\n */\r\n\r\nInlineLexer.prototype.output = function(src) {\r\n  var out = ''\r\n    , link\r\n    , text\r\n    , href\r\n    , cap;\r\n\r\n  while (src) {\r\n    // escape\r\n    if (cap = this.rules.escape.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += cap[1];\r\n      continue;\r\n    }\r\n\r\n    // autolink\r\n    if (cap = this.rules.autolink.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      if (cap[2] === '@') {\r\n        text = cap[1].charAt(6) === ':'\r\n          ? this.mangle(cap[1].substring(7))\r\n          : this.mangle(cap[1]);\r\n        href = this.mangle('mailto:') + text;\r\n      } else {\r\n        text = escape(cap[1]);\r\n        href = text;\r\n      }\r\n      out += '<a href=\"'\r\n        + href\r\n        + '\">'\r\n        + text\r\n        + '</a>';\r\n      continue;\r\n    }\r\n\r\n    // url (gfm)\r\n    if (cap = this.rules.url.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      text = escape(cap[1]);\r\n      href = text;\r\n      out += '<a href=\"'\r\n        + href\r\n        + '\">'\r\n        + text\r\n        + '</a>';\r\n      continue;\r\n    }\r\n\r\n    // tag\r\n    if (cap = this.rules.tag.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += this.options.sanitize\r\n        ? escape(cap[0])\r\n        : cap[0];\r\n      continue;\r\n    }\r\n\r\n    // link\r\n    if (cap = this.rules.link.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += this.outputLink(cap, {\r\n        href: cap[2],\r\n        title: cap[3]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // reflink, nolink\r\n    if ((cap = this.rules.reflink.exec(src))\r\n        || (cap = this.rules.nolink.exec(src))) {\r\n      src = src.substring(cap[0].length);\r\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\r\n      link = this.links[link.toLowerCase()];\r\n      if (!link || !link.href) {\r\n        out += cap[0].charAt(0);\r\n        src = cap[0].substring(1) + src;\r\n        continue;\r\n      }\r\n      out += this.outputLink(cap, link);\r\n      continue;\r\n    }\r\n\r\n    // strong\r\n    if (cap = this.rules.strong.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += '<strong>'\r\n        + this.output(cap[2] || cap[1])\r\n        + '</strong>';\r\n      continue;\r\n    }\r\n\r\n    // em\r\n    if (cap = this.rules.em.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += '<em>'\r\n        + this.output(cap[2] || cap[1])\r\n        + '</em>';\r\n      continue;\r\n    }\r\n\r\n    // code\r\n    if (cap = this.rules.code.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += '<code>'\r\n        + escape(cap[2], true)\r\n        + '</code>';\r\n      continue;\r\n    }\r\n\r\n    // br\r\n    if (cap = this.rules.br.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += '<br>';\r\n      continue;\r\n    }\r\n\r\n    // del (gfm)\r\n    if (cap = this.rules.del.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += '<del>'\r\n        + this.output(cap[1])\r\n        + '</del>';\r\n      continue;\r\n    }\r\n\r\n    // text\r\n    if (cap = this.rules.text.exec(src)) {\r\n      src = src.substring(cap[0].length);\r\n      out += escape(this.smartypants(cap[0]));\r\n      continue;\r\n    }\r\n\r\n    if (src) {\r\n      throw new\r\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\r\n    }\r\n  }\r\n\r\n  return out;\r\n};\r\n\r\n/**\r\n * Compile Link\r\n */\r\n\r\nInlineLexer.prototype.outputLink = function(cap, link) {\r\n  if (cap[0].charAt(0) !== '!') {\r\n    return '<a href=\"'\r\n      + escape(link.href)\r\n      + '\"'\r\n      + (link.title\r\n      ? ' title=\"'\r\n      + escape(link.title)\r\n      + '\"'\r\n      : '')\r\n      + '>'\r\n      + this.output(cap[1])\r\n      + '</a>';\r\n  } else {\r\n    return '<img src=\"'\r\n      + escape(link.href)\r\n      + '\" alt=\"'\r\n      + escape(cap[1])\r\n      + '\"'\r\n      + (link.title\r\n      ? ' title=\"'\r\n      + escape(link.title)\r\n      + '\"'\r\n      : '')\r\n      + '>';\r\n  }\r\n};\r\n\r\n/**\r\n * Smartypants Transformations\r\n */\r\n\r\nInlineLexer.prototype.smartypants = function(text) {\r\n  if (!this.options.smartypants) return text;\r\n  return text\r\n    // em-dashes\r\n    .replace(/--/g, '\\u2014')\r\n    // opening singles\r\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\r\n    // closing singles & apostrophes\r\n    .replace(/'/g, '\\u2019')\r\n    // opening doubles\r\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\r\n    // closing doubles\r\n    .replace(/\"/g, '\\u201d')\r\n    // ellipses\r\n    .replace(/\\.{3}/g, '\\u2026');\r\n};\r\n\r\n/**\r\n * Mangle Links\r\n */\r\n\r\nInlineLexer.prototype.mangle = function(text) {\r\n  var out = ''\r\n    , l = text.length\r\n    , i = 0\r\n    , ch;\r\n\r\n  for (; i < l; i++) {\r\n    ch = text.charCodeAt(i);\r\n    if (Math.random() > 0.5) {\r\n      ch = 'x' + ch.toString(16);\r\n    }\r\n    out += '&#' + ch + ';';\r\n  }\r\n\r\n  return out;\r\n};\r\n\r\n/**\r\n * Parsing & Compiling\r\n */\r\n\r\nfunction Parser(options) {\r\n  this.tokens = [];\r\n  this.token = null;\r\n  this.options = options || marked.defaults;\r\n}\r\n\r\n/**\r\n * Static Parse Method\r\n */\r\n\r\nParser.parse = function(src, options) {\r\n  var parser = new Parser(options);\r\n  return parser.parse(src);\r\n};\r\n\r\n/**\r\n * Parse Loop\r\n */\r\n\r\nParser.prototype.parse = function(src) {\r\n  this.inline = new InlineLexer(src.links, this.options);\r\n  this.tokens = src.reverse();\r\n\r\n  var out = '';\r\n  while (this.next()) {\r\n    out += this.tok();\r\n  }\r\n\r\n  return out;\r\n};\r\n\r\n/**\r\n * Next Token\r\n */\r\n\r\nParser.prototype.next = function() {\r\n  return this.token = this.tokens.pop();\r\n};\r\n\r\n/**\r\n * Preview Next Token\r\n */\r\n\r\nParser.prototype.peek = function() {\r\n  return this.tokens[this.tokens.length - 1] || 0;\r\n};\r\n\r\n/**\r\n * Parse Text Tokens\r\n */\r\n\r\nParser.prototype.parseText = function() {\r\n  var body = this.token.text;\r\n\r\n  while (this.peek().type === 'text') {\r\n    body += '\\n' + this.next().text;\r\n  }\r\n\r\n  return this.inline.output(body);\r\n};\r\n\r\n/**\r\n * Parse Current Token\r\n */\r\n\r\nParser.prototype.tok = function() {\r\n  switch (this.token.type) {\r\n    case 'space': {\r\n      return '';\r\n    }\r\n    case 'hr': {\r\n      return '<hr>\\n';\r\n    }\r\n    case 'heading': {\r\n      return '<h'\r\n        + this.token.depth\r\n        + ' id=\"'\r\n        + this.token.text.toLowerCase().replace(/[^\\w]+/g, '-')\r\n        + '\">'\r\n        + this.inline.output(this.token.text)\r\n        + '</h'\r\n        + this.token.depth\r\n        + '>\\n';\r\n    }\r\n    case 'code': {\r\n      if (this.options.highlight) {\r\n        var code = this.options.highlight(this.token.text, this.token.lang);\r\n        if (code != null && code !== this.token.text) {\r\n          this.token.escaped = true;\r\n          this.token.text = code;\r\n        }\r\n      }\r\n\r\n      if (!this.token.escaped) {\r\n        this.token.text = escape(this.token.text, true);\r\n      }\r\n\r\n      return '<pre><code'\r\n        + (this.token.lang\r\n        ? ' class=\"'\r\n        + this.options.langPrefix\r\n        + this.token.lang\r\n        + '\"'\r\n        : '')\r\n        + '>'\r\n        + this.token.text\r\n        + '</code></pre>\\n';\r\n    }\r\n    case 'table': {\r\n      var body = ''\r\n        , heading\r\n        , i\r\n        , row\r\n        , cell\r\n        , j;\r\n\r\n      // header\r\n      body += '<thead>\\n<tr>\\n';\r\n      for (i = 0; i < this.token.header.length; i++) {\r\n        heading = this.inline.output(this.token.header[i]);\r\n        body += '<th';\r\n        if (this.token.align[i]) {\r\n          body += ' style=\"text-align:' + this.token.align[i] + '\"';\r\n        }\r\n        body += '>' + heading + '</th>\\n';\r\n      }\r\n      body += '</tr>\\n</thead>\\n';\r\n\r\n      // body\r\n      body += '<tbody>\\n'\r\n      for (i = 0; i < this.token.cells.length; i++) {\r\n        row = this.token.cells[i];\r\n        body += '<tr>\\n';\r\n        for (j = 0; j < row.length; j++) {\r\n          cell = this.inline.output(row[j]);\r\n          body += '<td';\r\n          if (this.token.align[j]) {\r\n            body += ' style=\"text-align:' + this.token.align[j] + '\"';\r\n          }\r\n          body += '>' + cell + '</td>\\n';\r\n        }\r\n        body += '</tr>\\n';\r\n      }\r\n      body += '</tbody>\\n';\r\n\r\n      return '<table>\\n'\r\n        + body\r\n        + '</table>\\n';\r\n    }\r\n    case 'blockquote_start': {\r\n      var body = '';\r\n\r\n      while (this.next().type !== 'blockquote_end') {\r\n        body += this.tok();\r\n      }\r\n\r\n      return '<blockquote>\\n'\r\n        + body\r\n        + '</blockquote>\\n';\r\n    }\r\n    case 'list_start': {\r\n      var type = this.token.ordered ? 'ol' : 'ul'\r\n        , body = '';\r\n\r\n      while (this.next().type !== 'list_end') {\r\n        body += this.tok();\r\n      }\r\n\r\n      return '<'\r\n        + type\r\n        + '>\\n'\r\n        + body\r\n        + '</'\r\n        + type\r\n        + '>\\n';\r\n    }\r\n    case 'list_item_start': {\r\n      var body = '';\r\n\r\n      while (this.next().type !== 'list_item_end') {\r\n        body += this.token.type === 'text'\r\n          ? this.parseText()\r\n          : this.tok();\r\n      }\r\n\r\n      return '<li>'\r\n        + body\r\n        + '</li>\\n';\r\n    }\r\n    case 'loose_item_start': {\r\n      var body = '';\r\n\r\n      while (this.next().type !== 'list_item_end') {\r\n        body += this.tok();\r\n      }\r\n\r\n      return '<li>'\r\n        + body\r\n        + '</li>\\n';\r\n    }\r\n    case 'html': {\r\n      return !this.token.pre && !this.options.pedantic\r\n        ? this.inline.output(this.token.text)\r\n        : this.token.text;\r\n    }\r\n    case 'paragraph': {\r\n      return '<p>'\r\n        + this.inline.output(this.token.text)\r\n        + '</p>\\n';\r\n    }\r\n    case 'text': {\r\n      return '<p>'\r\n        + this.parseText()\r\n        + '</p>\\n';\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction escape(html, encode) {\r\n  return html\r\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;');\r\n}\r\n\r\nfunction replace(regex, opt) {\r\n  regex = regex.source;\r\n  opt = opt || '';\r\n  return function self(name, val) {\r\n    if (!name) return new RegExp(regex, opt);\r\n    val = val.source || val;\r\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\r\n    regex = regex.replace(name, val);\r\n    return self;\r\n  };\r\n}\r\n\r\nfunction noop() {}\r\nnoop.exec = noop;\r\n\r\nfunction merge(obj) {\r\n  var i = 1\r\n    , target\r\n    , key;\r\n\r\n  for (; i < arguments.length; i++) {\r\n    target = arguments[i];\r\n    for (key in target) {\r\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\r\n        obj[key] = target[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Marked\r\n */\r\n\r\nfunction marked(src, opt, callback) {\r\n  if (callback || typeof opt === 'function') {\r\n    if (!callback) {\r\n      callback = opt;\r\n      opt = null;\r\n    }\r\n\r\n    opt = merge({}, marked.defaults, opt || {});\r\n\r\n    var highlight = opt.highlight\r\n      , tokens\r\n      , pending\r\n      , i = 0;\r\n\r\n    try {\r\n      tokens = Lexer.lex(src, opt)\r\n    } catch (e) {\r\n      return callback(e);\r\n    }\r\n\r\n    pending = tokens.length;\r\n\r\n    var done = function() {\r\n      var out, err;\r\n\r\n      try {\r\n        out = Parser.parse(tokens, opt);\r\n      } catch (e) {\r\n        err = e;\r\n      }\r\n\r\n      opt.highlight = highlight;\r\n\r\n      return err\r\n        ? callback(err)\r\n        : callback(null, out);\r\n    };\r\n\r\n    if (!highlight || highlight.length < 3) {\r\n      return done();\r\n    }\r\n\r\n    delete opt.highlight;\r\n\r\n    if (!pending) return done();\r\n\r\n    for (; i < tokens.length; i++) {\r\n      (function(token) {\r\n        if (token.type !== 'code') {\r\n          return --pending || done();\r\n        }\r\n        return highlight(token.text, token.lang, function(err, code) {\r\n          if (code == null || code === token.text) {\r\n            return --pending || done();\r\n          }\r\n          token.text = code;\r\n          token.escaped = true;\r\n          --pending || done();\r\n        });\r\n      })(tokens[i]);\r\n    }\r\n\r\n    return;\r\n  }\r\n  try {\r\n    if (opt) opt = merge({}, marked.defaults, opt);\r\n    return Parser.parse(Lexer.lex(src, opt), opt);\r\n  } catch (e) {\r\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\r\n    if ((opt || marked.defaults).silent) {\r\n      return '<p>An error occured:</p><pre>'\r\n        + escape(e.message + '', true)\r\n        + '</pre>';\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * Options\r\n */\r\n\r\nmarked.options =\r\nmarked.setOptions = function(opt) {\r\n  merge(marked.defaults, opt);\r\n  return marked;\r\n};\r\n\r\nmarked.defaults = {\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: false,\r\n  silent: false,\r\n  highlight: null,\r\n  langPrefix: 'lang-',\r\n  smartypants: false\r\n};\r\n\r\n/**\r\n * Expose\r\n */\r\n\r\nmarked.Parser = Parser;\r\nmarked.parser = Parser.parse;\r\n\r\nmarked.Lexer = Lexer;\r\nmarked.lexer = Lexer.lex;\r\n\r\nmarked.InlineLexer = InlineLexer;\r\nmarked.inlineLexer = InlineLexer.output;\r\n\r\nmarked.parse = marked;\r\n\r\nif (typeof exports === 'object') {\r\n  module.exports = marked;\r\n} else if (typeof define === 'function' && define.amd) {\r\n  define(function() { return marked; });\r\n} else {\r\n  this.marked = marked;\r\n}\r\n\r\n}).call(function() {\r\n  return this || (typeof window !== 'undefined' ? window : global);\r\n}());\r\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 6484
        },
        "cache": {},
        "timings": {
          "blocked": 3.52400005795062,
          "dns": -1,
          "connect": -1,
          "send": 0.07300009019672027,
          "wait": 4247.384999878703,
          "receive": 24320.966999977827,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.917Z",
        "time": 41809.36899990775,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/js/libs/showdown.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 10:35:24 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b16c-52dc6\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 339398,
            "mimeType": "application/javascript",
            "text": "(function(global) {\r\n// CodeMirror version 3.15\r\n//\r\n// CodeMirror is the only global var we claim\r\n    var CodeMirror = (function() {\r\n        \"use strict\";\r\n\r\n        // BROWSER SNIFFING\r\n\r\n        // Crude, but necessary to handle a number of hard-to-feature-detect\r\n        // bugs and behavior differences.\r\n        var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\r\n        var ie = /MSIE \\d/.test(navigator.userAgent);\r\n        var ie_lt8 = ie && (document.documentMode == null || document.documentMode < 8);\r\n        var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\r\n        var webkit = /WebKit\\//.test(navigator.userAgent);\r\n        var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\r\n        var chrome = /Chrome\\//.test(navigator.userAgent);\r\n        var opera = /Opera\\//.test(navigator.userAgent);\r\n        var safari = /Apple Computer/.test(navigator.vendor);\r\n        var khtml = /KHTML\\//.test(navigator.userAgent);\r\n        var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\r\n        var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\r\n        var phantom = /PhantomJS/.test(navigator.userAgent);\r\n\r\n        var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\r\n        // This is woefully incomplete. Suggestions for alternative methods welcome.\r\n        var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);\r\n        var mac = ios || /Mac/.test(navigator.platform);\r\n        var windows = /windows/i.test(navigator.platform);\r\n\r\n        var opera_version = opera && navigator.userAgent.match(/Version\\/(\\d*\\.\\d*)/);\r\n        if (opera_version) opera_version = Number(opera_version[1]);\r\n        if (opera_version && opera_version >= 15) { opera = false; webkit = true; }\r\n        // Some browsers use the wrong event properties to signal cmd/ctrl on OS X\r\n        var flipCtrlCmd = mac && (qtwebkit || opera && (opera_version == null || opera_version < 12.11));\r\n        var captureMiddleClick = gecko || (ie && !ie_lt9);\r\n\r\n        // Optimize some code when these features are not used\r\n        var sawReadOnlySpans = false, sawCollapsedSpans = false;\r\n\r\n        // CONSTRUCTOR\r\n\r\n        function CodeMirror(place, options) {\r\n            if (!(this instanceof CodeMirror)) return new CodeMirror(place, options);\r\n\r\n            this.options = options = options || {};\r\n            // Determine effective options based on given values and defaults.\r\n            for (var opt in defaults) if (!options.hasOwnProperty(opt) && defaults.hasOwnProperty(opt))\r\n                options[opt] = defaults[opt];\r\n            setGuttersForLineNumbers(options);\r\n\r\n            var docStart = typeof options.value == \"string\" ? 0 : options.value.first;\r\n            var display = this.display = makeDisplay(place, docStart);\r\n            display.wrapper.CodeMirror = this;\r\n            updateGutters(this);\r\n            if (options.autofocus && !mobile) focusInput(this);\r\n\r\n            this.state = {keyMaps: [],\r\n                overlays: [],\r\n                modeGen: 0,\r\n                overwrite: false, focused: false,\r\n                suppressEdits: false, pasteIncoming: false,\r\n                draggingText: false,\r\n                highlight: new Delayed()};\r\n\r\n            themeChanged(this);\r\n            if (options.lineWrapping)\r\n                this.display.wrapper.className += \" CodeMirror-wrap\";\r\n\r\n            var doc = options.value;\r\n            if (typeof doc == \"string\") doc = new Doc(options.value, options.mode);\r\n            operation(this, attachDoc)(this, doc);\r\n\r\n            // Override magic textarea content restore that IE sometimes does\r\n            // on our hidden textarea on reload\r\n            if (ie) setTimeout(bind(resetInput, this, true), 20);\r\n\r\n            registerEventHandlers(this);\r\n            // IE throws unspecified error in certain cases, when\r\n            // trying to access activeElement before onload\r\n            var hasFocus; try { hasFocus = (document.activeElement == display.input); } catch(e) { }\r\n            if (hasFocus || (options.autofocus && !mobile)) setTimeout(bind(onFocus, this), 20);\r\n            else onBlur(this);\r\n\r\n            operation(this, function() {\r\n                for (var opt in optionHandlers)\r\n                    if (optionHandlers.propertyIsEnumerable(opt))\r\n                        optionHandlers[opt](this, options[opt], Init);\r\n                for (var i = 0; i < initHooks.length; ++i) initHooks[i](this);\r\n            })();\r\n        }\r\n\r\n        // DISPLAY CONSTRUCTOR\r\n\r\n        function makeDisplay(place, docStart) {\r\n            var d = {};\r\n\r\n            var input = d.input = elt(\"textarea\", null, null, \"position: absolute; padding: 0; width: 1px; height: 1em; outline: none; font-size: 4px;\");\r\n            if (webkit) input.style.width = \"1000px\";\r\n            else input.setAttribute(\"wrap\", \"off\");\r\n            // if border: 0; -- iOS fails to open keyboard (issue #1287)\r\n            if (ios) input.style.border = \"1px solid black\";\r\n            input.setAttribute(\"autocorrect\", \"off\"); input.setAttribute(\"autocapitalize\", \"off\"); input.setAttribute(\"spellcheck\", \"false\");\r\n\r\n            // Wraps and hides input textarea\r\n            d.inputDiv = elt(\"div\", [input], null, \"overflow: hidden; position: relative; width: 3px; height: 0px;\");\r\n            // The actual fake scrollbars.\r\n            d.scrollbarH = elt(\"div\", [elt(\"div\", null, null, \"height: 1px\")], \"CodeMirror-hscrollbar\");\r\n            d.scrollbarV = elt(\"div\", [elt(\"div\", null, null, \"width: 1px\")], \"CodeMirror-vscrollbar\");\r\n            d.scrollbarFiller = elt(\"div\", null, \"CodeMirror-scrollbar-filler\");\r\n            d.gutterFiller = elt(\"div\", null, \"CodeMirror-gutter-filler\");\r\n            // DIVs containing the selection and the actual code\r\n            d.lineDiv = elt(\"div\", null, \"CodeMirror-code\");\r\n            d.selectionDiv = elt(\"div\", null, null, \"position: relative; z-index: 1\");\r\n            // Blinky cursor, and element used to ensure cursor fits at the end of a line\r\n            d.cursor = elt(\"div\", \"\\u00a0\", \"CodeMirror-cursor\");\r\n            // Secondary cursor, shown when on a 'jump' in bi-directional text\r\n            d.otherCursor = elt(\"div\", \"\\u00a0\", \"CodeMirror-cursor CodeMirror-secondarycursor\");\r\n            // Used to measure text size\r\n            d.measure = elt(\"div\", null, \"CodeMirror-measure\");\r\n            // Wraps everything that needs to exist inside the vertically-padded coordinate system\r\n            d.lineSpace = elt(\"div\", [d.measure, d.selectionDiv, d.lineDiv, d.cursor, d.otherCursor],\r\n                null, \"position: relative; outline: none\");\r\n            // Moved around its parent to cover visible view\r\n            d.mover = elt(\"div\", [elt(\"div\", [d.lineSpace], \"CodeMirror-lines\")], null, \"position: relative\");\r\n            // Set to the height of the text, causes scrolling\r\n            d.sizer = elt(\"div\", [d.mover], \"CodeMirror-sizer\");\r\n            // D is needed because behavior of elts with overflow: auto and padding is inconsistent across browsers\r\n            d.heightForcer = elt(\"div\", null, null, \"position: absolute; height: \" + scrollerCutOff + \"px; width: 1px;\");\r\n            // Will contain the gutters, if any\r\n            d.gutters = elt(\"div\", null, \"CodeMirror-gutters\");\r\n            d.lineGutter = null;\r\n            // Provides scrolling\r\n            d.scroller = elt(\"div\", [d.sizer, d.heightForcer, d.gutters], \"CodeMirror-scroll\");\r\n            d.scroller.setAttribute(\"tabIndex\", \"-1\");\r\n            // The element in which the editor lives.\r\n            d.wrapper = elt(\"div\", [d.inputDiv, d.scrollbarH, d.scrollbarV,\r\n                d.scrollbarFiller, d.gutterFiller, d.scroller], \"CodeMirror\");\r\n            // Work around IE7 z-index bug\r\n            if (ie_lt8) { d.gutters.style.zIndex = -1; d.scroller.style.paddingRight = 0; }\r\n            if (place.appendChild) place.appendChild(d.wrapper); else place(d.wrapper);\r\n\r\n            // Needed to hide big blue blinking cursor on Mobile Safari\r\n            if (ios) input.style.width = \"0px\";\r\n            if (!webkit) d.scroller.draggable = true;\r\n            // Needed to handle Tab key in KHTML\r\n            if (khtml) { d.inputDiv.style.height = \"1px\"; d.inputDiv.style.position = \"absolute\"; }\r\n            // Need to set a minimum width to see the scrollbar on IE7 (but must not set it on IE8).\r\n            else if (ie_lt8) d.scrollbarH.style.minWidth = d.scrollbarV.style.minWidth = \"18px\";\r\n\r\n            // Current visible range (may be bigger than the view window).\r\n            d.viewOffset = d.lastSizeC = 0;\r\n            d.showingFrom = d.showingTo = docStart;\r\n\r\n            // Used to only resize the line number gutter when necessary (when\r\n            // the amount of lines crosses a boundary that makes its width change)\r\n            d.lineNumWidth = d.lineNumInnerWidth = d.lineNumChars = null;\r\n            // See readInput and resetInput\r\n            d.prevInput = \"\";\r\n            // Set to true when a non-horizontal-scrolling widget is added. As\r\n            // an optimization, widget aligning is skipped when d is false.\r\n            d.alignWidgets = false;\r\n            // Flag that indicates whether we currently expect input to appear\r\n            // (after some event like 'keypress' or 'input') and are polling\r\n            // intensively.\r\n            d.pollingFast = false;\r\n            // Self-resetting timeout for the poller\r\n            d.poll = new Delayed();\r\n\r\n            d.cachedCharWidth = d.cachedTextHeight = null;\r\n            d.measureLineCache = [];\r\n            d.measureLineCachePos = 0;\r\n\r\n            // Tracks when resetInput has punted to just putting a short\r\n            // string instead of the (large) selection.\r\n            d.inaccurateSelection = false;\r\n\r\n            // Tracks the maximum line length so that the horizontal scrollbar\r\n            // can be kept static when scrolling.\r\n            d.maxLine = null;\r\n            d.maxLineLength = 0;\r\n            d.maxLineChanged = false;\r\n\r\n            // Used for measuring wheel scrolling granularity\r\n            d.wheelDX = d.wheelDY = d.wheelStartX = d.wheelStartY = null;\r\n\r\n            return d;\r\n        }\r\n\r\n        // STATE UPDATES\r\n\r\n        // Used to get the editor into a consistent state again when options change.\r\n\r\n        function loadMode(cm) {\r\n            cm.doc.mode = CodeMirror.getMode(cm.options, cm.doc.modeOption);\r\n            cm.doc.iter(function(line) {\r\n                if (line.stateAfter) line.stateAfter = null;\r\n                if (line.styles) line.styles = null;\r\n            });\r\n            cm.doc.frontier = cm.doc.first;\r\n            startWorker(cm, 100);\r\n            cm.state.modeGen++;\r\n            if (cm.curOp) regChange(cm);\r\n        }\r\n\r\n        function wrappingChanged(cm) {\r\n            if (cm.options.lineWrapping) {\r\n                cm.display.wrapper.className += \" CodeMirror-wrap\";\r\n                cm.display.sizer.style.minWidth = \"\";\r\n            } else {\r\n                cm.display.wrapper.className = cm.display.wrapper.className.replace(\" CodeMirror-wrap\", \"\");\r\n                computeMaxLength(cm);\r\n            }\r\n            estimateLineHeights(cm);\r\n            regChange(cm);\r\n            clearCaches(cm);\r\n            setTimeout(function(){updateScrollbars(cm);}, 100);\r\n        }\r\n\r\n        function estimateHeight(cm) {\r\n            var th = textHeight(cm.display), wrapping = cm.options.lineWrapping;\r\n            var perLine = wrapping && Math.max(5, cm.display.scroller.clientWidth / charWidth(cm.display) - 3);\r\n            return function(line) {\r\n                if (lineIsHidden(cm.doc, line))\r\n                    return 0;\r\n                else if (wrapping)\r\n                    return (Math.ceil(line.text.length / perLine) || 1) * th;\r\n                else\r\n                    return th;\r\n            };\r\n        }\r\n\r\n        function estimateLineHeights(cm) {\r\n            var doc = cm.doc, est = estimateHeight(cm);\r\n            doc.iter(function(line) {\r\n                var estHeight = est(line);\r\n                if (estHeight != line.height) updateLineHeight(line, estHeight);\r\n            });\r\n        }\r\n\r\n        function keyMapChanged(cm) {\r\n            var map = keyMap[cm.options.keyMap], style = map.style;\r\n            cm.display.wrapper.className = cm.display.wrapper.className.replace(/\\s*cm-keymap-\\S+/g, \"\") +\r\n                (style ? \" cm-keymap-\" + style : \"\");\r\n            cm.state.disableInput = map.disableInput;\r\n        }\r\n\r\n        function themeChanged(cm) {\r\n            cm.display.wrapper.className = cm.display.wrapper.className.replace(/\\s*cm-s-\\S+/g, \"\") +\r\n                cm.options.theme.replace(/(^|\\s)\\s*/g, \" cm-s-\");\r\n            clearCaches(cm);\r\n        }\r\n\r\n        function guttersChanged(cm) {\r\n            updateGutters(cm);\r\n            regChange(cm);\r\n            setTimeout(function(){alignHorizontally(cm);}, 20);\r\n        }\r\n\r\n        function updateGutters(cm) {\r\n            var gutters = cm.display.gutters, specs = cm.options.gutters;\r\n            removeChildren(gutters);\r\n            for (var i = 0; i < specs.length; ++i) {\r\n                var gutterClass = specs[i];\r\n                var gElt = gutters.appendChild(elt(\"div\", null, \"CodeMirror-gutter \" + gutterClass));\r\n                if (gutterClass == \"CodeMirror-linenumbers\") {\r\n                    cm.display.lineGutter = gElt;\r\n                    gElt.style.width = (cm.display.lineNumWidth || 1) + \"px\";\r\n                }\r\n            }\r\n            gutters.style.display = i ? \"\" : \"none\";\r\n        }\r\n\r\n        function lineLength(doc, line) {\r\n            if (line.height == 0) return 0;\r\n            var len = line.text.length, merged, cur = line;\r\n            while (merged = collapsedSpanAtStart(cur)) {\r\n                var found = merged.find();\r\n                cur = getLine(doc, found.from.line);\r\n                len += found.from.ch - found.to.ch;\r\n            }\r\n            cur = line;\r\n            while (merged = collapsedSpanAtEnd(cur)) {\r\n                var found = merged.find();\r\n                len -= cur.text.length - found.from.ch;\r\n                cur = getLine(doc, found.to.line);\r\n                len += cur.text.length - found.to.ch;\r\n            }\r\n            return len;\r\n        }\r\n\r\n        function computeMaxLength(cm) {\r\n            var d = cm.display, doc = cm.doc;\r\n            d.maxLine = getLine(doc, doc.first);\r\n            d.maxLineLength = lineLength(doc, d.maxLine);\r\n            d.maxLineChanged = true;\r\n            doc.iter(function(line) {\r\n                var len = lineLength(doc, line);\r\n                if (len > d.maxLineLength) {\r\n                    d.maxLineLength = len;\r\n                    d.maxLine = line;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Make sure the gutters options contains the element\r\n        // \"CodeMirror-linenumbers\" when the lineNumbers option is true.\r\n        function setGuttersForLineNumbers(options) {\r\n            var found = false;\r\n            for (var i = 0; i < options.gutters.length; ++i) {\r\n                if (options.gutters[i] == \"CodeMirror-linenumbers\") {\r\n                    if (options.lineNumbers) found = true;\r\n                    else options.gutters.splice(i--, 1);\r\n                }\r\n            }\r\n            if (!found && options.lineNumbers)\r\n                options.gutters.push(\"CodeMirror-linenumbers\");\r\n        }\r\n\r\n        // SCROLLBARS\r\n\r\n        // Re-synchronize the fake scrollbars with the actual size of the\r\n        // content. Optionally force a scrollTop.\r\n        function updateScrollbars(cm) {\r\n            var d = cm.display, docHeight = cm.doc.height;\r\n            var totalHeight = docHeight + paddingVert(d);\r\n            d.sizer.style.minHeight = d.heightForcer.style.top = totalHeight + \"px\";\r\n            d.gutters.style.height = Math.max(totalHeight, d.scroller.clientHeight - scrollerCutOff) + \"px\";\r\n            var scrollHeight = Math.max(totalHeight, d.scroller.scrollHeight);\r\n            var needsH = d.scroller.scrollWidth > (d.scroller.clientWidth + 1);\r\n            var needsV = scrollHeight > (d.scroller.clientHeight + 1);\r\n            if (needsV) {\r\n                d.scrollbarV.style.display = \"block\";\r\n                d.scrollbarV.style.bottom = needsH ? scrollbarWidth(d.measure) + \"px\" : \"0\";\r\n                d.scrollbarV.firstChild.style.height =\r\n                    (scrollHeight - d.scroller.clientHeight + d.scrollbarV.clientHeight) + \"px\";\r\n            } else d.scrollbarV.style.display = \"\";\r\n            if (needsH) {\r\n                d.scrollbarH.style.display = \"block\";\r\n                d.scrollbarH.style.right = needsV ? scrollbarWidth(d.measure) + \"px\" : \"0\";\r\n                d.scrollbarH.firstChild.style.width =\r\n                    (d.scroller.scrollWidth - d.scroller.clientWidth + d.scrollbarH.clientWidth) + \"px\";\r\n            } else d.scrollbarH.style.display = \"\";\r\n            if (needsH && needsV) {\r\n                d.scrollbarFiller.style.display = \"block\";\r\n                d.scrollbarFiller.style.height = d.scrollbarFiller.style.width = scrollbarWidth(d.measure) + \"px\";\r\n            } else d.scrollbarFiller.style.display = \"\";\r\n            if (needsH && cm.options.coverGutterNextToScrollbar && cm.options.fixedGutter) {\r\n                d.gutterFiller.style.display = \"block\";\r\n                d.gutterFiller.style.height = scrollbarWidth(d.measure) + \"px\";\r\n                d.gutterFiller.style.width = d.gutters.offsetWidth + \"px\";\r\n            } else d.gutterFiller.style.display = \"\";\r\n\r\n            if (mac_geLion && scrollbarWidth(d.measure) === 0)\r\n                d.scrollbarV.style.minWidth = d.scrollbarH.style.minHeight = mac_geMountainLion ? \"18px\" : \"12px\";\r\n        }\r\n\r\n        function visibleLines(display, doc, viewPort) {\r\n            var top = display.scroller.scrollTop, height = display.wrapper.clientHeight;\r\n            if (typeof viewPort == \"number\") top = viewPort;\r\n            else if (viewPort) {top = viewPort.top; height = viewPort.bottom - viewPort.top;}\r\n            top = Math.floor(top - paddingTop(display));\r\n            var bottom = Math.ceil(top + height);\r\n            return {from: lineAtHeight(doc, top), to: lineAtHeight(doc, bottom)};\r\n        }\r\n\r\n        // LINE NUMBERS\r\n\r\n        function alignHorizontally(cm) {\r\n            var display = cm.display;\r\n            if (!display.alignWidgets && (!display.gutters.firstChild || !cm.options.fixedGutter)) return;\r\n            var comp = compensateForHScroll(display) - display.scroller.scrollLeft + cm.doc.scrollLeft;\r\n            var gutterW = display.gutters.offsetWidth, l = comp + \"px\";\r\n            for (var n = display.lineDiv.firstChild; n; n = n.nextSibling) if (n.alignable) {\r\n                for (var i = 0, a = n.alignable; i < a.length; ++i) a[i].style.left = l;\r\n            }\r\n            if (cm.options.fixedGutter)\r\n                display.gutters.style.left = (comp + gutterW) + \"px\";\r\n        }\r\n\r\n        function maybeUpdateLineNumberWidth(cm) {\r\n            if (!cm.options.lineNumbers) return false;\r\n            var doc = cm.doc, last = lineNumberFor(cm.options, doc.first + doc.size - 1), display = cm.display;\r\n            if (last.length != display.lineNumChars) {\r\n                var test = display.measure.appendChild(elt(\"div\", [elt(\"div\", last)],\r\n                    \"CodeMirror-linenumber CodeMirror-gutter-elt\"));\r\n                var innerW = test.firstChild.offsetWidth, padding = test.offsetWidth - innerW;\r\n                display.lineGutter.style.width = \"\";\r\n                display.lineNumInnerWidth = Math.max(innerW, display.lineGutter.offsetWidth - padding);\r\n                display.lineNumWidth = display.lineNumInnerWidth + padding;\r\n                display.lineNumChars = display.lineNumInnerWidth ? last.length : -1;\r\n                display.lineGutter.style.width = display.lineNumWidth + \"px\";\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function lineNumberFor(options, i) {\r\n            return String(options.lineNumberFormatter(i + options.firstLineNumber));\r\n        }\r\n        function compensateForHScroll(display) {\r\n            return getRect(display.scroller).left - getRect(display.sizer).left;\r\n        }\r\n\r\n        // DISPLAY DRAWING\r\n\r\n        function updateDisplay(cm, changes, viewPort, forced) {\r\n            var oldFrom = cm.display.showingFrom, oldTo = cm.display.showingTo, updated;\r\n            var visible = visibleLines(cm.display, cm.doc, viewPort);\r\n            for (;;) {\r\n                if (!updateDisplayInner(cm, changes, visible, forced)) break;\r\n                forced = false;\r\n                updated = true;\r\n                updateSelection(cm);\r\n                updateScrollbars(cm);\r\n\r\n                // Clip forced viewport to actual scrollable area\r\n                if (viewPort)\r\n                    viewPort = Math.min(cm.display.scroller.scrollHeight - cm.display.scroller.clientHeight,\r\n                            typeof viewPort == \"number\" ? viewPort : viewPort.top);\r\n                visible = visibleLines(cm.display, cm.doc, viewPort);\r\n                if (visible.from >= cm.display.showingFrom && visible.to <= cm.display.showingTo)\r\n                    break;\r\n                changes = [];\r\n            }\r\n\r\n            if (updated) {\r\n                signalLater(cm, \"update\", cm);\r\n                if (cm.display.showingFrom != oldFrom || cm.display.showingTo != oldTo)\r\n                    signalLater(cm, \"viewportChange\", cm, cm.display.showingFrom, cm.display.showingTo);\r\n            }\r\n            return updated;\r\n        }\r\n\r\n        // Uses a set of changes plus the current scroll position to\r\n        // determine which DOM updates have to be made, and makes the\r\n        // updates.\r\n        function updateDisplayInner(cm, changes, visible, forced) {\r\n            var display = cm.display, doc = cm.doc;\r\n            if (!display.wrapper.clientWidth) {\r\n                display.showingFrom = display.showingTo = doc.first;\r\n                display.viewOffset = 0;\r\n                return;\r\n            }\r\n\r\n            // Bail out if the visible area is already rendered and nothing changed.\r\n            if (!forced && changes.length == 0 &&\r\n                visible.from > display.showingFrom && visible.to < display.showingTo)\r\n                return;\r\n\r\n            if (maybeUpdateLineNumberWidth(cm))\r\n                changes = [{from: doc.first, to: doc.first + doc.size}];\r\n            var gutterW = display.sizer.style.marginLeft = display.gutters.offsetWidth + \"px\";\r\n            display.scrollbarH.style.left = cm.options.fixedGutter ? gutterW : \"0\";\r\n\r\n            // Used to determine which lines need their line numbers updated\r\n            var positionsChangedFrom = Infinity;\r\n            if (cm.options.lineNumbers)\r\n                for (var i = 0; i < changes.length; ++i)\r\n                    if (changes[i].diff) { positionsChangedFrom = changes[i].from; break; }\r\n\r\n            var end = doc.first + doc.size;\r\n            var from = Math.max(visible.from - cm.options.viewportMargin, doc.first);\r\n            var to = Math.min(end, visible.to + cm.options.viewportMargin);\r\n            if (display.showingFrom < from && from - display.showingFrom < 20) from = Math.max(doc.first, display.showingFrom);\r\n            if (display.showingTo > to && display.showingTo - to < 20) to = Math.min(end, display.showingTo);\r\n            if (sawCollapsedSpans) {\r\n                from = lineNo(visualLine(doc, getLine(doc, from)));\r\n                while (to < end && lineIsHidden(doc, getLine(doc, to))) ++to;\r\n            }\r\n\r\n            // Create a range of theoretically intact lines, and punch holes\r\n            // in that using the change info.\r\n            var intact = [{from: Math.max(display.showingFrom, doc.first),\r\n                to: Math.min(display.showingTo, end)}];\r\n            if (intact[0].from >= intact[0].to) intact = [];\r\n            else intact = computeIntact(intact, changes);\r\n            // When merged lines are present, we might have to reduce the\r\n            // intact ranges because changes in continued fragments of the\r\n            // intact lines do require the lines to be redrawn.\r\n            if (sawCollapsedSpans)\r\n                for (var i = 0; i < intact.length; ++i) {\r\n                    var range = intact[i], merged;\r\n                    while (merged = collapsedSpanAtEnd(getLine(doc, range.to - 1))) {\r\n                        var newTo = merged.find().from.line;\r\n                        if (newTo > range.from) range.to = newTo;\r\n                        else { intact.splice(i--, 1); break; }\r\n                    }\r\n                }\r\n\r\n            // Clip off the parts that won't be visible\r\n            var intactLines = 0;\r\n            for (var i = 0; i < intact.length; ++i) {\r\n                var range = intact[i];\r\n                if (range.from < from) range.from = from;\r\n                if (range.to > to) range.to = to;\r\n                if (range.from >= range.to) intact.splice(i--, 1);\r\n                else intactLines += range.to - range.from;\r\n            }\r\n            if (!forced && intactLines == to - from && from == display.showingFrom && to == display.showingTo) {\r\n                updateViewOffset(cm);\r\n                return;\r\n            }\r\n            intact.sort(function(a, b) {return a.from - b.from;});\r\n\r\n            // Avoid crashing on IE's \"unspecified error\" when in iframes\r\n            try {\r\n                var focused = document.activeElement;\r\n            } catch(e) {}\r\n            if (intactLines < (to - from) * .7) display.lineDiv.style.display = \"none\";\r\n            patchDisplay(cm, from, to, intact, positionsChangedFrom);\r\n            display.lineDiv.style.display = \"\";\r\n            if (focused && document.activeElement != focused && focused.offsetHeight) focused.focus();\r\n\r\n            var different = from != display.showingFrom || to != display.showingTo ||\r\n                display.lastSizeC != display.wrapper.clientHeight;\r\n            // This is just a bogus formula that detects when the editor is\r\n            // resized or the font size changes.\r\n            if (different) {\r\n                display.lastSizeC = display.wrapper.clientHeight;\r\n                startWorker(cm, 400);\r\n            }\r\n            display.showingFrom = from; display.showingTo = to;\r\n\r\n            updateHeightsInViewport(cm);\r\n            updateViewOffset(cm);\r\n\r\n            return true;\r\n        }\r\n\r\n        function updateHeightsInViewport(cm) {\r\n            var display = cm.display;\r\n            var prevBottom = display.lineDiv.offsetTop;\r\n            for (var node = display.lineDiv.firstChild, height; node; node = node.nextSibling) if (node.lineObj) {\r\n                if (ie_lt8) {\r\n                    var bot = node.offsetTop + node.offsetHeight;\r\n                    height = bot - prevBottom;\r\n                    prevBottom = bot;\r\n                } else {\r\n                    var box = getRect(node);\r\n                    height = box.bottom - box.top;\r\n                }\r\n                var diff = node.lineObj.height - height;\r\n                if (height < 2) height = textHeight(display);\r\n                if (diff > .001 || diff < -.001) {\r\n                    updateLineHeight(node.lineObj, height);\r\n                    var widgets = node.lineObj.widgets;\r\n                    if (widgets) for (var i = 0; i < widgets.length; ++i)\r\n                        widgets[i].height = widgets[i].node.offsetHeight;\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateViewOffset(cm) {\r\n            var off = cm.display.viewOffset = heightAtLine(cm, getLine(cm.doc, cm.display.showingFrom));\r\n            // Position the mover div to align with the current virtual scroll position\r\n            cm.display.mover.style.top = off + \"px\";\r\n        }\r\n\r\n        function computeIntact(intact, changes) {\r\n            for (var i = 0, l = changes.length || 0; i < l; ++i) {\r\n                var change = changes[i], intact2 = [], diff = change.diff || 0;\r\n                for (var j = 0, l2 = intact.length; j < l2; ++j) {\r\n                    var range = intact[j];\r\n                    if (change.to <= range.from && change.diff) {\r\n                        intact2.push({from: range.from + diff, to: range.to + diff});\r\n                    } else if (change.to <= range.from || change.from >= range.to) {\r\n                        intact2.push(range);\r\n                    } else {\r\n                        if (change.from > range.from)\r\n                            intact2.push({from: range.from, to: change.from});\r\n                        if (change.to < range.to)\r\n                            intact2.push({from: change.to + diff, to: range.to + diff});\r\n                    }\r\n                }\r\n                intact = intact2;\r\n            }\r\n            return intact;\r\n        }\r\n\r\n        function getDimensions(cm) {\r\n            var d = cm.display, left = {}, width = {};\r\n            for (var n = d.gutters.firstChild, i = 0; n; n = n.nextSibling, ++i) {\r\n                left[cm.options.gutters[i]] = n.offsetLeft;\r\n                width[cm.options.gutters[i]] = n.offsetWidth;\r\n            }\r\n            return {fixedPos: compensateForHScroll(d),\r\n                gutterTotalWidth: d.gutters.offsetWidth,\r\n                gutterLeft: left,\r\n                gutterWidth: width,\r\n                wrapperWidth: d.wrapper.clientWidth};\r\n        }\r\n\r\n        function patchDisplay(cm, from, to, intact, updateNumbersFrom) {\r\n            var dims = getDimensions(cm);\r\n            var display = cm.display, lineNumbers = cm.options.lineNumbers;\r\n            if (!intact.length && (!webkit || !cm.display.currentWheelTarget))\r\n                removeChildren(display.lineDiv);\r\n            var container = display.lineDiv, cur = container.firstChild;\r\n\r\n            function rm(node) {\r\n                var next = node.nextSibling;\r\n                if (webkit && mac && cm.display.currentWheelTarget == node) {\r\n                    node.style.display = \"none\";\r\n                    node.lineObj = null;\r\n                } else {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                return next;\r\n            }\r\n\r\n            var nextIntact = intact.shift(), lineN = from;\r\n            cm.doc.iter(from, to, function(line) {\r\n                if (nextIntact && nextIntact.to == lineN) nextIntact = intact.shift();\r\n                if (lineIsHidden(cm.doc, line)) {\r\n                    if (line.height != 0) updateLineHeight(line, 0);\r\n                    if (line.widgets && cur.previousSibling) for (var i = 0; i < line.widgets.length; ++i) {\r\n                        var w = line.widgets[i];\r\n                        if (w.showIfHidden) {\r\n                            var prev = cur.previousSibling;\r\n                            if (/pre/i.test(prev.nodeName)) {\r\n                                var wrap = elt(\"div\", null, null, \"position: relative\");\r\n                                prev.parentNode.replaceChild(wrap, prev);\r\n                                wrap.appendChild(prev);\r\n                                prev = wrap;\r\n                            }\r\n                            var wnode = prev.appendChild(elt(\"div\", [w.node], \"CodeMirror-linewidget\"));\r\n                            if (!w.handleMouseEvents) wnode.ignoreEvents = true;\r\n                            positionLineWidget(w, wnode, prev, dims);\r\n                        }\r\n                    }\r\n                } else if (nextIntact && nextIntact.from <= lineN && nextIntact.to > lineN) {\r\n                    // This line is intact. Skip to the actual node. Update its\r\n                    // line number if needed.\r\n                    while (cur.lineObj != line) cur = rm(cur);\r\n                    if (lineNumbers && updateNumbersFrom <= lineN && cur.lineNumber)\r\n                        setTextContent(cur.lineNumber, lineNumberFor(cm.options, lineN));\r\n                    cur = cur.nextSibling;\r\n                } else {\r\n                    // For lines with widgets, make an attempt to find and reuse\r\n                    // the existing element, so that widgets aren't needlessly\r\n                    // removed and re-inserted into the dom\r\n                    if (line.widgets) for (var j = 0, search = cur, reuse; search && j < 20; ++j, search = search.nextSibling)\r\n                        if (search.lineObj == line && /div/i.test(search.nodeName)) { reuse = search; break; }\r\n                    // This line needs to be generated.\r\n                    var lineNode = buildLineElement(cm, line, lineN, dims, reuse);\r\n                    if (lineNode != reuse) {\r\n                        container.insertBefore(lineNode, cur);\r\n                    } else {\r\n                        while (cur != reuse) cur = rm(cur);\r\n                        cur = cur.nextSibling;\r\n                    }\r\n\r\n                    lineNode.lineObj = line;\r\n                }\r\n                ++lineN;\r\n            });\r\n            while (cur) cur = rm(cur);\r\n        }\r\n\r\n        function buildLineElement(cm, line, lineNo, dims, reuse) {\r\n            var lineElement = lineContent(cm, line);\r\n            var markers = line.gutterMarkers, display = cm.display, wrap;\r\n\r\n            if (!cm.options.lineNumbers && !markers && !line.bgClass && !line.wrapClass && !line.widgets)\r\n                return lineElement;\r\n\r\n            // Lines with gutter elements, widgets or a background class need\r\n            // to be wrapped again, and have the extra elements added to the\r\n            // wrapper div\r\n\r\n            if (reuse) {\r\n                reuse.alignable = null;\r\n                var isOk = true, widgetsSeen = 0, insertBefore = null;\r\n                for (var n = reuse.firstChild, next; n; n = next) {\r\n                    next = n.nextSibling;\r\n                    if (!/\\bCodeMirror-linewidget\\b/.test(n.className)) {\r\n                        reuse.removeChild(n);\r\n                    } else {\r\n                        for (var i = 0; i < line.widgets.length; ++i) {\r\n                            var widget = line.widgets[i];\r\n                            if (widget.node == n.firstChild) {\r\n                                if (!widget.above && !insertBefore) insertBefore = n;\r\n                                positionLineWidget(widget, n, reuse, dims);\r\n                                ++widgetsSeen;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (i == line.widgets.length) { isOk = false; break; }\r\n                    }\r\n                }\r\n                reuse.insertBefore(lineElement, insertBefore);\r\n                if (isOk && widgetsSeen == line.widgets.length) {\r\n                    wrap = reuse;\r\n                    reuse.className = line.wrapClass || \"\";\r\n                }\r\n            }\r\n            if (!wrap) {\r\n                wrap = elt(\"div\", null, line.wrapClass, \"position: relative\");\r\n                wrap.appendChild(lineElement);\r\n            }\r\n            // Kludge to make sure the styled element lies behind the selection (by z-index)\r\n            if (line.bgClass)\r\n                wrap.insertBefore(elt(\"div\", null, line.bgClass + \" CodeMirror-linebackground\"), wrap.firstChild);\r\n            if (cm.options.lineNumbers || markers) {\r\n                var gutterWrap = wrap.insertBefore(elt(\"div\", null, null, \"position: absolute; left: \" +\r\n                        (cm.options.fixedGutter ? dims.fixedPos : -dims.gutterTotalWidth) + \"px\"),\r\n                    wrap.firstChild);\r\n                if (cm.options.fixedGutter) (wrap.alignable || (wrap.alignable = [])).push(gutterWrap);\r\n                if (cm.options.lineNumbers && (!markers || !markers[\"CodeMirror-linenumbers\"]))\r\n                    wrap.lineNumber = gutterWrap.appendChild(\r\n                        elt(\"div\", lineNumberFor(cm.options, lineNo),\r\n                            \"CodeMirror-linenumber CodeMirror-gutter-elt\",\r\n                                \"left: \" + dims.gutterLeft[\"CodeMirror-linenumbers\"] + \"px; width: \"\r\n                                + display.lineNumInnerWidth + \"px\"));\r\n                if (markers)\r\n                    for (var k = 0; k < cm.options.gutters.length; ++k) {\r\n                        var id = cm.options.gutters[k], found = markers.hasOwnProperty(id) && markers[id];\r\n                        if (found)\r\n                            gutterWrap.appendChild(elt(\"div\", [found], \"CodeMirror-gutter-elt\", \"left: \" +\r\n                                dims.gutterLeft[id] + \"px; width: \" + dims.gutterWidth[id] + \"px\"));\r\n                    }\r\n            }\r\n            if (ie_lt8) wrap.style.zIndex = 2;\r\n            if (line.widgets && wrap != reuse) for (var i = 0, ws = line.widgets; i < ws.length; ++i) {\r\n                var widget = ws[i], node = elt(\"div\", [widget.node], \"CodeMirror-linewidget\");\r\n                if (!widget.handleMouseEvents) node.ignoreEvents = true;\r\n                positionLineWidget(widget, node, wrap, dims);\r\n                if (widget.above)\r\n                    wrap.insertBefore(node, cm.options.lineNumbers && line.height != 0 ? gutterWrap : lineElement);\r\n                else\r\n                    wrap.appendChild(node);\r\n                signalLater(widget, \"redraw\");\r\n            }\r\n            return wrap;\r\n        }\r\n\r\n        function positionLineWidget(widget, node, wrap, dims) {\r\n            if (widget.noHScroll) {\r\n                (wrap.alignable || (wrap.alignable = [])).push(node);\r\n                var width = dims.wrapperWidth;\r\n                node.style.left = dims.fixedPos + \"px\";\r\n                if (!widget.coverGutter) {\r\n                    width -= dims.gutterTotalWidth;\r\n                    node.style.paddingLeft = dims.gutterTotalWidth + \"px\";\r\n                }\r\n                node.style.width = width + \"px\";\r\n            }\r\n            if (widget.coverGutter) {\r\n                node.style.zIndex = 5;\r\n                node.style.position = \"relative\";\r\n                if (!widget.noHScroll) node.style.marginLeft = -dims.gutterTotalWidth + \"px\";\r\n            }\r\n        }\r\n\r\n        // SELECTION / CURSOR\r\n\r\n        function updateSelection(cm) {\r\n            var display = cm.display;\r\n            var collapsed = posEq(cm.doc.sel.from, cm.doc.sel.to);\r\n            if (collapsed || cm.options.showCursorWhenSelecting)\r\n                updateSelectionCursor(cm);\r\n            else\r\n                display.cursor.style.display = display.otherCursor.style.display = \"none\";\r\n            if (!collapsed)\r\n                updateSelectionRange(cm);\r\n            else\r\n                display.selectionDiv.style.display = \"none\";\r\n\r\n            // Move the hidden textarea near the cursor to prevent scrolling artifacts\r\n            if (cm.options.moveInputWithCursor) {\r\n                var headPos = cursorCoords(cm, cm.doc.sel.head, \"div\");\r\n                var wrapOff = getRect(display.wrapper), lineOff = getRect(display.lineDiv);\r\n                display.inputDiv.style.top = Math.max(0, Math.min(display.wrapper.clientHeight - 10,\r\n                        headPos.top + lineOff.top - wrapOff.top)) + \"px\";\r\n                display.inputDiv.style.left = Math.max(0, Math.min(display.wrapper.clientWidth - 10,\r\n                        headPos.left + lineOff.left - wrapOff.left)) + \"px\";\r\n            }\r\n        }\r\n\r\n        // No selection, plain cursor\r\n        function updateSelectionCursor(cm) {\r\n            var display = cm.display, pos = cursorCoords(cm, cm.doc.sel.head, \"div\");\r\n            display.cursor.style.left = pos.left + \"px\";\r\n            display.cursor.style.top = pos.top + \"px\";\r\n            display.cursor.style.height = Math.max(0, pos.bottom - pos.top) * cm.options.cursorHeight + \"px\";\r\n            display.cursor.style.display = \"\";\r\n\r\n            if (pos.other) {\r\n                display.otherCursor.style.display = \"\";\r\n                display.otherCursor.style.left = pos.other.left + \"px\";\r\n                display.otherCursor.style.top = pos.other.top + \"px\";\r\n                display.otherCursor.style.height = (pos.other.bottom - pos.other.top) * .85 + \"px\";\r\n            } else { display.otherCursor.style.display = \"none\"; }\r\n        }\r\n\r\n        // Highlight selection\r\n        function updateSelectionRange(cm) {\r\n            var display = cm.display, doc = cm.doc, sel = cm.doc.sel;\r\n            var fragment = document.createDocumentFragment();\r\n            var clientWidth = display.lineSpace.offsetWidth, pl = paddingLeft(cm.display);\r\n\r\n            function add(left, top, width, bottom) {\r\n                if (top < 0) top = 0;\r\n                fragment.appendChild(elt(\"div\", null, \"CodeMirror-selected\", \"position: absolute; left: \" + left +\r\n                    \"px; top: \" + top + \"px; width: \" + (width == null ? clientWidth - left : width) +\r\n                    \"px; height: \" + (bottom - top) + \"px\"));\r\n            }\r\n\r\n            function drawForLine(line, fromArg, toArg) {\r\n                var lineObj = getLine(doc, line);\r\n                var lineLen = lineObj.text.length;\r\n                var start, end;\r\n                function coords(ch, bias) {\r\n                    return charCoords(cm, Pos(line, ch), \"div\", lineObj, bias);\r\n                }\r\n\r\n                iterateBidiSections(getOrder(lineObj), fromArg || 0, toArg == null ? lineLen : toArg, function(from, to, dir) {\r\n                    var leftPos = coords(from, \"left\"), rightPos, left, right;\r\n                    if (from == to) {\r\n                        rightPos = leftPos;\r\n                        left = right = leftPos.left;\r\n                    } else {\r\n                        rightPos = coords(to - 1, \"right\");\r\n                        if (dir == \"rtl\") { var tmp = leftPos; leftPos = rightPos; rightPos = tmp; }\r\n                        left = leftPos.left;\r\n                        right = rightPos.right;\r\n                    }\r\n                    if (fromArg == null && from == 0) left = pl;\r\n                    if (rightPos.top - leftPos.top > 3) { // Different lines, draw top part\r\n                        add(left, leftPos.top, null, leftPos.bottom);\r\n                        left = pl;\r\n                        if (leftPos.bottom < rightPos.top) add(left, leftPos.bottom, null, rightPos.top);\r\n                    }\r\n                    if (toArg == null && to == lineLen) right = clientWidth;\r\n                    if (!start || leftPos.top < start.top || leftPos.top == start.top && leftPos.left < start.left)\r\n                        start = leftPos;\r\n                    if (!end || rightPos.bottom > end.bottom || rightPos.bottom == end.bottom && rightPos.right > end.right)\r\n                        end = rightPos;\r\n                    if (left < pl + 1) left = pl;\r\n                    add(left, rightPos.top, right - left, rightPos.bottom);\r\n                });\r\n                return {start: start, end: end};\r\n            }\r\n\r\n            if (sel.from.line == sel.to.line) {\r\n                drawForLine(sel.from.line, sel.from.ch, sel.to.ch);\r\n            } else {\r\n                var fromLine = getLine(doc, sel.from.line), toLine = getLine(doc, sel.to.line);\r\n                var singleVLine = visualLine(doc, fromLine) == visualLine(doc, toLine);\r\n                var leftEnd = drawForLine(sel.from.line, sel.from.ch, singleVLine ? fromLine.text.length : null).end;\r\n                var rightStart = drawForLine(sel.to.line, singleVLine ? 0 : null, sel.to.ch).start;\r\n                if (singleVLine) {\r\n                    if (leftEnd.top < rightStart.top - 2) {\r\n                        add(leftEnd.right, leftEnd.top, null, leftEnd.bottom);\r\n                        add(pl, rightStart.top, rightStart.left, rightStart.bottom);\r\n                    } else {\r\n                        add(leftEnd.right, leftEnd.top, rightStart.left - leftEnd.right, leftEnd.bottom);\r\n                    }\r\n                }\r\n                if (leftEnd.bottom < rightStart.top)\r\n                    add(pl, leftEnd.bottom, null, rightStart.top);\r\n            }\r\n\r\n            removeChildrenAndAdd(display.selectionDiv, fragment);\r\n            display.selectionDiv.style.display = \"\";\r\n        }\r\n\r\n        // Cursor-blinking\r\n        function restartBlink(cm) {\r\n            if (!cm.state.focused) return;\r\n            var display = cm.display;\r\n            clearInterval(display.blinker);\r\n            var on = true;\r\n            display.cursor.style.visibility = display.otherCursor.style.visibility = \"\";\r\n            display.blinker = setInterval(function() {\r\n                display.cursor.style.visibility = display.otherCursor.style.visibility = (on = !on) ? \"\" : \"hidden\";\r\n            }, cm.options.cursorBlinkRate);\r\n        }\r\n\r\n        // HIGHLIGHT WORKER\r\n\r\n        function startWorker(cm, time) {\r\n            if (cm.doc.mode.startState && cm.doc.frontier < cm.display.showingTo)\r\n                cm.state.highlight.set(time, bind(highlightWorker, cm));\r\n        }\r\n\r\n        function highlightWorker(cm) {\r\n            var doc = cm.doc;\r\n            if (doc.frontier < doc.first) doc.frontier = doc.first;\r\n            if (doc.frontier >= cm.display.showingTo) return;\r\n            var end = +new Date + cm.options.workTime;\r\n            var state = copyState(doc.mode, getStateBefore(cm, doc.frontier));\r\n            var changed = [], prevChange;\r\n            doc.iter(doc.frontier, Math.min(doc.first + doc.size, cm.display.showingTo + 500), function(line) {\r\n                if (doc.frontier >= cm.display.showingFrom) { // Visible\r\n                    var oldStyles = line.styles;\r\n                    line.styles = highlightLine(cm, line, state);\r\n                    var ischange = !oldStyles || oldStyles.length != line.styles.length;\r\n                    for (var i = 0; !ischange && i < oldStyles.length; ++i) ischange = oldStyles[i] != line.styles[i];\r\n                    if (ischange) {\r\n                        if (prevChange && prevChange.end == doc.frontier) prevChange.end++;\r\n                        else changed.push(prevChange = {start: doc.frontier, end: doc.frontier + 1});\r\n                    }\r\n                    line.stateAfter = copyState(doc.mode, state);\r\n                } else {\r\n                    processLine(cm, line, state);\r\n                    line.stateAfter = doc.frontier % 5 == 0 ? copyState(doc.mode, state) : null;\r\n                }\r\n                ++doc.frontier;\r\n                if (+new Date > end) {\r\n                    startWorker(cm, cm.options.workDelay);\r\n                    return true;\r\n                }\r\n            });\r\n            if (changed.length)\r\n                operation(cm, function() {\r\n                    for (var i = 0; i < changed.length; ++i)\r\n                        regChange(this, changed[i].start, changed[i].end);\r\n                })();\r\n        }\r\n\r\n        // Finds the line to start with when starting a parse. Tries to\r\n        // find a line with a stateAfter, so that it can start with a\r\n        // valid state. If that fails, it returns the line with the\r\n        // smallest indentation, which tends to need the least context to\r\n        // parse correctly.\r\n        function findStartLine(cm, n, precise) {\r\n            var minindent, minline, doc = cm.doc;\r\n            for (var search = n, lim = n - 100; search > lim; --search) {\r\n                if (search <= doc.first) return doc.first;\r\n                var line = getLine(doc, search - 1);\r\n                if (line.stateAfter && (!precise || search <= doc.frontier)) return search;\r\n                var indented = countColumn(line.text, null, cm.options.tabSize);\r\n                if (minline == null || minindent > indented) {\r\n                    minline = search - 1;\r\n                    minindent = indented;\r\n                }\r\n            }\r\n            return minline;\r\n        }\r\n\r\n        function getStateBefore(cm, n, precise) {\r\n            var doc = cm.doc, display = cm.display;\r\n            if (!doc.mode.startState) return true;\r\n            var pos = findStartLine(cm, n, precise), state = pos > doc.first && getLine(doc, pos-1).stateAfter;\r\n            if (!state) state = startState(doc.mode);\r\n            else state = copyState(doc.mode, state);\r\n            doc.iter(pos, n, function(line) {\r\n                processLine(cm, line, state);\r\n                var save = pos == n - 1 || pos % 5 == 0 || pos >= display.showingFrom && pos < display.showingTo;\r\n                line.stateAfter = save ? copyState(doc.mode, state) : null;\r\n                ++pos;\r\n            });\r\n            return state;\r\n        }\r\n\r\n        // POSITION MEASUREMENT\r\n\r\n        function paddingTop(display) {return display.lineSpace.offsetTop;}\r\n        function paddingVert(display) {return display.mover.offsetHeight - display.lineSpace.offsetHeight;}\r\n        function paddingLeft(display) {\r\n            var e = removeChildrenAndAdd(display.measure, elt(\"pre\", null, null, \"text-align: left\")).appendChild(elt(\"span\", \"x\"));\r\n            return e.offsetLeft;\r\n        }\r\n\r\n        function measureChar(cm, line, ch, data, bias) {\r\n            var dir = -1;\r\n            data = data || measureLine(cm, line);\r\n\r\n            for (var pos = ch;; pos += dir) {\r\n                var r = data[pos];\r\n                if (r) break;\r\n                if (dir < 0 && pos == 0) dir = 1;\r\n            }\r\n            bias = pos > ch ? \"left\" : pos < ch ? \"right\" : bias;\r\n            if (bias == \"left\" && r.leftSide) r = r.leftSide;\r\n            else if (bias == \"right\" && r.rightSide) r = r.rightSide;\r\n            return {left: pos < ch ? r.right : r.left,\r\n                right: pos > ch ? r.left : r.right,\r\n                top: r.top,\r\n                bottom: r.bottom};\r\n        }\r\n\r\n        function findCachedMeasurement(cm, line) {\r\n            var cache = cm.display.measureLineCache;\r\n            for (var i = 0; i < cache.length; ++i) {\r\n                var memo = cache[i];\r\n                if (memo.text == line.text && memo.markedSpans == line.markedSpans &&\r\n                    cm.display.scroller.clientWidth == memo.width &&\r\n                    memo.classes == line.textClass + \"|\" + line.bgClass + \"|\" + line.wrapClass)\r\n                    return memo;\r\n            }\r\n        }\r\n\r\n        function clearCachedMeasurement(cm, line) {\r\n            var exists = findCachedMeasurement(cm, line);\r\n            if (exists) exists.text = exists.measure = exists.markedSpans = null;\r\n        }\r\n\r\n        function measureLine(cm, line) {\r\n            // First look in the cache\r\n            var cached = findCachedMeasurement(cm, line);\r\n            if (cached) return cached.measure;\r\n\r\n            // Failing that, recompute and store result in cache\r\n            var measure = measureLineInner(cm, line);\r\n            var cache = cm.display.measureLineCache;\r\n            var memo = {text: line.text, width: cm.display.scroller.clientWidth,\r\n                markedSpans: line.markedSpans, measure: measure,\r\n                classes: line.textClass + \"|\" + line.bgClass + \"|\" + line.wrapClass};\r\n            if (cache.length == 16) cache[++cm.display.measureLineCachePos % 16] = memo;\r\n            else cache.push(memo);\r\n            return measure;\r\n        }\r\n\r\n        function measureLineInner(cm, line) {\r\n            var display = cm.display, measure = emptyArray(line.text.length);\r\n            var pre = lineContent(cm, line, measure, true);\r\n\r\n            // IE does not cache element positions of inline elements between\r\n            // calls to getBoundingClientRect. This makes the loop below,\r\n            // which gathers the positions of all the characters on the line,\r\n            // do an amount of layout work quadratic to the number of\r\n            // characters. When line wrapping is off, we try to improve things\r\n            // by first subdividing the line into a bunch of inline blocks, so\r\n            // that IE can reuse most of the layout information from caches\r\n            // for those blocks. This does interfere with line wrapping, so it\r\n            // doesn't work when wrapping is on, but in that case the\r\n            // situation is slightly better, since IE does cache line-wrapping\r\n            // information and only recomputes per-line.\r\n            if (ie && !ie_lt8 && !cm.options.lineWrapping && pre.childNodes.length > 100) {\r\n                var fragment = document.createDocumentFragment();\r\n                var chunk = 10, n = pre.childNodes.length;\r\n                for (var i = 0, chunks = Math.ceil(n / chunk); i < chunks; ++i) {\r\n                    var wrap = elt(\"div\", null, null, \"display: inline-block\");\r\n                    for (var j = 0; j < chunk && n; ++j) {\r\n                        wrap.appendChild(pre.firstChild);\r\n                        --n;\r\n                    }\r\n                    fragment.appendChild(wrap);\r\n                }\r\n                pre.appendChild(fragment);\r\n            }\r\n\r\n            removeChildrenAndAdd(display.measure, pre);\r\n\r\n            var outer = getRect(display.lineDiv);\r\n            var vranges = [], data = emptyArray(line.text.length), maxBot = pre.offsetHeight;\r\n            // Work around an IE7/8 bug where it will sometimes have randomly\r\n            // replaced our pre with a clone at this point.\r\n            if (ie_lt9 && display.measure.first != pre)\r\n                removeChildrenAndAdd(display.measure, pre);\r\n\r\n            function measureRect(rect) {\r\n                var top = rect.top - outer.top, bot = rect.bottom - outer.top;\r\n                if (bot > maxBot) bot = maxBot;\r\n                if (top < 0) top = 0;\r\n                for (var i = vranges.length - 2; i >= 0; i -= 2) {\r\n                    var rtop = vranges[i], rbot = vranges[i+1];\r\n                    if (rtop > bot || rbot < top) continue;\r\n                    if (rtop <= top && rbot >= bot ||\r\n                        top <= rtop && bot >= rbot ||\r\n                        Math.min(bot, rbot) - Math.max(top, rtop) >= (bot - top) >> 1) {\r\n                        vranges[i] = Math.min(top, rtop);\r\n                        vranges[i+1] = Math.max(bot, rbot);\r\n                        break;\r\n                    }\r\n                }\r\n                if (i < 0) { i = vranges.length; vranges.push(top, bot); }\r\n                return {left: rect.left - outer.left,\r\n                    right: rect.right - outer.left,\r\n                    top: i, bottom: null};\r\n            }\r\n            function finishRect(rect) {\r\n                rect.bottom = vranges[rect.top+1];\r\n                rect.top = vranges[rect.top];\r\n            }\r\n\r\n            for (var i = 0, cur; i < measure.length; ++i) if (cur = measure[i]) {\r\n                var node = cur, rect = null;\r\n                // A widget might wrap, needs special care\r\n                if (/\\bCodeMirror-widget\\b/.test(cur.className) && cur.getClientRects) {\r\n                    if (cur.firstChild.nodeType == 1) node = cur.firstChild;\r\n                    var rects = node.getClientRects();\r\n                    if (rects.length > 1) {\r\n                        rect = data[i] = measureRect(rects[0]);\r\n                        rect.rightSide = measureRect(rects[rects.length - 1]);\r\n                    }\r\n                }\r\n                if (!rect) rect = data[i] = measureRect(getRect(node));\r\n                if (cur.measureRight) rect.right = getRect(cur.measureRight).left;\r\n                if (cur.leftSide) rect.leftSide = measureRect(getRect(cur.leftSide));\r\n            }\r\n            for (var i = 0, cur; i < data.length; ++i) if (cur = data[i]) {\r\n                finishRect(cur);\r\n                if (cur.leftSide) finishRect(cur.leftSide);\r\n                if (cur.rightSide) finishRect(cur.rightSide);\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function measureLineWidth(cm, line) {\r\n            var hasBadSpan = false;\r\n            if (line.markedSpans) for (var i = 0; i < line.markedSpans; ++i) {\r\n                var sp = line.markedSpans[i];\r\n                if (sp.collapsed && (sp.to == null || sp.to == line.text.length)) hasBadSpan = true;\r\n            }\r\n            var cached = !hasBadSpan && findCachedMeasurement(cm, line);\r\n            if (cached) return measureChar(cm, line, line.text.length, cached.measure, \"right\").right;\r\n\r\n            var pre = lineContent(cm, line, null, true);\r\n            var end = pre.appendChild(zeroWidthElement(cm.display.measure));\r\n            removeChildrenAndAdd(cm.display.measure, pre);\r\n            return getRect(end).right - getRect(cm.display.lineDiv).left;\r\n        }\r\n\r\n        function clearCaches(cm) {\r\n            cm.display.measureLineCache.length = cm.display.measureLineCachePos = 0;\r\n            cm.display.cachedCharWidth = cm.display.cachedTextHeight = null;\r\n            if (!cm.options.lineWrapping) cm.display.maxLineChanged = true;\r\n            cm.display.lineNumChars = null;\r\n        }\r\n\r\n        function pageScrollX() { return window.pageXOffset || (document.documentElement || document.body).scrollLeft; }\r\n        function pageScrollY() { return window.pageYOffset || (document.documentElement || document.body).scrollTop; }\r\n\r\n        // Context is one of \"line\", \"div\" (display.lineDiv), \"local\"/null (editor), or \"page\"\r\n        function intoCoordSystem(cm, lineObj, rect, context) {\r\n            if (lineObj.widgets) for (var i = 0; i < lineObj.widgets.length; ++i) if (lineObj.widgets[i].above) {\r\n                var size = widgetHeight(lineObj.widgets[i]);\r\n                rect.top += size; rect.bottom += size;\r\n            }\r\n            if (context == \"line\") return rect;\r\n            if (!context) context = \"local\";\r\n            var yOff = heightAtLine(cm, lineObj);\r\n            if (context == \"local\") yOff += paddingTop(cm.display);\r\n            else yOff -= cm.display.viewOffset;\r\n            if (context == \"page\" || context == \"window\") {\r\n                var lOff = getRect(cm.display.lineSpace);\r\n                yOff += lOff.top + (context == \"window\" ? 0 : pageScrollY());\r\n                var xOff = lOff.left + (context == \"window\" ? 0 : pageScrollX());\r\n                rect.left += xOff; rect.right += xOff;\r\n            }\r\n            rect.top += yOff; rect.bottom += yOff;\r\n            return rect;\r\n        }\r\n\r\n        // Context may be \"window\", \"page\", \"div\", or \"local\"/null\r\n        // Result is in \"div\" coords\r\n        function fromCoordSystem(cm, coords, context) {\r\n            if (context == \"div\") return coords;\r\n            var left = coords.left, top = coords.top;\r\n            // First move into \"page\" coordinate system\r\n            if (context == \"page\") {\r\n                left -= pageScrollX();\r\n                top -= pageScrollY();\r\n            } else if (context == \"local\" || !context) {\r\n                var localBox = getRect(cm.display.sizer);\r\n                left += localBox.left;\r\n                top += localBox.top;\r\n            }\r\n\r\n            var lineSpaceBox = getRect(cm.display.lineSpace);\r\n            return {left: left - lineSpaceBox.left, top: top - lineSpaceBox.top};\r\n        }\r\n\r\n        function charCoords(cm, pos, context, lineObj, bias) {\r\n            if (!lineObj) lineObj = getLine(cm.doc, pos.line);\r\n            return intoCoordSystem(cm, lineObj, measureChar(cm, lineObj, pos.ch, null, bias), context);\r\n        }\r\n\r\n        function cursorCoords(cm, pos, context, lineObj, measurement) {\r\n            lineObj = lineObj || getLine(cm.doc, pos.line);\r\n            if (!measurement) measurement = measureLine(cm, lineObj);\r\n            function get(ch, right) {\r\n                var m = measureChar(cm, lineObj, ch, measurement, right ? \"right\" : \"left\");\r\n                if (right) m.left = m.right; else m.right = m.left;\r\n                return intoCoordSystem(cm, lineObj, m, context);\r\n            }\r\n            function getBidi(ch, partPos) {\r\n                var part = order[partPos], right = part.level % 2;\r\n                if (ch == bidiLeft(part) && partPos && part.level < order[partPos - 1].level) {\r\n                    part = order[--partPos];\r\n                    ch = bidiRight(part) - (part.level % 2 ? 0 : 1);\r\n                    right = true;\r\n                } else if (ch == bidiRight(part) && partPos < order.length - 1 && part.level < order[partPos + 1].level) {\r\n                    part = order[++partPos];\r\n                    ch = bidiLeft(part) - part.level % 2;\r\n                    right = false;\r\n                }\r\n                if (right && ch == part.to && ch > part.from) return get(ch - 1);\r\n                return get(ch, right);\r\n            }\r\n            var order = getOrder(lineObj), ch = pos.ch;\r\n            if (!order) return get(ch);\r\n            var partPos = getBidiPartAt(order, ch);\r\n            var val = getBidi(ch, partPos);\r\n            if (bidiOther != null) val.other = getBidi(ch, bidiOther);\r\n            return val;\r\n        }\r\n\r\n        function PosWithInfo(line, ch, outside, xRel) {\r\n            var pos = new Pos(line, ch);\r\n            pos.xRel = xRel;\r\n            if (outside) pos.outside = true;\r\n            return pos;\r\n        }\r\n\r\n        // Coords must be lineSpace-local\r\n        function coordsChar(cm, x, y) {\r\n            var doc = cm.doc;\r\n            y += cm.display.viewOffset;\r\n            if (y < 0) return PosWithInfo(doc.first, 0, true, -1);\r\n            var lineNo = lineAtHeight(doc, y), last = doc.first + doc.size - 1;\r\n            if (lineNo > last)\r\n                return PosWithInfo(doc.first + doc.size - 1, getLine(doc, last).text.length, true, 1);\r\n            if (x < 0) x = 0;\r\n\r\n            for (;;) {\r\n                var lineObj = getLine(doc, lineNo);\r\n                var found = coordsCharInner(cm, lineObj, lineNo, x, y);\r\n                var merged = collapsedSpanAtEnd(lineObj);\r\n                var mergedPos = merged && merged.find();\r\n                if (merged && (found.ch > mergedPos.from.ch || found.ch == mergedPos.from.ch && found.xRel > 0))\r\n                    lineNo = mergedPos.to.line;\r\n                else\r\n                    return found;\r\n            }\r\n        }\r\n\r\n        function coordsCharInner(cm, lineObj, lineNo, x, y) {\r\n            var innerOff = y - heightAtLine(cm, lineObj);\r\n            var wrongLine = false, adjust = 2 * cm.display.wrapper.clientWidth;\r\n            var measurement = measureLine(cm, lineObj);\r\n\r\n            function getX(ch) {\r\n                var sp = cursorCoords(cm, Pos(lineNo, ch), \"line\",\r\n                    lineObj, measurement);\r\n                wrongLine = true;\r\n                if (innerOff > sp.bottom) return sp.left - adjust;\r\n                else if (innerOff < sp.top) return sp.left + adjust;\r\n                else wrongLine = false;\r\n                return sp.left;\r\n            }\r\n\r\n            var bidi = getOrder(lineObj), dist = lineObj.text.length;\r\n            var from = lineLeft(lineObj), to = lineRight(lineObj);\r\n            var fromX = getX(from), fromOutside = wrongLine, toX = getX(to), toOutside = wrongLine;\r\n\r\n            if (x > toX) return PosWithInfo(lineNo, to, toOutside, 1);\r\n            // Do a binary search between these bounds.\r\n            for (;;) {\r\n                if (bidi ? to == from || to == moveVisually(lineObj, from, 1) : to - from <= 1) {\r\n                    var ch = x < fromX || x - fromX <= toX - x ? from : to;\r\n                    var xDiff = x - (ch == from ? fromX : toX);\r\n                    while (isExtendingChar.test(lineObj.text.charAt(ch))) ++ch;\r\n                    var pos = PosWithInfo(lineNo, ch, ch == from ? fromOutside : toOutside,\r\n                            xDiff < 0 ? -1 : xDiff ? 1 : 0);\r\n                    return pos;\r\n                }\r\n                var step = Math.ceil(dist / 2), middle = from + step;\r\n                if (bidi) {\r\n                    middle = from;\r\n                    for (var i = 0; i < step; ++i) middle = moveVisually(lineObj, middle, 1);\r\n                }\r\n                var middleX = getX(middle);\r\n                if (middleX > x) {to = middle; toX = middleX; if (toOutside = wrongLine) toX += 1000; dist = step;}\r\n                else {from = middle; fromX = middleX; fromOutside = wrongLine; dist -= step;}\r\n            }\r\n        }\r\n\r\n        var measureText;\r\n        function textHeight(display) {\r\n            if (display.cachedTextHeight != null) return display.cachedTextHeight;\r\n            if (measureText == null) {\r\n                measureText = elt(\"pre\");\r\n                // Measure a bunch of lines, for browsers that compute\r\n                // fractional heights.\r\n                for (var i = 0; i < 49; ++i) {\r\n                    measureText.appendChild(document.createTextNode(\"x\"));\r\n                    measureText.appendChild(elt(\"br\"));\r\n                }\r\n                measureText.appendChild(document.createTextNode(\"x\"));\r\n            }\r\n            removeChildrenAndAdd(display.measure, measureText);\r\n            var height = measureText.offsetHeight / 50;\r\n            if (height > 3) display.cachedTextHeight = height;\r\n            removeChildren(display.measure);\r\n            return height || 1;\r\n        }\r\n\r\n        function charWidth(display) {\r\n            if (display.cachedCharWidth != null) return display.cachedCharWidth;\r\n            var anchor = elt(\"span\", \"x\");\r\n            var pre = elt(\"pre\", [anchor]);\r\n            removeChildrenAndAdd(display.measure, pre);\r\n            var width = anchor.offsetWidth;\r\n            if (width > 2) display.cachedCharWidth = width;\r\n            return width || 10;\r\n        }\r\n\r\n        // OPERATIONS\r\n\r\n        // Operations are used to wrap changes in such a way that each\r\n        // change won't have to update the cursor and display (which would\r\n        // be awkward, slow, and error-prone), but instead updates are\r\n        // batched and then all combined and executed at once.\r\n\r\n        var nextOpId = 0;\r\n        function startOperation(cm) {\r\n            cm.curOp = {\r\n                // An array of ranges of lines that have to be updated. See\r\n                // updateDisplay.\r\n                changes: [],\r\n                forceUpdate: false,\r\n                updateInput: null,\r\n                userSelChange: null,\r\n                textChanged: null,\r\n                selectionChanged: false,\r\n                cursorActivity: false,\r\n                updateMaxLine: false,\r\n                updateScrollPos: false,\r\n                id: ++nextOpId\r\n            };\r\n            if (!delayedCallbackDepth++) delayedCallbacks = [];\r\n        }\r\n\r\n        function endOperation(cm) {\r\n            var op = cm.curOp, doc = cm.doc, display = cm.display;\r\n            cm.curOp = null;\r\n\r\n            if (op.updateMaxLine) computeMaxLength(cm);\r\n            if (display.maxLineChanged && !cm.options.lineWrapping && display.maxLine) {\r\n                var width = measureLineWidth(cm, display.maxLine);\r\n                display.sizer.style.minWidth = Math.max(0, width + 3 + scrollerCutOff) + \"px\";\r\n                display.maxLineChanged = false;\r\n                var maxScrollLeft = Math.max(0, display.sizer.offsetLeft + display.sizer.offsetWidth - display.scroller.clientWidth);\r\n                if (maxScrollLeft < doc.scrollLeft && !op.updateScrollPos)\r\n                    setScrollLeft(cm, Math.min(display.scroller.scrollLeft, maxScrollLeft), true);\r\n            }\r\n            var newScrollPos, updated;\r\n            if (op.updateScrollPos) {\r\n                newScrollPos = op.updateScrollPos;\r\n            } else if (op.selectionChanged && display.scroller.clientHeight) { // don't rescroll if not visible\r\n                var coords = cursorCoords(cm, doc.sel.head);\r\n                newScrollPos = calculateScrollPos(cm, coords.left, coords.top, coords.left, coords.bottom);\r\n            }\r\n            if (op.changes.length || op.forceUpdate || newScrollPos && newScrollPos.scrollTop != null) {\r\n                updated = updateDisplay(cm, op.changes, newScrollPos && newScrollPos.scrollTop, op.forceUpdate);\r\n                if (cm.display.scroller.offsetHeight) cm.doc.scrollTop = cm.display.scroller.scrollTop;\r\n            }\r\n            if (!updated && op.selectionChanged) updateSelection(cm);\r\n            if (op.updateScrollPos) {\r\n                display.scroller.scrollTop = display.scrollbarV.scrollTop = doc.scrollTop = newScrollPos.scrollTop;\r\n                display.scroller.scrollLeft = display.scrollbarH.scrollLeft = doc.scrollLeft = newScrollPos.scrollLeft;\r\n                alignHorizontally(cm);\r\n                if (op.scrollToPos)\r\n                    scrollPosIntoView(cm, clipPos(cm.doc, op.scrollToPos), op.scrollToPosMargin);\r\n            } else if (newScrollPos) {\r\n                scrollCursorIntoView(cm);\r\n            }\r\n            if (op.selectionChanged) restartBlink(cm);\r\n\r\n            if (cm.state.focused && op.updateInput)\r\n                resetInput(cm, op.userSelChange);\r\n\r\n            var hidden = op.maybeHiddenMarkers, unhidden = op.maybeUnhiddenMarkers;\r\n            if (hidden) for (var i = 0; i < hidden.length; ++i)\r\n                if (!hidden[i].lines.length) signal(hidden[i], \"hide\");\r\n            if (unhidden) for (var i = 0; i < unhidden.length; ++i)\r\n                if (unhidden[i].lines.length) signal(unhidden[i], \"unhide\");\r\n\r\n            var delayed;\r\n            if (!--delayedCallbackDepth) {\r\n                delayed = delayedCallbacks;\r\n                delayedCallbacks = null;\r\n            }\r\n            if (op.textChanged)\r\n                signal(cm, \"change\", cm, op.textChanged);\r\n            if (op.cursorActivity) signal(cm, \"cursorActivity\", cm);\r\n            if (delayed) for (var i = 0; i < delayed.length; ++i) delayed[i]();\r\n        }\r\n\r\n        // Wraps a function in an operation. Returns the wrapped function.\r\n        function operation(cm1, f) {\r\n            return function() {\r\n                var cm = cm1 || this, withOp = !cm.curOp;\r\n                if (withOp) startOperation(cm);\r\n                try { var result = f.apply(cm, arguments); }\r\n                finally { if (withOp) endOperation(cm); }\r\n                return result;\r\n            };\r\n        }\r\n        function docOperation(f) {\r\n            return function() {\r\n                var withOp = this.cm && !this.cm.curOp, result;\r\n                if (withOp) startOperation(this.cm);\r\n                try { result = f.apply(this, arguments); }\r\n                finally { if (withOp) endOperation(this.cm); }\r\n                return result;\r\n            };\r\n        }\r\n        function runInOp(cm, f) {\r\n            var withOp = !cm.curOp, result;\r\n            if (withOp) startOperation(cm);\r\n            try { result = f(); }\r\n            finally { if (withOp) endOperation(cm); }\r\n            return result;\r\n        }\r\n\r\n        function regChange(cm, from, to, lendiff) {\r\n            if (from == null) from = cm.doc.first;\r\n            if (to == null) to = cm.doc.first + cm.doc.size;\r\n            cm.curOp.changes.push({from: from, to: to, diff: lendiff});\r\n        }\r\n\r\n        // INPUT HANDLING\r\n\r\n        function slowPoll(cm) {\r\n            if (cm.display.pollingFast) return;\r\n            cm.display.poll.set(cm.options.pollInterval, function() {\r\n                readInput(cm);\r\n                if (cm.state.focused) slowPoll(cm);\r\n            });\r\n        }\r\n\r\n        function fastPoll(cm) {\r\n            var missed = false;\r\n            cm.display.pollingFast = true;\r\n            function p() {\r\n                var changed = readInput(cm);\r\n                if (!changed && !missed) {missed = true; cm.display.poll.set(60, p);}\r\n                else {cm.display.pollingFast = false; slowPoll(cm);}\r\n            }\r\n            cm.display.poll.set(20, p);\r\n        }\r\n\r\n        // prevInput is a hack to work with IME. If we reset the textarea\r\n        // on every change, that breaks IME. So we look for changes\r\n        // compared to the previous content instead. (Modern browsers have\r\n        // events that indicate IME taking place, but these are not widely\r\n        // supported or compatible enough yet to rely on.)\r\n        function readInput(cm) {\r\n            var input = cm.display.input, prevInput = cm.display.prevInput, doc = cm.doc, sel = doc.sel;\r\n            if (!cm.state.focused || hasSelection(input) || isReadOnly(cm) || cm.state.disableInput) return false;\r\n            var text = input.value;\r\n            if (text == prevInput && posEq(sel.from, sel.to)) return false;\r\n            if (ie && !ie_lt9 && cm.display.inputHasSelection === text) {\r\n                resetInput(cm, true);\r\n                return false;\r\n            }\r\n\r\n            var withOp = !cm.curOp;\r\n            if (withOp) startOperation(cm);\r\n            sel.shift = false;\r\n            var same = 0, l = Math.min(prevInput.length, text.length);\r\n            while (same < l && prevInput.charCodeAt(same) == text.charCodeAt(same)) ++same;\r\n            var from = sel.from, to = sel.to;\r\n            if (same < prevInput.length)\r\n                from = Pos(from.line, from.ch - (prevInput.length - same));\r\n            else if (cm.state.overwrite && posEq(from, to) && !cm.state.pasteIncoming)\r\n                to = Pos(to.line, Math.min(getLine(doc, to.line).text.length, to.ch + (text.length - same)));\r\n\r\n            var updateInput = cm.curOp.updateInput;\r\n            var changeEvent = {from: from, to: to, text: splitLines(text.slice(same)),\r\n                origin: cm.state.pasteIncoming ? \"paste\" : \"+input\"};\r\n            makeChange(cm.doc, changeEvent, \"end\");\r\n            cm.curOp.updateInput = updateInput;\r\n            signalLater(cm, \"inputRead\", cm, changeEvent);\r\n\r\n            if (text.length > 1000 || text.indexOf(\"\\n\") > -1) input.value = cm.display.prevInput = \"\";\r\n            else cm.display.prevInput = text;\r\n            if (withOp) endOperation(cm);\r\n            cm.state.pasteIncoming = false;\r\n            return true;\r\n        }\r\n\r\n        function resetInput(cm, user) {\r\n            var minimal, selected, doc = cm.doc;\r\n            if (!posEq(doc.sel.from, doc.sel.to)) {\r\n                cm.display.prevInput = \"\";\r\n                minimal = hasCopyEvent &&\r\n                    (doc.sel.to.line - doc.sel.from.line > 100 || (selected = cm.getSelection()).length > 1000);\r\n                var content = minimal ? \"-\" : selected || cm.getSelection();\r\n                cm.display.input.value = content;\r\n                if (cm.state.focused) selectInput(cm.display.input);\r\n                if (ie && !ie_lt9) cm.display.inputHasSelection = content;\r\n            } else if (user) {\r\n                cm.display.prevInput = cm.display.input.value = \"\";\r\n                if (ie && !ie_lt9) cm.display.inputHasSelection = null;\r\n            }\r\n            cm.display.inaccurateSelection = minimal;\r\n        }\r\n\r\n        function focusInput(cm) {\r\n            if (cm.options.readOnly != \"nocursor\" && (!mobile || document.activeElement != cm.display.input))\r\n                try {cm.display.input.focus();} catch(e) {}\r\n        }\r\n\r\n        function isReadOnly(cm) {\r\n            return cm.options.readOnly || cm.doc.cantEdit;\r\n        }\r\n\r\n        // EVENT HANDLERS\r\n\r\n        function registerEventHandlers(cm) {\r\n            var d = cm.display;\r\n            on(d.scroller, \"mousedown\", operation(cm, onMouseDown));\r\n            if (ie)\r\n                on(d.scroller, \"dblclick\", operation(cm, function(e) {\r\n                    if (signalDOMEvent(cm, e)) return;\r\n                    var pos = posFromMouse(cm, e);\r\n                    if (!pos || clickInGutter(cm, e) || eventInWidget(cm.display, e)) return;\r\n                    e_preventDefault(e);\r\n                    var word = findWordAt(getLine(cm.doc, pos.line).text, pos);\r\n                    extendSelection(cm.doc, word.from, word.to);\r\n                }));\r\n            else\r\n                on(d.scroller, \"dblclick\", function(e) { signalDOMEvent(cm, e) || e_preventDefault(e); });\r\n            on(d.lineSpace, \"selectstart\", function(e) {\r\n                if (!eventInWidget(d, e)) e_preventDefault(e);\r\n            });\r\n            // Gecko browsers fire contextmenu *after* opening the menu, at\r\n            // which point we can't mess with it anymore. Context menu is\r\n            // handled in onMouseDown for Gecko.\r\n            if (!captureMiddleClick) on(d.scroller, \"contextmenu\", function(e) {onContextMenu(cm, e);});\r\n\r\n            on(d.scroller, \"scroll\", function() {\r\n                if (d.scroller.clientHeight) {\r\n                    setScrollTop(cm, d.scroller.scrollTop);\r\n                    setScrollLeft(cm, d.scroller.scrollLeft, true);\r\n                    signal(cm, \"scroll\", cm);\r\n                }\r\n            });\r\n            on(d.scrollbarV, \"scroll\", function() {\r\n                if (d.scroller.clientHeight) setScrollTop(cm, d.scrollbarV.scrollTop);\r\n            });\r\n            on(d.scrollbarH, \"scroll\", function() {\r\n                if (d.scroller.clientHeight) setScrollLeft(cm, d.scrollbarH.scrollLeft);\r\n            });\r\n\r\n            on(d.scroller, \"mousewheel\", function(e){onScrollWheel(cm, e);});\r\n            on(d.scroller, \"DOMMouseScroll\", function(e){onScrollWheel(cm, e);});\r\n\r\n            function reFocus() { if (cm.state.focused) setTimeout(bind(focusInput, cm), 0); }\r\n            on(d.scrollbarH, \"mousedown\", reFocus);\r\n            on(d.scrollbarV, \"mousedown\", reFocus);\r\n            // Prevent wrapper from ever scrolling\r\n            on(d.wrapper, \"scroll\", function() { d.wrapper.scrollTop = d.wrapper.scrollLeft = 0; });\r\n\r\n            var resizeTimer;\r\n            function onResize() {\r\n                if (resizeTimer == null) resizeTimer = setTimeout(function() {\r\n                    resizeTimer = null;\r\n                    // Might be a text scaling operation, clear size caches.\r\n                    d.cachedCharWidth = d.cachedTextHeight = knownScrollbarWidth = null;\r\n                    clearCaches(cm);\r\n                    runInOp(cm, bind(regChange, cm));\r\n                }, 100);\r\n            }\r\n            on(window, \"resize\", onResize);\r\n            // Above handler holds on to the editor and its data structures.\r\n            // Here we poll to unregister it when the editor is no longer in\r\n            // the document, so that it can be garbage-collected.\r\n            function unregister() {\r\n                for (var p = d.wrapper.parentNode; p && p != document.body; p = p.parentNode) {}\r\n                if (p) setTimeout(unregister, 5000);\r\n                else off(window, \"resize\", onResize);\r\n            }\r\n            setTimeout(unregister, 5000);\r\n\r\n            on(d.input, \"keyup\", operation(cm, function(e) {\r\n                if (signalDOMEvent(cm, e) || cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\r\n                if (e.keyCode == 16) cm.doc.sel.shift = false;\r\n            }));\r\n            on(d.input, \"input\", bind(fastPoll, cm));\r\n            on(d.input, \"keydown\", operation(cm, onKeyDown));\r\n            on(d.input, \"keypress\", operation(cm, onKeyPress));\r\n            on(d.input, \"focus\", bind(onFocus, cm));\r\n            on(d.input, \"blur\", bind(onBlur, cm));\r\n\r\n            function drag_(e) {\r\n                if (signalDOMEvent(cm, e) || cm.options.onDragEvent && cm.options.onDragEvent(cm, addStop(e))) return;\r\n                e_stop(e);\r\n            }\r\n            if (cm.options.dragDrop) {\r\n                on(d.scroller, \"dragstart\", function(e){onDragStart(cm, e);});\r\n                on(d.scroller, \"dragenter\", drag_);\r\n                on(d.scroller, \"dragover\", drag_);\r\n                on(d.scroller, \"drop\", operation(cm, onDrop));\r\n            }\r\n            on(d.scroller, \"paste\", function(e){\r\n                if (eventInWidget(d, e)) return;\r\n                focusInput(cm);\r\n                fastPoll(cm);\r\n            });\r\n            on(d.input, \"paste\", function() {\r\n                cm.state.pasteIncoming = true;\r\n                fastPoll(cm);\r\n            });\r\n\r\n            function prepareCopy() {\r\n                if (d.inaccurateSelection) {\r\n                    d.prevInput = \"\";\r\n                    d.inaccurateSelection = false;\r\n                    d.input.value = cm.getSelection();\r\n                    selectInput(d.input);\r\n                }\r\n            }\r\n            on(d.input, \"cut\", prepareCopy);\r\n            on(d.input, \"copy\", prepareCopy);\r\n\r\n            // Needed to handle Tab key in KHTML\r\n            if (khtml) on(d.sizer, \"mouseup\", function() {\r\n                if (document.activeElement == d.input) d.input.blur();\r\n                focusInput(cm);\r\n            });\r\n        }\r\n\r\n        function eventInWidget(display, e) {\r\n            for (var n = e_target(e); n != display.wrapper; n = n.parentNode) {\r\n                if (!n || n.ignoreEvents || n.parentNode == display.sizer && n != display.mover) return true;\r\n            }\r\n        }\r\n\r\n        function posFromMouse(cm, e, liberal) {\r\n            var display = cm.display;\r\n            if (!liberal) {\r\n                var target = e_target(e);\r\n                if (target == display.scrollbarH || target == display.scrollbarH.firstChild ||\r\n                    target == display.scrollbarV || target == display.scrollbarV.firstChild ||\r\n                    target == display.scrollbarFiller || target == display.gutterFiller) return null;\r\n            }\r\n            var x, y, space = getRect(display.lineSpace);\r\n            // Fails unpredictably on IE[67] when mouse is dragged around quickly.\r\n            try { x = e.clientX; y = e.clientY; } catch (e) { return null; }\r\n            return coordsChar(cm, x - space.left, y - space.top);\r\n        }\r\n\r\n        var lastClick, lastDoubleClick;\r\n        function onMouseDown(e) {\r\n            if (signalDOMEvent(this, e)) return;\r\n            var cm = this, display = cm.display, doc = cm.doc, sel = doc.sel;\r\n            sel.shift = e.shiftKey;\r\n\r\n            if (eventInWidget(display, e)) {\r\n                if (!webkit) {\r\n                    display.scroller.draggable = false;\r\n                    setTimeout(function(){display.scroller.draggable = true;}, 100);\r\n                }\r\n                return;\r\n            }\r\n            if (clickInGutter(cm, e)) return;\r\n            var start = posFromMouse(cm, e);\r\n\r\n            switch (e_button(e)) {\r\n                case 3:\r\n                    if (captureMiddleClick) onContextMenu.call(cm, cm, e);\r\n                    return;\r\n                case 2:\r\n                    if (start) extendSelection(cm.doc, start);\r\n                    setTimeout(bind(focusInput, cm), 20);\r\n                    e_preventDefault(e);\r\n                    return;\r\n            }\r\n            // For button 1, if it was clicked inside the editor\r\n            // (posFromMouse returning non-null), we have to adjust the\r\n            // selection.\r\n            if (!start) {if (e_target(e) == display.scroller) e_preventDefault(e); return;}\r\n\r\n            if (!cm.state.focused) onFocus(cm);\r\n\r\n            var now = +new Date, type = \"single\";\r\n            if (lastDoubleClick && lastDoubleClick.time > now - 400 && posEq(lastDoubleClick.pos, start)) {\r\n                type = \"triple\";\r\n                e_preventDefault(e);\r\n                setTimeout(bind(focusInput, cm), 20);\r\n                selectLine(cm, start.line);\r\n            } else if (lastClick && lastClick.time > now - 400 && posEq(lastClick.pos, start)) {\r\n                type = \"double\";\r\n                lastDoubleClick = {time: now, pos: start};\r\n                e_preventDefault(e);\r\n                var word = findWordAt(getLine(doc, start.line).text, start);\r\n                extendSelection(cm.doc, word.from, word.to);\r\n            } else { lastClick = {time: now, pos: start}; }\r\n\r\n            var last = start;\r\n            if (cm.options.dragDrop && dragAndDrop && !isReadOnly(cm) && !posEq(sel.from, sel.to) &&\r\n                !posLess(start, sel.from) && !posLess(sel.to, start) && type == \"single\") {\r\n                var dragEnd = operation(cm, function(e2) {\r\n                    if (webkit) display.scroller.draggable = false;\r\n                    cm.state.draggingText = false;\r\n                    off(document, \"mouseup\", dragEnd);\r\n                    off(display.scroller, \"drop\", dragEnd);\r\n                    if (Math.abs(e.clientX - e2.clientX) + Math.abs(e.clientY - e2.clientY) < 10) {\r\n                        e_preventDefault(e2);\r\n                        extendSelection(cm.doc, start);\r\n                        focusInput(cm);\r\n                    }\r\n                });\r\n                // Let the drag handler handle this.\r\n                if (webkit) display.scroller.draggable = true;\r\n                cm.state.draggingText = dragEnd;\r\n                // IE's approach to draggable\r\n                if (display.scroller.dragDrop) display.scroller.dragDrop();\r\n                on(document, \"mouseup\", dragEnd);\r\n                on(display.scroller, \"drop\", dragEnd);\r\n                return;\r\n            }\r\n            e_preventDefault(e);\r\n            if (type == \"single\") extendSelection(cm.doc, clipPos(doc, start));\r\n\r\n            var startstart = sel.from, startend = sel.to, lastPos = start;\r\n\r\n            function doSelect(cur) {\r\n                if (posEq(lastPos, cur)) return;\r\n                lastPos = cur;\r\n\r\n                if (type == \"single\") {\r\n                    extendSelection(cm.doc, clipPos(doc, start), cur);\r\n                    return;\r\n                }\r\n\r\n                startstart = clipPos(doc, startstart);\r\n                startend = clipPos(doc, startend);\r\n                if (type == \"double\") {\r\n                    var word = findWordAt(getLine(doc, cur.line).text, cur);\r\n                    if (posLess(cur, startstart)) extendSelection(cm.doc, word.from, startend);\r\n                    else extendSelection(cm.doc, startstart, word.to);\r\n                } else if (type == \"triple\") {\r\n                    if (posLess(cur, startstart)) extendSelection(cm.doc, startend, clipPos(doc, Pos(cur.line, 0)));\r\n                    else extendSelection(cm.doc, startstart, clipPos(doc, Pos(cur.line + 1, 0)));\r\n                }\r\n            }\r\n\r\n            var editorSize = getRect(display.wrapper);\r\n            // Used to ensure timeout re-tries don't fire when another extend\r\n            // happened in the meantime (clearTimeout isn't reliable -- at\r\n            // least on Chrome, the timeouts still happen even when cleared,\r\n            // if the clear happens after their scheduled firing time).\r\n            var counter = 0;\r\n\r\n            function extend(e) {\r\n                var curCount = ++counter;\r\n                var cur = posFromMouse(cm, e, true);\r\n                if (!cur) return;\r\n                if (!posEq(cur, last)) {\r\n                    if (!cm.state.focused) onFocus(cm);\r\n                    last = cur;\r\n                    doSelect(cur);\r\n                    var visible = visibleLines(display, doc);\r\n                    if (cur.line >= visible.to || cur.line < visible.from)\r\n                        setTimeout(operation(cm, function(){if (counter == curCount) extend(e);}), 150);\r\n                } else {\r\n                    var outside = e.clientY < editorSize.top ? -20 : e.clientY > editorSize.bottom ? 20 : 0;\r\n                    if (outside) setTimeout(operation(cm, function() {\r\n                        if (counter != curCount) return;\r\n                        display.scroller.scrollTop += outside;\r\n                        extend(e);\r\n                    }), 50);\r\n                }\r\n            }\r\n\r\n            function done(e) {\r\n                counter = Infinity;\r\n                e_preventDefault(e);\r\n                focusInput(cm);\r\n                off(document, \"mousemove\", move);\r\n                off(document, \"mouseup\", up);\r\n            }\r\n\r\n            var move = operation(cm, function(e) {\r\n                if (!ie && !e_button(e)) done(e);\r\n                else extend(e);\r\n            });\r\n            var up = operation(cm, done);\r\n            on(document, \"mousemove\", move);\r\n            on(document, \"mouseup\", up);\r\n        }\r\n\r\n        function clickInGutter(cm, e) {\r\n            var display = cm.display;\r\n            try { var mX = e.clientX, mY = e.clientY; }\r\n            catch(e) { return false; }\r\n\r\n            if (mX >= Math.floor(getRect(display.gutters).right)) return false;\r\n            e_preventDefault(e);\r\n            if (!hasHandler(cm, \"gutterClick\")) return true;\r\n\r\n            var lineBox = getRect(display.lineDiv);\r\n            if (mY > lineBox.bottom) return true;\r\n            mY -= lineBox.top - display.viewOffset;\r\n\r\n            for (var i = 0; i < cm.options.gutters.length; ++i) {\r\n                var g = display.gutters.childNodes[i];\r\n                if (g && getRect(g).right >= mX) {\r\n                    var line = lineAtHeight(cm.doc, mY);\r\n                    var gutter = cm.options.gutters[i];\r\n                    signalLater(cm, \"gutterClick\", cm, line, gutter, e);\r\n                    break;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // Kludge to work around strange IE behavior where it'll sometimes\r\n        // re-fire a series of drag-related events right after the drop (#1551)\r\n        var lastDrop = 0;\r\n\r\n        function onDrop(e) {\r\n            var cm = this;\r\n            if (signalDOMEvent(cm, e) || eventInWidget(cm.display, e) || (cm.options.onDragEvent && cm.options.onDragEvent(cm, addStop(e))))\r\n                return;\r\n            e_preventDefault(e);\r\n            if (ie) lastDrop = +new Date;\r\n            var pos = posFromMouse(cm, e, true), files = e.dataTransfer.files;\r\n            if (!pos || isReadOnly(cm)) return;\r\n            if (files && files.length && window.FileReader && window.File) {\r\n                var n = files.length, text = Array(n), read = 0;\r\n                var loadFile = function(file, i) {\r\n                    var reader = new FileReader;\r\n                    reader.onload = function() {\r\n                        text[i] = reader.result;\r\n                        if (++read == n) {\r\n                            pos = clipPos(cm.doc, pos);\r\n                            makeChange(cm.doc, {from: pos, to: pos, text: splitLines(text.join(\"\\n\")), origin: \"paste\"}, \"around\");\r\n                        }\r\n                    };\r\n                    reader.readAsText(file);\r\n                };\r\n                for (var i = 0; i < n; ++i) loadFile(files[i], i);\r\n            } else {\r\n                // Don't do a replace if the drop happened inside of the selected text.\r\n                if (cm.state.draggingText && !(posLess(pos, cm.doc.sel.from) || posLess(cm.doc.sel.to, pos))) {\r\n                    cm.state.draggingText(e);\r\n                    // Ensure the editor is re-focused\r\n                    setTimeout(bind(focusInput, cm), 20);\r\n                    return;\r\n                }\r\n                try {\r\n                    var text = e.dataTransfer.getData(\"Text\");\r\n                    if (text) {\r\n                        var curFrom = cm.doc.sel.from, curTo = cm.doc.sel.to;\r\n                        setSelection(cm.doc, pos, pos);\r\n                        if (cm.state.draggingText) replaceRange(cm.doc, \"\", curFrom, curTo, \"paste\");\r\n                        cm.replaceSelection(text, null, \"paste\");\r\n                        focusInput(cm);\r\n                        onFocus(cm);\r\n                    }\r\n                }\r\n                catch(e){}\r\n            }\r\n        }\r\n\r\n        function onDragStart(cm, e) {\r\n            if (ie && (!cm.state.draggingText || +new Date - lastDrop < 100)) { e_stop(e); return; }\r\n            if (signalDOMEvent(cm, e) || eventInWidget(cm.display, e)) return;\r\n\r\n            var txt = cm.getSelection();\r\n            e.dataTransfer.setData(\"Text\", txt);\r\n\r\n            // Use dummy image instead of default browsers image.\r\n            // Recent Safari (~6.0.2) have a tendency to segfault when this happens, so we don't do it there.\r\n            if (e.dataTransfer.setDragImage && !safari) {\r\n                var img = elt(\"img\", null, null, \"position: fixed; left: 0; top: 0;\");\r\n                if (opera) {\r\n                    img.width = img.height = 1;\r\n                    cm.display.wrapper.appendChild(img);\r\n                    // Force a relayout, or Opera won't use our image for some obscure reason\r\n                    img._top = img.offsetTop;\r\n                }\r\n                e.dataTransfer.setDragImage(img, 0, 0);\r\n                if (opera) img.parentNode.removeChild(img);\r\n            }\r\n        }\r\n\r\n        function setScrollTop(cm, val) {\r\n            if (Math.abs(cm.doc.scrollTop - val) < 2) return;\r\n            cm.doc.scrollTop = val;\r\n            if (!gecko) updateDisplay(cm, [], val);\r\n            if (cm.display.scroller.scrollTop != val) cm.display.scroller.scrollTop = val;\r\n            if (cm.display.scrollbarV.scrollTop != val) cm.display.scrollbarV.scrollTop = val;\r\n            if (gecko) updateDisplay(cm, []);\r\n            startWorker(cm, 100);\r\n        }\r\n        function setScrollLeft(cm, val, isScroller) {\r\n            if (isScroller ? val == cm.doc.scrollLeft : Math.abs(cm.doc.scrollLeft - val) < 2) return;\r\n            val = Math.min(val, cm.display.scroller.scrollWidth - cm.display.scroller.clientWidth);\r\n            cm.doc.scrollLeft = val;\r\n            alignHorizontally(cm);\r\n            if (cm.display.scroller.scrollLeft != val) cm.display.scroller.scrollLeft = val;\r\n            if (cm.display.scrollbarH.scrollLeft != val) cm.display.scrollbarH.scrollLeft = val;\r\n        }\r\n\r\n        // Since the delta values reported on mouse wheel events are\r\n        // unstandardized between browsers and even browser versions, and\r\n        // generally horribly unpredictable, this code starts by measuring\r\n        // the scroll effect that the first few mouse wheel events have,\r\n        // and, from that, detects the way it can convert deltas to pixel\r\n        // offsets afterwards.\r\n        //\r\n        // The reason we want to know the amount a wheel event will scroll\r\n        // is that it gives us a chance to update the display before the\r\n        // actual scrolling happens, reducing flickering.\r\n\r\n        var wheelSamples = 0, wheelPixelsPerUnit = null;\r\n        // Fill in a browser-detected starting value on browsers where we\r\n        // know one. These don't have to be accurate -- the result of them\r\n        // being wrong would just be a slight flicker on the first wheel\r\n        // scroll (if it is large enough).\r\n        if (ie) wheelPixelsPerUnit = -.53;\r\n        else if (gecko) wheelPixelsPerUnit = 15;\r\n        else if (chrome) wheelPixelsPerUnit = -.7;\r\n        else if (safari) wheelPixelsPerUnit = -1/3;\r\n\r\n        function onScrollWheel(cm, e) {\r\n            var dx = e.wheelDeltaX, dy = e.wheelDeltaY;\r\n            if (dx == null && e.detail && e.axis == e.HORIZONTAL_AXIS) dx = e.detail;\r\n            if (dy == null && e.detail && e.axis == e.VERTICAL_AXIS) dy = e.detail;\r\n            else if (dy == null) dy = e.wheelDelta;\r\n\r\n            var display = cm.display, scroll = display.scroller;\r\n            // Quit if there's nothing to scroll here\r\n            if (!(dx && scroll.scrollWidth > scroll.clientWidth ||\r\n                dy && scroll.scrollHeight > scroll.clientHeight)) return;\r\n\r\n            // Webkit browsers on OS X abort momentum scrolls when the target\r\n            // of the scroll event is removed from the scrollable element.\r\n            // This hack (see related code in patchDisplay) makes sure the\r\n            // element is kept around.\r\n            if (dy && mac && webkit) {\r\n                for (var cur = e.target; cur != scroll; cur = cur.parentNode) {\r\n                    if (cur.lineObj) {\r\n                        cm.display.currentWheelTarget = cur;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // On some browsers, horizontal scrolling will cause redraws to\r\n            // happen before the gutter has been realigned, causing it to\r\n            // wriggle around in a most unseemly way. When we have an\r\n            // estimated pixels/delta value, we just handle horizontal\r\n            // scrolling entirely here. It'll be slightly off from native, but\r\n            // better than glitching out.\r\n            if (dx && !gecko && !opera && wheelPixelsPerUnit != null) {\r\n                if (dy)\r\n                    setScrollTop(cm, Math.max(0, Math.min(scroll.scrollTop + dy * wheelPixelsPerUnit, scroll.scrollHeight - scroll.clientHeight)));\r\n                setScrollLeft(cm, Math.max(0, Math.min(scroll.scrollLeft + dx * wheelPixelsPerUnit, scroll.scrollWidth - scroll.clientWidth)));\r\n                e_preventDefault(e);\r\n                display.wheelStartX = null; // Abort measurement, if in progress\r\n                return;\r\n            }\r\n\r\n            if (dy && wheelPixelsPerUnit != null) {\r\n                var pixels = dy * wheelPixelsPerUnit;\r\n                var top = cm.doc.scrollTop, bot = top + display.wrapper.clientHeight;\r\n                if (pixels < 0) top = Math.max(0, top + pixels - 50);\r\n                else bot = Math.min(cm.doc.height, bot + pixels + 50);\r\n                updateDisplay(cm, [], {top: top, bottom: bot});\r\n            }\r\n\r\n            if (wheelSamples < 20) {\r\n                if (display.wheelStartX == null) {\r\n                    display.wheelStartX = scroll.scrollLeft; display.wheelStartY = scroll.scrollTop;\r\n                    display.wheelDX = dx; display.wheelDY = dy;\r\n                    setTimeout(function() {\r\n                        if (display.wheelStartX == null) return;\r\n                        var movedX = scroll.scrollLeft - display.wheelStartX;\r\n                        var movedY = scroll.scrollTop - display.wheelStartY;\r\n                        var sample = (movedY && display.wheelDY && movedY / display.wheelDY) ||\r\n                            (movedX && display.wheelDX && movedX / display.wheelDX);\r\n                        display.wheelStartX = display.wheelStartY = null;\r\n                        if (!sample) return;\r\n                        wheelPixelsPerUnit = (wheelPixelsPerUnit * wheelSamples + sample) / (wheelSamples + 1);\r\n                        ++wheelSamples;\r\n                    }, 200);\r\n                } else {\r\n                    display.wheelDX += dx; display.wheelDY += dy;\r\n                }\r\n            }\r\n        }\r\n\r\n        function doHandleBinding(cm, bound, dropShift) {\r\n            if (typeof bound == \"string\") {\r\n                bound = commands[bound];\r\n                if (!bound) return false;\r\n            }\r\n            // Ensure previous input has been read, so that the handler sees a\r\n            // consistent view of the document\r\n            if (cm.display.pollingFast && readInput(cm)) cm.display.pollingFast = false;\r\n            var doc = cm.doc, prevShift = doc.sel.shift, done = false;\r\n            try {\r\n                if (isReadOnly(cm)) cm.state.suppressEdits = true;\r\n                if (dropShift) doc.sel.shift = false;\r\n                done = bound(cm) != Pass;\r\n            } finally {\r\n                doc.sel.shift = prevShift;\r\n                cm.state.suppressEdits = false;\r\n            }\r\n            return done;\r\n        }\r\n\r\n        function allKeyMaps(cm) {\r\n            var maps = cm.state.keyMaps.slice(0);\r\n            if (cm.options.extraKeys) maps.push(cm.options.extraKeys);\r\n            maps.push(cm.options.keyMap);\r\n            return maps;\r\n        }\r\n\r\n        var maybeTransition;\r\n        function handleKeyBinding(cm, e) {\r\n            // Handle auto keymap transitions\r\n            var startMap = getKeyMap(cm.options.keyMap), next = startMap.auto;\r\n            clearTimeout(maybeTransition);\r\n            if (next && !isModifierKey(e)) maybeTransition = setTimeout(function() {\r\n                if (getKeyMap(cm.options.keyMap) == startMap) {\r\n                    cm.options.keyMap = (next.call ? next.call(null, cm) : next);\r\n                    keyMapChanged(cm);\r\n                }\r\n            }, 50);\r\n\r\n            var name = keyName(e, true), handled = false;\r\n            if (!name) return false;\r\n            var keymaps = allKeyMaps(cm);\r\n\r\n            if (e.shiftKey) {\r\n                // First try to resolve full name (including 'Shift-'). Failing\r\n                // that, see if there is a cursor-motion command (starting with\r\n                // 'go') bound to the keyname without 'Shift-'.\r\n                handled = lookupKey(\"Shift-\" + name, keymaps, function(b) {return doHandleBinding(cm, b, true);})\r\n                    || lookupKey(name, keymaps, function(b) {\r\n                        if (typeof b == \"string\" ? /^go[A-Z]/.test(b) : b.motion)\r\n                            return doHandleBinding(cm, b);\r\n                    });\r\n            } else {\r\n                handled = lookupKey(name, keymaps, function(b) { return doHandleBinding(cm, b); });\r\n            }\r\n\r\n            if (handled) {\r\n                e_preventDefault(e);\r\n                restartBlink(cm);\r\n                if (ie_lt9) { e.oldKeyCode = e.keyCode; e.keyCode = 0; }\r\n                signalLater(cm, \"keyHandled\", cm, name, e);\r\n            }\r\n            return handled;\r\n        }\r\n\r\n        function handleCharBinding(cm, e, ch) {\r\n            var handled = lookupKey(\"'\" + ch + \"'\", allKeyMaps(cm),\r\n                function(b) { return doHandleBinding(cm, b, true); });\r\n            if (handled) {\r\n                e_preventDefault(e);\r\n                restartBlink(cm);\r\n                signalLater(cm, \"keyHandled\", cm, \"'\" + ch + \"'\", e);\r\n            }\r\n            return handled;\r\n        }\r\n\r\n        var lastStoppedKey = null;\r\n        function onKeyDown(e) {\r\n            var cm = this;\r\n            if (!cm.state.focused) onFocus(cm);\r\n            if (ie && e.keyCode == 27) { e.returnValue = false; }\r\n            if (signalDOMEvent(cm, e) || cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\r\n            var code = e.keyCode;\r\n            // IE does strange things with escape.\r\n            cm.doc.sel.shift = code == 16 || e.shiftKey;\r\n            // First give onKeyEvent option a chance to handle this.\r\n            var handled = handleKeyBinding(cm, e);\r\n            if (opera) {\r\n                lastStoppedKey = handled ? code : null;\r\n                // Opera has no cut event... we try to at least catch the key combo\r\n                if (!handled && code == 88 && !hasCopyEvent && (mac ? e.metaKey : e.ctrlKey))\r\n                    cm.replaceSelection(\"\");\r\n            }\r\n        }\r\n\r\n        function onKeyPress(e) {\r\n            var cm = this;\r\n            if (signalDOMEvent(cm, e) || cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\r\n            var keyCode = e.keyCode, charCode = e.charCode;\r\n            if (opera && keyCode == lastStoppedKey) {lastStoppedKey = null; e_preventDefault(e); return;}\r\n            if (((opera && (!e.which || e.which < 10)) || khtml) && handleKeyBinding(cm, e)) return;\r\n            var ch = String.fromCharCode(charCode == null ? keyCode : charCode);\r\n            if (this.options.electricChars && this.doc.mode.electricChars &&\r\n                this.options.smartIndent && !isReadOnly(this) &&\r\n                this.doc.mode.electricChars.indexOf(ch) > -1)\r\n                setTimeout(operation(cm, function() {indentLine(cm, cm.doc.sel.to.line, \"smart\");}), 75);\r\n            if (handleCharBinding(cm, e, ch)) return;\r\n            if (ie && !ie_lt9) cm.display.inputHasSelection = null;\r\n            fastPoll(cm);\r\n        }\r\n\r\n        function onFocus(cm) {\r\n            if (cm.options.readOnly == \"nocursor\") return;\r\n            if (!cm.state.focused) {\r\n                signal(cm, \"focus\", cm);\r\n                cm.state.focused = true;\r\n                if (cm.display.wrapper.className.search(/\\bCodeMirror-focused\\b/) == -1)\r\n                    cm.display.wrapper.className += \" CodeMirror-focused\";\r\n                resetInput(cm, true);\r\n            }\r\n            slowPoll(cm);\r\n            restartBlink(cm);\r\n        }\r\n        function onBlur(cm) {\r\n            if (cm.state.focused) {\r\n                signal(cm, \"blur\", cm);\r\n                cm.state.focused = false;\r\n                cm.display.wrapper.className = cm.display.wrapper.className.replace(\" CodeMirror-focused\", \"\");\r\n            }\r\n            clearInterval(cm.display.blinker);\r\n            setTimeout(function() {if (!cm.state.focused) cm.doc.sel.shift = false;}, 150);\r\n        }\r\n\r\n        var detectingSelectAll;\r\n        function onContextMenu(cm, e) {\r\n            if (signalDOMEvent(cm, e, \"contextmenu\")) return;\r\n            var display = cm.display, sel = cm.doc.sel;\r\n            if (eventInWidget(display, e)) return;\r\n\r\n            var pos = posFromMouse(cm, e), scrollPos = display.scroller.scrollTop;\r\n            if (!pos || opera) return; // Opera is difficult.\r\n            if (posEq(sel.from, sel.to) || posLess(pos, sel.from) || !posLess(pos, sel.to))\r\n                operation(cm, setSelection)(cm.doc, pos, pos);\r\n\r\n            var oldCSS = display.input.style.cssText;\r\n            display.inputDiv.style.position = \"absolute\";\r\n            display.input.style.cssText = \"position: fixed; width: 30px; height: 30px; top: \" + (e.clientY - 5) +\r\n                \"px; left: \" + (e.clientX - 5) + \"px; z-index: 1000; background: white; outline: none;\" +\r\n                \"border-width: 0; outline: none; overflow: hidden; opacity: .05; -ms-opacity: .05; filter: alpha(opacity=5);\";\r\n            focusInput(cm);\r\n            resetInput(cm, true);\r\n            // Adds \"Select all\" to context menu in FF\r\n            if (posEq(sel.from, sel.to)) display.input.value = display.prevInput = \" \";\r\n\r\n            function prepareSelectAllHack() {\r\n                if (display.input.selectionStart != null) {\r\n                    var extval = display.input.value = \" \" + (posEq(sel.from, sel.to) ? \"\" : display.input.value);\r\n                    display.prevInput = \" \";\r\n                    display.input.selectionStart = 1; display.input.selectionEnd = extval.length;\r\n                }\r\n            }\r\n            function rehide() {\r\n                display.inputDiv.style.position = \"relative\";\r\n                display.input.style.cssText = oldCSS;\r\n                if (ie_lt9) display.scrollbarV.scrollTop = display.scroller.scrollTop = scrollPos;\r\n                slowPoll(cm);\r\n\r\n                // Try to detect the user choosing select-all\r\n                if (display.input.selectionStart != null) {\r\n                    if (!ie || ie_lt9) prepareSelectAllHack();\r\n                    clearTimeout(detectingSelectAll);\r\n                    var i = 0, poll = function(){\r\n                        if (display.prevInput == \" \" && display.input.selectionStart == 0)\r\n                            operation(cm, commands.selectAll)(cm);\r\n                        else if (i++ < 10) detectingSelectAll = setTimeout(poll, 500);\r\n                        else resetInput(cm);\r\n                    };\r\n                    detectingSelectAll = setTimeout(poll, 200);\r\n                }\r\n            }\r\n\r\n            if (ie && !ie_lt9) prepareSelectAllHack();\r\n            if (captureMiddleClick) {\r\n                e_stop(e);\r\n                var mouseup = function() {\r\n                    off(window, \"mouseup\", mouseup);\r\n                    setTimeout(rehide, 20);\r\n                };\r\n                on(window, \"mouseup\", mouseup);\r\n            } else {\r\n                setTimeout(rehide, 50);\r\n            }\r\n        }\r\n\r\n        // UPDATING\r\n\r\n        var changeEnd = CodeMirror.changeEnd = function(change) {\r\n            if (!change.text) return change.to;\r\n            return Pos(change.from.line + change.text.length - 1,\r\n                    lst(change.text).length + (change.text.length == 1 ? change.from.ch : 0));\r\n        };\r\n\r\n        // Make sure a position will be valid after the given change.\r\n        function clipPostChange(doc, change, pos) {\r\n            if (!posLess(change.from, pos)) return clipPos(doc, pos);\r\n            var diff = (change.text.length - 1) - (change.to.line - change.from.line);\r\n            if (pos.line > change.to.line + diff) {\r\n                var preLine = pos.line - diff, lastLine = doc.first + doc.size - 1;\r\n                if (preLine > lastLine) return Pos(lastLine, getLine(doc, lastLine).text.length);\r\n                return clipToLen(pos, getLine(doc, preLine).text.length);\r\n            }\r\n            if (pos.line == change.to.line + diff)\r\n                return clipToLen(pos, lst(change.text).length + (change.text.length == 1 ? change.from.ch : 0) +\r\n                    getLine(doc, change.to.line).text.length - change.to.ch);\r\n            var inside = pos.line - change.from.line;\r\n            return clipToLen(pos, change.text[inside].length + (inside ? 0 : change.from.ch));\r\n        }\r\n\r\n        // Hint can be null|\"end\"|\"start\"|\"around\"|{anchor,head}\r\n        function computeSelAfterChange(doc, change, hint) {\r\n            if (hint && typeof hint == \"object\") // Assumed to be {anchor, head} object\r\n                return {anchor: clipPostChange(doc, change, hint.anchor),\r\n                    head: clipPostChange(doc, change, hint.head)};\r\n\r\n            if (hint == \"start\") return {anchor: change.from, head: change.from};\r\n\r\n            var end = changeEnd(change);\r\n            if (hint == \"around\") return {anchor: change.from, head: end};\r\n            if (hint == \"end\") return {anchor: end, head: end};\r\n\r\n            // hint is null, leave the selection alone as much as possible\r\n            var adjustPos = function(pos) {\r\n                if (posLess(pos, change.from)) return pos;\r\n                if (!posLess(change.to, pos)) return end;\r\n\r\n                var line = pos.line + change.text.length - (change.to.line - change.from.line) - 1, ch = pos.ch;\r\n                if (pos.line == change.to.line) ch += end.ch - change.to.ch;\r\n                return Pos(line, ch);\r\n            };\r\n            return {anchor: adjustPos(doc.sel.anchor), head: adjustPos(doc.sel.head)};\r\n        }\r\n\r\n        function filterChange(doc, change, update) {\r\n            var obj = {\r\n                canceled: false,\r\n                from: change.from,\r\n                to: change.to,\r\n                text: change.text,\r\n                origin: change.origin,\r\n                cancel: function() { this.canceled = true; }\r\n            };\r\n            if (update) obj.update = function(from, to, text, origin) {\r\n                if (from) this.from = clipPos(doc, from);\r\n                if (to) this.to = clipPos(doc, to);\r\n                if (text) this.text = text;\r\n                if (origin !== undefined) this.origin = origin;\r\n            };\r\n            signal(doc, \"beforeChange\", doc, obj);\r\n            if (doc.cm) signal(doc.cm, \"beforeChange\", doc.cm, obj);\r\n\r\n            if (obj.canceled) return null;\r\n            return {from: obj.from, to: obj.to, text: obj.text, origin: obj.origin};\r\n        }\r\n\r\n        // Replace the range from from to to by the strings in replacement.\r\n        // change is a {from, to, text [, origin]} object\r\n        function makeChange(doc, change, selUpdate, ignoreReadOnly) {\r\n            if (doc.cm) {\r\n                if (!doc.cm.curOp) return operation(doc.cm, makeChange)(doc, change, selUpdate, ignoreReadOnly);\r\n                if (doc.cm.state.suppressEdits) return;\r\n            }\r\n\r\n            if (hasHandler(doc, \"beforeChange\") || doc.cm && hasHandler(doc.cm, \"beforeChange\")) {\r\n                change = filterChange(doc, change, true);\r\n                if (!change) return;\r\n            }\r\n\r\n            // Possibly split or suppress the update based on the presence\r\n            // of read-only spans in its range.\r\n            var split = sawReadOnlySpans && !ignoreReadOnly && removeReadOnlyRanges(doc, change.from, change.to);\r\n            if (split) {\r\n                for (var i = split.length - 1; i >= 1; --i)\r\n                    makeChangeNoReadonly(doc, {from: split[i].from, to: split[i].to, text: [\"\"]});\r\n                if (split.length)\r\n                    makeChangeNoReadonly(doc, {from: split[0].from, to: split[0].to, text: change.text}, selUpdate);\r\n            } else {\r\n                makeChangeNoReadonly(doc, change, selUpdate);\r\n            }\r\n        }\r\n\r\n        function makeChangeNoReadonly(doc, change, selUpdate) {\r\n            var selAfter = computeSelAfterChange(doc, change, selUpdate);\r\n            addToHistory(doc, change, selAfter, doc.cm ? doc.cm.curOp.id : NaN);\r\n\r\n            makeChangeSingleDoc(doc, change, selAfter, stretchSpansOverChange(doc, change));\r\n            var rebased = [];\r\n\r\n            linkedDocs(doc, function(doc, sharedHist) {\r\n                if (!sharedHist && indexOf(rebased, doc.history) == -1) {\r\n                    rebaseHist(doc.history, change);\r\n                    rebased.push(doc.history);\r\n                }\r\n                makeChangeSingleDoc(doc, change, null, stretchSpansOverChange(doc, change));\r\n            });\r\n        }\r\n\r\n        function makeChangeFromHistory(doc, type) {\r\n            if (doc.cm && doc.cm.state.suppressEdits) return;\r\n\r\n            var hist = doc.history;\r\n            var event = (type == \"undo\" ? hist.done : hist.undone).pop();\r\n            if (!event) return;\r\n\r\n            var anti = {changes: [], anchorBefore: event.anchorAfter, headBefore: event.headAfter,\r\n                anchorAfter: event.anchorBefore, headAfter: event.headBefore,\r\n                generation: hist.generation};\r\n            (type == \"undo\" ? hist.undone : hist.done).push(anti);\r\n            hist.generation = event.generation || ++hist.maxGeneration;\r\n\r\n            var filter = hasHandler(doc, \"beforeChange\") || doc.cm && hasHandler(doc.cm, \"beforeChange\");\r\n\r\n            for (var i = event.changes.length - 1; i >= 0; --i) {\r\n                var change = event.changes[i];\r\n                change.origin = type;\r\n                if (filter && !filterChange(doc, change, false)) {\r\n                    (type == \"undo\" ? hist.done : hist.undone).length = 0;\r\n                    return;\r\n                }\r\n\r\n                anti.changes.push(historyChangeFromChange(doc, change));\r\n\r\n                var after = i ? computeSelAfterChange(doc, change, null)\r\n                    : {anchor: event.anchorBefore, head: event.headBefore};\r\n                makeChangeSingleDoc(doc, change, after, mergeOldSpans(doc, change));\r\n                var rebased = [];\r\n\r\n                linkedDocs(doc, function(doc, sharedHist) {\r\n                    if (!sharedHist && indexOf(rebased, doc.history) == -1) {\r\n                        rebaseHist(doc.history, change);\r\n                        rebased.push(doc.history);\r\n                    }\r\n                    makeChangeSingleDoc(doc, change, null, mergeOldSpans(doc, change));\r\n                });\r\n            }\r\n        }\r\n\r\n        function shiftDoc(doc, distance) {\r\n            function shiftPos(pos) {return Pos(pos.line + distance, pos.ch);}\r\n            doc.first += distance;\r\n            if (doc.cm) regChange(doc.cm, doc.first, doc.first, distance);\r\n            doc.sel.head = shiftPos(doc.sel.head); doc.sel.anchor = shiftPos(doc.sel.anchor);\r\n            doc.sel.from = shiftPos(doc.sel.from); doc.sel.to = shiftPos(doc.sel.to);\r\n        }\r\n\r\n        function makeChangeSingleDoc(doc, change, selAfter, spans) {\r\n            if (doc.cm && !doc.cm.curOp)\r\n                return operation(doc.cm, makeChangeSingleDoc)(doc, change, selAfter, spans);\r\n\r\n            if (change.to.line < doc.first) {\r\n                shiftDoc(doc, change.text.length - 1 - (change.to.line - change.from.line));\r\n                return;\r\n            }\r\n            if (change.from.line > doc.lastLine()) return;\r\n\r\n            // Clip the change to the size of this doc\r\n            if (change.from.line < doc.first) {\r\n                var shift = change.text.length - 1 - (doc.first - change.from.line);\r\n                shiftDoc(doc, shift);\r\n                change = {from: Pos(doc.first, 0), to: Pos(change.to.line + shift, change.to.ch),\r\n                    text: [lst(change.text)], origin: change.origin};\r\n            }\r\n            var last = doc.lastLine();\r\n            if (change.to.line > last) {\r\n                change = {from: change.from, to: Pos(last, getLine(doc, last).text.length),\r\n                    text: [change.text[0]], origin: change.origin};\r\n            }\r\n\r\n            change.removed = getBetween(doc, change.from, change.to);\r\n\r\n            if (!selAfter) selAfter = computeSelAfterChange(doc, change, null);\r\n            if (doc.cm) makeChangeSingleDocInEditor(doc.cm, change, spans, selAfter);\r\n            else updateDoc(doc, change, spans, selAfter);\r\n        }\r\n\r\n        function makeChangeSingleDocInEditor(cm, change, spans, selAfter) {\r\n            var doc = cm.doc, display = cm.display, from = change.from, to = change.to;\r\n\r\n            var recomputeMaxLength = false, checkWidthStart = from.line;\r\n            if (!cm.options.lineWrapping) {\r\n                checkWidthStart = lineNo(visualLine(doc, getLine(doc, from.line)));\r\n                doc.iter(checkWidthStart, to.line + 1, function(line) {\r\n                    if (line == display.maxLine) {\r\n                        recomputeMaxLength = true;\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!posLess(doc.sel.head, change.from) && !posLess(change.to, doc.sel.head))\r\n                cm.curOp.cursorActivity = true;\r\n\r\n            updateDoc(doc, change, spans, selAfter, estimateHeight(cm));\r\n\r\n            if (!cm.options.lineWrapping) {\r\n                doc.iter(checkWidthStart, from.line + change.text.length, function(line) {\r\n                    var len = lineLength(doc, line);\r\n                    if (len > display.maxLineLength) {\r\n                        display.maxLine = line;\r\n                        display.maxLineLength = len;\r\n                        display.maxLineChanged = true;\r\n                        recomputeMaxLength = false;\r\n                    }\r\n                });\r\n                if (recomputeMaxLength) cm.curOp.updateMaxLine = true;\r\n            }\r\n\r\n            // Adjust frontier, schedule worker\r\n            doc.frontier = Math.min(doc.frontier, from.line);\r\n            startWorker(cm, 400);\r\n\r\n            var lendiff = change.text.length - (to.line - from.line) - 1;\r\n            // Remember that these lines changed, for updating the display\r\n            regChange(cm, from.line, to.line + 1, lendiff);\r\n\r\n            if (hasHandler(cm, \"change\")) {\r\n                var changeObj = {from: from, to: to,\r\n                    text: change.text,\r\n                    removed: change.removed,\r\n                    origin: change.origin};\r\n                if (cm.curOp.textChanged) {\r\n                    for (var cur = cm.curOp.textChanged; cur.next; cur = cur.next) {}\r\n                    cur.next = changeObj;\r\n                } else cm.curOp.textChanged = changeObj;\r\n            }\r\n        }\r\n\r\n        function replaceRange(doc, code, from, to, origin) {\r\n            if (!to) to = from;\r\n            if (posLess(to, from)) { var tmp = to; to = from; from = tmp; }\r\n            if (typeof code == \"string\") code = splitLines(code);\r\n            makeChange(doc, {from: from, to: to, text: code, origin: origin}, null);\r\n        }\r\n\r\n        // POSITION OBJECT\r\n\r\n        function Pos(line, ch) {\r\n            if (!(this instanceof Pos)) return new Pos(line, ch);\r\n            this.line = line; this.ch = ch;\r\n        }\r\n        CodeMirror.Pos = Pos;\r\n\r\n        function posEq(a, b) {return a.line == b.line && a.ch == b.ch;}\r\n        function posLess(a, b) {return a.line < b.line || (a.line == b.line && a.ch < b.ch);}\r\n        function copyPos(x) {return Pos(x.line, x.ch);}\r\n\r\n        // SELECTION\r\n\r\n        function clipLine(doc, n) {return Math.max(doc.first, Math.min(n, doc.first + doc.size - 1));}\r\n        function clipPos(doc, pos) {\r\n            if (pos.line < doc.first) return Pos(doc.first, 0);\r\n            var last = doc.first + doc.size - 1;\r\n            if (pos.line > last) return Pos(last, getLine(doc, last).text.length);\r\n            return clipToLen(pos, getLine(doc, pos.line).text.length);\r\n        }\r\n        function clipToLen(pos, linelen) {\r\n            var ch = pos.ch;\r\n            if (ch == null || ch > linelen) return Pos(pos.line, linelen);\r\n            else if (ch < 0) return Pos(pos.line, 0);\r\n            else return pos;\r\n        }\r\n        function isLine(doc, l) {return l >= doc.first && l < doc.first + doc.size;}\r\n\r\n        // If shift is held, this will move the selection anchor. Otherwise,\r\n        // it'll set the whole selection.\r\n        function extendSelection(doc, pos, other, bias) {\r\n            if (doc.sel.shift || doc.sel.extend) {\r\n                var anchor = doc.sel.anchor;\r\n                if (other) {\r\n                    var posBefore = posLess(pos, anchor);\r\n                    if (posBefore != posLess(other, anchor)) {\r\n                        anchor = pos;\r\n                        pos = other;\r\n                    } else if (posBefore != posLess(pos, other)) {\r\n                        pos = other;\r\n                    }\r\n                }\r\n                setSelection(doc, anchor, pos, bias);\r\n            } else {\r\n                setSelection(doc, pos, other || pos, bias);\r\n            }\r\n            if (doc.cm) doc.cm.curOp.userSelChange = true;\r\n        }\r\n\r\n        function filterSelectionChange(doc, anchor, head) {\r\n            var obj = {anchor: anchor, head: head};\r\n            signal(doc, \"beforeSelectionChange\", doc, obj);\r\n            if (doc.cm) signal(doc.cm, \"beforeSelectionChange\", doc.cm, obj);\r\n            obj.anchor = clipPos(doc, obj.anchor); obj.head = clipPos(doc, obj.head);\r\n            return obj;\r\n        }\r\n\r\n        // Update the selection. Last two args are only used by\r\n        // updateDoc, since they have to be expressed in the line\r\n        // numbers before the update.\r\n        function setSelection(doc, anchor, head, bias, checkAtomic) {\r\n            if (!checkAtomic && hasHandler(doc, \"beforeSelectionChange\") || doc.cm && hasHandler(doc.cm, \"beforeSelectionChange\")) {\r\n                var filtered = filterSelectionChange(doc, anchor, head);\r\n                head = filtered.head;\r\n                anchor = filtered.anchor;\r\n            }\r\n\r\n            var sel = doc.sel;\r\n            sel.goalColumn = null;\r\n            // Skip over atomic spans.\r\n            if (checkAtomic || !posEq(anchor, sel.anchor))\r\n                anchor = skipAtomic(doc, anchor, bias, checkAtomic != \"push\");\r\n            if (checkAtomic || !posEq(head, sel.head))\r\n                head = skipAtomic(doc, head, bias, checkAtomic != \"push\");\r\n\r\n            if (posEq(sel.anchor, anchor) && posEq(sel.head, head)) return;\r\n\r\n            sel.anchor = anchor; sel.head = head;\r\n            var inv = posLess(head, anchor);\r\n            sel.from = inv ? head : anchor;\r\n            sel.to = inv ? anchor : head;\r\n\r\n            if (doc.cm)\r\n                doc.cm.curOp.updateInput = doc.cm.curOp.selectionChanged =\r\n                    doc.cm.curOp.cursorActivity = true;\r\n\r\n            signalLater(doc, \"cursorActivity\", doc);\r\n        }\r\n\r\n        function reCheckSelection(cm) {\r\n            setSelection(cm.doc, cm.doc.sel.from, cm.doc.sel.to, null, \"push\");\r\n        }\r\n\r\n        function skipAtomic(doc, pos, bias, mayClear) {\r\n            var flipped = false, curPos = pos;\r\n            var dir = bias || 1;\r\n            doc.cantEdit = false;\r\n            search: for (;;) {\r\n                var line = getLine(doc, curPos.line);\r\n                if (line.markedSpans) {\r\n                    for (var i = 0; i < line.markedSpans.length; ++i) {\r\n                        var sp = line.markedSpans[i], m = sp.marker;\r\n                        if ((sp.from == null || (m.inclusiveLeft ? sp.from <= curPos.ch : sp.from < curPos.ch)) &&\r\n                            (sp.to == null || (m.inclusiveRight ? sp.to >= curPos.ch : sp.to > curPos.ch))) {\r\n                            if (mayClear) {\r\n                                signal(m, \"beforeCursorEnter\");\r\n                                if (m.explicitlyCleared) {\r\n                                    if (!line.markedSpans) break;\r\n                                    else {--i; continue;}\r\n                                }\r\n                            }\r\n                            if (!m.atomic) continue;\r\n                            var newPos = m.find()[dir < 0 ? \"from\" : \"to\"];\r\n                            if (posEq(newPos, curPos)) {\r\n                                newPos.ch += dir;\r\n                                if (newPos.ch < 0) {\r\n                                    if (newPos.line > doc.first) newPos = clipPos(doc, Pos(newPos.line - 1));\r\n                                    else newPos = null;\r\n                                } else if (newPos.ch > line.text.length) {\r\n                                    if (newPos.line < doc.first + doc.size - 1) newPos = Pos(newPos.line + 1, 0);\r\n                                    else newPos = null;\r\n                                }\r\n                                if (!newPos) {\r\n                                    if (flipped) {\r\n                                        // Driven in a corner -- no valid cursor position found at all\r\n                                        // -- try again *with* clearing, if we didn't already\r\n                                        if (!mayClear) return skipAtomic(doc, pos, bias, true);\r\n                                        // Otherwise, turn off editing until further notice, and return the start of the doc\r\n                                        doc.cantEdit = true;\r\n                                        return Pos(doc.first, 0);\r\n                                    }\r\n                                    flipped = true; newPos = pos; dir = -dir;\r\n                                }\r\n                            }\r\n                            curPos = newPos;\r\n                            continue search;\r\n                        }\r\n                    }\r\n                }\r\n                return curPos;\r\n            }\r\n        }\r\n\r\n        // SCROLLING\r\n\r\n        function scrollCursorIntoView(cm) {\r\n            var coords = scrollPosIntoView(cm, cm.doc.sel.head, cm.options.cursorScrollMargin);\r\n            if (!cm.state.focused) return;\r\n            var display = cm.display, box = getRect(display.sizer), doScroll = null;\r\n            if (coords.top + box.top < 0) doScroll = true;\r\n            else if (coords.bottom + box.top > (window.innerHeight || document.documentElement.clientHeight)) doScroll = false;\r\n            if (doScroll != null && !phantom) {\r\n                var hidden = display.cursor.style.display == \"none\";\r\n                if (hidden) {\r\n                    display.cursor.style.display = \"\";\r\n                    display.cursor.style.left = coords.left + \"px\";\r\n                    display.cursor.style.top = (coords.top - display.viewOffset) + \"px\";\r\n                }\r\n                display.cursor.scrollIntoView(doScroll);\r\n                if (hidden) display.cursor.style.display = \"none\";\r\n            }\r\n        }\r\n\r\n        function scrollPosIntoView(cm, pos, margin) {\r\n            if (margin == null) margin = 0;\r\n            for (;;) {\r\n                var changed = false, coords = cursorCoords(cm, pos);\r\n                var scrollPos = calculateScrollPos(cm, coords.left, coords.top - margin, coords.left, coords.bottom + margin);\r\n                var startTop = cm.doc.scrollTop, startLeft = cm.doc.scrollLeft;\r\n                if (scrollPos.scrollTop != null) {\r\n                    setScrollTop(cm, scrollPos.scrollTop);\r\n                    if (Math.abs(cm.doc.scrollTop - startTop) > 1) changed = true;\r\n                }\r\n                if (scrollPos.scrollLeft != null) {\r\n                    setScrollLeft(cm, scrollPos.scrollLeft);\r\n                    if (Math.abs(cm.doc.scrollLeft - startLeft) > 1) changed = true;\r\n                }\r\n                if (!changed) return coords;\r\n            }\r\n        }\r\n\r\n        function scrollIntoView(cm, x1, y1, x2, y2) {\r\n            var scrollPos = calculateScrollPos(cm, x1, y1, x2, y2);\r\n            if (scrollPos.scrollTop != null) setScrollTop(cm, scrollPos.scrollTop);\r\n            if (scrollPos.scrollLeft != null) setScrollLeft(cm, scrollPos.scrollLeft);\r\n        }\r\n\r\n        function calculateScrollPos(cm, x1, y1, x2, y2) {\r\n            var display = cm.display, snapMargin = textHeight(cm.display);\r\n            if (y1 < 0) y1 = 0;\r\n            var screen = display.scroller.clientHeight - scrollerCutOff, screentop = display.scroller.scrollTop, result = {};\r\n            var docBottom = cm.doc.height + paddingVert(display);\r\n            var atTop = y1 < snapMargin, atBottom = y2 > docBottom - snapMargin;\r\n            if (y1 < screentop) {\r\n                result.scrollTop = atTop ? 0 : y1;\r\n            } else if (y2 > screentop + screen) {\r\n                var newTop = Math.min(y1, (atBottom ? docBottom : y2) - screen);\r\n                if (newTop != screentop) result.scrollTop = newTop;\r\n            }\r\n\r\n            var screenw = display.scroller.clientWidth - scrollerCutOff, screenleft = display.scroller.scrollLeft;\r\n            x1 += display.gutters.offsetWidth; x2 += display.gutters.offsetWidth;\r\n            var gutterw = display.gutters.offsetWidth;\r\n            var atLeft = x1 < gutterw + 10;\r\n            if (x1 < screenleft + gutterw || atLeft) {\r\n                if (atLeft) x1 = 0;\r\n                result.scrollLeft = Math.max(0, x1 - 10 - gutterw);\r\n            } else if (x2 > screenw + screenleft - 3) {\r\n                result.scrollLeft = x2 + 10 - screenw;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function updateScrollPos(cm, left, top) {\r\n            cm.curOp.updateScrollPos = {scrollLeft: left == null ? cm.doc.scrollLeft : left,\r\n                scrollTop: top == null ? cm.doc.scrollTop : top};\r\n        }\r\n\r\n        function addToScrollPos(cm, left, top) {\r\n            var pos = cm.curOp.updateScrollPos || (cm.curOp.updateScrollPos = {scrollLeft: cm.doc.scrollLeft, scrollTop: cm.doc.scrollTop});\r\n            var scroll = cm.display.scroller;\r\n            pos.scrollTop = Math.max(0, Math.min(scroll.scrollHeight - scroll.clientHeight, pos.scrollTop + top));\r\n            pos.scrollLeft = Math.max(0, Math.min(scroll.scrollWidth - scroll.clientWidth, pos.scrollLeft + left));\r\n        }\r\n\r\n        // API UTILITIES\r\n\r\n        function indentLine(cm, n, how, aggressive) {\r\n            var doc = cm.doc;\r\n            if (how == null) how = \"add\";\r\n            if (how == \"smart\") {\r\n                if (!cm.doc.mode.indent) how = \"prev\";\r\n                else var state = getStateBefore(cm, n);\r\n            }\r\n\r\n            var tabSize = cm.options.tabSize;\r\n            var line = getLine(doc, n), curSpace = countColumn(line.text, null, tabSize);\r\n            var curSpaceString = line.text.match(/^\\s*/)[0], indentation;\r\n            if (how == \"smart\") {\r\n                indentation = cm.doc.mode.indent(state, line.text.slice(curSpaceString.length), line.text);\r\n                if (indentation == Pass) {\r\n                    if (!aggressive) return;\r\n                    how = \"prev\";\r\n                }\r\n            }\r\n            if (how == \"prev\") {\r\n                if (n > doc.first) indentation = countColumn(getLine(doc, n-1).text, null, tabSize);\r\n                else indentation = 0;\r\n            } else if (how == \"add\") {\r\n                indentation = curSpace + cm.options.indentUnit;\r\n            } else if (how == \"subtract\") {\r\n                indentation = curSpace - cm.options.indentUnit;\r\n            } else if (typeof how == \"number\") {\r\n                indentation = curSpace + how;\r\n            }\r\n            indentation = Math.max(0, indentation);\r\n\r\n            var indentString = \"\", pos = 0;\r\n            if (cm.options.indentWithTabs)\r\n                for (var i = Math.floor(indentation / tabSize); i; --i) {pos += tabSize; indentString += \"\\t\";}\r\n            if (pos < indentation) indentString += spaceStr(indentation - pos);\r\n\r\n            if (indentString != curSpaceString)\r\n                replaceRange(cm.doc, indentString, Pos(n, 0), Pos(n, curSpaceString.length), \"+input\");\r\n            line.stateAfter = null;\r\n        }\r\n\r\n        function changeLine(cm, handle, op) {\r\n            var no = handle, line = handle, doc = cm.doc;\r\n            if (typeof handle == \"number\") line = getLine(doc, clipLine(doc, handle));\r\n            else no = lineNo(handle);\r\n            if (no == null) return null;\r\n            if (op(line, no)) regChange(cm, no, no + 1);\r\n            else return null;\r\n            return line;\r\n        }\r\n\r\n        function findPosH(doc, pos, dir, unit, visually) {\r\n            var line = pos.line, ch = pos.ch, origDir = dir;\r\n            var lineObj = getLine(doc, line);\r\n            var possible = true;\r\n            function findNextLine() {\r\n                var l = line + dir;\r\n                if (l < doc.first || l >= doc.first + doc.size) return (possible = false);\r\n                line = l;\r\n                return lineObj = getLine(doc, l);\r\n            }\r\n            function moveOnce(boundToLine) {\r\n                var next = (visually ? moveVisually : moveLogically)(lineObj, ch, dir, true);\r\n                if (next == null) {\r\n                    if (!boundToLine && findNextLine()) {\r\n                        if (visually) ch = (dir < 0 ? lineRight : lineLeft)(lineObj);\r\n                        else ch = dir < 0 ? lineObj.text.length : 0;\r\n                    } else return (possible = false);\r\n                } else ch = next;\r\n                return true;\r\n            }\r\n\r\n            if (unit == \"char\") moveOnce();\r\n            else if (unit == \"column\") moveOnce(true);\r\n            else if (unit == \"word\" || unit == \"group\") {\r\n                var sawType = null, group = unit == \"group\";\r\n                for (var first = true;; first = false) {\r\n                    if (dir < 0 && !moveOnce(!first)) break;\r\n                    var cur = lineObj.text.charAt(ch) || \"\\n\";\r\n                    var type = isWordChar(cur) ? \"w\"\r\n                        : !group ? null\r\n                        : /\\s/.test(cur) ? null\r\n                        : \"p\";\r\n                    if (sawType && sawType != type) {\r\n                        if (dir < 0) {dir = 1; moveOnce();}\r\n                        break;\r\n                    }\r\n                    if (type) sawType = type;\r\n                    if (dir > 0 && !moveOnce(!first)) break;\r\n                }\r\n            }\r\n            var result = skipAtomic(doc, Pos(line, ch), origDir, true);\r\n            if (!possible) result.hitSide = true;\r\n            return result;\r\n        }\r\n\r\n        function findPosV(cm, pos, dir, unit) {\r\n            var doc = cm.doc, x = pos.left, y;\r\n            if (unit == \"page\") {\r\n                var pageSize = Math.min(cm.display.wrapper.clientHeight, window.innerHeight || document.documentElement.clientHeight);\r\n                y = pos.top + dir * (pageSize - (dir < 0 ? 1.5 : .5) * textHeight(cm.display));\r\n            } else if (unit == \"line\") {\r\n                y = dir > 0 ? pos.bottom + 3 : pos.top - 3;\r\n            }\r\n            for (;;) {\r\n                var target = coordsChar(cm, x, y);\r\n                if (!target.outside) break;\r\n                if (dir < 0 ? y <= 0 : y >= doc.height) { target.hitSide = true; break; }\r\n                y += dir * 5;\r\n            }\r\n            return target;\r\n        }\r\n\r\n        function findWordAt(line, pos) {\r\n            var start = pos.ch, end = pos.ch;\r\n            if (line) {\r\n                if ((pos.xRel < 0 || end == line.length) && start) --start; else ++end;\r\n                var startChar = line.charAt(start);\r\n                var check = isWordChar(startChar) ? isWordChar\r\n                    : /\\s/.test(startChar) ? function(ch) {return /\\s/.test(ch);}\r\n                    : function(ch) {return !/\\s/.test(ch) && !isWordChar(ch);};\r\n                while (start > 0 && check(line.charAt(start - 1))) --start;\r\n                while (end < line.length && check(line.charAt(end))) ++end;\r\n            }\r\n            return {from: Pos(pos.line, start), to: Pos(pos.line, end)};\r\n        }\r\n\r\n        function selectLine(cm, line) {\r\n            extendSelection(cm.doc, Pos(line, 0), clipPos(cm.doc, Pos(line + 1, 0)));\r\n        }\r\n\r\n        // PROTOTYPE\r\n\r\n        // The publicly visible API. Note that operation(null, f) means\r\n        // 'wrap f in an operation, performed on its `this` parameter'\r\n\r\n        CodeMirror.prototype = {\r\n            constructor: CodeMirror,\r\n            focus: function(){window.focus(); focusInput(this); onFocus(this); fastPoll(this);},\r\n\r\n            setOption: function(option, value) {\r\n                var options = this.options, old = options[option];\r\n                if (options[option] == value && option != \"mode\") return;\r\n                options[option] = value;\r\n                if (optionHandlers.hasOwnProperty(option))\r\n                    operation(this, optionHandlers[option])(this, value, old);\r\n            },\r\n\r\n            getOption: function(option) {return this.options[option];},\r\n            getDoc: function() {return this.doc;},\r\n\r\n            addKeyMap: function(map, bottom) {\r\n                this.state.keyMaps[bottom ? \"push\" : \"unshift\"](map);\r\n            },\r\n            removeKeyMap: function(map) {\r\n                var maps = this.state.keyMaps;\r\n                for (var i = 0; i < maps.length; ++i)\r\n                    if (maps[i] == map || (typeof maps[i] != \"string\" && maps[i].name == map)) {\r\n                        maps.splice(i, 1);\r\n                        return true;\r\n                    }\r\n            },\r\n\r\n            addOverlay: operation(null, function(spec, options) {\r\n                var mode = spec.token ? spec : CodeMirror.getMode(this.options, spec);\r\n                if (mode.startState) throw new Error(\"Overlays may not be stateful.\");\r\n                this.state.overlays.push({mode: mode, modeSpec: spec, opaque: options && options.opaque});\r\n                this.state.modeGen++;\r\n                regChange(this);\r\n            }),\r\n            removeOverlay: operation(null, function(spec) {\r\n                var overlays = this.state.overlays;\r\n                for (var i = 0; i < overlays.length; ++i) {\r\n                    var cur = overlays[i].modeSpec;\r\n                    if (cur == spec || typeof spec == \"string\" && cur.name == spec) {\r\n                        overlays.splice(i, 1);\r\n                        this.state.modeGen++;\r\n                        regChange(this);\r\n                        return;\r\n                    }\r\n                }\r\n            }),\r\n\r\n            indentLine: operation(null, function(n, dir, aggressive) {\r\n                if (typeof dir != \"string\" && typeof dir != \"number\") {\r\n                    if (dir == null) dir = this.options.smartIndent ? \"smart\" : \"prev\";\r\n                    else dir = dir ? \"add\" : \"subtract\";\r\n                }\r\n                if (isLine(this.doc, n)) indentLine(this, n, dir, aggressive);\r\n            }),\r\n            indentSelection: operation(null, function(how) {\r\n                var sel = this.doc.sel;\r\n                if (posEq(sel.from, sel.to)) return indentLine(this, sel.from.line, how);\r\n                var e = sel.to.line - (sel.to.ch ? 0 : 1);\r\n                for (var i = sel.from.line; i <= e; ++i) indentLine(this, i, how);\r\n            }),\r\n\r\n            // Fetch the parser token for a given character. Useful for hacks\r\n            // that want to inspect the mode state (say, for completion).\r\n            getTokenAt: function(pos, precise) {\r\n                var doc = this.doc;\r\n                pos = clipPos(doc, pos);\r\n                var state = getStateBefore(this, pos.line, precise), mode = this.doc.mode;\r\n                var line = getLine(doc, pos.line);\r\n                var stream = new StringStream(line.text, this.options.tabSize);\r\n                while (stream.pos < pos.ch && !stream.eol()) {\r\n                    stream.start = stream.pos;\r\n                    var style = mode.token(stream, state);\r\n                }\r\n                return {start: stream.start,\r\n                    end: stream.pos,\r\n                    string: stream.current(),\r\n                    className: style || null, // Deprecated, use 'type' instead\r\n                    type: style || null,\r\n                    state: state};\r\n            },\r\n\r\n            getTokenTypeAt: function(pos) {\r\n                pos = clipPos(this.doc, pos);\r\n                var styles = getLineStyles(this, getLine(this.doc, pos.line));\r\n                var before = 0, after = (styles.length - 1) / 2, ch = pos.ch;\r\n                if (ch == 0) return styles[2];\r\n                for (;;) {\r\n                    var mid = (before + after) >> 1;\r\n                    if ((mid ? styles[mid * 2 - 1] : 0) >= ch) after = mid;\r\n                    else if (styles[mid * 2 + 1] < ch) before = mid + 1;\r\n                    else return styles[mid * 2 + 2];\r\n                }\r\n            },\r\n\r\n            getModeAt: function(pos) {\r\n                var mode = this.doc.mode;\r\n                if (!mode.innerMode) return mode;\r\n                return CodeMirror.innerMode(mode, this.getTokenAt(pos).state).mode;\r\n            },\r\n\r\n            getHelper: function(pos, type) {\r\n                if (!helpers.hasOwnProperty(type)) return;\r\n                var help = helpers[type], mode = this.getModeAt(pos);\r\n                return mode[type] && help[mode[type]] ||\r\n                    mode.helperType && help[mode.helperType] ||\r\n                    help[mode.name];\r\n            },\r\n\r\n            getStateAfter: function(line, precise) {\r\n                var doc = this.doc;\r\n                line = clipLine(doc, line == null ? doc.first + doc.size - 1: line);\r\n                return getStateBefore(this, line + 1, precise);\r\n            },\r\n\r\n            cursorCoords: function(start, mode) {\r\n                var pos, sel = this.doc.sel;\r\n                if (start == null) pos = sel.head;\r\n                else if (typeof start == \"object\") pos = clipPos(this.doc, start);\r\n                else pos = start ? sel.from : sel.to;\r\n                return cursorCoords(this, pos, mode || \"page\");\r\n            },\r\n\r\n            charCoords: function(pos, mode) {\r\n                return charCoords(this, clipPos(this.doc, pos), mode || \"page\");\r\n            },\r\n\r\n            coordsChar: function(coords, mode) {\r\n                coords = fromCoordSystem(this, coords, mode || \"page\");\r\n                return coordsChar(this, coords.left, coords.top);\r\n            },\r\n\r\n            lineAtHeight: function(height, mode) {\r\n                height = fromCoordSystem(this, {top: height, left: 0}, mode || \"page\").top;\r\n                return lineAtHeight(this.doc, height + this.display.viewOffset);\r\n            },\r\n            heightAtLine: function(line, mode) {\r\n                var end = false, last = this.doc.first + this.doc.size - 1;\r\n                if (line < this.doc.first) line = this.doc.first;\r\n                else if (line > last) { line = last; end = true; }\r\n                var lineObj = getLine(this.doc, line);\r\n                return intoCoordSystem(this, getLine(this.doc, line), {top: 0, left: 0}, mode || \"page\").top +\r\n                    (end ? lineObj.height : 0);\r\n            },\r\n\r\n            defaultTextHeight: function() { return textHeight(this.display); },\r\n            defaultCharWidth: function() { return charWidth(this.display); },\r\n\r\n            setGutterMarker: operation(null, function(line, gutterID, value) {\r\n                return changeLine(this, line, function(line) {\r\n                    var markers = line.gutterMarkers || (line.gutterMarkers = {});\r\n                    markers[gutterID] = value;\r\n                    if (!value && isEmpty(markers)) line.gutterMarkers = null;\r\n                    return true;\r\n                });\r\n            }),\r\n\r\n            clearGutter: operation(null, function(gutterID) {\r\n                var cm = this, doc = cm.doc, i = doc.first;\r\n                doc.iter(function(line) {\r\n                    if (line.gutterMarkers && line.gutterMarkers[gutterID]) {\r\n                        line.gutterMarkers[gutterID] = null;\r\n                        regChange(cm, i, i + 1);\r\n                        if (isEmpty(line.gutterMarkers)) line.gutterMarkers = null;\r\n                    }\r\n                    ++i;\r\n                });\r\n            }),\r\n\r\n            addLineClass: operation(null, function(handle, where, cls) {\r\n                return changeLine(this, handle, function(line) {\r\n                    var prop = where == \"text\" ? \"textClass\" : where == \"background\" ? \"bgClass\" : \"wrapClass\";\r\n                    if (!line[prop]) line[prop] = cls;\r\n                    else if (new RegExp(\"(?:^|\\\\s)\" + cls + \"(?:$|\\\\s)\").test(line[prop])) return false;\r\n                    else line[prop] += \" \" + cls;\r\n                    return true;\r\n                });\r\n            }),\r\n\r\n            removeLineClass: operation(null, function(handle, where, cls) {\r\n                return changeLine(this, handle, function(line) {\r\n                    var prop = where == \"text\" ? \"textClass\" : where == \"background\" ? \"bgClass\" : \"wrapClass\";\r\n                    var cur = line[prop];\r\n                    if (!cur) return false;\r\n                    else if (cls == null) line[prop] = null;\r\n                    else {\r\n                        var found = cur.match(new RegExp(\"(?:^|\\\\s+)\" + cls + \"(?:$|\\\\s+)\"));\r\n                        if (!found) return false;\r\n                        var end = found.index + found[0].length;\r\n                        line[prop] = cur.slice(0, found.index) + (!found.index || end == cur.length ? \"\" : \" \") + cur.slice(end) || null;\r\n                    }\r\n                    return true;\r\n                });\r\n            }),\r\n\r\n            addLineWidget: operation(null, function(handle, node, options) {\r\n                return addLineWidget(this, handle, node, options);\r\n            }),\r\n\r\n            removeLineWidget: function(widget) { widget.clear(); },\r\n\r\n            lineInfo: function(line) {\r\n                if (typeof line == \"number\") {\r\n                    if (!isLine(this.doc, line)) return null;\r\n                    var n = line;\r\n                    line = getLine(this.doc, line);\r\n                    if (!line) return null;\r\n                } else {\r\n                    var n = lineNo(line);\r\n                    if (n == null) return null;\r\n                }\r\n                return {line: n, handle: line, text: line.text, gutterMarkers: line.gutterMarkers,\r\n                    textClass: line.textClass, bgClass: line.bgClass, wrapClass: line.wrapClass,\r\n                    widgets: line.widgets};\r\n            },\r\n\r\n            getViewport: function() { return {from: this.display.showingFrom, to: this.display.showingTo};},\r\n\r\n            addWidget: function(pos, node, scroll, vert, horiz) {\r\n                var display = this.display;\r\n                pos = cursorCoords(this, clipPos(this.doc, pos));\r\n                var top = pos.bottom, left = pos.left;\r\n                node.style.position = \"absolute\";\r\n                display.sizer.appendChild(node);\r\n                if (vert == \"over\") {\r\n                    top = pos.top;\r\n                } else if (vert == \"above\" || vert == \"near\") {\r\n                    var vspace = Math.max(display.wrapper.clientHeight, this.doc.height),\r\n                        hspace = Math.max(display.sizer.clientWidth, display.lineSpace.clientWidth);\r\n                    // Default to positioning above (if specified and possible); otherwise default to positioning below\r\n                    if ((vert == 'above' || pos.bottom + node.offsetHeight > vspace) && pos.top > node.offsetHeight)\r\n                        top = pos.top - node.offsetHeight;\r\n                    else if (pos.bottom + node.offsetHeight <= vspace)\r\n                        top = pos.bottom;\r\n                    if (left + node.offsetWidth > hspace)\r\n                        left = hspace - node.offsetWidth;\r\n                }\r\n                node.style.top = top + \"px\";\r\n                node.style.left = node.style.right = \"\";\r\n                if (horiz == \"right\") {\r\n                    left = display.sizer.clientWidth - node.offsetWidth;\r\n                    node.style.right = \"0px\";\r\n                } else {\r\n                    if (horiz == \"left\") left = 0;\r\n                    else if (horiz == \"middle\") left = (display.sizer.clientWidth - node.offsetWidth) / 2;\r\n                    node.style.left = left + \"px\";\r\n                }\r\n                if (scroll)\r\n                    scrollIntoView(this, left, top, left + node.offsetWidth, top + node.offsetHeight);\r\n            },\r\n\r\n            triggerOnKeyDown: operation(null, onKeyDown),\r\n\r\n            execCommand: function(cmd) {return commands[cmd](this);},\r\n\r\n            findPosH: function(from, amount, unit, visually) {\r\n                var dir = 1;\r\n                if (amount < 0) { dir = -1; amount = -amount; }\r\n                for (var i = 0, cur = clipPos(this.doc, from); i < amount; ++i) {\r\n                    cur = findPosH(this.doc, cur, dir, unit, visually);\r\n                    if (cur.hitSide) break;\r\n                }\r\n                return cur;\r\n            },\r\n\r\n            moveH: operation(null, function(dir, unit) {\r\n                var sel = this.doc.sel, pos;\r\n                if (sel.shift || sel.extend || posEq(sel.from, sel.to))\r\n                    pos = findPosH(this.doc, sel.head, dir, unit, this.options.rtlMoveVisually);\r\n                else\r\n                    pos = dir < 0 ? sel.from : sel.to;\r\n                extendSelection(this.doc, pos, pos, dir);\r\n            }),\r\n\r\n            deleteH: operation(null, function(dir, unit) {\r\n                var sel = this.doc.sel;\r\n                if (!posEq(sel.from, sel.to)) replaceRange(this.doc, \"\", sel.from, sel.to, \"+delete\");\r\n                else replaceRange(this.doc, \"\", sel.from, findPosH(this.doc, sel.head, dir, unit, false), \"+delete\");\r\n                this.curOp.userSelChange = true;\r\n            }),\r\n\r\n            findPosV: function(from, amount, unit, goalColumn) {\r\n                var dir = 1, x = goalColumn;\r\n                if (amount < 0) { dir = -1; amount = -amount; }\r\n                for (var i = 0, cur = clipPos(this.doc, from); i < amount; ++i) {\r\n                    var coords = cursorCoords(this, cur, \"div\");\r\n                    if (x == null) x = coords.left;\r\n                    else coords.left = x;\r\n                    cur = findPosV(this, coords, dir, unit);\r\n                    if (cur.hitSide) break;\r\n                }\r\n                return cur;\r\n            },\r\n\r\n            moveV: operation(null, function(dir, unit) {\r\n                var sel = this.doc.sel;\r\n                var pos = cursorCoords(this, sel.head, \"div\");\r\n                if (sel.goalColumn != null) pos.left = sel.goalColumn;\r\n                var target = findPosV(this, pos, dir, unit);\r\n\r\n                if (unit == \"page\") addToScrollPos(this, 0, charCoords(this, target, \"div\").top - pos.top);\r\n                extendSelection(this.doc, target, target, dir);\r\n                sel.goalColumn = pos.left;\r\n            }),\r\n\r\n            toggleOverwrite: function(value) {\r\n                if (value != null && value == this.state.overwrite) return;\r\n                if (this.state.overwrite = !this.state.overwrite)\r\n                    this.display.cursor.className += \" CodeMirror-overwrite\";\r\n                else\r\n                    this.display.cursor.className = this.display.cursor.className.replace(\" CodeMirror-overwrite\", \"\");\r\n            },\r\n            hasFocus: function() { return this.state.focused; },\r\n\r\n            scrollTo: operation(null, function(x, y) {\r\n                updateScrollPos(this, x, y);\r\n            }),\r\n            getScrollInfo: function() {\r\n                var scroller = this.display.scroller, co = scrollerCutOff;\r\n                return {left: scroller.scrollLeft, top: scroller.scrollTop,\r\n                    height: scroller.scrollHeight - co, width: scroller.scrollWidth - co,\r\n                    clientHeight: scroller.clientHeight - co, clientWidth: scroller.clientWidth - co};\r\n            },\r\n\r\n            scrollIntoView: operation(null, function(pos, margin) {\r\n                if (typeof pos == \"number\") pos = Pos(pos, 0);\r\n                if (!margin) margin = 0;\r\n                var coords = pos;\r\n\r\n                if (!pos || pos.line != null) {\r\n                    this.curOp.scrollToPos = pos ? clipPos(this.doc, pos) : this.doc.sel.head;\r\n                    this.curOp.scrollToPosMargin = margin;\r\n                    coords = cursorCoords(this, this.curOp.scrollToPos);\r\n                }\r\n                var sPos = calculateScrollPos(this, coords.left, coords.top - margin, coords.right, coords.bottom + margin);\r\n                updateScrollPos(this, sPos.scrollLeft, sPos.scrollTop);\r\n            }),\r\n\r\n            setSize: operation(null, function(width, height) {\r\n                function interpret(val) {\r\n                    return typeof val == \"number\" || /^\\d+$/.test(String(val)) ? val + \"px\" : val;\r\n                }\r\n                if (width != null) this.display.wrapper.style.width = interpret(width);\r\n                if (height != null) this.display.wrapper.style.height = interpret(height);\r\n                if (this.options.lineWrapping)\r\n                    this.display.measureLineCache.length = this.display.measureLineCachePos = 0;\r\n                this.curOp.forceUpdate = true;\r\n            }),\r\n\r\n            operation: function(f){return runInOp(this, f);},\r\n\r\n            refresh: operation(null, function() {\r\n                clearCaches(this);\r\n                updateScrollPos(this, this.doc.scrollLeft, this.doc.scrollTop);\r\n                regChange(this);\r\n            }),\r\n\r\n            swapDoc: operation(null, function(doc) {\r\n                var old = this.doc;\r\n                old.cm = null;\r\n                attachDoc(this, doc);\r\n                clearCaches(this);\r\n                resetInput(this, true);\r\n                updateScrollPos(this, doc.scrollLeft, doc.scrollTop);\r\n                return old;\r\n            }),\r\n\r\n            getInputField: function(){return this.display.input;},\r\n            getWrapperElement: function(){return this.display.wrapper;},\r\n            getScrollerElement: function(){return this.display.scroller;},\r\n            getGutterElement: function(){return this.display.gutters;}\r\n        };\r\n        eventMixin(CodeMirror);\r\n\r\n        // OPTION DEFAULTS\r\n\r\n        var optionHandlers = CodeMirror.optionHandlers = {};\r\n\r\n        // The default configuration options.\r\n        var defaults = CodeMirror.defaults = {};\r\n\r\n        function option(name, deflt, handle, notOnInit) {\r\n            CodeMirror.defaults[name] = deflt;\r\n            if (handle) optionHandlers[name] =\r\n                notOnInit ? function(cm, val, old) {if (old != Init) handle(cm, val, old);} : handle;\r\n        }\r\n\r\n        var Init = CodeMirror.Init = {toString: function(){return \"CodeMirror.Init\";}};\r\n\r\n        // These two are, on init, called from the constructor because they\r\n        // have to be initialized before the editor can start at all.\r\n        option(\"value\", \"\", function(cm, val) {\r\n            cm.setValue(val);\r\n        }, true);\r\n        option(\"mode\", null, function(cm, val) {\r\n            cm.doc.modeOption = val;\r\n            loadMode(cm);\r\n        }, true);\r\n\r\n        option(\"indentUnit\", 2, loadMode, true);\r\n        option(\"indentWithTabs\", false);\r\n        option(\"smartIndent\", true);\r\n        option(\"tabSize\", 4, function(cm) {\r\n            loadMode(cm);\r\n            clearCaches(cm);\r\n            regChange(cm);\r\n        }, true);\r\n        option(\"electricChars\", true);\r\n        option(\"rtlMoveVisually\", !windows);\r\n\r\n        option(\"theme\", \"default\", function(cm) {\r\n            themeChanged(cm);\r\n            guttersChanged(cm);\r\n        }, true);\r\n        option(\"keyMap\", \"default\", keyMapChanged);\r\n        option(\"extraKeys\", null);\r\n\r\n        option(\"onKeyEvent\", null);\r\n        option(\"onDragEvent\", null);\r\n\r\n        option(\"lineWrapping\", false, wrappingChanged, true);\r\n        option(\"gutters\", [], function(cm) {\r\n            setGuttersForLineNumbers(cm.options);\r\n            guttersChanged(cm);\r\n        }, true);\r\n        option(\"fixedGutter\", true, function(cm, val) {\r\n            cm.display.gutters.style.left = val ? compensateForHScroll(cm.display) + \"px\" : \"0\";\r\n            cm.refresh();\r\n        }, true);\r\n        option(\"coverGutterNextToScrollbar\", false, updateScrollbars, true);\r\n        option(\"lineNumbers\", false, function(cm) {\r\n            setGuttersForLineNumbers(cm.options);\r\n            guttersChanged(cm);\r\n        }, true);\r\n        option(\"firstLineNumber\", 1, guttersChanged, true);\r\n        option(\"lineNumberFormatter\", function(integer) {return integer;}, guttersChanged, true);\r\n        option(\"showCursorWhenSelecting\", false, updateSelection, true);\r\n\r\n        option(\"readOnly\", false, function(cm, val) {\r\n            if (val == \"nocursor\") {onBlur(cm); cm.display.input.blur();}\r\n            else if (!val) resetInput(cm, true);\r\n        });\r\n        option(\"dragDrop\", true);\r\n\r\n        option(\"cursorBlinkRate\", 530);\r\n        option(\"cursorScrollMargin\", 0);\r\n        option(\"cursorHeight\", 1);\r\n        option(\"workTime\", 100);\r\n        option(\"workDelay\", 100);\r\n        option(\"flattenSpans\", true);\r\n        option(\"pollInterval\", 100);\r\n        option(\"undoDepth\", 40, function(cm, val){cm.doc.history.undoDepth = val;});\r\n        option(\"historyEventDelay\", 500);\r\n        option(\"viewportMargin\", 10, function(cm){cm.refresh();}, true);\r\n        option(\"maxHighlightLength\", 10000, function(cm){loadMode(cm); cm.refresh();}, true);\r\n        option(\"moveInputWithCursor\", true, function(cm, val) {\r\n            if (!val) cm.display.inputDiv.style.top = cm.display.inputDiv.style.left = 0;\r\n        });\r\n\r\n        option(\"tabindex\", null, function(cm, val) {\r\n            cm.display.input.tabIndex = val || \"\";\r\n        });\r\n        option(\"autofocus\", null);\r\n\r\n        // MODE DEFINITION AND QUERYING\r\n\r\n        // Known modes, by name and by MIME\r\n        var modes = CodeMirror.modes = {}, mimeModes = CodeMirror.mimeModes = {};\r\n\r\n        CodeMirror.defineMode = function(name, mode) {\r\n            if (!CodeMirror.defaults.mode && name != \"null\") CodeMirror.defaults.mode = name;\r\n            if (arguments.length > 2) {\r\n                mode.dependencies = [];\r\n                for (var i = 2; i < arguments.length; ++i) mode.dependencies.push(arguments[i]);\r\n            }\r\n            modes[name] = mode;\r\n        };\r\n\r\n        CodeMirror.defineMIME = function(mime, spec) {\r\n            mimeModes[mime] = spec;\r\n        };\r\n\r\n        CodeMirror.resolveMode = function(spec) {\r\n            if (typeof spec == \"string\" && mimeModes.hasOwnProperty(spec)) {\r\n                spec = mimeModes[spec];\r\n            } else if (spec && typeof spec.name == \"string\" && mimeModes.hasOwnProperty(spec.name)) {\r\n                var found = mimeModes[spec.name];\r\n                spec = createObj(found, spec);\r\n                spec.name = found.name;\r\n            } else if (typeof spec == \"string\" && /^[\\w\\-]+\\/[\\w\\-]+\\+xml$/.test(spec)) {\r\n                return CodeMirror.resolveMode(\"application/xml\");\r\n            }\r\n            if (typeof spec == \"string\") return {name: spec};\r\n            else return spec || {name: \"null\"};\r\n        };\r\n\r\n        CodeMirror.getMode = function(options, spec) {\r\n            var spec = CodeMirror.resolveMode(spec);\r\n            var mfactory = modes[spec.name];\r\n            if (!mfactory) return CodeMirror.getMode(options, \"text/plain\");\r\n            var modeObj = mfactory(options, spec);\r\n            if (modeExtensions.hasOwnProperty(spec.name)) {\r\n                var exts = modeExtensions[spec.name];\r\n                for (var prop in exts) {\r\n                    if (!exts.hasOwnProperty(prop)) continue;\r\n                    if (modeObj.hasOwnProperty(prop)) modeObj[\"_\" + prop] = modeObj[prop];\r\n                    modeObj[prop] = exts[prop];\r\n                }\r\n            }\r\n            modeObj.name = spec.name;\r\n\r\n            return modeObj;\r\n        };\r\n\r\n        CodeMirror.defineMode(\"null\", function() {\r\n            return {token: function(stream) {stream.skipToEnd();}};\r\n        });\r\n        CodeMirror.defineMIME(\"text/plain\", \"null\");\r\n\r\n        var modeExtensions = CodeMirror.modeExtensions = {};\r\n        CodeMirror.extendMode = function(mode, properties) {\r\n            var exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : (modeExtensions[mode] = {});\r\n            copyObj(properties, exts);\r\n        };\r\n\r\n        // EXTENSIONS\r\n\r\n        CodeMirror.defineExtension = function(name, func) {\r\n            CodeMirror.prototype[name] = func;\r\n        };\r\n        CodeMirror.defineDocExtension = function(name, func) {\r\n            Doc.prototype[name] = func;\r\n        };\r\n        CodeMirror.defineOption = option;\r\n\r\n        var initHooks = [];\r\n        CodeMirror.defineInitHook = function(f) {initHooks.push(f);};\r\n\r\n        var helpers = CodeMirror.helpers = {};\r\n        CodeMirror.registerHelper = function(type, name, value) {\r\n            if (!helpers.hasOwnProperty(type)) helpers[type] = CodeMirror[type] = {};\r\n            helpers[type][name] = value;\r\n        };\r\n\r\n        // UTILITIES\r\n\r\n        CodeMirror.isWordChar = isWordChar;\r\n\r\n        // MODE STATE HANDLING\r\n\r\n        // Utility functions for working with state. Exported because modes\r\n        // sometimes need to do this.\r\n        function copyState(mode, state) {\r\n            if (state === true) return state;\r\n            if (mode.copyState) return mode.copyState(state);\r\n            var nstate = {};\r\n            for (var n in state) {\r\n                var val = state[n];\r\n                if (val instanceof Array) val = val.concat([]);\r\n                nstate[n] = val;\r\n            }\r\n            return nstate;\r\n        }\r\n        CodeMirror.copyState = copyState;\r\n\r\n        function startState(mode, a1, a2) {\r\n            return mode.startState ? mode.startState(a1, a2) : true;\r\n        }\r\n        CodeMirror.startState = startState;\r\n\r\n        CodeMirror.innerMode = function(mode, state) {\r\n            while (mode.innerMode) {\r\n                var info = mode.innerMode(state);\r\n                if (!info || info.mode == mode) break;\r\n                state = info.state;\r\n                mode = info.mode;\r\n            }\r\n            return info || {mode: mode, state: state};\r\n        };\r\n\r\n        // STANDARD COMMANDS\r\n\r\n        var commands = CodeMirror.commands = {\r\n            selectAll: function(cm) {cm.setSelection(Pos(cm.firstLine(), 0), Pos(cm.lastLine()));},\r\n            killLine: function(cm) {\r\n                var from = cm.getCursor(true), to = cm.getCursor(false), sel = !posEq(from, to);\r\n                if (!sel && cm.getLine(from.line).length == from.ch)\r\n                    cm.replaceRange(\"\", from, Pos(from.line + 1, 0), \"+delete\");\r\n                else cm.replaceRange(\"\", from, sel ? to : Pos(from.line), \"+delete\");\r\n            },\r\n            deleteLine: function(cm) {\r\n                var l = cm.getCursor().line;\r\n                cm.replaceRange(\"\", Pos(l, 0), Pos(l), \"+delete\");\r\n            },\r\n            delLineLeft: function(cm) {\r\n                var cur = cm.getCursor();\r\n                cm.replaceRange(\"\", Pos(cur.line, 0), cur, \"+delete\");\r\n            },\r\n            undo: function(cm) {cm.undo();},\r\n            redo: function(cm) {cm.redo();},\r\n            goDocStart: function(cm) {cm.extendSelection(Pos(cm.firstLine(), 0));},\r\n            goDocEnd: function(cm) {cm.extendSelection(Pos(cm.lastLine()));},\r\n            goLineStart: function(cm) {\r\n                cm.extendSelection(lineStart(cm, cm.getCursor().line));\r\n            },\r\n            goLineStartSmart: function(cm) {\r\n                var cur = cm.getCursor(), start = lineStart(cm, cur.line);\r\n                var line = cm.getLineHandle(start.line);\r\n                var order = getOrder(line);\r\n                if (!order || order[0].level == 0) {\r\n                    var firstNonWS = Math.max(0, line.text.search(/\\S/));\r\n                    var inWS = cur.line == start.line && cur.ch <= firstNonWS && cur.ch;\r\n                    cm.extendSelection(Pos(start.line, inWS ? 0 : firstNonWS));\r\n                } else cm.extendSelection(start);\r\n            },\r\n            goLineEnd: function(cm) {\r\n                cm.extendSelection(lineEnd(cm, cm.getCursor().line));\r\n            },\r\n            goLineRight: function(cm) {\r\n                var top = cm.charCoords(cm.getCursor(), \"div\").top + 5;\r\n                cm.extendSelection(cm.coordsChar({left: cm.display.lineDiv.offsetWidth + 100, top: top}, \"div\"));\r\n            },\r\n            goLineLeft: function(cm) {\r\n                var top = cm.charCoords(cm.getCursor(), \"div\").top + 5;\r\n                cm.extendSelection(cm.coordsChar({left: 0, top: top}, \"div\"));\r\n            },\r\n            goLineUp: function(cm) {cm.moveV(-1, \"line\");},\r\n            goLineDown: function(cm) {cm.moveV(1, \"line\");},\r\n            goPageUp: function(cm) {cm.moveV(-1, \"page\");},\r\n            goPageDown: function(cm) {cm.moveV(1, \"page\");},\r\n            goCharLeft: function(cm) {cm.moveH(-1, \"char\");},\r\n            goCharRight: function(cm) {cm.moveH(1, \"char\");},\r\n            goColumnLeft: function(cm) {cm.moveH(-1, \"column\");},\r\n            goColumnRight: function(cm) {cm.moveH(1, \"column\");},\r\n            goWordLeft: function(cm) {cm.moveH(-1, \"word\");},\r\n            goGroupRight: function(cm) {cm.moveH(1, \"group\");},\r\n            goGroupLeft: function(cm) {cm.moveH(-1, \"group\");},\r\n            goWordRight: function(cm) {cm.moveH(1, \"word\");},\r\n            delCharBefore: function(cm) {cm.deleteH(-1, \"char\");},\r\n            delCharAfter: function(cm) {cm.deleteH(1, \"char\");},\r\n            delWordBefore: function(cm) {cm.deleteH(-1, \"word\");},\r\n            delWordAfter: function(cm) {cm.deleteH(1, \"word\");},\r\n            delGroupBefore: function(cm) {cm.deleteH(-1, \"group\");},\r\n            delGroupAfter: function(cm) {cm.deleteH(1, \"group\");},\r\n            indentAuto: function(cm) {cm.indentSelection(\"smart\");},\r\n            indentMore: function(cm) {cm.indentSelection(\"add\");},\r\n            indentLess: function(cm) {cm.indentSelection(\"subtract\");},\r\n            insertTab: function(cm) {cm.replaceSelection(\"\\t\", \"end\", \"+input\");},\r\n            defaultTab: function(cm) {\r\n                if (cm.somethingSelected()) cm.indentSelection(\"add\");\r\n                else cm.replaceSelection(\"\\t\", \"end\", \"+input\");\r\n            },\r\n            transposeChars: function(cm) {\r\n                var cur = cm.getCursor(), line = cm.getLine(cur.line);\r\n                if (cur.ch > 0 && cur.ch < line.length - 1)\r\n                    cm.replaceRange(line.charAt(cur.ch) + line.charAt(cur.ch - 1),\r\n                        Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1));\r\n            },\r\n            newlineAndIndent: function(cm) {\r\n                operation(cm, function() {\r\n                    cm.replaceSelection(\"\\n\", \"end\", \"+input\");\r\n                    cm.indentLine(cm.getCursor().line, null, true);\r\n                })();\r\n            },\r\n            toggleOverwrite: function(cm) {cm.toggleOverwrite();}\r\n        };\r\n\r\n        // STANDARD KEYMAPS\r\n\r\n        var keyMap = CodeMirror.keyMap = {};\r\n        keyMap.basic = {\r\n            \"Left\": \"goCharLeft\", \"Right\": \"goCharRight\", \"Up\": \"goLineUp\", \"Down\": \"goLineDown\",\r\n            \"End\": \"goLineEnd\", \"Home\": \"goLineStartSmart\", \"PageUp\": \"goPageUp\", \"PageDown\": \"goPageDown\",\r\n            \"Delete\": \"delCharAfter\", \"Backspace\": \"delCharBefore\", \"Tab\": \"defaultTab\", \"Shift-Tab\": \"indentAuto\",\r\n            \"Enter\": \"newlineAndIndent\", \"Insert\": \"toggleOverwrite\"\r\n        };\r\n        // Note that the save and find-related commands aren't defined by\r\n        // default. Unknown commands are simply ignored.\r\n        keyMap.pcDefault = {\r\n            \"Ctrl-A\": \"selectAll\", \"Ctrl-D\": \"deleteLine\", \"Ctrl-Z\": \"undo\", \"Shift-Ctrl-Z\": \"redo\", \"Ctrl-Y\": \"redo\",\r\n            \"Ctrl-Home\": \"goDocStart\", \"Alt-Up\": \"goDocStart\", \"Ctrl-End\": \"goDocEnd\", \"Ctrl-Down\": \"goDocEnd\",\r\n            \"Ctrl-Left\": \"goGroupLeft\", \"Ctrl-Right\": \"goGroupRight\", \"Alt-Left\": \"goLineStart\", \"Alt-Right\": \"goLineEnd\",\r\n            \"Ctrl-Backspace\": \"delGroupBefore\", \"Ctrl-Delete\": \"delGroupAfter\", \"Ctrl-S\": \"save\", \"Ctrl-F\": \"find\",\r\n            \"Ctrl-G\": \"findNext\", \"Shift-Ctrl-G\": \"findPrev\", \"Shift-Ctrl-F\": \"replace\", \"Shift-Ctrl-R\": \"replaceAll\",\r\n            \"Ctrl-[\": \"indentLess\", \"Ctrl-]\": \"indentMore\",\r\n            fallthrough: \"basic\"\r\n        };\r\n        keyMap.macDefault = {\r\n            \"Cmd-A\": \"selectAll\", \"Cmd-D\": \"deleteLine\", \"Cmd-Z\": \"undo\", \"Shift-Cmd-Z\": \"redo\", \"Cmd-Y\": \"redo\",\r\n            \"Cmd-Up\": \"goDocStart\", \"Cmd-End\": \"goDocEnd\", \"Cmd-Down\": \"goDocEnd\", \"Alt-Left\": \"goGroupLeft\",\r\n            \"Alt-Right\": \"goGroupRight\", \"Cmd-Left\": \"goLineStart\", \"Cmd-Right\": \"goLineEnd\", \"Alt-Backspace\": \"delGroupBefore\",\r\n            \"Ctrl-Alt-Backspace\": \"delGroupAfter\", \"Alt-Delete\": \"delGroupAfter\", \"Cmd-S\": \"save\", \"Cmd-F\": \"find\",\r\n            \"Cmd-G\": \"findNext\", \"Shift-Cmd-G\": \"findPrev\", \"Cmd-Alt-F\": \"replace\", \"Shift-Cmd-Alt-F\": \"replaceAll\",\r\n            \"Cmd-[\": \"indentLess\", \"Cmd-]\": \"indentMore\", \"Cmd-Backspace\": \"delLineLeft\",\r\n            fallthrough: [\"basic\", \"emacsy\"]\r\n        };\r\n        keyMap[\"default\"] = mac ? keyMap.macDefault : keyMap.pcDefault;\r\n        keyMap.emacsy = {\r\n            \"Ctrl-F\": \"goCharRight\", \"Ctrl-B\": \"goCharLeft\", \"Ctrl-P\": \"goLineUp\", \"Ctrl-N\": \"goLineDown\",\r\n            \"Alt-F\": \"goWordRight\", \"Alt-B\": \"goWordLeft\", \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\r\n            \"Ctrl-V\": \"goPageDown\", \"Shift-Ctrl-V\": \"goPageUp\", \"Ctrl-D\": \"delCharAfter\", \"Ctrl-H\": \"delCharBefore\",\r\n            \"Alt-D\": \"delWordAfter\", \"Alt-Backspace\": \"delWordBefore\", \"Ctrl-K\": \"killLine\", \"Ctrl-T\": \"transposeChars\"\r\n        };\r\n\r\n        // KEYMAP DISPATCH\r\n\r\n        function getKeyMap(val) {\r\n            if (typeof val == \"string\") return keyMap[val];\r\n            else return val;\r\n        }\r\n\r\n        function lookupKey(name, maps, handle) {\r\n            function lookup(map) {\r\n                map = getKeyMap(map);\r\n                var found = map[name];\r\n                if (found === false) return \"stop\";\r\n                if (found != null && handle(found)) return true;\r\n                if (map.nofallthrough) return \"stop\";\r\n\r\n                var fallthrough = map.fallthrough;\r\n                if (fallthrough == null) return false;\r\n                if (Object.prototype.toString.call(fallthrough) != \"[object Array]\")\r\n                    return lookup(fallthrough);\r\n                for (var i = 0, e = fallthrough.length; i < e; ++i) {\r\n                    var done = lookup(fallthrough[i]);\r\n                    if (done) return done;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            for (var i = 0; i < maps.length; ++i) {\r\n                var done = lookup(maps[i]);\r\n                if (done) return done != \"stop\";\r\n            }\r\n        }\r\n        function isModifierKey(event) {\r\n            var name = keyNames[event.keyCode];\r\n            return name == \"Ctrl\" || name == \"Alt\" || name == \"Shift\" || name == \"Mod\";\r\n        }\r\n        function keyName(event, noShift) {\r\n            if (opera && event.keyCode == 34 && event[\"char\"]) return false;\r\n            var name = keyNames[event.keyCode];\r\n            if (name == null || event.altGraphKey) return false;\r\n            if (event.altKey) name = \"Alt-\" + name;\r\n            if (flipCtrlCmd ? event.metaKey : event.ctrlKey) name = \"Ctrl-\" + name;\r\n            if (flipCtrlCmd ? event.ctrlKey : event.metaKey) name = \"Cmd-\" + name;\r\n            if (!noShift && event.shiftKey) name = \"Shift-\" + name;\r\n            return name;\r\n        }\r\n        CodeMirror.lookupKey = lookupKey;\r\n        CodeMirror.isModifierKey = isModifierKey;\r\n        CodeMirror.keyName = keyName;\r\n\r\n        // FROMTEXTAREA\r\n\r\n        CodeMirror.fromTextArea = function(textarea, options) {\r\n            if (!options) options = {};\r\n            options.value = textarea.value;\r\n            if (!options.tabindex && textarea.tabindex)\r\n                options.tabindex = textarea.tabindex;\r\n            if (!options.placeholder && textarea.placeholder)\r\n                options.placeholder = textarea.placeholder;\r\n            // Set autofocus to true if this textarea is focused, or if it has\r\n            // autofocus and no other element is focused.\r\n            if (options.autofocus == null) {\r\n                var hasFocus = document.body;\r\n                // doc.activeElement occasionally throws on IE\r\n                try { hasFocus = document.activeElement; } catch(e) {}\r\n                options.autofocus = hasFocus == textarea ||\r\n                    textarea.getAttribute(\"autofocus\") != null && hasFocus == document.body;\r\n            }\r\n\r\n            function save() {textarea.value = cm.getValue();}\r\n            if (textarea.form) {\r\n                on(textarea.form, \"submit\", save);\r\n                // Deplorable hack to make the submit method do the right thing.\r\n                if (!options.leaveSubmitMethodAlone) {\r\n                    var form = textarea.form, realSubmit = form.submit;\r\n                    try {\r\n                        var wrappedSubmit = form.submit = function() {\r\n                            save();\r\n                            form.submit = realSubmit;\r\n                            form.submit();\r\n                            form.submit = wrappedSubmit;\r\n                        };\r\n                    } catch(e) {}\r\n                }\r\n            }\r\n\r\n            textarea.style.display = \"none\";\r\n            var cm = CodeMirror(function(node) {\r\n                textarea.parentNode.insertBefore(node, textarea.nextSibling);\r\n            }, options);\r\n            cm.save = save;\r\n            cm.getTextArea = function() { return textarea; };\r\n            cm.toTextArea = function() {\r\n                save();\r\n                textarea.parentNode.removeChild(cm.getWrapperElement());\r\n                textarea.style.display = \"\";\r\n                if (textarea.form) {\r\n                    off(textarea.form, \"submit\", save);\r\n                    if (typeof textarea.form.submit == \"function\")\r\n                        textarea.form.submit = realSubmit;\r\n                }\r\n            };\r\n            return cm;\r\n        };\r\n\r\n        // STRING STREAM\r\n\r\n        // Fed to the mode parsers, provides helper functions to make\r\n        // parsers more succinct.\r\n\r\n        // The character stream used by a mode's parser.\r\n        function StringStream(string, tabSize) {\r\n            this.pos = this.start = 0;\r\n            this.string = string;\r\n            this.tabSize = tabSize || 8;\r\n            this.lastColumnPos = this.lastColumnValue = 0;\r\n        }\r\n\r\n        StringStream.prototype = {\r\n            eol: function() {return this.pos >= this.string.length;},\r\n            sol: function() {return this.pos == 0;},\r\n            peek: function() {return this.string.charAt(this.pos) || undefined;},\r\n            next: function() {\r\n                if (this.pos < this.string.length)\r\n                    return this.string.charAt(this.pos++);\r\n            },\r\n            eat: function(match) {\r\n                var ch = this.string.charAt(this.pos);\r\n                if (typeof match == \"string\") var ok = ch == match;\r\n                else var ok = ch && (match.test ? match.test(ch) : match(ch));\r\n                if (ok) {++this.pos; return ch;}\r\n            },\r\n            eatWhile: function(match) {\r\n                var start = this.pos;\r\n                while (this.eat(match)){}\r\n                return this.pos > start;\r\n            },\r\n            eatSpace: function() {\r\n                var start = this.pos;\r\n                while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;\r\n                return this.pos > start;\r\n            },\r\n            skipToEnd: function() {this.pos = this.string.length;},\r\n            skipTo: function(ch) {\r\n                var found = this.string.indexOf(ch, this.pos);\r\n                if (found > -1) {this.pos = found; return true;}\r\n            },\r\n            backUp: function(n) {this.pos -= n;},\r\n            column: function() {\r\n                if (this.lastColumnPos < this.start) {\r\n                    this.lastColumnValue = countColumn(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\r\n                    this.lastColumnPos = this.start;\r\n                }\r\n                return this.lastColumnValue;\r\n            },\r\n            indentation: function() {return countColumn(this.string, null, this.tabSize);},\r\n            match: function(pattern, consume, caseInsensitive) {\r\n                if (typeof pattern == \"string\") {\r\n                    var cased = function(str) {return caseInsensitive ? str.toLowerCase() : str;};\r\n                    var substr = this.string.substr(this.pos, pattern.length);\r\n                    if (cased(substr) == cased(pattern)) {\r\n                        if (consume !== false) this.pos += pattern.length;\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    var match = this.string.slice(this.pos).match(pattern);\r\n                    if (match && match.index > 0) return null;\r\n                    if (match && consume !== false) this.pos += match[0].length;\r\n                    return match;\r\n                }\r\n            },\r\n            current: function(){return this.string.slice(this.start, this.pos);}\r\n        };\r\n        CodeMirror.StringStream = StringStream;\r\n\r\n        // TEXTMARKERS\r\n\r\n        function TextMarker(doc, type) {\r\n            this.lines = [];\r\n            this.type = type;\r\n            this.doc = doc;\r\n        }\r\n        CodeMirror.TextMarker = TextMarker;\r\n        eventMixin(TextMarker);\r\n\r\n        TextMarker.prototype.clear = function() {\r\n            if (this.explicitlyCleared) return;\r\n            var cm = this.doc.cm, withOp = cm && !cm.curOp;\r\n            if (withOp) startOperation(cm);\r\n            if (hasHandler(this, \"clear\")) {\r\n                var found = this.find();\r\n                if (found) signalLater(this, \"clear\", found.from, found.to);\r\n            }\r\n            var min = null, max = null;\r\n            for (var i = 0; i < this.lines.length; ++i) {\r\n                var line = this.lines[i];\r\n                var span = getMarkedSpanFor(line.markedSpans, this);\r\n                if (span.to != null) max = lineNo(line);\r\n                line.markedSpans = removeMarkedSpan(line.markedSpans, span);\r\n                if (span.from != null)\r\n                    min = lineNo(line);\r\n                else if (this.collapsed && !lineIsHidden(this.doc, line) && cm)\r\n                    updateLineHeight(line, textHeight(cm.display));\r\n            }\r\n            if (cm && this.collapsed && !cm.options.lineWrapping) for (var i = 0; i < this.lines.length; ++i) {\r\n                var visual = visualLine(cm.doc, this.lines[i]), len = lineLength(cm.doc, visual);\r\n                if (len > cm.display.maxLineLength) {\r\n                    cm.display.maxLine = visual;\r\n                    cm.display.maxLineLength = len;\r\n                    cm.display.maxLineChanged = true;\r\n                }\r\n            }\r\n\r\n            if (min != null && cm) regChange(cm, min, max + 1);\r\n            this.lines.length = 0;\r\n            this.explicitlyCleared = true;\r\n            if (this.atomic && this.doc.cantEdit) {\r\n                this.doc.cantEdit = false;\r\n                if (cm) reCheckSelection(cm);\r\n            }\r\n            if (withOp) endOperation(cm);\r\n        };\r\n\r\n        TextMarker.prototype.find = function() {\r\n            var from, to;\r\n            for (var i = 0; i < this.lines.length; ++i) {\r\n                var line = this.lines[i];\r\n                var span = getMarkedSpanFor(line.markedSpans, this);\r\n                if (span.from != null || span.to != null) {\r\n                    var found = lineNo(line);\r\n                    if (span.from != null) from = Pos(found, span.from);\r\n                    if (span.to != null) to = Pos(found, span.to);\r\n                }\r\n            }\r\n            if (this.type == \"bookmark\") return from;\r\n            return from && {from: from, to: to};\r\n        };\r\n\r\n        TextMarker.prototype.changed = function() {\r\n            var pos = this.find(), cm = this.doc.cm;\r\n            if (!pos || !cm) return;\r\n            var line = getLine(this.doc, pos.from.line);\r\n            clearCachedMeasurement(cm, line);\r\n            if (pos.from.line >= cm.display.showingFrom && pos.from.line < cm.display.showingTo) {\r\n                for (var node = cm.display.lineDiv.firstChild; node; node = node.nextSibling) if (node.lineObj == line) {\r\n                    if (node.offsetHeight != line.height) updateLineHeight(line, node.offsetHeight);\r\n                    break;\r\n                }\r\n                runInOp(cm, function() {\r\n                    cm.curOp.selectionChanged = cm.curOp.forceUpdate = cm.curOp.updateMaxLine = true;\r\n                });\r\n            }\r\n        };\r\n\r\n        TextMarker.prototype.attachLine = function(line) {\r\n            if (!this.lines.length && this.doc.cm) {\r\n                var op = this.doc.cm.curOp;\r\n                if (!op.maybeHiddenMarkers || indexOf(op.maybeHiddenMarkers, this) == -1)\r\n                    (op.maybeUnhiddenMarkers || (op.maybeUnhiddenMarkers = [])).push(this);\r\n            }\r\n            this.lines.push(line);\r\n        };\r\n        TextMarker.prototype.detachLine = function(line) {\r\n            this.lines.splice(indexOf(this.lines, line), 1);\r\n            if (!this.lines.length && this.doc.cm) {\r\n                var op = this.doc.cm.curOp;\r\n                (op.maybeHiddenMarkers || (op.maybeHiddenMarkers = [])).push(this);\r\n            }\r\n        };\r\n\r\n        function markText(doc, from, to, options, type) {\r\n            if (options && options.shared) return markTextShared(doc, from, to, options, type);\r\n            if (doc.cm && !doc.cm.curOp) return operation(doc.cm, markText)(doc, from, to, options, type);\r\n\r\n            var marker = new TextMarker(doc, type);\r\n            if (type == \"range\" && !posLess(from, to)) return marker;\r\n            if (options) copyObj(options, marker);\r\n            if (marker.replacedWith) {\r\n                marker.collapsed = true;\r\n                marker.replacedWith = elt(\"span\", [marker.replacedWith], \"CodeMirror-widget\");\r\n                if (!options.handleMouseEvents) marker.replacedWith.ignoreEvents = true;\r\n            }\r\n            if (marker.collapsed) sawCollapsedSpans = true;\r\n\r\n            if (marker.addToHistory)\r\n                addToHistory(doc, {from: from, to: to, origin: \"markText\"},\r\n                    {head: doc.sel.head, anchor: doc.sel.anchor}, NaN);\r\n\r\n            var curLine = from.line, size = 0, collapsedAtStart, collapsedAtEnd, cm = doc.cm, updateMaxLine;\r\n            doc.iter(curLine, to.line + 1, function(line) {\r\n                if (cm && marker.collapsed && !cm.options.lineWrapping && visualLine(doc, line) == cm.display.maxLine)\r\n                    updateMaxLine = true;\r\n                var span = {from: null, to: null, marker: marker};\r\n                size += line.text.length;\r\n                if (curLine == from.line) {span.from = from.ch; size -= from.ch;}\r\n                if (curLine == to.line) {span.to = to.ch; size -= line.text.length - to.ch;}\r\n                if (marker.collapsed) {\r\n                    if (curLine == to.line) collapsedAtEnd = collapsedSpanAt(line, to.ch);\r\n                    if (curLine == from.line) collapsedAtStart = collapsedSpanAt(line, from.ch);\r\n                    else updateLineHeight(line, 0);\r\n                }\r\n                addMarkedSpan(line, span);\r\n                ++curLine;\r\n            });\r\n            if (marker.collapsed) doc.iter(from.line, to.line + 1, function(line) {\r\n                if (lineIsHidden(doc, line)) updateLineHeight(line, 0);\r\n            });\r\n\r\n            if (marker.clearOnEnter) on(marker, \"beforeCursorEnter\", function() { marker.clear(); });\r\n\r\n            if (marker.readOnly) {\r\n                sawReadOnlySpans = true;\r\n                if (doc.history.done.length || doc.history.undone.length)\r\n                    doc.clearHistory();\r\n            }\r\n            if (marker.collapsed) {\r\n                if (collapsedAtStart != collapsedAtEnd)\r\n                    throw new Error(\"Inserting collapsed marker overlapping an existing one\");\r\n                marker.size = size;\r\n                marker.atomic = true;\r\n            }\r\n            if (cm) {\r\n                if (updateMaxLine) cm.curOp.updateMaxLine = true;\r\n                if (marker.className || marker.title || marker.startStyle || marker.endStyle || marker.collapsed)\r\n                    regChange(cm, from.line, to.line + 1);\r\n                if (marker.atomic) reCheckSelection(cm);\r\n            }\r\n            return marker;\r\n        }\r\n\r\n        // SHARED TEXTMARKERS\r\n\r\n        function SharedTextMarker(markers, primary) {\r\n            this.markers = markers;\r\n            this.primary = primary;\r\n            for (var i = 0, me = this; i < markers.length; ++i) {\r\n                markers[i].parent = this;\r\n                on(markers[i], \"clear\", function(){me.clear();});\r\n            }\r\n        }\r\n        CodeMirror.SharedTextMarker = SharedTextMarker;\r\n        eventMixin(SharedTextMarker);\r\n\r\n        SharedTextMarker.prototype.clear = function() {\r\n            if (this.explicitlyCleared) return;\r\n            this.explicitlyCleared = true;\r\n            for (var i = 0; i < this.markers.length; ++i)\r\n                this.markers[i].clear();\r\n            signalLater(this, \"clear\");\r\n        };\r\n        SharedTextMarker.prototype.find = function() {\r\n            return this.primary.find();\r\n        };\r\n\r\n        function markTextShared(doc, from, to, options, type) {\r\n            options = copyObj(options);\r\n            options.shared = false;\r\n            var markers = [markText(doc, from, to, options, type)], primary = markers[0];\r\n            var widget = options.replacedWith;\r\n            linkedDocs(doc, function(doc) {\r\n                if (widget) options.replacedWith = widget.cloneNode(true);\r\n                markers.push(markText(doc, clipPos(doc, from), clipPos(doc, to), options, type));\r\n                for (var i = 0; i < doc.linked.length; ++i)\r\n                    if (doc.linked[i].isParent) return;\r\n                primary = lst(markers);\r\n            });\r\n            return new SharedTextMarker(markers, primary);\r\n        }\r\n\r\n        // TEXTMARKER SPANS\r\n\r\n        function getMarkedSpanFor(spans, marker) {\r\n            if (spans) for (var i = 0; i < spans.length; ++i) {\r\n                var span = spans[i];\r\n                if (span.marker == marker) return span;\r\n            }\r\n        }\r\n        function removeMarkedSpan(spans, span) {\r\n            for (var r, i = 0; i < spans.length; ++i)\r\n                if (spans[i] != span) (r || (r = [])).push(spans[i]);\r\n            return r;\r\n        }\r\n        function addMarkedSpan(line, span) {\r\n            line.markedSpans = line.markedSpans ? line.markedSpans.concat([span]) : [span];\r\n            span.marker.attachLine(line);\r\n        }\r\n\r\n        function markedSpansBefore(old, startCh, isInsert) {\r\n            if (old) for (var i = 0, nw; i < old.length; ++i) {\r\n                var span = old[i], marker = span.marker;\r\n                var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= startCh : span.from < startCh);\r\n                if (startsBefore || marker.type == \"bookmark\" && span.from == startCh && (!isInsert || !span.marker.insertLeft)) {\r\n                    var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= startCh : span.to > startCh);\r\n                    (nw || (nw = [])).push({from: span.from,\r\n                        to: endsAfter ? null : span.to,\r\n                        marker: marker});\r\n                }\r\n            }\r\n            return nw;\r\n        }\r\n\r\n        function markedSpansAfter(old, endCh, isInsert) {\r\n            if (old) for (var i = 0, nw; i < old.length; ++i) {\r\n                var span = old[i], marker = span.marker;\r\n                var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= endCh : span.to > endCh);\r\n                if (endsAfter || marker.type == \"bookmark\" && span.from == endCh && (!isInsert || span.marker.insertLeft)) {\r\n                    var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= endCh : span.from < endCh);\r\n                    (nw || (nw = [])).push({from: startsBefore ? null : span.from - endCh,\r\n                        to: span.to == null ? null : span.to - endCh,\r\n                        marker: marker});\r\n                }\r\n            }\r\n            return nw;\r\n        }\r\n\r\n        function stretchSpansOverChange(doc, change) {\r\n            var oldFirst = isLine(doc, change.from.line) && getLine(doc, change.from.line).markedSpans;\r\n            var oldLast = isLine(doc, change.to.line) && getLine(doc, change.to.line).markedSpans;\r\n            if (!oldFirst && !oldLast) return null;\r\n\r\n            var startCh = change.from.ch, endCh = change.to.ch, isInsert = posEq(change.from, change.to);\r\n            // Get the spans that 'stick out' on both sides\r\n            var first = markedSpansBefore(oldFirst, startCh, isInsert);\r\n            var last = markedSpansAfter(oldLast, endCh, isInsert);\r\n\r\n            // Next, merge those two ends\r\n            var sameLine = change.text.length == 1, offset = lst(change.text).length + (sameLine ? startCh : 0);\r\n            if (first) {\r\n                // Fix up .to properties of first\r\n                for (var i = 0; i < first.length; ++i) {\r\n                    var span = first[i];\r\n                    if (span.to == null) {\r\n                        var found = getMarkedSpanFor(last, span.marker);\r\n                        if (!found) span.to = startCh;\r\n                        else if (sameLine) span.to = found.to == null ? null : found.to + offset;\r\n                    }\r\n                }\r\n            }\r\n            if (last) {\r\n                // Fix up .from in last (or move them into first in case of sameLine)\r\n                for (var i = 0; i < last.length; ++i) {\r\n                    var span = last[i];\r\n                    if (span.to != null) span.to += offset;\r\n                    if (span.from == null) {\r\n                        var found = getMarkedSpanFor(first, span.marker);\r\n                        if (!found) {\r\n                            span.from = offset;\r\n                            if (sameLine) (first || (first = [])).push(span);\r\n                        }\r\n                    } else {\r\n                        span.from += offset;\r\n                        if (sameLine) (first || (first = [])).push(span);\r\n                    }\r\n                }\r\n            }\r\n            if (sameLine && first) {\r\n                // Make sure we didn't create any zero-length spans\r\n                for (var i = 0; i < first.length; ++i)\r\n                    if (first[i].from != null && first[i].from == first[i].to && first[i].marker.type != \"bookmark\")\r\n                        first.splice(i--, 1);\r\n                if (!first.length) first = null;\r\n            }\r\n\r\n            var newMarkers = [first];\r\n            if (!sameLine) {\r\n                // Fill gap with whole-line-spans\r\n                var gap = change.text.length - 2, gapMarkers;\r\n                if (gap > 0 && first)\r\n                    for (var i = 0; i < first.length; ++i)\r\n                        if (first[i].to == null)\r\n                            (gapMarkers || (gapMarkers = [])).push({from: null, to: null, marker: first[i].marker});\r\n                for (var i = 0; i < gap; ++i)\r\n                    newMarkers.push(gapMarkers);\r\n                newMarkers.push(last);\r\n            }\r\n            return newMarkers;\r\n        }\r\n\r\n        function mergeOldSpans(doc, change) {\r\n            var old = getOldSpans(doc, change);\r\n            var stretched = stretchSpansOverChange(doc, change);\r\n            if (!old) return stretched;\r\n            if (!stretched) return old;\r\n\r\n            for (var i = 0; i < old.length; ++i) {\r\n                var oldCur = old[i], stretchCur = stretched[i];\r\n                if (oldCur && stretchCur) {\r\n                    spans: for (var j = 0; j < stretchCur.length; ++j) {\r\n                        var span = stretchCur[j];\r\n                        for (var k = 0; k < oldCur.length; ++k)\r\n                            if (oldCur[k].marker == span.marker) continue spans;\r\n                        oldCur.push(span);\r\n                    }\r\n                } else if (stretchCur) {\r\n                    old[i] = stretchCur;\r\n                }\r\n            }\r\n            return old;\r\n        }\r\n\r\n        function removeReadOnlyRanges(doc, from, to) {\r\n            var markers = null;\r\n            doc.iter(from.line, to.line + 1, function(line) {\r\n                if (line.markedSpans) for (var i = 0; i < line.markedSpans.length; ++i) {\r\n                    var mark = line.markedSpans[i].marker;\r\n                    if (mark.readOnly && (!markers || indexOf(markers, mark) == -1))\r\n                        (markers || (markers = [])).push(mark);\r\n                }\r\n            });\r\n            if (!markers) return null;\r\n            var parts = [{from: from, to: to}];\r\n            for (var i = 0; i < markers.length; ++i) {\r\n                var mk = markers[i], m = mk.find();\r\n                for (var j = 0; j < parts.length; ++j) {\r\n                    var p = parts[j];\r\n                    if (posLess(p.to, m.from) || posLess(m.to, p.from)) continue;\r\n                    var newParts = [j, 1];\r\n                    if (posLess(p.from, m.from) || !mk.inclusiveLeft && posEq(p.from, m.from))\r\n                        newParts.push({from: p.from, to: m.from});\r\n                    if (posLess(m.to, p.to) || !mk.inclusiveRight && posEq(p.to, m.to))\r\n                        newParts.push({from: m.to, to: p.to});\r\n                    parts.splice.apply(parts, newParts);\r\n                    j += newParts.length - 1;\r\n                }\r\n            }\r\n            return parts;\r\n        }\r\n\r\n        function collapsedSpanAt(line, ch) {\r\n            var sps = sawCollapsedSpans && line.markedSpans, found;\r\n            if (sps) for (var sp, i = 0; i < sps.length; ++i) {\r\n                sp = sps[i];\r\n                if (!sp.marker.collapsed) continue;\r\n                if ((sp.from == null || sp.from < ch) &&\r\n                    (sp.to == null || sp.to > ch) &&\r\n                    (!found || found.width < sp.marker.width))\r\n                    found = sp.marker;\r\n            }\r\n            return found;\r\n        }\r\n        function collapsedSpanAtStart(line) { return collapsedSpanAt(line, -1); }\r\n        function collapsedSpanAtEnd(line) { return collapsedSpanAt(line, line.text.length + 1); }\r\n\r\n        function visualLine(doc, line) {\r\n            var merged;\r\n            while (merged = collapsedSpanAtStart(line))\r\n                line = getLine(doc, merged.find().from.line);\r\n            return line;\r\n        }\r\n\r\n        function lineIsHidden(doc, line) {\r\n            var sps = sawCollapsedSpans && line.markedSpans;\r\n            if (sps) for (var sp, i = 0; i < sps.length; ++i) {\r\n                sp = sps[i];\r\n                if (!sp.marker.collapsed) continue;\r\n                if (sp.from == null) return true;\r\n                if (sp.marker.replacedWith) continue;\r\n                if (sp.from == 0 && sp.marker.inclusiveLeft && lineIsHiddenInner(doc, line, sp))\r\n                    return true;\r\n            }\r\n        }\r\n        function lineIsHiddenInner(doc, line, span) {\r\n            if (span.to == null) {\r\n                var end = span.marker.find().to, endLine = getLine(doc, end.line);\r\n                return lineIsHiddenInner(doc, endLine, getMarkedSpanFor(endLine.markedSpans, span.marker));\r\n            }\r\n            if (span.marker.inclusiveRight && span.to == line.text.length)\r\n                return true;\r\n            for (var sp, i = 0; i < line.markedSpans.length; ++i) {\r\n                sp = line.markedSpans[i];\r\n                if (sp.marker.collapsed && !sp.marker.replacedWith && sp.from == span.to &&\r\n                    (sp.marker.inclusiveLeft || span.marker.inclusiveRight) &&\r\n                    lineIsHiddenInner(doc, line, sp)) return true;\r\n            }\r\n        }\r\n\r\n        function detachMarkedSpans(line) {\r\n            var spans = line.markedSpans;\r\n            if (!spans) return;\r\n            for (var i = 0; i < spans.length; ++i)\r\n                spans[i].marker.detachLine(line);\r\n            line.markedSpans = null;\r\n        }\r\n\r\n        function attachMarkedSpans(line, spans) {\r\n            if (!spans) return;\r\n            for (var i = 0; i < spans.length; ++i)\r\n                spans[i].marker.attachLine(line);\r\n            line.markedSpans = spans;\r\n        }\r\n\r\n        // LINE WIDGETS\r\n\r\n        var LineWidget = CodeMirror.LineWidget = function(cm, node, options) {\r\n            if (options) for (var opt in options) if (options.hasOwnProperty(opt))\r\n                this[opt] = options[opt];\r\n            this.cm = cm;\r\n            this.node = node;\r\n        };\r\n        eventMixin(LineWidget);\r\n        function widgetOperation(f) {\r\n            return function() {\r\n                var withOp = !this.cm.curOp;\r\n                if (withOp) startOperation(this.cm);\r\n                try {var result = f.apply(this, arguments);}\r\n                finally {if (withOp) endOperation(this.cm);}\r\n                return result;\r\n            };\r\n        }\r\n        LineWidget.prototype.clear = widgetOperation(function() {\r\n            var ws = this.line.widgets, no = lineNo(this.line);\r\n            if (no == null || !ws) return;\r\n            for (var i = 0; i < ws.length; ++i) if (ws[i] == this) ws.splice(i--, 1);\r\n            if (!ws.length) this.line.widgets = null;\r\n            var aboveVisible = heightAtLine(this.cm, this.line) < this.cm.doc.scrollTop;\r\n            updateLineHeight(this.line, Math.max(0, this.line.height - widgetHeight(this)));\r\n            if (aboveVisible) addToScrollPos(this.cm, 0, -this.height);\r\n            regChange(this.cm, no, no + 1);\r\n        });\r\n        LineWidget.prototype.changed = widgetOperation(function() {\r\n            var oldH = this.height;\r\n            this.height = null;\r\n            var diff = widgetHeight(this) - oldH;\r\n            if (!diff) return;\r\n            updateLineHeight(this.line, this.line.height + diff);\r\n            var no = lineNo(this.line);\r\n            regChange(this.cm, no, no + 1);\r\n        });\r\n\r\n        function widgetHeight(widget) {\r\n            if (widget.height != null) return widget.height;\r\n            if (!widget.node.parentNode || widget.node.parentNode.nodeType != 1)\r\n                removeChildrenAndAdd(widget.cm.display.measure, elt(\"div\", [widget.node], null, \"position: relative\"));\r\n            return widget.height = widget.node.offsetHeight;\r\n        }\r\n\r\n        function addLineWidget(cm, handle, node, options) {\r\n            var widget = new LineWidget(cm, node, options);\r\n            if (widget.noHScroll) cm.display.alignWidgets = true;\r\n            changeLine(cm, handle, function(line) {\r\n                var widgets = line.widgets || (line.widgets = []);\r\n                if (widget.insertAt == null) widgets.push(widget);\r\n                else widgets.splice(Math.min(widgets.length - 1, Math.max(0, widget.insertAt)), 0, widget);\r\n                widget.line = line;\r\n                if (!lineIsHidden(cm.doc, line) || widget.showIfHidden) {\r\n                    var aboveVisible = heightAtLine(cm, line) < cm.doc.scrollTop;\r\n                    updateLineHeight(line, line.height + widgetHeight(widget));\r\n                    if (aboveVisible) addToScrollPos(cm, 0, widget.height);\r\n                }\r\n                return true;\r\n            });\r\n            return widget;\r\n        }\r\n\r\n        // LINE DATA STRUCTURE\r\n\r\n        // Line objects. These hold state related to a line, including\r\n        // highlighting info (the styles array).\r\n        var Line = CodeMirror.Line = function(text, markedSpans, estimateHeight) {\r\n            this.text = text;\r\n            attachMarkedSpans(this, markedSpans);\r\n            this.height = estimateHeight ? estimateHeight(this) : 1;\r\n        };\r\n        eventMixin(Line);\r\n\r\n        function updateLine(line, text, markedSpans, estimateHeight) {\r\n            line.text = text;\r\n            if (line.stateAfter) line.stateAfter = null;\r\n            if (line.styles) line.styles = null;\r\n            if (line.order != null) line.order = null;\r\n            detachMarkedSpans(line);\r\n            attachMarkedSpans(line, markedSpans);\r\n            var estHeight = estimateHeight ? estimateHeight(line) : 1;\r\n            if (estHeight != line.height) updateLineHeight(line, estHeight);\r\n        }\r\n\r\n        function cleanUpLine(line) {\r\n            line.parent = null;\r\n            detachMarkedSpans(line);\r\n        }\r\n\r\n        // Run the given mode's parser over a line, update the styles\r\n        // array, which contains alternating fragments of text and CSS\r\n        // classes.\r\n        function runMode(cm, text, mode, state, f) {\r\n            var flattenSpans = mode.flattenSpans;\r\n            if (flattenSpans == null) flattenSpans = cm.options.flattenSpans;\r\n            var curStart = 0, curStyle = null;\r\n            var stream = new StringStream(text, cm.options.tabSize), style;\r\n            if (text == \"\" && mode.blankLine) mode.blankLine(state);\r\n            while (!stream.eol()) {\r\n                if (stream.pos > cm.options.maxHighlightLength) {\r\n                    flattenSpans = false;\r\n                    // Webkit seems to refuse to render text nodes longer than 57444 characters\r\n                    stream.pos = Math.min(text.length, stream.start + 50000);\r\n                    style = null;\r\n                } else {\r\n                    style = mode.token(stream, state);\r\n                }\r\n                if (!flattenSpans || curStyle != style) {\r\n                    if (curStart < stream.start) f(stream.start, curStyle);\r\n                    curStart = stream.start; curStyle = style;\r\n                }\r\n                stream.start = stream.pos;\r\n            }\r\n            if (curStart < stream.pos) f(stream.pos, curStyle);\r\n        }\r\n\r\n        function highlightLine(cm, line, state) {\r\n            // A styles array always starts with a number identifying the\r\n            // mode/overlays that it is based on (for easy invalidation).\r\n            var st = [cm.state.modeGen];\r\n            // Compute the base array of styles\r\n            runMode(cm, line.text, cm.doc.mode, state, function(end, style) {st.push(end, style);});\r\n\r\n            // Run overlays, adjust style array.\r\n            for (var o = 0; o < cm.state.overlays.length; ++o) {\r\n                var overlay = cm.state.overlays[o], i = 1, at = 0;\r\n                runMode(cm, line.text, overlay.mode, true, function(end, style) {\r\n                    var start = i;\r\n                    // Ensure there's a token end at the current position, and that i points at it\r\n                    while (at < end) {\r\n                        var i_end = st[i];\r\n                        if (i_end > end)\r\n                            st.splice(i, 1, end, st[i+1], i_end);\r\n                        i += 2;\r\n                        at = Math.min(end, i_end);\r\n                    }\r\n                    if (!style) return;\r\n                    if (overlay.opaque) {\r\n                        st.splice(start, i - start, end, style);\r\n                        i = start + 2;\r\n                    } else {\r\n                        for (; start < i; start += 2) {\r\n                            var cur = st[start+1];\r\n                            st[start+1] = cur ? cur + \" \" + style : style;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return st;\r\n        }\r\n\r\n        function getLineStyles(cm, line) {\r\n            if (!line.styles || line.styles[0] != cm.state.modeGen)\r\n                line.styles = highlightLine(cm, line, line.stateAfter = getStateBefore(cm, lineNo(line)));\r\n            return line.styles;\r\n        }\r\n\r\n        // Lightweight form of highlight -- proceed over this line and\r\n        // update state, but don't save a style array.\r\n        function processLine(cm, line, state) {\r\n            var mode = cm.doc.mode;\r\n            var stream = new StringStream(line.text, cm.options.tabSize);\r\n            if (line.text == \"\" && mode.blankLine) mode.blankLine(state);\r\n            while (!stream.eol() && stream.pos <= cm.options.maxHighlightLength) {\r\n                mode.token(stream, state);\r\n                stream.start = stream.pos;\r\n            }\r\n        }\r\n\r\n        var styleToClassCache = {};\r\n        function styleToClass(style) {\r\n            if (!style) return null;\r\n            return styleToClassCache[style] ||\r\n                (styleToClassCache[style] = \"cm-\" + style.replace(/ +/g, \" cm-\"));\r\n        }\r\n\r\n        function lineContent(cm, realLine, measure, copyWidgets) {\r\n            var merged, line = realLine, empty = true;\r\n            while (merged = collapsedSpanAtStart(line))\r\n                line = getLine(cm.doc, merged.find().from.line);\r\n\r\n            var builder = {pre: elt(\"pre\"), col: 0, pos: 0,\r\n                measure: null, measuredSomething: false, cm: cm,\r\n                copyWidgets: copyWidgets};\r\n            if (line.textClass) builder.pre.className = line.textClass;\r\n\r\n            do {\r\n                if (line.text) empty = false;\r\n                builder.measure = line == realLine && measure;\r\n                builder.pos = 0;\r\n                builder.addToken = builder.measure ? buildTokenMeasure : buildToken;\r\n                if ((ie || webkit) && cm.getOption(\"lineWrapping\"))\r\n                    builder.addToken = buildTokenSplitSpaces(builder.addToken);\r\n                var next = insertLineContent(line, builder, getLineStyles(cm, line));\r\n                if (measure && line == realLine && !builder.measuredSomething) {\r\n                    measure[0] = builder.pre.appendChild(zeroWidthElement(cm.display.measure));\r\n                    builder.measuredSomething = true;\r\n                }\r\n                if (next) line = getLine(cm.doc, next.to.line);\r\n            } while (next);\r\n\r\n            if (measure && !builder.measuredSomething && !measure[0])\r\n                measure[0] = builder.pre.appendChild(empty ? elt(\"span\", \"\\u00a0\") : zeroWidthElement(cm.display.measure));\r\n            if (!builder.pre.firstChild && !lineIsHidden(cm.doc, realLine))\r\n                builder.pre.appendChild(document.createTextNode(\"\\u00a0\"));\r\n\r\n            var order;\r\n            // Work around problem with the reported dimensions of single-char\r\n            // direction spans on IE (issue #1129). See also the comment in\r\n            // cursorCoords.\r\n            if (measure && ie && (order = getOrder(line))) {\r\n                var l = order.length - 1;\r\n                if (order[l].from == order[l].to) --l;\r\n                var last = order[l], prev = order[l - 1];\r\n                if (last.from + 1 == last.to && prev && last.level < prev.level) {\r\n                    var span = measure[builder.pos - 1];\r\n                    if (span) span.parentNode.insertBefore(span.measureRight = zeroWidthElement(cm.display.measure),\r\n                        span.nextSibling);\r\n                }\r\n            }\r\n\r\n            signal(cm, \"renderLine\", cm, realLine, builder.pre);\r\n            return builder.pre;\r\n        }\r\n\r\n        var tokenSpecialChars = /[\\t\\u0000-\\u0019\\u00ad\\u200b\\u2028\\u2029\\uFEFF]/g;\r\n        function buildToken(builder, text, style, startStyle, endStyle, title) {\r\n            if (!text) return;\r\n            if (!tokenSpecialChars.test(text)) {\r\n                builder.col += text.length;\r\n                var content = document.createTextNode(text);\r\n            } else {\r\n                var content = document.createDocumentFragment(), pos = 0;\r\n                while (true) {\r\n                    tokenSpecialChars.lastIndex = pos;\r\n                    var m = tokenSpecialChars.exec(text);\r\n                    var skipped = m ? m.index - pos : text.length - pos;\r\n                    if (skipped) {\r\n                        content.appendChild(document.createTextNode(text.slice(pos, pos + skipped)));\r\n                        builder.col += skipped;\r\n                    }\r\n                    if (!m) break;\r\n                    pos += skipped + 1;\r\n                    if (m[0] == \"\\t\") {\r\n                        var tabSize = builder.cm.options.tabSize, tabWidth = tabSize - builder.col % tabSize;\r\n                        content.appendChild(elt(\"span\", spaceStr(tabWidth), \"cm-tab\"));\r\n                        builder.col += tabWidth;\r\n                    } else {\r\n                        var token = elt(\"span\", \"\\u2022\", \"cm-invalidchar\");\r\n                        token.title = \"\\\\u\" + m[0].charCodeAt(0).toString(16);\r\n                        content.appendChild(token);\r\n                        builder.col += 1;\r\n                    }\r\n                }\r\n            }\r\n            if (style || startStyle || endStyle || builder.measure) {\r\n                var fullStyle = style || \"\";\r\n                if (startStyle) fullStyle += startStyle;\r\n                if (endStyle) fullStyle += endStyle;\r\n                var token = elt(\"span\", [content], fullStyle);\r\n                if (title) token.title = title;\r\n                return builder.pre.appendChild(token);\r\n            }\r\n            builder.pre.appendChild(content);\r\n        }\r\n\r\n        function buildTokenMeasure(builder, text, style, startStyle, endStyle) {\r\n            var wrapping = builder.cm.options.lineWrapping;\r\n            for (var i = 0; i < text.length; ++i) {\r\n                var ch = text.charAt(i), start = i == 0;\r\n                if (ch >= \"\\ud800\" && ch < \"\\udbff\" && i < text.length - 1) {\r\n                    ch = text.slice(i, i + 2);\r\n                    ++i;\r\n                } else if (i && wrapping && spanAffectsWrapping(text, i)) {\r\n                    builder.pre.appendChild(elt(\"wbr\"));\r\n                }\r\n                var old = builder.measure[builder.pos];\r\n                var span = builder.measure[builder.pos] =\r\n                    buildToken(builder, ch, style,\r\n                            start && startStyle, i == text.length - 1 && endStyle);\r\n                if (old) span.leftSide = old.leftSide || old;\r\n                // In IE single-space nodes wrap differently than spaces\r\n                // embedded in larger text nodes, except when set to\r\n                // white-space: normal (issue #1268).\r\n                if (ie && wrapping && ch == \" \" && i && !/\\s/.test(text.charAt(i - 1)) &&\r\n                    i < text.length - 1 && !/\\s/.test(text.charAt(i + 1)))\r\n                    span.style.whiteSpace = \"normal\";\r\n                builder.pos += ch.length;\r\n            }\r\n            if (text.length) builder.measuredSomething = true;\r\n        }\r\n\r\n        function buildTokenSplitSpaces(inner) {\r\n            function split(old) {\r\n                var out = \" \";\r\n                for (var i = 0; i < old.length - 2; ++i) out += i % 2 ? \" \" : \"\\u00a0\";\r\n                out += \" \";\r\n                return out;\r\n            }\r\n            return function(builder, text, style, startStyle, endStyle, title) {\r\n                return inner(builder, text.replace(/ {3,}/, split), style, startStyle, endStyle, title);\r\n            };\r\n        }\r\n\r\n        function buildCollapsedSpan(builder, size, marker, ignoreWidget) {\r\n            var widget = !ignoreWidget && marker.replacedWith;\r\n            if (widget) {\r\n                if (builder.copyWidgets) widget = widget.cloneNode(true);\r\n                builder.pre.appendChild(widget);\r\n                if (builder.measure) {\r\n                    if (size) {\r\n                        builder.measure[builder.pos] = widget;\r\n                    } else {\r\n                        var elt = builder.measure[builder.pos] = zeroWidthElement(builder.cm.display.measure);\r\n                        if (marker.type != \"bookmark\" || marker.insertLeft)\r\n                            builder.pre.insertBefore(elt, widget);\r\n                        else\r\n                            builder.pre.appendChild(elt);\r\n                    }\r\n                    builder.measuredSomething = true;\r\n                }\r\n            }\r\n            builder.pos += size;\r\n        }\r\n\r\n        // Outputs a number of spans to make up a line, taking highlighting\r\n        // and marked text into account.\r\n        function insertLineContent(line, builder, styles) {\r\n            var spans = line.markedSpans, allText = line.text, at = 0;\r\n            if (!spans) {\r\n                for (var i = 1; i < styles.length; i+=2)\r\n                    builder.addToken(builder, allText.slice(at, at = styles[i]), styleToClass(styles[i+1]));\r\n                return;\r\n            }\r\n\r\n            var len = allText.length, pos = 0, i = 1, text = \"\", style;\r\n            var nextChange = 0, spanStyle, spanEndStyle, spanStartStyle, title, collapsed;\r\n            for (;;) {\r\n                if (nextChange == pos) { // Update current marker set\r\n                    spanStyle = spanEndStyle = spanStartStyle = title = \"\";\r\n                    collapsed = null; nextChange = Infinity;\r\n                    var foundBookmark = null;\r\n                    for (var j = 0; j < spans.length; ++j) {\r\n                        var sp = spans[j], m = sp.marker;\r\n                        if (sp.from <= pos && (sp.to == null || sp.to > pos)) {\r\n                            if (sp.to != null && nextChange > sp.to) { nextChange = sp.to; spanEndStyle = \"\"; }\r\n                            if (m.className) spanStyle += \" \" + m.className;\r\n                            if (m.startStyle && sp.from == pos) spanStartStyle += \" \" + m.startStyle;\r\n                            if (m.endStyle && sp.to == nextChange) spanEndStyle += \" \" + m.endStyle;\r\n                            if (m.title && !title) title = m.title;\r\n                            if (m.collapsed && (!collapsed || collapsed.marker.size < m.size))\r\n                                collapsed = sp;\r\n                        } else if (sp.from > pos && nextChange > sp.from) {\r\n                            nextChange = sp.from;\r\n                        }\r\n                        if (m.type == \"bookmark\" && sp.from == pos && m.replacedWith) foundBookmark = m;\r\n                    }\r\n                    if (collapsed && (collapsed.from || 0) == pos) {\r\n                        buildCollapsedSpan(builder, (collapsed.to == null ? len : collapsed.to) - pos,\r\n                            collapsed.marker, collapsed.from == null);\r\n                        if (collapsed.to == null) return collapsed.marker.find();\r\n                    }\r\n                    if (foundBookmark && !collapsed) buildCollapsedSpan(builder, 0, foundBookmark);\r\n                }\r\n                if (pos >= len) break;\r\n\r\n                var upto = Math.min(len, nextChange);\r\n                while (true) {\r\n                    if (text) {\r\n                        var end = pos + text.length;\r\n                        if (!collapsed) {\r\n                            var tokenText = end > upto ? text.slice(0, upto - pos) : text;\r\n                            builder.addToken(builder, tokenText, style ? style + spanStyle : spanStyle,\r\n                                spanStartStyle, pos + tokenText.length == nextChange ? spanEndStyle : \"\", title);\r\n                        }\r\n                        if (end >= upto) {text = text.slice(upto - pos); pos = upto; break;}\r\n                        pos = end;\r\n                        spanStartStyle = \"\";\r\n                    }\r\n                    text = allText.slice(at, at = styles[i++]);\r\n                    style = styleToClass(styles[i++]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // DOCUMENT DATA STRUCTURE\r\n\r\n        function updateDoc(doc, change, markedSpans, selAfter, estimateHeight) {\r\n            function spansFor(n) {return markedSpans ? markedSpans[n] : null;}\r\n            function update(line, text, spans) {\r\n                updateLine(line, text, spans, estimateHeight);\r\n                signalLater(line, \"change\", line, change);\r\n            }\r\n\r\n            var from = change.from, to = change.to, text = change.text;\r\n            var firstLine = getLine(doc, from.line), lastLine = getLine(doc, to.line);\r\n            var lastText = lst(text), lastSpans = spansFor(text.length - 1), nlines = to.line - from.line;\r\n\r\n            // First adjust the line structure\r\n            if (from.ch == 0 && to.ch == 0 && lastText == \"\") {\r\n                // This is a whole-line replace. Treated specially to make\r\n                // sure line objects move the way they are supposed to.\r\n                for (var i = 0, e = text.length - 1, added = []; i < e; ++i)\r\n                    added.push(new Line(text[i], spansFor(i), estimateHeight));\r\n                update(lastLine, lastLine.text, lastSpans);\r\n                if (nlines) doc.remove(from.line, nlines);\r\n                if (added.length) doc.insert(from.line, added);\r\n            } else if (firstLine == lastLine) {\r\n                if (text.length == 1) {\r\n                    update(firstLine, firstLine.text.slice(0, from.ch) + lastText + firstLine.text.slice(to.ch), lastSpans);\r\n                } else {\r\n                    for (var added = [], i = 1, e = text.length - 1; i < e; ++i)\r\n                        added.push(new Line(text[i], spansFor(i), estimateHeight));\r\n                    added.push(new Line(lastText + firstLine.text.slice(to.ch), lastSpans, estimateHeight));\r\n                    update(firstLine, firstLine.text.slice(0, from.ch) + text[0], spansFor(0));\r\n                    doc.insert(from.line + 1, added);\r\n                }\r\n            } else if (text.length == 1) {\r\n                update(firstLine, firstLine.text.slice(0, from.ch) + text[0] + lastLine.text.slice(to.ch), spansFor(0));\r\n                doc.remove(from.line + 1, nlines);\r\n            } else {\r\n                update(firstLine, firstLine.text.slice(0, from.ch) + text[0], spansFor(0));\r\n                update(lastLine, lastText + lastLine.text.slice(to.ch), lastSpans);\r\n                for (var i = 1, e = text.length - 1, added = []; i < e; ++i)\r\n                    added.push(new Line(text[i], spansFor(i), estimateHeight));\r\n                if (nlines > 1) doc.remove(from.line + 1, nlines - 1);\r\n                doc.insert(from.line + 1, added);\r\n            }\r\n\r\n            signalLater(doc, \"change\", doc, change);\r\n            setSelection(doc, selAfter.anchor, selAfter.head, null, true);\r\n        }\r\n\r\n        function LeafChunk(lines) {\r\n            this.lines = lines;\r\n            this.parent = null;\r\n            for (var i = 0, e = lines.length, height = 0; i < e; ++i) {\r\n                lines[i].parent = this;\r\n                height += lines[i].height;\r\n            }\r\n            this.height = height;\r\n        }\r\n\r\n        LeafChunk.prototype = {\r\n            chunkSize: function() { return this.lines.length; },\r\n            removeInner: function(at, n) {\r\n                for (var i = at, e = at + n; i < e; ++i) {\r\n                    var line = this.lines[i];\r\n                    this.height -= line.height;\r\n                    cleanUpLine(line);\r\n                    signalLater(line, \"delete\");\r\n                }\r\n                this.lines.splice(at, n);\r\n            },\r\n            collapse: function(lines) {\r\n                lines.splice.apply(lines, [lines.length, 0].concat(this.lines));\r\n            },\r\n            insertInner: function(at, lines, height) {\r\n                this.height += height;\r\n                this.lines = this.lines.slice(0, at).concat(lines).concat(this.lines.slice(at));\r\n                for (var i = 0, e = lines.length; i < e; ++i) lines[i].parent = this;\r\n            },\r\n            iterN: function(at, n, op) {\r\n                for (var e = at + n; at < e; ++at)\r\n                    if (op(this.lines[at])) return true;\r\n            }\r\n        };\r\n\r\n        function BranchChunk(children) {\r\n            this.children = children;\r\n            var size = 0, height = 0;\r\n            for (var i = 0, e = children.length; i < e; ++i) {\r\n                var ch = children[i];\r\n                size += ch.chunkSize(); height += ch.height;\r\n                ch.parent = this;\r\n            }\r\n            this.size = size;\r\n            this.height = height;\r\n            this.parent = null;\r\n        }\r\n\r\n        BranchChunk.prototype = {\r\n            chunkSize: function() { return this.size; },\r\n            removeInner: function(at, n) {\r\n                this.size -= n;\r\n                for (var i = 0; i < this.children.length; ++i) {\r\n                    var child = this.children[i], sz = child.chunkSize();\r\n                    if (at < sz) {\r\n                        var rm = Math.min(n, sz - at), oldHeight = child.height;\r\n                        child.removeInner(at, rm);\r\n                        this.height -= oldHeight - child.height;\r\n                        if (sz == rm) { this.children.splice(i--, 1); child.parent = null; }\r\n                        if ((n -= rm) == 0) break;\r\n                        at = 0;\r\n                    } else at -= sz;\r\n                }\r\n                if (this.size - n < 25) {\r\n                    var lines = [];\r\n                    this.collapse(lines);\r\n                    this.children = [new LeafChunk(lines)];\r\n                    this.children[0].parent = this;\r\n                }\r\n            },\r\n            collapse: function(lines) {\r\n                for (var i = 0, e = this.children.length; i < e; ++i) this.children[i].collapse(lines);\r\n            },\r\n            insertInner: function(at, lines, height) {\r\n                this.size += lines.length;\r\n                this.height += height;\r\n                for (var i = 0, e = this.children.length; i < e; ++i) {\r\n                    var child = this.children[i], sz = child.chunkSize();\r\n                    if (at <= sz) {\r\n                        child.insertInner(at, lines, height);\r\n                        if (child.lines && child.lines.length > 50) {\r\n                            while (child.lines.length > 50) {\r\n                                var spilled = child.lines.splice(child.lines.length - 25, 25);\r\n                                var newleaf = new LeafChunk(spilled);\r\n                                child.height -= newleaf.height;\r\n                                this.children.splice(i + 1, 0, newleaf);\r\n                                newleaf.parent = this;\r\n                            }\r\n                            this.maybeSpill();\r\n                        }\r\n                        break;\r\n                    }\r\n                    at -= sz;\r\n                }\r\n            },\r\n            maybeSpill: function() {\r\n                if (this.children.length <= 10) return;\r\n                var me = this;\r\n                do {\r\n                    var spilled = me.children.splice(me.children.length - 5, 5);\r\n                    var sibling = new BranchChunk(spilled);\r\n                    if (!me.parent) { // Become the parent node\r\n                        var copy = new BranchChunk(me.children);\r\n                        copy.parent = me;\r\n                        me.children = [copy, sibling];\r\n                        me = copy;\r\n                    } else {\r\n                        me.size -= sibling.size;\r\n                        me.height -= sibling.height;\r\n                        var myIndex = indexOf(me.parent.children, me);\r\n                        me.parent.children.splice(myIndex + 1, 0, sibling);\r\n                    }\r\n                    sibling.parent = me.parent;\r\n                } while (me.children.length > 10);\r\n                me.parent.maybeSpill();\r\n            },\r\n            iterN: function(at, n, op) {\r\n                for (var i = 0, e = this.children.length; i < e; ++i) {\r\n                    var child = this.children[i], sz = child.chunkSize();\r\n                    if (at < sz) {\r\n                        var used = Math.min(n, sz - at);\r\n                        if (child.iterN(at, used, op)) return true;\r\n                        if ((n -= used) == 0) break;\r\n                        at = 0;\r\n                    } else at -= sz;\r\n                }\r\n            }\r\n        };\r\n\r\n        var nextDocId = 0;\r\n        var Doc = CodeMirror.Doc = function(text, mode, firstLine) {\r\n            if (!(this instanceof Doc)) return new Doc(text, mode, firstLine);\r\n            if (firstLine == null) firstLine = 0;\r\n\r\n            BranchChunk.call(this, [new LeafChunk([new Line(\"\", null)])]);\r\n            this.first = firstLine;\r\n            this.scrollTop = this.scrollLeft = 0;\r\n            this.cantEdit = false;\r\n            this.history = makeHistory();\r\n            this.cleanGeneration = 1;\r\n            this.frontier = firstLine;\r\n            var start = Pos(firstLine, 0);\r\n            this.sel = {from: start, to: start, head: start, anchor: start, shift: false, extend: false, goalColumn: null};\r\n            this.id = ++nextDocId;\r\n            this.modeOption = mode;\r\n\r\n            if (typeof text == \"string\") text = splitLines(text);\r\n            updateDoc(this, {from: start, to: start, text: text}, null, {head: start, anchor: start});\r\n        };\r\n\r\n        Doc.prototype = createObj(BranchChunk.prototype, {\r\n            constructor: Doc,\r\n            iter: function(from, to, op) {\r\n                if (op) this.iterN(from - this.first, to - from, op);\r\n                else this.iterN(this.first, this.first + this.size, from);\r\n            },\r\n\r\n            insert: function(at, lines) {\r\n                var height = 0;\r\n                for (var i = 0, e = lines.length; i < e; ++i) height += lines[i].height;\r\n                this.insertInner(at - this.first, lines, height);\r\n            },\r\n            remove: function(at, n) { this.removeInner(at - this.first, n); },\r\n\r\n            getValue: function(lineSep) {\r\n                var lines = getLines(this, this.first, this.first + this.size);\r\n                if (lineSep === false) return lines;\r\n                return lines.join(lineSep || \"\\n\");\r\n            },\r\n            setValue: function(code) {\r\n                var top = Pos(this.first, 0), last = this.first + this.size - 1;\r\n                makeChange(this, {from: top, to: Pos(last, getLine(this, last).text.length),\r\n                        text: splitLines(code), origin: \"setValue\"},\r\n                    {head: top, anchor: top}, true);\r\n            },\r\n            replaceRange: function(code, from, to, origin) {\r\n                from = clipPos(this, from);\r\n                to = to ? clipPos(this, to) : from;\r\n                replaceRange(this, code, from, to, origin);\r\n            },\r\n            getRange: function(from, to, lineSep) {\r\n                var lines = getBetween(this, clipPos(this, from), clipPos(this, to));\r\n                if (lineSep === false) return lines;\r\n                return lines.join(lineSep || \"\\n\");\r\n            },\r\n\r\n            getLine: function(line) {var l = this.getLineHandle(line); return l && l.text;},\r\n            setLine: function(line, text) {\r\n                if (isLine(this, line))\r\n                    replaceRange(this, text, Pos(line, 0), clipPos(this, Pos(line)));\r\n            },\r\n            removeLine: function(line) {\r\n                if (line) replaceRange(this, \"\", clipPos(this, Pos(line - 1)), clipPos(this, Pos(line)));\r\n                else replaceRange(this, \"\", Pos(0, 0), clipPos(this, Pos(1, 0)));\r\n            },\r\n\r\n            getLineHandle: function(line) {if (isLine(this, line)) return getLine(this, line);},\r\n            getLineNumber: function(line) {return lineNo(line);},\r\n\r\n            getLineHandleVisualStart: function(line) {\r\n                if (typeof line == \"number\") line = getLine(this, line);\r\n                return visualLine(this, line);\r\n            },\r\n\r\n            lineCount: function() {return this.size;},\r\n            firstLine: function() {return this.first;},\r\n            lastLine: function() {return this.first + this.size - 1;},\r\n\r\n            clipPos: function(pos) {return clipPos(this, pos);},\r\n\r\n            getCursor: function(start) {\r\n                var sel = this.sel, pos;\r\n                if (start == null || start == \"head\") pos = sel.head;\r\n                else if (start == \"anchor\") pos = sel.anchor;\r\n                else if (start == \"end\" || start === false) pos = sel.to;\r\n                else pos = sel.from;\r\n                return copyPos(pos);\r\n            },\r\n            somethingSelected: function() {return !posEq(this.sel.head, this.sel.anchor);},\r\n\r\n            setCursor: docOperation(function(line, ch, extend) {\r\n                var pos = clipPos(this, typeof line == \"number\" ? Pos(line, ch || 0) : line);\r\n                if (extend) extendSelection(this, pos);\r\n                else setSelection(this, pos, pos);\r\n            }),\r\n            setSelection: docOperation(function(anchor, head) {\r\n                setSelection(this, clipPos(this, anchor), clipPos(this, head || anchor));\r\n            }),\r\n            extendSelection: docOperation(function(from, to) {\r\n                extendSelection(this, clipPos(this, from), to && clipPos(this, to));\r\n            }),\r\n\r\n            getSelection: function(lineSep) {return this.getRange(this.sel.from, this.sel.to, lineSep);},\r\n            replaceSelection: function(code, collapse, origin) {\r\n                makeChange(this, {from: this.sel.from, to: this.sel.to, text: splitLines(code), origin: origin}, collapse || \"around\");\r\n            },\r\n            undo: docOperation(function() {makeChangeFromHistory(this, \"undo\");}),\r\n            redo: docOperation(function() {makeChangeFromHistory(this, \"redo\");}),\r\n\r\n            setExtending: function(val) {this.sel.extend = val;},\r\n\r\n            historySize: function() {\r\n                var hist = this.history;\r\n                return {undo: hist.done.length, redo: hist.undone.length};\r\n            },\r\n            clearHistory: function() {this.history = makeHistory(this.history.maxGeneration);},\r\n\r\n            markClean: function() {\r\n                this.cleanGeneration = this.changeGeneration();\r\n            },\r\n            changeGeneration: function() {\r\n                this.history.lastOp = this.history.lastOrigin = null;\r\n                return this.history.generation;\r\n            },\r\n            isClean: function (gen) {\r\n                return this.history.generation == (gen || this.cleanGeneration);\r\n            },\r\n\r\n            getHistory: function() {\r\n                return {done: copyHistoryArray(this.history.done),\r\n                    undone: copyHistoryArray(this.history.undone)};\r\n            },\r\n            setHistory: function(histData) {\r\n                var hist = this.history = makeHistory(this.history.maxGeneration);\r\n                hist.done = histData.done.slice(0);\r\n                hist.undone = histData.undone.slice(0);\r\n            },\r\n\r\n            markText: function(from, to, options) {\r\n                return markText(this, clipPos(this, from), clipPos(this, to), options, \"range\");\r\n            },\r\n            setBookmark: function(pos, options) {\r\n                var realOpts = {replacedWith: options && (options.nodeType == null ? options.widget : options),\r\n                    insertLeft: options && options.insertLeft};\r\n                pos = clipPos(this, pos);\r\n                return markText(this, pos, pos, realOpts, \"bookmark\");\r\n            },\r\n            findMarksAt: function(pos) {\r\n                pos = clipPos(this, pos);\r\n                var markers = [], spans = getLine(this, pos.line).markedSpans;\r\n                if (spans) for (var i = 0; i < spans.length; ++i) {\r\n                    var span = spans[i];\r\n                    if ((span.from == null || span.from <= pos.ch) &&\r\n                        (span.to == null || span.to >= pos.ch))\r\n                        markers.push(span.marker.parent || span.marker);\r\n                }\r\n                return markers;\r\n            },\r\n            getAllMarks: function() {\r\n                var markers = [];\r\n                this.iter(function(line) {\r\n                    var sps = line.markedSpans;\r\n                    if (sps) for (var i = 0; i < sps.length; ++i)\r\n                        if (sps[i].from != null) markers.push(sps[i].marker);\r\n                });\r\n                return markers;\r\n            },\r\n\r\n            posFromIndex: function(off) {\r\n                var ch, lineNo = this.first;\r\n                this.iter(function(line) {\r\n                    var sz = line.text.length + 1;\r\n                    if (sz > off) { ch = off; return true; }\r\n                    off -= sz;\r\n                    ++lineNo;\r\n                });\r\n                return clipPos(this, Pos(lineNo, ch));\r\n            },\r\n            indexFromPos: function (coords) {\r\n                coords = clipPos(this, coords);\r\n                var index = coords.ch;\r\n                if (coords.line < this.first || coords.ch < 0) return 0;\r\n                this.iter(this.first, coords.line, function (line) {\r\n                    index += line.text.length + 1;\r\n                });\r\n                return index;\r\n            },\r\n\r\n            copy: function(copyHistory) {\r\n                var doc = new Doc(getLines(this, this.first, this.first + this.size), this.modeOption, this.first);\r\n                doc.scrollTop = this.scrollTop; doc.scrollLeft = this.scrollLeft;\r\n                doc.sel = {from: this.sel.from, to: this.sel.to, head: this.sel.head, anchor: this.sel.anchor,\r\n                    shift: this.sel.shift, extend: false, goalColumn: this.sel.goalColumn};\r\n                if (copyHistory) {\r\n                    doc.history.undoDepth = this.history.undoDepth;\r\n                    doc.setHistory(this.getHistory());\r\n                }\r\n                return doc;\r\n            },\r\n\r\n            linkedDoc: function(options) {\r\n                if (!options) options = {};\r\n                var from = this.first, to = this.first + this.size;\r\n                if (options.from != null && options.from > from) from = options.from;\r\n                if (options.to != null && options.to < to) to = options.to;\r\n                var copy = new Doc(getLines(this, from, to), options.mode || this.modeOption, from);\r\n                if (options.sharedHist) copy.history = this.history;\r\n                (this.linked || (this.linked = [])).push({doc: copy, sharedHist: options.sharedHist});\r\n                copy.linked = [{doc: this, isParent: true, sharedHist: options.sharedHist}];\r\n                return copy;\r\n            },\r\n            unlinkDoc: function(other) {\r\n                if (other instanceof CodeMirror) other = other.doc;\r\n                if (this.linked) for (var i = 0; i < this.linked.length; ++i) {\r\n                    var link = this.linked[i];\r\n                    if (link.doc != other) continue;\r\n                    this.linked.splice(i, 1);\r\n                    other.unlinkDoc(this);\r\n                    break;\r\n                }\r\n                // If the histories were shared, split them again\r\n                if (other.history == this.history) {\r\n                    var splitIds = [other.id];\r\n                    linkedDocs(other, function(doc) {splitIds.push(doc.id);}, true);\r\n                    other.history = makeHistory();\r\n                    other.history.done = copyHistoryArray(this.history.done, splitIds);\r\n                    other.history.undone = copyHistoryArray(this.history.undone, splitIds);\r\n                }\r\n            },\r\n            iterLinkedDocs: function(f) {linkedDocs(this, f);},\r\n\r\n            getMode: function() {return this.mode;},\r\n            getEditor: function() {return this.cm;}\r\n        });\r\n\r\n        Doc.prototype.eachLine = Doc.prototype.iter;\r\n\r\n        // The Doc methods that should be available on CodeMirror instances\r\n        var dontDelegate = \"iter insert remove copy getEditor\".split(\" \");\r\n        for (var prop in Doc.prototype) if (Doc.prototype.hasOwnProperty(prop) && indexOf(dontDelegate, prop) < 0)\r\n            CodeMirror.prototype[prop] = (function(method) {\r\n                return function() {return method.apply(this.doc, arguments);};\r\n            })(Doc.prototype[prop]);\r\n\r\n        eventMixin(Doc);\r\n\r\n        function linkedDocs(doc, f, sharedHistOnly) {\r\n            function propagate(doc, skip, sharedHist) {\r\n                if (doc.linked) for (var i = 0; i < doc.linked.length; ++i) {\r\n                    var rel = doc.linked[i];\r\n                    if (rel.doc == skip) continue;\r\n                    var shared = sharedHist && rel.sharedHist;\r\n                    if (sharedHistOnly && !shared) continue;\r\n                    f(rel.doc, shared);\r\n                    propagate(rel.doc, doc, shared);\r\n                }\r\n            }\r\n            propagate(doc, null, true);\r\n        }\r\n\r\n        function attachDoc(cm, doc) {\r\n            if (doc.cm) throw new Error(\"This document is already in use.\");\r\n            cm.doc = doc;\r\n            doc.cm = cm;\r\n            estimateLineHeights(cm);\r\n            loadMode(cm);\r\n            if (!cm.options.lineWrapping) computeMaxLength(cm);\r\n            cm.options.mode = doc.modeOption;\r\n            regChange(cm);\r\n        }\r\n\r\n        // LINE UTILITIES\r\n\r\n        function getLine(chunk, n) {\r\n            n -= chunk.first;\r\n            while (!chunk.lines) {\r\n                for (var i = 0;; ++i) {\r\n                    var child = chunk.children[i], sz = child.chunkSize();\r\n                    if (n < sz) { chunk = child; break; }\r\n                    n -= sz;\r\n                }\r\n            }\r\n            return chunk.lines[n];\r\n        }\r\n\r\n        function getBetween(doc, start, end) {\r\n            var out = [], n = start.line;\r\n            doc.iter(start.line, end.line + 1, function(line) {\r\n                var text = line.text;\r\n                if (n == end.line) text = text.slice(0, end.ch);\r\n                if (n == start.line) text = text.slice(start.ch);\r\n                out.push(text);\r\n                ++n;\r\n            });\r\n            return out;\r\n        }\r\n        function getLines(doc, from, to) {\r\n            var out = [];\r\n            doc.iter(from, to, function(line) { out.push(line.text); });\r\n            return out;\r\n        }\r\n\r\n        function updateLineHeight(line, height) {\r\n            var diff = height - line.height;\r\n            for (var n = line; n; n = n.parent) n.height += diff;\r\n        }\r\n\r\n        function lineNo(line) {\r\n            if (line.parent == null) return null;\r\n            var cur = line.parent, no = indexOf(cur.lines, line);\r\n            for (var chunk = cur.parent; chunk; cur = chunk, chunk = chunk.parent) {\r\n                for (var i = 0;; ++i) {\r\n                    if (chunk.children[i] == cur) break;\r\n                    no += chunk.children[i].chunkSize();\r\n                }\r\n            }\r\n            return no + cur.first;\r\n        }\r\n\r\n        function lineAtHeight(chunk, h) {\r\n            var n = chunk.first;\r\n            outer: do {\r\n                for (var i = 0, e = chunk.children.length; i < e; ++i) {\r\n                    var child = chunk.children[i], ch = child.height;\r\n                    if (h < ch) { chunk = child; continue outer; }\r\n                    h -= ch;\r\n                    n += child.chunkSize();\r\n                }\r\n                return n;\r\n            } while (!chunk.lines);\r\n            for (var i = 0, e = chunk.lines.length; i < e; ++i) {\r\n                var line = chunk.lines[i], lh = line.height;\r\n                if (h < lh) break;\r\n                h -= lh;\r\n            }\r\n            return n + i;\r\n        }\r\n\r\n        function heightAtLine(cm, lineObj) {\r\n            lineObj = visualLine(cm.doc, lineObj);\r\n\r\n            var h = 0, chunk = lineObj.parent;\r\n            for (var i = 0; i < chunk.lines.length; ++i) {\r\n                var line = chunk.lines[i];\r\n                if (line == lineObj) break;\r\n                else h += line.height;\r\n            }\r\n            for (var p = chunk.parent; p; chunk = p, p = chunk.parent) {\r\n                for (var i = 0; i < p.children.length; ++i) {\r\n                    var cur = p.children[i];\r\n                    if (cur == chunk) break;\r\n                    else h += cur.height;\r\n                }\r\n            }\r\n            return h;\r\n        }\r\n\r\n        function getOrder(line) {\r\n            var order = line.order;\r\n            if (order == null) order = line.order = bidiOrdering(line.text);\r\n            return order;\r\n        }\r\n\r\n        // HISTORY\r\n\r\n        function makeHistory(startGen) {\r\n            return {\r\n                // Arrays of history events. Doing something adds an event to\r\n                // done and clears undo. Undoing moves events from done to\r\n                // undone, redoing moves them in the other direction.\r\n                done: [], undone: [], undoDepth: Infinity,\r\n                // Used to track when changes can be merged into a single undo\r\n                // event\r\n                lastTime: 0, lastOp: null, lastOrigin: null,\r\n                // Used by the isClean() method\r\n                generation: startGen || 1, maxGeneration: startGen || 1\r\n            };\r\n        }\r\n\r\n        function attachLocalSpans(doc, change, from, to) {\r\n            var existing = change[\"spans_\" + doc.id], n = 0;\r\n            doc.iter(Math.max(doc.first, from), Math.min(doc.first + doc.size, to), function(line) {\r\n                if (line.markedSpans)\r\n                    (existing || (existing = change[\"spans_\" + doc.id] = {}))[n] = line.markedSpans;\r\n                ++n;\r\n            });\r\n        }\r\n\r\n        function historyChangeFromChange(doc, change) {\r\n            var from = { line: change.from.line, ch: change.from.ch };\r\n            var histChange = {from: from, to: changeEnd(change), text: getBetween(doc, change.from, change.to)};\r\n            attachLocalSpans(doc, histChange, change.from.line, change.to.line + 1);\r\n            linkedDocs(doc, function(doc) {attachLocalSpans(doc, histChange, change.from.line, change.to.line + 1);}, true);\r\n            return histChange;\r\n        }\r\n\r\n        function addToHistory(doc, change, selAfter, opId) {\r\n            var hist = doc.history;\r\n            hist.undone.length = 0;\r\n            var time = +new Date, cur = lst(hist.done);\r\n\r\n            if (cur &&\r\n                (hist.lastOp == opId ||\r\n                    hist.lastOrigin == change.origin && change.origin &&\r\n                    ((change.origin.charAt(0) == \"+\" && doc.cm && hist.lastTime > time - doc.cm.options.historyEventDelay) ||\r\n                        change.origin.charAt(0) == \"*\"))) {\r\n                // Merge this change into the last event\r\n                var last = lst(cur.changes);\r\n                if (posEq(change.from, change.to) && posEq(change.from, last.to)) {\r\n                    // Optimized case for simple insertion -- don't want to add\r\n                    // new changesets for every character typed\r\n                    last.to = changeEnd(change);\r\n                } else {\r\n                    // Add new sub-event\r\n                    cur.changes.push(historyChangeFromChange(doc, change));\r\n                }\r\n                cur.anchorAfter = selAfter.anchor; cur.headAfter = selAfter.head;\r\n            } else {\r\n                // Can not be merged, start a new event.\r\n                cur = {changes: [historyChangeFromChange(doc, change)],\r\n                    generation: hist.generation,\r\n                    anchorBefore: doc.sel.anchor, headBefore: doc.sel.head,\r\n                    anchorAfter: selAfter.anchor, headAfter: selAfter.head};\r\n                hist.done.push(cur);\r\n                hist.generation = ++hist.maxGeneration;\r\n                while (hist.done.length > hist.undoDepth)\r\n                    hist.done.shift();\r\n            }\r\n            hist.lastTime = time;\r\n            hist.lastOp = opId;\r\n            hist.lastOrigin = change.origin;\r\n        }\r\n\r\n        function removeClearedSpans(spans) {\r\n            if (!spans) return null;\r\n            for (var i = 0, out; i < spans.length; ++i) {\r\n                if (spans[i].marker.explicitlyCleared) { if (!out) out = spans.slice(0, i); }\r\n                else if (out) out.push(spans[i]);\r\n            }\r\n            return !out ? spans : out.length ? out : null;\r\n        }\r\n\r\n        function getOldSpans(doc, change) {\r\n            var found = change[\"spans_\" + doc.id];\r\n            if (!found) return null;\r\n            for (var i = 0, nw = []; i < change.text.length; ++i)\r\n                nw.push(removeClearedSpans(found[i]));\r\n            return nw;\r\n        }\r\n\r\n        // Used both to provide a JSON-safe object in .getHistory, and, when\r\n        // detaching a document, to split the history in two\r\n        function copyHistoryArray(events, newGroup) {\r\n            for (var i = 0, copy = []; i < events.length; ++i) {\r\n                var event = events[i], changes = event.changes, newChanges = [];\r\n                copy.push({changes: newChanges, anchorBefore: event.anchorBefore, headBefore: event.headBefore,\r\n                    anchorAfter: event.anchorAfter, headAfter: event.headAfter});\r\n                for (var j = 0; j < changes.length; ++j) {\r\n                    var change = changes[j], m;\r\n                    newChanges.push({from: change.from, to: change.to, text: change.text});\r\n                    if (newGroup) for (var prop in change) if (m = prop.match(/^spans_(\\d+)$/)) {\r\n                        if (indexOf(newGroup, Number(m[1])) > -1) {\r\n                            lst(newChanges)[prop] = change[prop];\r\n                            delete change[prop];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        // Rebasing/resetting history to deal with externally-sourced changes\r\n\r\n        function rebaseHistSel(pos, from, to, diff) {\r\n            if (to < pos.line) {\r\n                pos.line += diff;\r\n            } else if (from < pos.line) {\r\n                pos.line = from;\r\n                pos.ch = 0;\r\n            }\r\n        }\r\n\r\n        // Tries to rebase an array of history events given a change in the\r\n        // document. If the change touches the same lines as the event, the\r\n        // event, and everything 'behind' it, is discarded. If the change is\r\n        // before the event, the event's positions are updated. Uses a\r\n        // copy-on-write scheme for the positions, to avoid having to\r\n        // reallocate them all on every rebase, but also avoid problems with\r\n        // shared position objects being unsafely updated.\r\n        function rebaseHistArray(array, from, to, diff) {\r\n            for (var i = 0; i < array.length; ++i) {\r\n                var sub = array[i], ok = true;\r\n                for (var j = 0; j < sub.changes.length; ++j) {\r\n                    var cur = sub.changes[j];\r\n                    if (!sub.copied) { cur.from = copyPos(cur.from); cur.to = copyPos(cur.to); }\r\n                    if (to < cur.from.line) {\r\n                        cur.from.line += diff;\r\n                        cur.to.line += diff;\r\n                    } else if (from <= cur.to.line) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!sub.copied) {\r\n                    sub.anchorBefore = copyPos(sub.anchorBefore); sub.headBefore = copyPos(sub.headBefore);\r\n                    sub.anchorAfter = copyPos(sub.anchorAfter); sub.readAfter = copyPos(sub.headAfter);\r\n                    sub.copied = true;\r\n                }\r\n                if (!ok) {\r\n                    array.splice(0, i + 1);\r\n                    i = 0;\r\n                } else {\r\n                    rebaseHistSel(sub.anchorBefore); rebaseHistSel(sub.headBefore);\r\n                    rebaseHistSel(sub.anchorAfter); rebaseHistSel(sub.headAfter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function rebaseHist(hist, change) {\r\n            var from = change.from.line, to = change.to.line, diff = change.text.length - (to - from) - 1;\r\n            rebaseHistArray(hist.done, from, to, diff);\r\n            rebaseHistArray(hist.undone, from, to, diff);\r\n        }\r\n\r\n        // EVENT OPERATORS\r\n\r\n        function stopMethod() {e_stop(this);}\r\n        // Ensure an event has a stop method.\r\n        function addStop(event) {\r\n            if (!event.stop) event.stop = stopMethod;\r\n            return event;\r\n        }\r\n\r\n        function e_preventDefault(e) {\r\n            if (e.preventDefault) e.preventDefault();\r\n            else e.returnValue = false;\r\n        }\r\n        function e_stopPropagation(e) {\r\n            if (e.stopPropagation) e.stopPropagation();\r\n            else e.cancelBubble = true;\r\n        }\r\n        function e_defaultPrevented(e) {\r\n            return e.defaultPrevented != null ? e.defaultPrevented : e.returnValue == false;\r\n        }\r\n        function e_stop(e) {e_preventDefault(e); e_stopPropagation(e);}\r\n        CodeMirror.e_stop = e_stop;\r\n        CodeMirror.e_preventDefault = e_preventDefault;\r\n        CodeMirror.e_stopPropagation = e_stopPropagation;\r\n\r\n        function e_target(e) {return e.target || e.srcElement;}\r\n        function e_button(e) {\r\n            var b = e.which;\r\n            if (b == null) {\r\n                if (e.button & 1) b = 1;\r\n                else if (e.button & 2) b = 3;\r\n                else if (e.button & 4) b = 2;\r\n            }\r\n            if (mac && e.ctrlKey && b == 1) b = 3;\r\n            return b;\r\n        }\r\n\r\n        // EVENT HANDLING\r\n\r\n        function on(emitter, type, f) {\r\n            if (emitter.addEventListener)\r\n                emitter.addEventListener(type, f, false);\r\n            else if (emitter.attachEvent)\r\n                emitter.attachEvent(\"on\" + type, f);\r\n            else {\r\n                var map = emitter._handlers || (emitter._handlers = {});\r\n                var arr = map[type] || (map[type] = []);\r\n                arr.push(f);\r\n            }\r\n        }\r\n\r\n        function off(emitter, type, f) {\r\n            if (emitter.removeEventListener)\r\n                emitter.removeEventListener(type, f, false);\r\n            else if (emitter.detachEvent)\r\n                emitter.detachEvent(\"on\" + type, f);\r\n            else {\r\n                var arr = emitter._handlers && emitter._handlers[type];\r\n                if (!arr) return;\r\n                for (var i = 0; i < arr.length; ++i)\r\n                    if (arr[i] == f) { arr.splice(i, 1); break; }\r\n            }\r\n        }\r\n\r\n        function signal(emitter, type /*, values...*/) {\r\n            var arr = emitter._handlers && emitter._handlers[type];\r\n            if (!arr) return;\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            for (var i = 0; i < arr.length; ++i) arr[i].apply(null, args);\r\n        }\r\n\r\n        var delayedCallbacks, delayedCallbackDepth = 0;\r\n        function signalLater(emitter, type /*, values...*/) {\r\n            var arr = emitter._handlers && emitter._handlers[type];\r\n            if (!arr) return;\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            if (!delayedCallbacks) {\r\n                ++delayedCallbackDepth;\r\n                delayedCallbacks = [];\r\n                setTimeout(fireDelayed, 0);\r\n            }\r\n            function bnd(f) {return function(){f.apply(null, args);};};\r\n            for (var i = 0; i < arr.length; ++i)\r\n                delayedCallbacks.push(bnd(arr[i]));\r\n        }\r\n\r\n        function signalDOMEvent(cm, e, override) {\r\n            signal(cm, override || e.type, cm, e);\r\n            return e_defaultPrevented(e) || e.codemirrorIgnore;\r\n        }\r\n\r\n        function fireDelayed() {\r\n            --delayedCallbackDepth;\r\n            var delayed = delayedCallbacks;\r\n            delayedCallbacks = null;\r\n            for (var i = 0; i < delayed.length; ++i) delayed[i]();\r\n        }\r\n\r\n        function hasHandler(emitter, type) {\r\n            var arr = emitter._handlers && emitter._handlers[type];\r\n            return arr && arr.length > 0;\r\n        }\r\n\r\n        CodeMirror.on = on; CodeMirror.off = off; CodeMirror.signal = signal;\r\n\r\n        function eventMixin(ctor) {\r\n            ctor.prototype.on = function(type, f) {on(this, type, f);};\r\n            ctor.prototype.off = function(type, f) {off(this, type, f);};\r\n        }\r\n\r\n        // MISC UTILITIES\r\n\r\n        // Number of pixels added to scroller and sizer to hide scrollbar\r\n        var scrollerCutOff = 30;\r\n\r\n        // Returned or thrown by various protocols to signal 'I'm not\r\n        // handling this'.\r\n        var Pass = CodeMirror.Pass = {toString: function(){return \"CodeMirror.Pass\";}};\r\n\r\n        function Delayed() {this.id = null;}\r\n        Delayed.prototype = {set: function(ms, f) {clearTimeout(this.id); this.id = setTimeout(f, ms);}};\r\n\r\n        // Counts the column offset in a string, taking tabs into account.\r\n        // Used mostly to find indentation.\r\n        function countColumn(string, end, tabSize, startIndex, startValue) {\r\n            if (end == null) {\r\n                end = string.search(/[^\\s\\u00a0]/);\r\n                if (end == -1) end = string.length;\r\n            }\r\n            for (var i = startIndex || 0, n = startValue || 0; i < end; ++i) {\r\n                if (string.charAt(i) == \"\\t\") n += tabSize - (n % tabSize);\r\n                else ++n;\r\n            }\r\n            return n;\r\n        }\r\n        CodeMirror.countColumn = countColumn;\r\n\r\n        var spaceStrs = [\"\"];\r\n        function spaceStr(n) {\r\n            while (spaceStrs.length <= n)\r\n                spaceStrs.push(lst(spaceStrs) + \" \");\r\n            return spaceStrs[n];\r\n        }\r\n\r\n        function lst(arr) { return arr[arr.length-1]; }\r\n\r\n        function selectInput(node) {\r\n            if (ios) { // Mobile Safari apparently has a bug where select() is broken.\r\n                node.selectionStart = 0;\r\n                node.selectionEnd = node.value.length;\r\n            } else {\r\n                // Suppress mysterious IE10 errors\r\n                try { node.select(); }\r\n                catch(_e) {}\r\n            }\r\n        }\r\n\r\n        function indexOf(collection, elt) {\r\n            if (collection.indexOf) return collection.indexOf(elt);\r\n            for (var i = 0, e = collection.length; i < e; ++i)\r\n                if (collection[i] == elt) return i;\r\n            return -1;\r\n        }\r\n\r\n        function createObj(base, props) {\r\n            function Obj() {}\r\n            Obj.prototype = base;\r\n            var inst = new Obj();\r\n            if (props) copyObj(props, inst);\r\n            return inst;\r\n        }\r\n\r\n        function copyObj(obj, target) {\r\n            if (!target) target = {};\r\n            for (var prop in obj) if (obj.hasOwnProperty(prop)) target[prop] = obj[prop];\r\n            return target;\r\n        }\r\n\r\n        function emptyArray(size) {\r\n            for (var a = [], i = 0; i < size; ++i) a.push(undefined);\r\n            return a;\r\n        }\r\n\r\n        function bind(f) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            return function(){return f.apply(null, args);};\r\n        }\r\n\r\n        var nonASCIISingleCaseWordChar = /[\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\r\n        function isWordChar(ch) {\r\n            return /\\w/.test(ch) || ch > \"\\x80\" &&\r\n                (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch));\r\n        }\r\n\r\n        function isEmpty(obj) {\r\n            for (var n in obj) if (obj.hasOwnProperty(n) && obj[n]) return false;\r\n            return true;\r\n        }\r\n\r\n        var isExtendingChar = /[\\u0300-\\u036F\\u0483-\\u0487\\u0488-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\uA66F\\uA670-\\uA672\\uA674-\\uA67D\\uA69F\\udc00-\\udfff]/;\r\n\r\n        // DOM UTILITIES\r\n\r\n        function elt(tag, content, className, style) {\r\n            var e = document.createElement(tag);\r\n            if (className) e.className = className;\r\n            if (style) e.style.cssText = style;\r\n            if (typeof content == \"string\") setTextContent(e, content);\r\n            else if (content) for (var i = 0; i < content.length; ++i) e.appendChild(content[i]);\r\n            return e;\r\n        }\r\n\r\n        function removeChildren(e) {\r\n            for (var count = e.childNodes.length; count > 0; --count)\r\n                e.removeChild(e.firstChild);\r\n            return e;\r\n        }\r\n\r\n        function removeChildrenAndAdd(parent, e) {\r\n            return removeChildren(parent).appendChild(e);\r\n        }\r\n\r\n        function setTextContent(e, str) {\r\n            if (ie_lt9) {\r\n                e.innerHTML = \"\";\r\n                e.appendChild(document.createTextNode(str));\r\n            } else e.textContent = str;\r\n        }\r\n\r\n        function getRect(node) {\r\n            return node.getBoundingClientRect();\r\n        }\r\n        CodeMirror.replaceGetRect = function(f) { getRect = f; };\r\n\r\n        // FEATURE DETECTION\r\n\r\n        // Detect drag-and-drop\r\n        var dragAndDrop = function() {\r\n            // There is *some* kind of drag-and-drop support in IE6-8, but I\r\n            // couldn't get it to work yet.\r\n            if (ie_lt9) return false;\r\n            var div = elt('div');\r\n            return \"draggable\" in div || \"dragDrop\" in div;\r\n        }();\r\n\r\n        // For a reason I have yet to figure out, some browsers disallow\r\n        // word wrapping between certain characters *only* if a new inline\r\n        // element is started between them. This makes it hard to reliably\r\n        // measure the position of things, since that requires inserting an\r\n        // extra span. This terribly fragile set of tests matches the\r\n        // character combinations that suffer from this phenomenon on the\r\n        // various browsers.\r\n        function spanAffectsWrapping() { return false; }\r\n        if (gecko) // Only for \"$'\"\r\n            spanAffectsWrapping = function(str, i) {\r\n                return str.charCodeAt(i - 1) == 36 && str.charCodeAt(i) == 39;\r\n            };\r\n        else if (safari && !/Version\\/([6-9]|\\d\\d)\\b/.test(navigator.userAgent))\r\n            spanAffectsWrapping = function(str, i) {\r\n                return /\\-[^ \\-?]|\\?[^ !\\'\\\"\\),.\\-\\/:;\\?\\]\\}]/.test(str.slice(i - 1, i + 1));\r\n            };\r\n        else if (webkit && !/Chrome\\/(?:29|[3-9]\\d|\\d\\d\\d)\\./.test(navigator.userAgent))\r\n            spanAffectsWrapping = function(str, i) {\r\n                if (i > 1 && str.charCodeAt(i - 1) == 45) {\r\n                    if (/\\w/.test(str.charAt(i - 2)) && /[^\\-?\\.]/.test(str.charAt(i))) return true;\r\n                    if (i > 2 && /[\\d\\.,]/.test(str.charAt(i - 2)) && /[\\d\\.,]/.test(str.charAt(i))) return false;\r\n                }\r\n                return /[~!#%&*)=+}\\]|\\\"\\.>,:;][({[<]|-[^\\-?\\.\\u2010-\\u201f\\u2026]|\\?[\\w~`@#$%\\^&*(_=+{[|><]|…[\\w~`@#$%\\^&*(_=+{[><]/.test(str.slice(i - 1, i + 1));\r\n            };\r\n\r\n        var knownScrollbarWidth;\r\n        function scrollbarWidth(measure) {\r\n            if (knownScrollbarWidth != null) return knownScrollbarWidth;\r\n            var test = elt(\"div\", null, null, \"width: 50px; height: 50px; overflow-x: scroll\");\r\n            removeChildrenAndAdd(measure, test);\r\n            if (test.offsetWidth)\r\n                knownScrollbarWidth = test.offsetHeight - test.clientHeight;\r\n            return knownScrollbarWidth || 0;\r\n        }\r\n\r\n        var zwspSupported;\r\n        function zeroWidthElement(measure) {\r\n            if (zwspSupported == null) {\r\n                var test = elt(\"span\", \"\\u200b\");\r\n                removeChildrenAndAdd(measure, elt(\"span\", [test, document.createTextNode(\"x\")]));\r\n                if (measure.firstChild.offsetHeight != 0)\r\n                    zwspSupported = test.offsetWidth <= 1 && test.offsetHeight > 2 && !ie_lt8;\r\n            }\r\n            if (zwspSupported) return elt(\"span\", \"\\u200b\");\r\n            else return elt(\"span\", \"\\u00a0\", null, \"display: inline-block; width: 1px; margin-right: -1px\");\r\n        }\r\n\r\n        // See if \"\".split is the broken IE version, if so, provide an\r\n        // alternative way to split lines.\r\n        var splitLines = \"\\n\\nb\".split(/\\n/).length != 3 ? function(string) {\r\n            var pos = 0, result = [], l = string.length;\r\n            while (pos <= l) {\r\n                var nl = string.indexOf(\"\\n\", pos);\r\n                if (nl == -1) nl = string.length;\r\n                var line = string.slice(pos, string.charAt(nl - 1) == \"\\r\" ? nl - 1 : nl);\r\n                var rt = line.indexOf(\"\\r\");\r\n                if (rt != -1) {\r\n                    result.push(line.slice(0, rt));\r\n                    pos += rt + 1;\r\n                } else {\r\n                    result.push(line);\r\n                    pos = nl + 1;\r\n                }\r\n            }\r\n            return result;\r\n        } : function(string){return string.split(/\\r\\n?|\\n/);};\r\n        CodeMirror.splitLines = splitLines;\r\n\r\n        var hasSelection = window.getSelection ? function(te) {\r\n            try { return te.selectionStart != te.selectionEnd; }\r\n            catch(e) { return false; }\r\n        } : function(te) {\r\n            try {var range = te.ownerDocument.selection.createRange();}\r\n            catch(e) {}\r\n            if (!range || range.parentElement() != te) return false;\r\n            return range.compareEndPoints(\"StartToEnd\", range) != 0;\r\n        };\r\n\r\n        var hasCopyEvent = (function() {\r\n            var e = elt(\"div\");\r\n            if (\"oncopy\" in e) return true;\r\n            e.setAttribute(\"oncopy\", \"return;\");\r\n            return typeof e.oncopy == 'function';\r\n        })();\r\n\r\n        // KEY NAMING\r\n\r\n        var keyNames = {3: \"Enter\", 8: \"Backspace\", 9: \"Tab\", 13: \"Enter\", 16: \"Shift\", 17: \"Ctrl\", 18: \"Alt\",\r\n            19: \"Pause\", 20: \"CapsLock\", 27: \"Esc\", 32: \"Space\", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\",\r\n            36: \"Home\", 37: \"Left\", 38: \"Up\", 39: \"Right\", 40: \"Down\", 44: \"PrintScrn\", 45: \"Insert\",\r\n            46: \"Delete\", 59: \";\", 91: \"Mod\", 92: \"Mod\", 93: \"Mod\", 109: \"-\", 107: \"=\", 127: \"Delete\",\r\n            186: \";\", 187: \"=\", 188: \",\", 189: \"-\", 190: \".\", 191: \"/\", 192: \"`\", 219: \"[\", 220: \"\\\\\",\r\n            221: \"]\", 222: \"'\", 63276: \"PageUp\", 63277: \"PageDown\", 63275: \"End\", 63273: \"Home\",\r\n            63234: \"Left\", 63232: \"Up\", 63235: \"Right\", 63233: \"Down\", 63302: \"Insert\", 63272: \"Delete\"};\r\n        CodeMirror.keyNames = keyNames;\r\n        (function() {\r\n            // Number keys\r\n            for (var i = 0; i < 10; i++) keyNames[i + 48] = String(i);\r\n            // Alphabetic keys\r\n            for (var i = 65; i <= 90; i++) keyNames[i] = String.fromCharCode(i);\r\n            // Function keys\r\n            for (var i = 1; i <= 12; i++) keyNames[i + 111] = keyNames[i + 63235] = \"F\" + i;\r\n        })();\r\n\r\n        // BIDI HELPERS\r\n\r\n        function iterateBidiSections(order, from, to, f) {\r\n            if (!order) return f(from, to, \"ltr\");\r\n            var found = false;\r\n            for (var i = 0; i < order.length; ++i) {\r\n                var part = order[i];\r\n                if (part.from < to && part.to > from || from == to && part.to == from) {\r\n                    f(Math.max(part.from, from), Math.min(part.to, to), part.level == 1 ? \"rtl\" : \"ltr\");\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) f(from, to, \"ltr\");\r\n        }\r\n\r\n        function bidiLeft(part) { return part.level % 2 ? part.to : part.from; }\r\n        function bidiRight(part) { return part.level % 2 ? part.from : part.to; }\r\n\r\n        function lineLeft(line) { var order = getOrder(line); return order ? bidiLeft(order[0]) : 0; }\r\n        function lineRight(line) {\r\n            var order = getOrder(line);\r\n            if (!order) return line.text.length;\r\n            return bidiRight(lst(order));\r\n        }\r\n\r\n        function lineStart(cm, lineN) {\r\n            var line = getLine(cm.doc, lineN);\r\n            var visual = visualLine(cm.doc, line);\r\n            if (visual != line) lineN = lineNo(visual);\r\n            var order = getOrder(visual);\r\n            var ch = !order ? 0 : order[0].level % 2 ? lineRight(visual) : lineLeft(visual);\r\n            return Pos(lineN, ch);\r\n        }\r\n        function lineEnd(cm, lineN) {\r\n            var merged, line;\r\n            while (merged = collapsedSpanAtEnd(line = getLine(cm.doc, lineN)))\r\n                lineN = merged.find().to.line;\r\n            var order = getOrder(line);\r\n            var ch = !order ? line.text.length : order[0].level % 2 ? lineLeft(line) : lineRight(line);\r\n            return Pos(lineN, ch);\r\n        }\r\n\r\n        function compareBidiLevel(order, a, b) {\r\n            var linedir = order[0].level;\r\n            if (a == linedir) return true;\r\n            if (b == linedir) return false;\r\n            return a < b;\r\n        }\r\n        var bidiOther;\r\n        function getBidiPartAt(order, pos) {\r\n            for (var i = 0, found; i < order.length; ++i) {\r\n                var cur = order[i];\r\n                if (cur.from < pos && cur.to > pos) { bidiOther = null; return i; }\r\n                if (cur.from == pos || cur.to == pos) {\r\n                    if (found == null) {\r\n                        found = i;\r\n                    } else if (compareBidiLevel(order, cur.level, order[found].level)) {\r\n                        bidiOther = found;\r\n                        return i;\r\n                    } else {\r\n                        bidiOther = i;\r\n                        return found;\r\n                    }\r\n                }\r\n            }\r\n            bidiOther = null;\r\n            return found;\r\n        }\r\n\r\n        function moveInLine(line, pos, dir, byUnit) {\r\n            if (!byUnit) return pos + dir;\r\n            do pos += dir;\r\n            while (pos > 0 && isExtendingChar.test(line.text.charAt(pos)));\r\n            return pos;\r\n        }\r\n\r\n        // This is somewhat involved. It is needed in order to move\r\n        // 'visually' through bi-directional text -- i.e., pressing left\r\n        // should make the cursor go left, even when in RTL text. The\r\n        // tricky part is the 'jumps', where RTL and LTR text touch each\r\n        // other. This often requires the cursor offset to move more than\r\n        // one unit, in order to visually move one unit.\r\n        function moveVisually(line, start, dir, byUnit) {\r\n            var bidi = getOrder(line);\r\n            if (!bidi) return moveLogically(line, start, dir, byUnit);\r\n            var pos = getBidiPartAt(bidi, start), part = bidi[pos];\r\n            var target = moveInLine(line, start, part.level % 2 ? -dir : dir, byUnit);\r\n\r\n            for (;;) {\r\n                if (target > part.from && target < part.to) return target;\r\n                if (target == part.from || target == part.to) {\r\n                    if (getBidiPartAt(bidi, target) == pos) return target;\r\n                    part = bidi[pos += dir];\r\n                    return (dir > 0) == part.level % 2 ? part.to : part.from;\r\n                } else {\r\n                    part = bidi[pos += dir];\r\n                    if (!part) return null;\r\n                    if ((dir > 0) == part.level % 2)\r\n                        target = moveInLine(line, part.to, -1, byUnit);\r\n                    else\r\n                        target = moveInLine(line, part.from, 1, byUnit);\r\n                }\r\n            }\r\n        }\r\n\r\n        function moveLogically(line, start, dir, byUnit) {\r\n            var target = start + dir;\r\n            if (byUnit) while (target > 0 && isExtendingChar.test(line.text.charAt(target))) target += dir;\r\n            return target < 0 || target > line.text.length ? null : target;\r\n        }\r\n\r\n        // Bidirectional ordering algorithm\r\n        // See http://unicode.org/reports/tr9/tr9-13.html for the algorithm\r\n        // that this (partially) implements.\r\n\r\n        // One-char codes used for character types:\r\n        // L (L):   Left-to-Right\r\n        // R (R):   Right-to-Left\r\n        // r (AL):  Right-to-Left Arabic\r\n        // 1 (EN):  European Number\r\n        // + (ES):  European Number Separator\r\n        // % (ET):  European Number Terminator\r\n        // n (AN):  Arabic Number\r\n        // , (CS):  Common Number Separator\r\n        // m (NSM): Non-Spacing Mark\r\n        // b (BN):  Boundary Neutral\r\n        // s (B):   Paragraph Separator\r\n        // t (S):   Segment Separator\r\n        // w (WS):  Whitespace\r\n        // N (ON):  Other Neutrals\r\n\r\n        // Returns null if characters are ordered as they appear\r\n        // (left-to-right), or an array of sections ({from, to, level}\r\n        // objects) in the order in which they occur visually.\r\n        var bidiOrdering = (function() {\r\n            // Character types for codepoints 0 to 0xff\r\n            var lowTypes = \"bbbbbbbbbtstwsbbbbbbbbbbbbbbssstwNN%%%NNNNNN,N,N1111111111NNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbbb,N%%%%NNNNLNNNNN%%11NLNNN1LNNNNNLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLL\";\r\n            // Character types for codepoints 0x600 to 0x6ff\r\n            var arabicTypes = \"rrrrrrrrrrrr,rNNmmmmmmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmrrrrrrrnnnnnnnnnn%nnrrrmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmmmmmmNmmmmrrrrrrrrrrrrrrrrrr\";\r\n            function charType(code) {\r\n                if (code <= 0xff) return lowTypes.charAt(code);\r\n                else if (0x590 <= code && code <= 0x5f4) return \"R\";\r\n                else if (0x600 <= code && code <= 0x6ff) return arabicTypes.charAt(code - 0x600);\r\n                else if (0x700 <= code && code <= 0x8ac) return \"r\";\r\n                else return \"L\";\r\n            }\r\n\r\n            var bidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/;\r\n            var isNeutral = /[stwN]/, isStrong = /[LRr]/, countsAsLeft = /[Lb1n]/, countsAsNum = /[1n]/;\r\n            // Browsers seem to always treat the boundaries of block elements as being L.\r\n            var outerType = \"L\";\r\n\r\n            return function(str) {\r\n                if (!bidiRE.test(str)) return false;\r\n                var len = str.length, types = [];\r\n                for (var i = 0, type; i < len; ++i)\r\n                    types.push(type = charType(str.charCodeAt(i)));\r\n\r\n                // W1. Examine each non-spacing mark (NSM) in the level run, and\r\n                // change the type of the NSM to the type of the previous\r\n                // character. If the NSM is at the start of the level run, it will\r\n                // get the type of sor.\r\n                for (var i = 0, prev = outerType; i < len; ++i) {\r\n                    var type = types[i];\r\n                    if (type == \"m\") types[i] = prev;\r\n                    else prev = type;\r\n                }\r\n\r\n                // W2. Search backwards from each instance of a European number\r\n                // until the first strong type (R, L, AL, or sor) is found. If an\r\n                // AL is found, change the type of the European number to Arabic\r\n                // number.\r\n                // W3. Change all ALs to R.\r\n                for (var i = 0, cur = outerType; i < len; ++i) {\r\n                    var type = types[i];\r\n                    if (type == \"1\" && cur == \"r\") types[i] = \"n\";\r\n                    else if (isStrong.test(type)) { cur = type; if (type == \"r\") types[i] = \"R\"; }\r\n                }\r\n\r\n                // W4. A single European separator between two European numbers\r\n                // changes to a European number. A single common separator between\r\n                // two numbers of the same type changes to that type.\r\n                for (var i = 1, prev = types[0]; i < len - 1; ++i) {\r\n                    var type = types[i];\r\n                    if (type == \"+\" && prev == \"1\" && types[i+1] == \"1\") types[i] = \"1\";\r\n                    else if (type == \",\" && prev == types[i+1] &&\r\n                        (prev == \"1\" || prev == \"n\")) types[i] = prev;\r\n                    prev = type;\r\n                }\r\n\r\n                // W5. A sequence of European terminators adjacent to European\r\n                // numbers changes to all European numbers.\r\n                // W6. Otherwise, separators and terminators change to Other\r\n                // Neutral.\r\n                for (var i = 0; i < len; ++i) {\r\n                    var type = types[i];\r\n                    if (type == \",\") types[i] = \"N\";\r\n                    else if (type == \"%\") {\r\n                        for (var end = i + 1; end < len && types[end] == \"%\"; ++end) {}\r\n                        var replace = (i && types[i-1] == \"!\") || (end < len - 1 && types[end] == \"1\") ? \"1\" : \"N\";\r\n                        for (var j = i; j < end; ++j) types[j] = replace;\r\n                        i = end - 1;\r\n                    }\r\n                }\r\n\r\n                // W7. Search backwards from each instance of a European number\r\n                // until the first strong type (R, L, or sor) is found. If an L is\r\n                // found, then change the type of the European number to L.\r\n                for (var i = 0, cur = outerType; i < len; ++i) {\r\n                    var type = types[i];\r\n                    if (cur == \"L\" && type == \"1\") types[i] = \"L\";\r\n                    else if (isStrong.test(type)) cur = type;\r\n                }\r\n\r\n                // N1. A sequence of neutrals takes the direction of the\r\n                // surrounding strong text if the text on both sides has the same\r\n                // direction. European and Arabic numbers act as if they were R in\r\n                // terms of their influence on neutrals. Start-of-level-run (sor)\r\n                // and end-of-level-run (eor) are used at level run boundaries.\r\n                // N2. Any remaining neutrals take the embedding direction.\r\n                for (var i = 0; i < len; ++i) {\r\n                    if (isNeutral.test(types[i])) {\r\n                        for (var end = i + 1; end < len && isNeutral.test(types[end]); ++end) {}\r\n                        var before = (i ? types[i-1] : outerType) == \"L\";\r\n                        var after = (end < len - 1 ? types[end] : outerType) == \"L\";\r\n                        var replace = before || after ? \"L\" : \"R\";\r\n                        for (var j = i; j < end; ++j) types[j] = replace;\r\n                        i = end - 1;\r\n                    }\r\n                }\r\n\r\n                // Here we depart from the documented algorithm, in order to avoid\r\n                // building up an actual levels array. Since there are only three\r\n                // levels (0, 1, 2) in an implementation that doesn't take\r\n                // explicit embedding into account, we can build up the order on\r\n                // the fly, without following the level-based algorithm.\r\n                var order = [], m;\r\n                for (var i = 0; i < len;) {\r\n                    if (countsAsLeft.test(types[i])) {\r\n                        var start = i;\r\n                        for (++i; i < len && countsAsLeft.test(types[i]); ++i) {}\r\n                        order.push({from: start, to: i, level: 0});\r\n                    } else {\r\n                        var pos = i, at = order.length;\r\n                        for (++i; i < len && types[i] != \"L\"; ++i) {}\r\n                        for (var j = pos; j < i;) {\r\n                            if (countsAsNum.test(types[j])) {\r\n                                if (pos < j) order.splice(at, 0, {from: pos, to: j, level: 1});\r\n                                var nstart = j;\r\n                                for (++j; j < i && countsAsNum.test(types[j]); ++j) {}\r\n                                order.splice(at, 0, {from: nstart, to: j, level: 2});\r\n                                pos = j;\r\n                            } else ++j;\r\n                        }\r\n                        if (pos < i) order.splice(at, 0, {from: pos, to: i, level: 1});\r\n                    }\r\n                }\r\n                if (order[0].level == 1 && (m = str.match(/^\\s+/))) {\r\n                    order[0].from = m[0].length;\r\n                    order.unshift({from: 0, to: m[0].length, level: 0});\r\n                }\r\n                if (lst(order).level == 1 && (m = str.match(/\\s+$/))) {\r\n                    lst(order).to -= m[0].length;\r\n                    order.push({from: len - m[0].length, to: len, level: 0});\r\n                }\r\n                if (order[0].level != lst(order).level)\r\n                    order.push({from: len, to: len, level: order[0].level});\r\n\r\n                return order;\r\n            };\r\n        })();\r\n\r\n        // THE END\r\n\r\n        CodeMirror.version = \"3.15.0\";\r\n\r\n        return CodeMirror;\r\n    })();\r\n\r\n    var listRE = /^(\\s*)([*+-]|(\\d+)\\.)([\\w+(\\s+\\w+)]|[\\s*])/,\r\n        emptyListRE = /^(\\s*)([*+-]|(\\d+)\\.)(\\s*)$/,\r\n        unorderedBullets = '*+-';\r\n\r\n    var inListState = function(cm, pos){\r\n        return cm.getStateAfter(pos.line).list || null;\r\n    };\r\n\r\n    var inListOrNot = function(cm){\r\n        var pos = cm.getCursor();\r\n        return inListState(cm, pos);\r\n    };\r\n\r\n    CodeMirror.commands.shiftTabAndIndentContinueMarkdownList = function(cm){\r\n        var inList = inListOrNot(cm);\r\n\r\n        if(inList !== null){\r\n            cm.execCommand('insertTab');\r\n            return;\r\n        }\r\n\r\n        cm.execCommand('indentLess');\r\n    };\r\n\r\n    CodeMirror.commands.tabAndIndentContinueMarkdownList = function(cm){\r\n        var inList = inListOrNot(cm);\r\n\r\n        if(inList !== null){\r\n            cm.execCommand('insertTab');\r\n            return;\r\n        }\r\n\r\n        cm.execCommand('indentMore');\r\n    };\r\n\r\n    CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm){\r\n        var pos, tok, match, emptyMatch, inList;\r\n\r\n        pos = cm.getCursor();\r\n        tok = cm.getTokenAt(pos);\r\n        emptyMatch = cm.getLine(pos.line).match(emptyListRE);\r\n        inList = inListState(cm, pos);\r\n\r\n        if (!inList && emptyMatch){\r\n            cm.replaceRange(\"\", {line: pos.line , ch:tok.start}, {line:pos.line , ch:tok.end});\r\n            cm.execCommand('delLineLeft');\r\n            cm.execCommand('newlineAndIndent');\r\n            return;\r\n        }\r\n\r\n        if (!inList || !(match = cm.getLine(pos.line).match(listRE))) {\r\n            cm.execCommand('newlineAndIndent');\r\n            return;\r\n        }\r\n\r\n        var indent = match[1], after = \" \";\r\n        var bullet = unorderedBullets.indexOf(match[2]) >= 0\r\n            ? match[2]\r\n            : (parseInt(match[3], 10) + 1) + '.';\r\n\r\n        cm.replaceSelection('\\n' + indent + bullet + after, 'end');\r\n    };\r\n\r\n    CodeMirror.defineMode(\"xml\", function(config, parserConfig) {\r\n        var indentUnit = config.indentUnit;\r\n        var multilineTagIndentFactor = parserConfig.multilineTagIndentFactor || 1;\r\n        var multilineTagIndentPastTag = parserConfig.multilineTagIndentPastTag || true;\r\n\r\n        var Kludges = parserConfig.htmlMode ? {\r\n            autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\r\n                'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\r\n                'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\r\n                'track': true, 'wbr': true},\r\n            implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\r\n                'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\r\n                'th': true, 'tr': true},\r\n            contextGrabbers: {\r\n                'dd': {'dd': true, 'dt': true},\r\n                'dt': {'dd': true, 'dt': true},\r\n                'li': {'li': true},\r\n                'option': {'option': true, 'optgroup': true},\r\n                'optgroup': {'optgroup': true},\r\n                'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\r\n                    'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\r\n                    'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\r\n                    'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\r\n                    'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\r\n                'rp': {'rp': true, 'rt': true},\r\n                'rt': {'rp': true, 'rt': true},\r\n                'tbody': {'tbody': true, 'tfoot': true},\r\n                'td': {'td': true, 'th': true},\r\n                'tfoot': {'tbody': true},\r\n                'th': {'td': true, 'th': true},\r\n                'thead': {'tbody': true, 'tfoot': true},\r\n                'tr': {'tr': true}\r\n            },\r\n            doNotIndent: {\"pre\": true},\r\n            allowUnquoted: true,\r\n            allowMissing: true\r\n        } : {\r\n            autoSelfClosers: {},\r\n            implicitlyClosed: {},\r\n            contextGrabbers: {},\r\n            doNotIndent: {},\r\n            allowUnquoted: false,\r\n            allowMissing: false\r\n        };\r\n        var alignCDATA = parserConfig.alignCDATA;\r\n\r\n        // Return variables for tokenizers\r\n        var tagName, type;\r\n\r\n        function inText(stream, state) {\r\n            function chain(parser) {\r\n                state.tokenize = parser;\r\n                return parser(stream, state);\r\n            }\r\n\r\n            var ch = stream.next();\r\n            if (ch == \"<\") {\r\n                if (stream.eat(\"!\")) {\r\n                    if (stream.eat(\"[\")) {\r\n                        if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\r\n                        else return null;\r\n                    } else if (stream.match(\"--\")) {\r\n                        return chain(inBlock(\"comment\", \"-->\"));\r\n                    } else if (stream.match(\"DOCTYPE\", true, true)) {\r\n                        stream.eatWhile(/[\\w\\._\\-]/);\r\n                        return chain(doctype(1));\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                } else if (stream.eat(\"?\")) {\r\n                    stream.eatWhile(/[\\w\\._\\-]/);\r\n                    state.tokenize = inBlock(\"meta\", \"?>\");\r\n                    return \"meta\";\r\n                } else {\r\n                    var isClose = stream.eat(\"/\");\r\n                    tagName = \"\";\r\n                    var c;\r\n                    while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\r\n                    if (!tagName) return \"error\";\r\n                    type = isClose ? \"closeTag\" : \"openTag\";\r\n                    state.tokenize = inTag;\r\n                    return \"tag\";\r\n                }\r\n            } else if (ch == \"&\") {\r\n                var ok;\r\n                if (stream.eat(\"#\")) {\r\n                    if (stream.eat(\"x\")) {\r\n                        ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\r\n                    } else {\r\n                        ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\r\n                    }\r\n                } else {\r\n                    ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\r\n                }\r\n                return ok ? \"atom\" : \"error\";\r\n            } else {\r\n                stream.eatWhile(/[^&<]/);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function inTag(stream, state) {\r\n            var ch = stream.next();\r\n            if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\r\n                state.tokenize = inText;\r\n                type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\r\n                return \"tag\";\r\n            } else if (ch == \"=\") {\r\n                type = \"equals\";\r\n                return null;\r\n            } else if (ch == \"<\") {\r\n                return \"error\";\r\n            } else if (/[\\'\\\"]/.test(ch)) {\r\n                state.tokenize = inAttribute(ch);\r\n                state.stringStartCol = stream.column();\r\n                return state.tokenize(stream, state);\r\n            } else {\r\n                stream.eatWhile(/[^\\s\\u00a0=<>\\\"\\']/);\r\n                return \"word\";\r\n            }\r\n        }\r\n\r\n        function inAttribute(quote) {\r\n            var closure = function(stream, state) {\r\n                while (!stream.eol()) {\r\n                    if (stream.next() == quote) {\r\n                        state.tokenize = inTag;\r\n                        break;\r\n                    }\r\n                }\r\n                return \"string\";\r\n            };\r\n            closure.isInAttribute = true;\r\n            return closure;\r\n        }\r\n\r\n        function inBlock(style, terminator) {\r\n            return function(stream, state) {\r\n                while (!stream.eol()) {\r\n                    if (stream.match(terminator)) {\r\n                        state.tokenize = inText;\r\n                        break;\r\n                    }\r\n                    stream.next();\r\n                }\r\n                return style;\r\n            };\r\n        }\r\n        function doctype(depth) {\r\n            return function(stream, state) {\r\n                var ch;\r\n                while ((ch = stream.next()) != null) {\r\n                    if (ch == \"<\") {\r\n                        state.tokenize = doctype(depth + 1);\r\n                        return state.tokenize(stream, state);\r\n                    } else if (ch == \">\") {\r\n                        if (depth == 1) {\r\n                            state.tokenize = inText;\r\n                            break;\r\n                        } else {\r\n                            state.tokenize = doctype(depth - 1);\r\n                            return state.tokenize(stream, state);\r\n                        }\r\n                    }\r\n                }\r\n                return \"meta\";\r\n            };\r\n        }\r\n\r\n        var curState, curStream, setStyle;\r\n        function pass() {\r\n            for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);\r\n        }\r\n        function cont() {\r\n            pass.apply(null, arguments);\r\n            return true;\r\n        }\r\n\r\n        function pushContext(tagName, startOfLine) {\r\n            var noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) || (curState.context && curState.context.noIndent);\r\n            curState.context = {\r\n                prev: curState.context,\r\n                tagName: tagName,\r\n                indent: curState.indented,\r\n                startOfLine: startOfLine,\r\n                noIndent: noIndent\r\n            };\r\n        }\r\n        function popContext() {\r\n            if (curState.context) curState.context = curState.context.prev;\r\n        }\r\n\r\n        function element(type) {\r\n            if (type == \"openTag\") {\r\n                curState.tagName = tagName;\r\n                curState.tagStart = curStream.column();\r\n                return cont(attributes, endtag(curState.startOfLine));\r\n            } else if (type == \"closeTag\") {\r\n                var err = false;\r\n                if (curState.context) {\r\n                    if (curState.context.tagName != tagName) {\r\n                        if (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {\r\n                            popContext();\r\n                        }\r\n                        err = !curState.context || curState.context.tagName != tagName;\r\n                    }\r\n                } else {\r\n                    err = true;\r\n                }\r\n                if (err) setStyle = \"error\";\r\n                return cont(endclosetag(err));\r\n            }\r\n            return cont();\r\n        }\r\n        function endtag(startOfLine) {\r\n            return function(type) {\r\n                var tagName = curState.tagName;\r\n                curState.tagName = curState.tagStart = null;\r\n                if (type == \"selfcloseTag\" ||\r\n                    (type == \"endTag\" && Kludges.autoSelfClosers.hasOwnProperty(tagName.toLowerCase()))) {\r\n                    maybePopContext(tagName.toLowerCase());\r\n                    return cont();\r\n                }\r\n                if (type == \"endTag\") {\r\n                    maybePopContext(tagName.toLowerCase());\r\n                    pushContext(tagName, startOfLine);\r\n                    return cont();\r\n                }\r\n                return cont();\r\n            };\r\n        }\r\n        function endclosetag(err) {\r\n            return function(type) {\r\n                if (err) setStyle = \"error\";\r\n                if (type == \"endTag\") { popContext(); return cont(); }\r\n                setStyle = \"error\";\r\n                return cont(arguments.callee);\r\n            };\r\n        }\r\n        function maybePopContext(nextTagName) {\r\n            var parentTagName;\r\n            while (true) {\r\n                if (!curState.context) {\r\n                    return;\r\n                }\r\n                parentTagName = curState.context.tagName.toLowerCase();\r\n                if (!Kludges.contextGrabbers.hasOwnProperty(parentTagName) ||\r\n                    !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\r\n                    return;\r\n                }\r\n                popContext();\r\n            }\r\n        }\r\n\r\n        function attributes(type) {\r\n            if (type == \"word\") {setStyle = \"attribute\"; return cont(attribute, attributes);}\r\n            if (type == \"endTag\" || type == \"selfcloseTag\") return pass();\r\n            setStyle = \"error\";\r\n            return cont(attributes);\r\n        }\r\n        function attribute(type) {\r\n            if (type == \"equals\") return cont(attvalue, attributes);\r\n            if (!Kludges.allowMissing) setStyle = \"error\";\r\n            else if (type == \"word\") setStyle = \"attribute\";\r\n            return (type == \"endTag\" || type == \"selfcloseTag\") ? pass() : cont();\r\n        }\r\n        function attvalue(type) {\r\n            if (type == \"string\") return cont(attvaluemaybe);\r\n            if (type == \"word\" && Kludges.allowUnquoted) {setStyle = \"string\"; return cont();}\r\n            setStyle = \"error\";\r\n            return (type == \"endTag\" || type == \"selfCloseTag\") ? pass() : cont();\r\n        }\r\n        function attvaluemaybe(type) {\r\n            if (type == \"string\") return cont(attvaluemaybe);\r\n            else return pass();\r\n        }\r\n\r\n        return {\r\n            startState: function() {\r\n                return {tokenize: inText, cc: [], indented: 0, startOfLine: true, tagName: null, tagStart: null, context: null};\r\n            },\r\n\r\n            token: function(stream, state) {\r\n                if (!state.tagName && stream.sol()) {\r\n                    state.startOfLine = true;\r\n                    state.indented = stream.indentation();\r\n                }\r\n                if (stream.eatSpace()) return null;\r\n\r\n                setStyle = type = tagName = null;\r\n                var style = state.tokenize(stream, state);\r\n                state.type = type;\r\n                if ((style || type) && style != \"comment\") {\r\n                    curState = state; curStream = stream;\r\n                    while (true) {\r\n                        var comb = state.cc.pop() || element;\r\n                        if (comb(type || style)) break;\r\n                    }\r\n                }\r\n                state.startOfLine = false;\r\n                return setStyle || style;\r\n            },\r\n\r\n            indent: function(state, textAfter, fullLine) {\r\n                var context = state.context;\r\n                // Indent multi-line strings (e.g. css).\r\n                if (state.tokenize.isInAttribute) {\r\n                    return state.stringStartCol + 1;\r\n                }\r\n                if ((state.tokenize != inTag && state.tokenize != inText) ||\r\n                    context && context.noIndent)\r\n                    return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\r\n                // Indent the starts of attribute names.\r\n                if (state.tagName) {\r\n                    if (multilineTagIndentPastTag)\r\n                        return state.tagStart + state.tagName.length + 2;\r\n                    else\r\n                        return state.tagStart + indentUnit * multilineTagIndentFactor;\r\n                }\r\n                if (alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\r\n                if (context && /^<\\//.test(textAfter))\r\n                    context = context.prev;\r\n                while (context && !context.startOfLine)\r\n                    context = context.prev;\r\n                if (context) return context.indent + indentUnit;\r\n                else return 0;\r\n            },\r\n\r\n            electricChars: \"/\",\r\n            blockCommentStart: \"<!--\",\r\n            blockCommentEnd: \"-->\",\r\n\r\n            configuration: parserConfig.htmlMode ? \"html\" : \"xml\",\r\n            helperType: parserConfig.htmlMode ? \"html\" : \"xml\"\r\n        };\r\n    });\r\n\r\n    CodeMirror.defineMIME(\"text/xml\", \"xml\");\r\n    CodeMirror.defineMIME(\"application/xml\", \"xml\");\r\n    if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\r\n        CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\r\n\r\n    CodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\r\n\r\n        var htmlFound = CodeMirror.modes.hasOwnProperty(\"xml\");\r\n        var htmlMode = CodeMirror.getMode(cmCfg, htmlFound ? {name: \"xml\", htmlMode: true} : \"text/plain\");\r\n        var aliases = {\r\n            html: \"htmlmixed\",\r\n            js: \"javascript\",\r\n            json: \"application/json\",\r\n            c: \"text/x-csrc\",\r\n            \"c++\": \"text/x-c++src\",\r\n            java: \"text/x-java\",\r\n            csharp: \"text/x-csharp\",\r\n            \"c#\": \"text/x-csharp\",\r\n            scala: \"text/x-scala\"\r\n        };\r\n\r\n        var getMode = (function () {\r\n            var i, modes = {}, mimes = {}, mime;\r\n\r\n            var list = [];\r\n            for (var m in CodeMirror.modes)\r\n                if (CodeMirror.modes.propertyIsEnumerable(m)) list.push(m);\r\n            for (i = 0; i < list.length; i++) {\r\n                modes[list[i]] = list[i];\r\n            }\r\n            var mimesList = [];\r\n            for (var m in CodeMirror.mimeModes)\r\n                if (CodeMirror.mimeModes.propertyIsEnumerable(m))\r\n                    mimesList.push({mime: m, mode: CodeMirror.mimeModes[m]});\r\n            for (i = 0; i < mimesList.length; i++) {\r\n                mime = mimesList[i].mime;\r\n                mimes[mime] = mimesList[i].mime;\r\n            }\r\n\r\n            for (var a in aliases) {\r\n                if (aliases[a] in modes || aliases[a] in mimes)\r\n                    modes[a] = aliases[a];\r\n            }\r\n\r\n            return function (lang) {\r\n                return modes[lang] ? CodeMirror.getMode(cmCfg, modes[lang]) : null;\r\n            };\r\n        }());\r\n\r\n        // Should underscores in words open/close em/strong?\r\n        if (modeCfg.underscoresBreakWords === undefined)\r\n            modeCfg.underscoresBreakWords = true;\r\n\r\n        // Turn on fenced code blocks? (\"```\" to start/end)\r\n        if (modeCfg.fencedCodeBlocks === undefined) modeCfg.fencedCodeBlocks = false;\r\n\r\n        // Turn on task lists? (\"- [ ] \" and \"- [x] \")\r\n        if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\r\n\r\n        var codeDepth = 0;\r\n\r\n        var header   = 'header'\r\n            ,   code     = 'comment'\r\n            ,   quote1   = 'atom'\r\n            ,   quote2   = 'number'\r\n            ,   list1    = 'variable-2'\r\n            ,   list2    = 'variable-3'\r\n            ,   list3    = 'keyword'\r\n            ,   hr       = 'hr'\r\n            ,   image    = 'tag'\r\n            ,   linkinline = 'link'\r\n            ,   linkemail = 'link'\r\n            ,   linktext = 'link'\r\n            ,   linkhref = 'string'\r\n            ,   em       = 'em'\r\n            ,   strong   = 'strong'\r\n            ,   strike   = 'strike';\r\n\r\n        var hrRE = /^([*\\-=_])(?:\\s*\\1){4,}\\s*$/\r\n            ,   ulRE = /^[*\\-+]\\s+/\r\n            ,   olRE = /^[0-9]+\\.\\s+/\r\n            ,   taskListRE = /^\\[(x| )\\](?=\\s)/ // Must follow ulRE or olRE\r\n            ,   headerRE = /^(?:\\={1,}|-{1,})$/\r\n            ,   textRE = /^[^!\\[\\]*_~\\\\<>` \"'(]+/;\r\n\r\n        function switchInline(stream, state, f) {\r\n            state.f = state.inline = f;\r\n            return f(stream, state);\r\n        }\r\n\r\n        function switchBlock(stream, state, f) {\r\n            state.f = state.block = f;\r\n            return f(stream, state);\r\n        }\r\n\r\n\r\n        // Blocks\r\n\r\n        function blankLine(state) {\r\n            // Reset linkTitle state\r\n            state.linkTitle = false;\r\n            // Reset EM state\r\n            state.em = false;\r\n            // Reset STRONG state\r\n            state.strong = false;\r\n            // Reset STRIKE state\r\n            state.strike = false;\r\n\r\n            // Reset state.quote\r\n            state.quote = 0;\r\n            if (!htmlFound && state.f == htmlBlock) {\r\n                state.f = inlineNormal;\r\n                state.block = blockNormal;\r\n            }\r\n            // Reset state.trailingSpace\r\n            state.trailingSpace = 0;\r\n            state.trailingSpaceNewLine = false;\r\n            // Mark this line as blank\r\n            state.thisLineHasContent = false;\r\n            return null;\r\n        }\r\n\r\n        function blockNormal(stream, state) {\r\n\r\n            var prevLineIsList = (state.list !== false);\r\n            if (state.list !== false && state.indentationDiff >= 0) { // Continued list\r\n                if (state.indentationDiff < 4) { // Only adjust indentation if *not* a code block\r\n                    state.indentation -= state.indentationDiff;\r\n                }\r\n                state.list = null;\r\n            } else if (state.list !== false && state.indentation > 0) {\r\n                state.list = null;\r\n                state.listDepth = Math.floor(state.indentation / 4);\r\n            } else if (state.list !== false) { // No longer a list\r\n                state.list = false;\r\n                state.listDepth = 0;\r\n            }\r\n\r\n            if (state.indentationDiff >= 4) {\r\n                state.indentation -= 4;\r\n                stream.skipToEnd();\r\n                return code;\r\n            } else if (stream.eatSpace()) {\r\n                return null;\r\n            } else if (stream.peek() === '#' || (state.prevLineHasContent && stream.match(headerRE)) ) {\r\n                state.header = true;\r\n            } else if (stream.eat('>')) {\r\n                state.indentation++;\r\n                state.quote = 1;\r\n                stream.eatSpace();\r\n                while (stream.eat('>')) {\r\n                    stream.eatSpace();\r\n                    state.quote++;\r\n                }\r\n            } else if (stream.peek() === '[') {\r\n                return switchInline(stream, state, footnoteLink);\r\n            } else if (stream.match(hrRE, true)) {\r\n                return hr;\r\n            } else if ((!state.prevLineHasContent || prevLineIsList) && (stream.match(ulRE, true) || stream.match(olRE, true))) {\r\n                state.indentation += 4;\r\n                state.list = true;\r\n                state.listDepth++;\r\n                if (modeCfg.taskLists && stream.match(taskListRE, false)) {\r\n                    state.taskList = true;\r\n                }\r\n            } else if (modeCfg.fencedCodeBlocks && stream.match(/^```([\\w+#]*)/, true)) {\r\n                // try switching mode\r\n                state.localMode = getMode(RegExp.$1);\r\n                if (state.localMode) state.localState = state.localMode.startState();\r\n                switchBlock(stream, state, local);\r\n                return code;\r\n            }\r\n\r\n            return switchInline(stream, state, state.inline);\r\n        }\r\n\r\n        function htmlBlock(stream, state) {\r\n            var style = htmlMode.token(stream, state.htmlState);\r\n            if (htmlFound && style === 'tag' && state.htmlState.type !== 'openTag' && !state.htmlState.context) {\r\n                state.f = inlineNormal;\r\n                state.block = blockNormal;\r\n            }\r\n            if (state.md_inside && stream.current().indexOf(\">\")!=-1) {\r\n                state.f = inlineNormal;\r\n                state.block = blockNormal;\r\n                state.htmlState.context = undefined;\r\n            }\r\n            return style;\r\n        }\r\n\r\n        function local(stream, state) {\r\n            if (stream.sol() && stream.match(/^```/, true)) {\r\n                state.localMode = state.localState = null;\r\n                state.f = inlineNormal;\r\n                state.block = blockNormal;\r\n                return code;\r\n            } else if (state.localMode) {\r\n                return state.localMode.token(stream, state.localState);\r\n            } else {\r\n                stream.skipToEnd();\r\n                return code;\r\n            }\r\n        }\r\n\r\n        // Inline\r\n        function getType(state) {\r\n            var styles = [];\r\n\r\n            if (state.taskOpen) { return \"meta\"; }\r\n            if (state.taskClosed) { return \"property\"; }\r\n\r\n            if (state.strong) { styles.push(strong); }\r\n            if (state.strike) { styles.push(strike); }\r\n            if (state.em) { styles.push(em); }\r\n\r\n            if (state.linkText) { styles.push(linktext); }\r\n\r\n            if (state.code) { styles.push(code); }\r\n\r\n            if (state.header) { styles.push(header); }\r\n            if (state.quote) { styles.push(state.quote % 2 ? quote1 : quote2); }\r\n            if (state.list !== false) {\r\n                var listMod = (state.listDepth - 1) % 3;\r\n                if (!listMod) {\r\n                    styles.push(list1);\r\n                } else if (listMod === 1) {\r\n                    styles.push(list2);\r\n                } else {\r\n                    styles.push(list3);\r\n                }\r\n            }\r\n\r\n            if (state.trailingSpaceNewLine) {\r\n                styles.push(\"trailing-space-new-line\");\r\n            } else if (state.trailingSpace) {\r\n                styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\r\n            }\r\n\r\n            return styles.length ? styles.join(' ') : null;\r\n        }\r\n\r\n        function handleText(stream, state) {\r\n            if (stream.match(textRE, true)) {\r\n                return getType(state);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function inlineNormal(stream, state) {\r\n            var style = state.text(stream, state);\r\n            if (typeof style !== 'undefined')\r\n                return style;\r\n\r\n            if (state.list) { // List marker (*, +, -, 1., etc)\r\n                state.list = null;\r\n                return getType(state);\r\n            }\r\n\r\n            if (state.taskList) {\r\n                var taskOpen = stream.match(taskListRE, true)[1] !== \"x\";\r\n                if (taskOpen) state.taskOpen = true;\r\n                else state.taskClosed = true;\r\n                state.taskList = false;\r\n                return getType(state);\r\n            }\r\n\r\n            state.taskOpen = false;\r\n            state.taskClosed = false;\r\n\r\n            var ch = stream.next();\r\n\r\n            if (ch === '\\\\') {\r\n                stream.next();\r\n                return getType(state);\r\n            }\r\n\r\n            // Matches link titles present on next line\r\n            if (state.linkTitle) {\r\n                state.linkTitle = false;\r\n                var matchCh = ch;\r\n                if (ch === '(') {\r\n                    matchCh = ')';\r\n                }\r\n                matchCh = (matchCh+'').replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\r\n                var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\r\n                if (stream.match(new RegExp(regex), true)) {\r\n                    return linkhref;\r\n                }\r\n            }\r\n\r\n            // If this block is changed, it may need to be updated in GFM mode\r\n            if (ch === '`') {\r\n                var t = getType(state);\r\n                var before = stream.pos;\r\n                stream.eatWhile('`');\r\n                var difference = 1 + stream.pos - before;\r\n                if (!state.code) {\r\n                    codeDepth = difference;\r\n                    state.code = true;\r\n                    return getType(state);\r\n                } else {\r\n                    if (difference === codeDepth) { // Must be exact\r\n                        state.code = false;\r\n                        return t;\r\n                    }\r\n                    return getType(state);\r\n                }\r\n            } else if (state.code) {\r\n                return getType(state);\r\n            }\r\n\r\n            if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\r\n                stream.match(/\\[[^\\]]*\\]/);\r\n                state.inline = state.f = linkHref;\r\n                return image;\r\n            }\r\n\r\n            if (ch === '[' && stream.match(/.*\\](\\(| ?\\[)/, false)) {\r\n                state.linkText = true;\r\n                return getType(state);\r\n            }\r\n\r\n            if (ch === ']' && state.linkText) {\r\n                var type = getType(state);\r\n                state.linkText = false;\r\n                state.inline = state.f = linkHref;\r\n                return type;\r\n            }\r\n\r\n            if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\r\n                return switchInline(stream, state, inlineElement(linkinline, '>'));\r\n            }\r\n\r\n            if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\r\n                return switchInline(stream, state, inlineElement(linkemail, '>'));\r\n            }\r\n\r\n            if (ch === '<' && stream.match(/^\\w/, false)) {\r\n                if (stream.string.indexOf(\">\")!=-1) {\r\n                    var atts = stream.string.substring(1,stream.string.indexOf(\">\"));\r\n                    if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) {\r\n                        state.md_inside = true;\r\n                    }\r\n                }\r\n                stream.backUp(1);\r\n                return switchBlock(stream, state, htmlBlock);\r\n            }\r\n\r\n            if (ch === '<' && stream.match(/^\\/\\w*?>/)) {\r\n                state.md_inside = false;\r\n                return \"tag\";\r\n            }\r\n\r\n            var ignoreUnderscore = false;\r\n            if (!modeCfg.underscoresBreakWords) {\r\n                if (ch === '_' && stream.peek() !== '_' && stream.match(/(\\w)/, false)) {\r\n                    var prevPos = stream.pos - 2;\r\n                    if (prevPos >= 0) {\r\n                        var prevCh = stream.string.charAt(prevPos);\r\n                        if (prevCh !== '_' && prevCh.match(/(\\w)/, false)) {\r\n                            ignoreUnderscore = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var t = getType(state);\r\n            if (ch === '*' || (ch === '_' && !ignoreUnderscore)) {\r\n                if (state.strong === ch && stream.eat(ch) && stream.peek(ch)) { // Remove STRONG\r\n                    state.strong = false;\r\n                    return t;\r\n                } else if (!state.strong && stream.eat(ch) && stream.peek(ch)) { // Add STRONG\r\n                    state.strong = ch;\r\n                    return getType(state);\r\n                } else if (state.em === ch) { // Remove EM\r\n                    state.em = false;\r\n                    return t;\r\n                } else if (!state.em) { // Add EM\r\n                    state.em = ch;\r\n                    return getType(state);\r\n                }\r\n            } else if (ch === '~'){\r\n                if (state.strike === ch && stream.eat(ch)) { // Remove SRTIKE\r\n                    state.strike = false;\r\n                    return t;\r\n                } else if (!state.strike && stream.eat(ch)) { // Add STRIKE\r\n                    state.strike = ch;\r\n                    return getType(state);\r\n                }\r\n            } else if (ch === ' ') {\r\n                if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\r\n                    if (stream.peek() === ' ') { // Surrounded by spaces, ignore\r\n                        return getType(state);\r\n                    } else { // Not surrounded by spaces, back up pointer\r\n                        stream.backUp(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (ch === ' ') {\r\n                if (stream.match(/ +$/, false)) {\r\n                    state.trailingSpace++;\r\n                } else if (state.trailingSpace) {\r\n                    state.trailingSpaceNewLine = true;\r\n                }\r\n            }\r\n\r\n            return getType(state);\r\n        }\r\n\r\n        function linkHref(stream, state) {\r\n            // Check if space, and return NULL if so (to avoid marking the space)\r\n            if(stream.eatSpace()){\r\n                return null;\r\n            }\r\n            var ch = stream.next();\r\n            if (ch === '(' || ch === '[') {\r\n                return switchInline(stream, state, inlineElement(linkhref, ch === '(' ? ')' : ']'));\r\n            }\r\n            return 'error';\r\n        }\r\n\r\n        function footnoteLink(stream, state) {\r\n            if (stream.match(/^[^\\]]*\\]:/, true)) {\r\n                state.f = footnoteUrl;\r\n                return linktext;\r\n            }\r\n            return switchInline(stream, state, inlineNormal);\r\n        }\r\n\r\n        function footnoteUrl(stream, state) {\r\n            // Check if space, and return NULL if so (to avoid marking the space)\r\n            if(stream.eatSpace()){\r\n                return null;\r\n            }\r\n            // Match URL\r\n            stream.match(/^[^\\s]+/, true);\r\n            // Check for link title\r\n            if (stream.peek() === undefined) { // End of line, set flag to check next line\r\n                state.linkTitle = true;\r\n            } else { // More content on line, check if link title\r\n                stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\r\n            }\r\n            state.f = state.inline = inlineNormal;\r\n            return linkhref;\r\n        }\r\n\r\n        var savedInlineRE = [];\r\n        function inlineRE(endChar) {\r\n            if (!savedInlineRE[endChar]) {\r\n                // Escape endChar for RegExp (taken from http://stackoverflow.com/a/494122/526741)\r\n                endChar = (endChar+'').replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\r\n                // Match any non-endChar, escaped character, as well as the closing\r\n                // endChar.\r\n                savedInlineRE[endChar] = new RegExp('^(?:[^\\\\\\\\]|\\\\\\\\.)*?(' + endChar + ')');\r\n            }\r\n            return savedInlineRE[endChar];\r\n        }\r\n\r\n        function inlineElement(type, endChar, next) {\r\n            next = next || inlineNormal;\r\n            return function(stream, state) {\r\n                stream.match(inlineRE(endChar));\r\n                state.inline = state.f = next;\r\n                return type;\r\n            };\r\n        }\r\n\r\n        return {\r\n            startState: function() {\r\n                return {\r\n                    f: blockNormal,\r\n\r\n                    prevLineHasContent: false,\r\n                    thisLineHasContent: false,\r\n\r\n                    block: blockNormal,\r\n                    htmlState: CodeMirror.startState(htmlMode),\r\n                    indentation: 0,\r\n\r\n                    inline: inlineNormal,\r\n                    text: handleText,\r\n\r\n                    linkText: false,\r\n                    linkTitle: false,\r\n                    em: false,\r\n                    strong: false,\r\n                    strike: false,\r\n                    header: false,\r\n                    taskList: false,\r\n                    list: false,\r\n                    listDepth: 0,\r\n                    quote: 0,\r\n                    trailingSpace: 0,\r\n                    trailingSpaceNewLine: false\r\n                };\r\n            },\r\n\r\n            copyState: function(s) {\r\n                return {\r\n                    f: s.f,\r\n\r\n                    prevLineHasContent: s.prevLineHasContent,\r\n                    thisLineHasContent: s.thisLineHasContent,\r\n\r\n                    block: s.block,\r\n                    htmlState: CodeMirror.copyState(htmlMode, s.htmlState),\r\n                    indentation: s.indentation,\r\n\r\n                    localMode: s.localMode,\r\n                    localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\r\n\r\n                    inline: s.inline,\r\n                    text: s.text,\r\n                    linkTitle: s.linkTitle,\r\n                    em: s.em,\r\n                    strong: s.strong,\r\n                    strike: s.strike,\r\n                    header: s.header,\r\n                    taskList: s.taskList,\r\n                    list: s.list,\r\n                    listDepth: s.listDepth,\r\n                    quote: s.quote,\r\n                    trailingSpace: s.trailingSpace,\r\n                    trailingSpaceNewLine: s.trailingSpaceNewLine,\r\n                    md_inside: s.md_inside\r\n                };\r\n            },\r\n\r\n            token: function(stream, state) {\r\n                if (stream.sol()) {\r\n                    if (stream.match(/^\\s*$/, true)) {\r\n                        state.prevLineHasContent = false;\r\n                        return blankLine(state);\r\n                    } else {\r\n                        state.prevLineHasContent = state.thisLineHasContent;\r\n                        state.thisLineHasContent = true;\r\n                    }\r\n\r\n                    // Reset state.header\r\n                    state.header = false;\r\n\r\n                    // Reset state.taskList\r\n                    state.taskList = false;\r\n\r\n                    // Reset state.code\r\n                    state.code = false;\r\n\r\n                    // Reset state.trailingSpace\r\n                    state.trailingSpace = 0;\r\n                    state.trailingSpaceNewLine = false;\r\n\r\n                    state.f = state.block;\r\n                    var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, '    ').length;\r\n                    var difference = Math.floor((indentation - state.indentation) / 4) * 4;\r\n                    if (difference > 4) difference = 4;\r\n                    var adjustedIndentation = state.indentation + difference;\r\n                    state.indentationDiff = adjustedIndentation - state.indentation;\r\n                    state.indentation = adjustedIndentation;\r\n                    if (indentation > 0) return null;\r\n                }\r\n                return state.f(stream, state);\r\n            },\r\n\r\n            blankLine: blankLine,\r\n\r\n            getType: getType\r\n        };\r\n\r\n    }, \"xml\");\r\n\r\n    CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\r\n\r\n\r\n    var isMac = /Mac/.test(navigator.platform);\r\n\r\n    var shortcuts = {\r\n        'Cmd-Alt-1': toggleHeadline,\r\n        'Cmd-Alt-2': toggleHeading,\r\n        'Cmd-B': toggleBold,\r\n        'Cmd-I': toggleItalic,\r\n        'Cmd-K': drawLink,\r\n        'Cmd-Alt-I': drawImage,\r\n        \"Cmd-'\": toggleBlockquote,\r\n        \"Cmd-,\": drawCode,\r\n        'Cmd-Alt-L': toggleOrderedList,\r\n        'Cmd-L': toggleUnOrderedList,\r\n        'Cmd-Z': undo,\r\n        'Cmd-Shift-Z': redo\r\n    };\r\n\r\n\r\n    /**\r\n     * Fix shortcut. Mac use Command, others use Ctrl.\r\n     */\r\n    function fixShortcut(name) {\r\n        if (isMac) {\r\n            name = name.replace('Ctrl', 'Cmd');\r\n        } else {\r\n            name = name.replace('Cmd', 'Ctrl');\r\n        }\r\n        return name;\r\n    }\r\n\r\n\r\n    /**\r\n     * Create icon element for toolbar.\r\n     */\r\n    function createIcon(name, options) {\r\n        options = options || {};\r\n        var el = document.createElement('a');\r\n\r\n        var shortcut = options.shortcut || shortcuts[name];\r\n        if (shortcut) {\r\n            shortcut = fixShortcut(shortcut);\r\n            el.title = shortcut;\r\n            el.title = el.title.replace('Cmd', '⌘');\r\n            if (isMac) {\r\n                el.title = el.title.replace('Alt', '⌥');\r\n            }\r\n        }\r\n\r\n        el.className = options.className || 'icon-' + name;\r\n        return el;\r\n    }\r\n\r\n    function createSep() {\r\n        var el = document.createElement('i');\r\n        el.className = 'separator';\r\n        el.innerHTML = '|';\r\n        return el;\r\n    }\r\n\r\n\r\n    /**\r\n     * The state of CodeMirror at the given position.\r\n     */\r\n    function getState(cm, pos) {\r\n        pos = pos || cm.getCursor('start');\r\n        var stat = cm.getTokenAt(pos);\r\n        if (!stat.type) return {};\r\n\r\n        var types = stat.type.split(' ');\r\n\r\n        var ret = {}, data, text;\r\n        for (var i = 0; i < types.length; i++) {\r\n            data = types[i];\r\n            if (data === 'strong') {\r\n                ret.bold = true;\r\n            } else if (data === 'variable-2') {\r\n                text = cm.getLine(pos.line);\r\n                if (/^\\s*\\d+\\.\\s/.test(text)) {\r\n                    ret['list-ol'] = true;\r\n                } else {\r\n                    ret['list-ul'] = true;\r\n                }\r\n            } else if (data === 'atom') {\r\n                ret.quote = true;\r\n            } else if (data === 'em') {\r\n                ret.italic = true;\r\n            } else if (data === 'header') {\r\n                text = cm.getLine(pos.line);\r\n                if (/^\\s*\\##\\s/.test(text)) {\r\n                    ret['heading'] = true;\r\n                }else {\r\n                    ret['headline'] = true;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n\r\n    /**\r\n     * Toggle full screen of the editor.\r\n     */\r\n    function toggleFullScreen(editor) {\r\n        var el = editor.codemirror.getWrapperElement();\r\n\r\n        // https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode\r\n        var doc = document;\r\n        var isFull = doc.fullScreen || doc.mozFullScreen || doc.webkitFullScreen;\r\n        var request = function() {\r\n            if (el.requestFullScreen) {\r\n                el.requestFullScreen();\r\n            } else if (el.mozRequestFullScreen) {\r\n                el.mozRequestFullScreen();\r\n            } else if (el.webkitRequestFullScreen) {\r\n                el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\r\n            }\r\n        };\r\n        var cancel = function() {\r\n            if (doc.cancelFullScreen) {\r\n                doc.cancelFullScreen();\r\n            } else if (doc.mozCancelFullScreen) {\r\n                doc.mozCancelFullScreen();\r\n            } else if (doc.webkitCancelFullScreen) {\r\n                doc.webkitCancelFullScreen();\r\n            }\r\n        };\r\n        if (!isFull) {\r\n            request();\r\n        } else if (cancel) {\r\n            cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Action for toggling heading.\r\n     */\r\n    function toggleHeadline(editor) {\r\n        var cm = editor.codemirror;\r\n        _toggleLine(cm, 'headline');\r\n    }\r\n\r\n    function toggleHeading(editor) {\r\n        var cm = editor.codemirror;\r\n        _toggleLine(cm, 'heading');\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for toggling bold.\r\n     */\r\n    function toggleBold(editor) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n\r\n        var text;\r\n        var start = '**';\r\n        var end = '**';\r\n\r\n        var startPoint = cm.getCursor('start');\r\n        var endPoint = cm.getCursor('end');\r\n        if (stat.bold) {\r\n            text = cm.getLine(startPoint.line);\r\n            start = text.slice(0, startPoint.ch);\r\n            end = text.slice(startPoint.ch);\r\n\r\n            start = start.replace(/^(.*)?(\\*|\\_){2}(\\S+.*)?$/, '$1$3');\r\n            end = end.replace(/^(.*\\S+)?(\\*|\\_){2}(\\s+.*)?$/, '$1$3');\r\n            startPoint.ch -= 2;\r\n            endPoint.ch -= 2;\r\n            cm.setLine(startPoint.line, start + end);\r\n        } else {\r\n            text = cm.getSelection();\r\n            cm.replaceSelection(start + text + end);\r\n\r\n            startPoint.ch += 2;\r\n            endPoint.ch += 2;\r\n        }\r\n        cm.setSelection(startPoint, endPoint);\r\n        cm.focus();\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for toggling italic.\r\n     */\r\n    function toggleItalic(editor) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n\r\n        var text;\r\n        var start = '_';\r\n        var end = '_';\r\n\r\n        var startPoint = cm.getCursor('start');\r\n        var endPoint = cm.getCursor('end');\r\n        if (stat.italic) {\r\n            text = cm.getLine(startPoint.line);\r\n            start = text.slice(0, startPoint.ch);\r\n            end = text.slice(startPoint.ch);\r\n\r\n            start = start.replace(/^(._)?(\\*|\\_)(\\S+._)?$/, '$1$3');\r\n            end = end.replace(/^(._\\S+)?(\\*|\\_)(\\s+._)?$/, '$1$3');\r\n            startPoint.ch -= 1;\r\n            endPoint.ch -= 1;\r\n            cm.setLine(startPoint.line, start + end);\r\n        } else {\r\n            text = cm.getSelection();\r\n            cm.replaceSelection(start + text + end);\r\n\r\n            startPoint.ch += 1;\r\n            endPoint.ch += 1;\r\n        }\r\n        cm.setSelection(startPoint, endPoint);\r\n        cm.focus();\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for toggling blockquote.\r\n     */\r\n    function toggleBlockquote(editor) {\r\n        var cm = editor.codemirror;\r\n        _toggleLine(cm, 'quote');\r\n    }\r\n\r\n    function drawCode(editor) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n        _replaceSelection(cm, stat.code, '\\n\\n```\\n ', '在这里书写代码片  \\n```\\n\\n');\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for toggling ul.\r\n     */\r\n    function toggleUnOrderedList(editor) {\r\n        var cm = editor.codemirror;\r\n        _toggleLine(cm, 'list-ul');\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for toggling ol.\r\n     */\r\n    function toggleOrderedList(editor) {\r\n        var cm = editor.codemirror;\r\n        _toggleLine(cm, 'list-ol');\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for drawing a link.\r\n     */\r\n    function drawLink(editor) {\r\n        $('.cm_dialog').fadeIn(300);\r\n        $('.cm_add_link').slideDown(300);\r\n        $('.cm_add_img').slideUp(300);\r\n    }\r\n    function cmDrawLink(editor, prefix_str) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n        var cm_link_txt = $('#'+prefix_str+'cm_link_txt').val();\r\n        var cm_link_url = $('#'+prefix_str+'cm_link_url').val();\r\n        var cm_link_tit = $('#'+prefix_str+'cm_link_tit').val();\r\n        if(cm_link_txt!=\"\" || cm_link_url!=\"\" || cm_link_tit!=\"\"){\r\n           _replaceSelection(cm, stat.link, '[',cm_link_txt +']('+cm_link_url+' \"'+cm_link_tit+'\")');\r\n        }\r\n        $('.cm_add_link').slideUp(300);\r\n        $('.cm_dialog').fadeOut(300);\r\n    }\r\n\r\n\r\n    /**\r\n     * Action for drawing an img.\r\n     */\r\n    function drawImage(editor) {\r\n        $('.cm_dialog').fadeIn(300);\r\n        $('.cm_add_link').slideUp(300);\r\n        $('.cm_add_img').slideDown(300);\r\n    }\r\n    function cmDrawImage(editor, prefix_str) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n        var cm_img_url = $('#'+prefix_str+'cm_img_url').val();\r\n        var cm_img_alt = $('#'+prefix_str+'cm_img_alt').val();\r\n        if(cm_img_url!=\"\" || cm_img_alt!=\"\"){\r\n            _replaceSelection(cm, stat.image, '![', cm_img_alt+']('+cm_img_url+')');\r\n        }\r\n        $('.cm_add_img').slideUp(300);\r\n        $('.cm_dialog').fadeOut(300);\r\n    }\r\n\r\n    function cmDrawImageUp(editor, url) {\r\n        var cm = editor.codemirror;\r\n        var stat = getState(cm);\r\n        _replaceSelection(cm, stat.image, '![', '图片说明]('+ url +')');\r\n        $('.cm_add_img').slideUp(300);\r\n        $('.cm_dialog').fadeOut(300);\r\n    }\r\n\r\n    window.cmDrawLink = cmDrawLink;\r\n    window.cmDrawImage = cmDrawImage;\r\n    window.cmDrawImageUp = cmDrawImageUp;\r\n\r\n    /**\r\n     * Undo action.\r\n     */\r\n    function undo(editor) {\r\n        var cm = editor.codemirror;\r\n        cm.undo();\r\n        cm.focus();\r\n    }\r\n\r\n\r\n    /**\r\n     * Redo action.\r\n     */\r\n    function redo(editor) {\r\n        var cm = editor.codemirror;\r\n        cm.redo();\r\n        cm.focus();\r\n    }\r\n\r\n    /**\r\n     * Preview action.\r\n     */\r\n    function togglePreview(editor) {\r\n        var toolbar = editor.toolbar.preview;\r\n        var parse = editor.constructor.markdown;\r\n        var cm = editor.codemirror;\r\n        var wrapper = cm.getWrapperElement();\r\n        var preview = wrapper.lastChild;\r\n        if (!/editor-preview/.test(preview.className)) {\r\n            preview = document.createElement('div');\r\n            preview.className = 'editor-preview';\r\n            wrapper.appendChild(preview);\r\n        }\r\n        if (/editor-preview-active/.test(preview.className)) {\r\n            preview.className = preview.className.replace(\r\n                /\\s*editor-preview-active\\s*/g, ''\r\n            );\r\n            toolbar.className = toolbar.className.replace(/\\s*active\\s*/g, '');\r\n        } else {\r\n            /* When the preview button is clicked for the first time,\r\n             * give some time for the transition from editor.css to fire and the view to slide from right to left,\r\n             * instead of just appearing.\r\n             */\r\n            setTimeout(function() {preview.className += ' editor-preview-active'}, 1);\r\n            toolbar.className += ' active';\r\n        }\r\n        var text = cm.getValue();\r\n        preview.innerHTML = parse(text);\r\n    }\r\n\r\n    function _replaceSelection(cm, active, start, end) {\r\n        var text;\r\n        var startPoint = cm.getCursor('start');\r\n        var endPoint = cm.getCursor('end');\r\n        if (active) {\r\n            text = cm.getLine(startPoint.line);\r\n            start = text.slice(0, startPoint.ch);\r\n            end = text.slice(startPoint.ch);\r\n            cm.setLine(startPoint.line, start + end);\r\n        } else {\r\n            text = cm.getSelection();\r\n            cm.replaceSelection(start + text + end);\r\n\r\n            startPoint.ch += start.length;\r\n            endPoint.ch += start.length;\r\n        }\r\n        cm.setSelection(startPoint, endPoint);\r\n        cm.focus();\r\n    }\r\n\r\n\r\n    function _toggleLine(cm, name) {\r\n        var stat = getState(cm);\r\n        var startPoint = cm.getCursor('start');\r\n        var endPoint = cm.getCursor('end');\r\n        var repl = {\r\n            headline: /^(\\s*)\\#\\s+/,\r\n            heading: /^(\\s*)\\##\\s+/,\r\n            quote: /^(\\s*)\\>\\s+/,\r\n            'list-ul': /^(\\s*)(\\*|\\-|\\+)\\s+/,\r\n            'list-ol': /^(\\s*)\\d+\\.\\s+/\r\n        };\r\n        var map = {\r\n            headline: '# ',\r\n            heading: '## ',\r\n            quote: '> ',\r\n            'list-ul': '* ',\r\n            'list-ol': '1. '\r\n        };\r\n        for (var i = startPoint.line; i <= endPoint.line; i++) {\r\n            (function(i) {\r\n                var text = cm.getLine(i);\r\n                if (stat[name]) {\r\n                    text = text.replace(repl[name], '$1');\r\n                } else {\r\n                    text = map[name] + text;\r\n                }\r\n                cm.setLine(i, text);\r\n            })(i);\r\n        }\r\n        cm.focus();\r\n    }\r\n\r\n\r\n    /* The right word count in respect for CJK. */\r\n    function wordCount(data) {\r\n        var pattern = /[a-zA-Z0-9_\\u0392-\\u03c9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\r\n        var m = data.match(pattern);\r\n        var count = 0;\r\n        if( m === null ) return count;\r\n        for (var i = 0; i < m.length; i++) {\r\n            if (m[i].charCodeAt(0) >= 0x4E00) {\r\n                count += m[i].length;\r\n            } else {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    var toolbar = [\r\n        '|',\r\n        {name: 'headline', action: toggleHeadline,title:'标题一（Ctrl+Alt+1）'},\r\n        {name: 'heading', action: toggleHeading,title:'标题二（Ctrl+Alt+2）'},\r\n        {name: 'bold', action: toggleBold,title:'粗体（Ctrl+B）'},\r\n        {name: 'italic', action: toggleItalic,title:'斜体（Ctrl+I）'},\r\n        '|',\r\n\r\n        {name: 'quote-left', action: toggleBlockquote,title:'引用（Ctrl+’）'},\r\n        {name: 'code', action: drawCode,title:'插入代码片（Ctrl+,）'},\r\n        {name: 'list-ul', action: toggleUnOrderedList,title:'无序列表（Ctrl+L）'},\r\n        {name: 'list-ol', action: toggleOrderedList,title:'有序列表（Ctrl+Alt+L）'},\r\n        '|',\r\n\r\n        {name: 'link', title:'添加链接（Ctrl+K）'},    //action: drawLink,\r\n        {name: 'picture', title:'添加图片（Ctrl+Alt+I）'},   //action: drawImage,\r\n        '|',\r\n\r\n        {name: 'reply', action: undo,title:'撤退（Ctrl+Z）'},\r\n        {name: 'share-alt', action: redo,title:'前进（Ctrl+Shift+Z）'},\r\n        '|',\r\n        {name: 'info', action: 'http://ask.csdn.net/pages/markdown',title:'markdown语法参考'},\r\n        {name: 'preview', action: togglePreview,title:'预览'},\r\n        //{name: 'fullscreen', action: toggleFullScreen},\r\n        '|'\r\n    ];\r\n\r\n    /**\r\n     * Interface of Editor.\r\n     */\r\n    function Editor(options) {\r\n        options = options || {};\r\n\r\n        if (options.element) {\r\n            this.element = options.element;\r\n        }\r\n\r\n        options.toolbar = options.toolbar || Editor.toolbar;\r\n        // you can customize toolbar with object\r\n        // [{name: 'bold', shortcut: 'Ctrl-B', className: 'icon-bold'}]\r\n\r\n        if (!options.hasOwnProperty('status')) {\r\n            options.status = ['lines', 'words', 'cursor'];\r\n        }\r\n\r\n        this.options = options;\r\n\r\n        // If user has passed an element, it should auto rendered\r\n        if (this.element) {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default toolbar elements.\r\n     */\r\n    Editor.toolbar = toolbar;\r\n\r\n    /**\r\n     * Default markdown render.\r\n     */\r\n    Editor.markdown = function(text) {\r\n        if (window.marked) {\r\n            // use marked as markdown parser\r\n            return marked(text);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Render editor to the given element.\r\n     */\r\n    Editor.prototype.render = function(el) {\r\n        if (!el) {\r\n            el = this.element || document.getElementsByTagName('textarea')[0];\r\n        }\r\n\r\n        if (this._rendered && this._rendered === el) {\r\n            // Already rendered.\r\n            return;\r\n        }\r\n\r\n        this.element = el;\r\n        var options = this.options;\r\n\r\n        var self = this;\r\n        var keyMaps = {};\r\n\r\n        for (var key in shortcuts) {\r\n            (function(key) {\r\n                keyMaps[fixShortcut(key)] = function(cm) {\r\n                    shortcuts[key](self);\r\n                };\r\n            })(key);\r\n        }\r\n\r\n        keyMaps[\"Enter\"] = \"newlineAndIndentContinueMarkdownList\";\r\n        keyMaps['Tab'] = 'tabAndIndentContinueMarkdownList';\r\n        keyMaps['Shift-Tab'] = 'shiftTabAndIndentContinueMarkdownList';\r\n\r\n        this.codemirror = CodeMirror.fromTextArea(el, {\r\n            mode: 'markdown',\r\n            theme: 'paper',\r\n            tabSize: '2',\r\n            indentWithTabs: true,\r\n            lineNumbers: false,\r\n            autofocus: true,\r\n            extraKeys: keyMaps\r\n        });\r\n\r\n        if (options.toolbar !== false) {\r\n            this.createToolbar();\r\n        }\r\n        if (options.status !== false) {\r\n            this.createStatusbar();\r\n        }\r\n\r\n        this._rendered = this.element;\r\n    };\r\n\r\n    Editor.prototype.createToolbar = function(items) {\r\n        items = items || this.options.toolbar;\r\n\r\n        if (!items || items.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var bar = document.createElement('div');\r\n        bar.className = 'editor-toolbar';\r\n\r\n        var self = this;\r\n\r\n        var el;\r\n        self.toolbar = {};\r\n\r\n        for (var i = 0; i < items.length; i++) {\r\n            (function(item) {\r\n                var el;\r\n                if (item.name) {\r\n                    el = createIcon(item.name, item);\r\n                } else if (item === '|') {\r\n                    el = createSep();\r\n                } else {\r\n                    el = createIcon(item);\r\n                }\r\n\r\n                // bind events, special for info\r\n                if (item.action) {\r\n                    if (typeof item.action === 'function') {\r\n                        el.onclick = function(e) {\r\n                            item.action(self);\r\n                        };\r\n                    } else if (typeof item.action === 'string') {\r\n                        el.href = item.action;\r\n                        el.target = '_blank';\r\n                    }\r\n                }\r\n                if(item.title){\r\n                    el.title = item.title;\r\n                }\r\n                self.toolbar[item.name || item] = el;\r\n                bar.appendChild(el);\r\n            })(items[i]);\r\n        }\r\n\r\n        var cm = this.codemirror;\r\n        cm.on('cursorActivity', function() {\r\n            var stat = getState(cm);\r\n\r\n            for (var key in self.toolbar) {\r\n                (function(key) {\r\n                    var el = self.toolbar[key];\r\n                    if (stat[key]) {\r\n                        el.className += ' active';\r\n                    } else {\r\n                        el.className = el.className.replace(/\\s*active\\s*/g, '');\r\n                    }\r\n                })(key);\r\n            }\r\n        });\r\n\r\n        var cmWrapper = cm.getWrapperElement();\r\n        cmWrapper.parentNode.insertBefore(bar, cmWrapper);\r\n        return bar;\r\n    };\r\n\r\n    Editor.prototype.createStatusbar = function(status) {\r\n        status = status || this.options.status;\r\n\r\n        if (!status || status.length === 0) return;\r\n\r\n        var bar = document.createElement('div');\r\n        bar.className = 'editor-statusbar';\r\n\r\n        var pos, cm = this.codemirror;\r\n        for (var i = 0; i < status.length; i++) {\r\n            (function(name) {\r\n                var el = document.createElement('span');\r\n                el.className = name;\r\n                if (name === 'words') {\r\n                    el.innerHTML = '0';\r\n                    cm.on('update', function() {\r\n                        el.innerHTML = wordCount(cm.getValue());\r\n                    });\r\n                } else if (name === 'lines') {\r\n                    el.innerHTML = '0';\r\n                    cm.on('update', function() {\r\n                        el.innerHTML = cm.lineCount();\r\n                    });\r\n                } else if (name === 'cursor') {\r\n                    el.innerHTML = '0:0';\r\n                    cm.on('cursorActivity', function() {\r\n                        pos = cm.getCursor();\r\n                        el.innerHTML = pos.line + ':' + pos.ch;\r\n                    });\r\n                }\r\n                bar.appendChild(el);\r\n            })(status[i]);\r\n        }\r\n        var cmWrapper = this.codemirror.getWrapperElement();\r\n        cmWrapper.parentNode.insertBefore(bar, cmWrapper.nextSibling);\r\n        return bar;\r\n    };\r\n\r\n    /**\r\n     * Get or set the text content.\r\n     */\r\n    Editor.prototype.value = function(val) {\r\n        if (val) {\r\n            this.codemirror.getDoc().setValue(val);\r\n            return this;\r\n        } else {\r\n            return this.codemirror.getValue();\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Bind static methods for exports.\r\n     */\r\n    Editor.toggleHeadline = toggleHeadline;\r\n    Editor.toggleHeading = toggleHeading;\r\n    Editor.toggleBold = toggleBold;\r\n    Editor.toggleItalic = toggleItalic;\r\n    Editor.toggleBlockquote = toggleBlockquote;\r\n    Editor.drawCode = drawCode;\r\n    Editor.toggleUnOrderedList = toggleUnOrderedList;\r\n    Editor.toggleOrderedList = toggleOrderedList;\r\n    Editor.drawLink = drawLink;\r\n    Editor.drawImage = drawImage;\r\n    Editor.undo = undo;\r\n    Editor.redo = redo;\r\n    Editor.togglePreview = togglePreview;\r\n    Editor.toggleFullScreen = toggleFullScreen;\r\n\r\n    /**\r\n     * Bind instance methods for exports.\r\n     */\r\n    Editor.prototype.toggleHeadline = function() {\r\n        toggleHeadline(this);\r\n    };\r\n    Editor.prototype.toggleHeading = function() {\r\n        toggleHeading(this);\r\n    };\r\n    Editor.prototype.toggleBold = function() {\r\n        toggleBold(this);\r\n    };\r\n    Editor.prototype.toggleItalic = function() {\r\n        toggleItalic(this);\r\n    };\r\n    Editor.prototype.toggleBlockquote = function() {\r\n        toggleBlockquote(this);\r\n    };\r\n    Editor.prototype.drawCode = function() {\r\n        drawCode(this);\r\n    };\r\n    Editor.prototype.toggleUnOrderedList = function() {\r\n        toggleUnOrderedList(this);\r\n    };\r\n    Editor.prototype.toggleOrderedList = function() {\r\n        toggleOrderedList(this);\r\n    };\r\n    Editor.prototype.drawLink = function() {\r\n        drawLink(this);\r\n    };\r\n    Editor.prototype.drawImage = function() {\r\n        drawImage(this);\r\n    };\r\n    Editor.prototype.undo = function() {\r\n        undo(this);\r\n    };\r\n    Editor.prototype.redo = function() {\r\n        redo(this);\r\n    };\r\n    Editor.prototype.togglePreview = function() {\r\n        togglePreview(this);\r\n    };\r\n    Editor.prototype.toggleFullScreen = function() {\r\n        toggleFullScreen(this);\r\n    };\r\n\r\n    global.Editor = Editor;\r\n})(this);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 74639
        },
        "cache": {},
        "timings": {
          "blocked": 3.45099996775389,
          "dns": -1,
          "connect": -1,
          "send": 0.04499987699091035,
          "wait": 3984.725000103935,
          "receive": 37821.14799995907,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.917Z",
        "time": 10798.992000054568,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/js/libs/prettify.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 10:35:24 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b16c-8\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8,
            "mimeType": "application/javascript",
            "text": "//marked"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 189
        },
        "cache": {},
        "timings": {
          "blocked": 3.40600009076297,
          "dns": -1,
          "connect": -1,
          "send": 0.0389998313039599,
          "wait": 4247.536000097173,
          "receive": 6548.011000035328,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.917Z",
        "time": 35355.005000019446,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/js/apps/ask_float_block.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Thu, 22 Dec 2016 09:37:50 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"585b9eee-e143\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 57667,
            "mimeType": "application/javascript",
            "text": "var editor_change_ask_o_domain = \"\";\r\nfunction editor_change_ask_o(str){\r\n    var editor = $( document ).data('editor_all');\r\n    //editor.render(document.getElementById('editor_all'));\r\n    window.cmDrawImageUp(editor, str);\r\n\r\n    if (editor_change_ask_o_domain != \"\") {\r\n        document.domain = editor_change_ask_o_domain;\r\n        editor_change_ask_o_domain = \"\";\r\n    }\r\n}\r\n(function(){\r\n    $(function(){\r\n        var prot = window.location.protocol;\r\n        var afont = prot + \"//ask.csdn.net/assets/ask_float_fonts_css-6b30a53970eb5c3a2a045e3df585b475.css\";//该样式文件名称要根据每次发布后的动态名称来修改。//font-awesome.min-58872ef19fd8eb4c71bc6667c200b0c0.css\";\r\n        $('body').append('<link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"' + afont + '\">');\r\n\r\n        var first_pop_str=\"<div class='pop_edit ask_first comm_ask_first' style='display: none;'><h3>提问</h3><a href='#' nodetype='close' class='close'>×</a>\"+\r\n            \" <div class='context'>\"+\r\n            \" <form id='form' nodetype='form-popup' class='form'>\"+\r\n            \"<div class='askFirst_desc'><span class='afd_p'>CSDN 问答是一个真诚、认真、有活力的技术社区。</span><br><span class='afd_p'>我们很愿意帮助您，希望您提出的每一个问题都能得到解答，同时也希望您知道，一个好的问题</span><br><span\"+\r\n            \" class='afd_p'>更容易得到好的答案<span>&nbsp;&nbsp;</span><a href='//ask.csdn.net/help?#rule12' target='_blank'>怎样提出一个好的问题？</a></span><br>\"+\r\n            \"<span class='afd_p'>提问时应遵循认真、简洁、明确、规范的原则</span><br><span\"+\r\n            \" class='afd_p'>• 首先确定您是否需要使用悬赏提问；</span><br><span class='afd_p'>• 问题中没必要出现“大神帮帮忙”、“教授救救我”之类与技术问题无关的信息，及时采纳最佳答案就是对回答人的最好认可；</span><br><span\"+\r\n            \" class='afd_p'>• 问题标题要有明确而有价值的信息，“有人遇到过这种情况吗？帮忙进来看看”这种标题只会降低您的问题被回答的概率；</span><br><span\"+\r\n            \" class='afd_p'>• “求代码”类的问题请您悬赏提问，我们乐于将其看成一种交易。</span><br><br><span\"+\r\n            \" class='afd_p'>问答频道并不欢迎这种问题</span><br><span\"+\r\n            \" class='afd_p'>• 和已有问题完全重复的问题，为避免重复，提问前请先进行搜索；</span><br><span class='afd_p'>• 招聘 / 求职、交易 / 合作、寻人 / 征友；</span><br><span\"+\r\n            \" class='afd_p'>• 无明确答案的调查类问题。如苹果和谷歌，大家更欣赏谁？</span><br><span class='afd_p'>想学会更好的提问，请查看<span>&nbsp;</span><a\"+\r\n            \" href='//ask.csdn.net/help' target='_blank'>问答频道提问规范</a></span></div>\"+\r\n            \"<div class='askFirst_se'><span>提问前请搜索</span></div>\"+\r\n            \"<div class='search_div'><input id='askInput' type='text' placeholder='输入问题，查看是否存在相似的问题'></div></form> </div>\"+\r\n            \" <div class='success'></div></div>\";\r\n        var second_pop_str=\"<div class='pop_edit ask_second comm_ask_second'><h3>提问</h3><span class='ask_float_span'>您的问题将会被发布在“<a class='ask_float_channel' href='//ask.csdn.net' target='_blank' style='cursor:pointer'>技术问答</a>”频道</span><a href='#' nodeType='close' class='close'>×</a><div class='context'><div class='err_div'><span class='err_ico'></span>\"+\r\n            \"<span class='err_txt'>该问题已存在，请勿重复提问</span></div>\"+\r\n            \"<div class='input_div'><input id='askInputSecond' type='text' style='font-size:14px;' placeholder='问题标题'/></div>\"+\r\n            \"<div class='cm_box'><div class='cm_dialog'></div> <div class='pop_cm cm_add_link'><input type='text' placeholder='链接内容' id='af_cm_link_txt'><input type='text' placeholder='链接地址' id='af_cm_link_url'><input type='text' placeholder='链接提示' id='af_cm_link_tit'><div class='text-right'><span class='btn btn-default btn-sm' id='add_link_btn'>插入链接</span> </div> </div>\"+\r\n            \"<div class='pop_cm cm_add_img'><div class='nav-tabs'><a class='img_tab active' href='#tab_upload'>本地上传</a><a class='img_tab' href='#tab_weburl'>网络图片</a></div><div class='tab_panel active' id='tab_upload'><div class='set_img'><iframe src='http://ask.csdn.net/upload.html'></iframe></div></div><div class='tab_panel' id='tab_weburl'><input type='text' placeholder='图片地址' id='af_cm_img_url'><input type='text' placeholder='图片说明' id='af_cm_img_alt'><div class='text-right'><span class='btn btn-default btn-sm' id='add_img_btn'>插入图片</span> </div></div> </div></div> \"+\r\n            \"<textarea id='editor_all' rows='8'></textarea>\"+\r\n            \"<div class='div_tags clearfix'><div id='divSearchTags' class='tags_con'>\"+\r\n            \"<input type='text'/></div><input type='hidden' name='txtSearchTags'/></div>\"+\r\n            \"<div id='ask2_tagRecomm_div' class='drt_tagRecomm tracking-ad' data-mod='popu_73'><span class='drt_tit'>推荐标签：</span></div></div>\"+\r\n            \"<div class='success'><div class='left_area'><input id='chk_cb' type='checkbox'/><span class='wyxs'>我要悬赏</span><input id='cb_num'  class='cb_num' readonly='true'/>\"+\r\n            \"<span class='phib_rii'><span> 币</span></span></div><a href='#' nodeType='cancel' class='cancel'>取消</a><a href='#' nodeType='ok' class='ok'>发布</a></div></div>\";\r\n\r\n        //该值是返回顶部到上面的距离，大约在%55处\r\n        var back_top_value =Math.ceil(document.documentElement.clientHeight *0.55);\r\n        //现在我们开始加入二维码功能，然后把提问改为app下载\r\n        if(window.quickReplyflag) {\r\n            //注释的部分是以前提问的，这个时候其实后续的很多与这个按钮相关的代码没用了，就是那些弹出的提问框，先不删除吧。\r\n            /* var float_ask_img=\"<div data-mod='popu_64' class='tracking-ad' chg-blk='0' ><a id='com-ask-float-block'  title='提问按钮' style='top:\"+(back_top_value-82)+\"px'></a>\"+\r\n             \"<a id='com-quick-reply'  title='快速回复' style='top:\"+(back_top_value-41)+\"px'></a><a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a> </div>\";*/\r\n            /*var float_ask_img=\"<div data-mod='popu_64' class='tracking-ad' chg-blk='0' ><a id='com-appcode-float-block' href='http://www.csdn.net/app/' target='_blank' title='APP二维码' style='top:\"+(back_top_value-160)+\"px'><span id='appcode-close'></span></a><a id='com-app-float-block' href='http://www.csdn.net/app/' title='APP下载' style='top:\"+(back_top_value-76)+\"px'></a>\"+\r\n                \"<a id='com-quick-reply'  title='快速回复' style='top:\"+(back_top_value-38)+\"px'></a><a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a> </div>\";*/\r\n            var float_ask_img=\"<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' ><a id='com-quick-reply'  title='快速回复' style='top:\"+(back_top_value-76)+\"px'></a><a id='com-quick-collect'  title='我要收藏' style='top:\"+(back_top_value-38)+\"px'></a><a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a> </div>\";\r\n        } else if (window.eduCallCenter) {\r\n            var float_ask_img=\"<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >\" +\r\n                /*\"<a id='com-appcode-float-block' href='http://edu.csdn.net/app/' target='_blank' title='APP二维码' style='display:none;top:\"+(back_top_value-135)+\"px; background: url(http://edu.csdn.net/images/weix.png) no-repeat top left;background-size:100% auto; '><span id='appcode-close' style=''></span></a> <a id='com-app-float-block'  title='APP下载' style='top:\"+(back_top_value-76)+\"px'></a>\"+\r\n*/                \"<a id='com-edu-call-center'  title='学院客服' style='top:\"+(back_top_value-38)+\"px' target='_blank' href='http://wpa.qq.com/msgrd?v=3&amp;uin=3390397209&amp;site=qq&amp;menu=yes'></a>\"+\r\n                \"<a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a></div>\";\r\n        } else if (window.bbsInfoflag) { \r\n            var float_ask_img=\"<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >\"+\r\n                \"<a id='com-quick-reply-bbs' title='快速回复' style='top:\"+(back_top_value-152)+\"px'></a>\" +\r\n                \"<a id='com-quick-collect-bbs' title='我要收藏' style='top:\"+(back_top_value-114)+\"px'></a>\" +\r\n                \"<a id='com-back-channel' title='回到频道' style='top:\"+(back_top_value-76)+\"px'></a>\" +\r\n                \"<a id='com-back-home' title='回到首页' style='top:\"+(back_top_value-38)+\"px'></a>\" +\r\n                \"<a id='com-d-top-a' style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a> </div>\";\r\n        }\r\n        //再次重新加入ask供商务项目那边使用20150610 \r\n        else if (window.askForBussenessFlag) {\r\n            var float_ask_img=\"<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >\"+\r\n                 \"<a id='com-ask-float-block'  style='top:\"+(back_top_value-38)+\"px' title='我要提问' onclick='' ></a>\"+\r\n                \"<a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a></div>\";\r\n        }\r\n        else {\r\n            var float_ask_img=\"<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >\"+\r\n                \"<a id='com-d-top-a'  style='top:\"+back_top_value+\"px' title='返回顶部' onclick='' ></a></div>\";\r\n        }\r\n\r\n        //搜索建议的HTML\r\n        var common_ask_div_sc=\"<div id=\\\"common_ask_div_sc\\\" class=\\\"searchContainer\\\"><div class=\\\"sTitle\\\">可能存在类似的问题：</div><div class=\\\"sFooter\\\"><a class=\\\"sFirstNewAsk\\\">我想提一个新问题</a></div></div>\"\r\n        var total_ask_str=float_ask_img+second_pop_str+common_ask_div_sc;//float_ask_img+first_pop_str+second_pop_str+common_ask_div_sc\r\n        $(\"body\").append(total_ask_str);\r\n\r\n        //点击关闭二维码\r\n\r\n        $(\"#com-appcode-float-block #appcode-close\").click(function(){\r\n            $(\"#com-appcode-float-block\").hide('slow');\r\n\t\t\treturn false;\r\n            //$(\"#com-appcode-float-block\").remove();\r\n\r\n        })\r\n\r\n        //学院APP下载\r\n\r\n        $(\"#com-app-float-block\").click(function(){\r\n            if (window.eduCallCenter){\r\n                $(\"#com-appcode-float-block\").show();\r\n            }\r\n        });\r\n\r\n        $( 'body').bind( 'click', function ( evt ) {\r\n            $target = $( evt.target );\r\n            if ( $target.attr( 'id') == 'add_img_btn' )\r\n            {\r\n                cmDrawImage(editor, \"af_\");\r\n                return false;\r\n            }else if( $target.attr( 'class') == 'img_tab' ){\r\n                $target.addClass('active').siblings('.img_tab').removeClass('active');\r\n                var _target = $target.attr('href');\r\n                $(_target).addClass('active').siblings('.tab_panel').removeClass('active');\r\n            }else if( $target.attr( 'id') == 'add_link_btn' ) {\r\n                cmDrawLink(editor, \"af_\");\r\n                return false;\r\n            }else if( $target.attr( 'class') == 'cm_dialog'){\r\n                $('.pop_cm').hide(300);\r\n                $('.cm_dialog').hide();\r\n                if (editor_change_ask_o_domain != \"\") {\r\n                    document.domain = editor_change_ask_o_domain;\r\n                    editor_change_ask_o_domain = \"\";\r\n                }\r\n            }else if ($target.hasClass('icon-link')){     //icon-link\r\n                var $ft = $target.parents()[1];\r\n                //var $ft = $tb.parents()[0];\r\n                $(\".cm_dialog\", $ft).fadeIn(300);\r\n                $(\".cm_add_link\", $ft).slideDown(300);\r\n                $(\".cm_add_img\", $ft).slideUp(300);\r\n\r\n            }else if ($target.hasClass('icon-picture')){     //icon-link\r\n                var $ft = $target.parents()[1];\r\n                //var $ft = $tb.parents()[0];\r\n                $(\".cm_dialog\", $ft).fadeIn(300);\r\n                $(\".cm_add_link\", $ft).slideUp(300);\r\n                $(\".cm_add_img\", $ft).slideDown(300);\r\n                editor_change_ask_o_domain = document.domain;\r\n                document.domain = \"csdn.net\";\r\n            }\r\n        } )\r\n\r\n        //判断是不是有快速回复，返回顶部start\r\n        $(\"#com-quick-reply\").click(function(){\r\n            if($(\"#comment_content\").length>0){\r\n                setEditorFocus();\r\n            }\r\n            else{\r\n                window.location.href = \"https://passport.csdn.net/\";\r\n            }\r\n        });\r\n        //判断是不是有我要收藏，返回顶部start\r\n        $(\"#com-quick-collect\").click(function(){\r\n          if($(\"#comment_content\").length>0){\r\n            if($('body').find('.pop_CA').length>0){\r\n              $('#fa').attr('src', fasrc);\r\n              $('.pop_CA').show();\r\n              $('.pop_CA_cover').show();\r\n            }else{\r\n              console.log('No popups!');\r\n            }\r\n          }\r\n          else{\r\n            window.location.href = \"https://passport.csdn.net/\";\r\n          }\r\n        });\r\n\r\n\r\n        var d_top = $('#com-d-top-a');\r\n\r\n        $(document).scroll(function(){\r\n            var scrTop = (document.body.scrollTop || document.documentElement.scrollTop);\r\n            if (scrTop > 500)\r\n            {\r\n                d_top.show();\r\n            } else\r\n            {\r\n                d_top.hide();\r\n            }\r\n\r\n        })\r\n        $('#com-d-top-a').click(function ()\r\n        {\r\n            scrollTo(0, 0);\r\n            this.blur();\r\n            return false;\r\n        });\r\n        //判断是不是有快速回复，返回顶部end\r\n\r\n        var coin_flag=false;\r\n        //var prot = window.location.protocol;\r\n        //判断是否首次点击提问按钮\r\n        var check_accept_rules_url = prot + \"//ask.csdn.net/users/check_accept_rules.js\";\r\n        //提问时，标题录入框的自动完成\r\n        var ask_topic_autocomplete_url = prot + \"//ask.csdn.net/questions/autocomplete.js\";\r\n        //提问时，光标离开标题后的推荐标签\r\n        // var ask_topic_tag_suggest_url = \" http://ask.csdn.net/questions/tag_autocomplete.js\";\r\n        var ask_topic_tag_suggest_proxy = prot + \"//internalapi.csdn.net/proxy.html\";\r\n        var ask_topic_tag_suggest_url = prot + \"//internalapi.csdn.net/myapi/ask_topic/ask_topic_tag_suggest\";//?x-acl-token=Yz3GAP4stGOIrLaIrnDed-uThp8K\";\r\n        //提问时，发布问题的地址\r\n        var create_question_proxy = prot + \"//ask.csdn.net/proxy.html\";\r\n        var create_question_url = prot + \"//ask.csdn.net/questions/create_question.json\";\r\n        //验证C币\r\n        var valid_coin=   prot + \"//ask.csdn.net/users/get_scores.js\";\r\n        //问题链接跳转\r\n        var ask_detail_url =  prot + \"//ask.csdn.net/questions/\";\r\n        var ajaxProxyCaches = {};\r\n\r\n        var isSubmitting = false;\r\n\r\n\r\n        var editor = new Editor();\r\n        $( document ).data( 'editor_all', editor );\r\n        editor.render(document.getElementById('editor_all'));\r\n\r\n        function ajaxProxy(proxyUrl, opts) {\r\n            var c = ajaxProxyCaches[proxyUrl];\r\n            if (c === undefined) {\r\n                c = ajaxProxyCaches[proxyUrl] = [];\r\n                var func = arguments.callee;\r\n                $('<iframe class=\"poxy_uc\" src=\"' + proxyUrl + '\" style=\"display:none\">').load(function () {\r\n                    c.contentWindow = this.contentWindow;\r\n                    func(proxyUrl, opts);\r\n                }).prependTo('body');\r\n            } else if (c.contentWindow === undefined) {\r\n                c.push(opts);\r\n            } else {\r\n                do {\r\n                    c.contentWindow.jQuery.ajax(opts);\r\n                } while (opts = c.shift());\r\n            }\r\n        }\r\n\r\n        //json = {status:false, error:1, msg: '请先登录'}\r\n        //json = {status:false, error:2, msg: '您已被CSDN问答禁言'}\r\n        //json = {status:false, error:3, msg: '您已被封号'}\r\n        //json = {status:true, error:0, msg: '您已经登录'}\r\n\r\n        //是否首次点击提问\r\n        $(\"#com-ask-float-block\").bind('click', function(){\r\n            //$('.editor-preview.editor-preview-active').removeClass('editor-preview-active');\r\n            //$('.icon-preview.active').removeClass('active');\r\n            //document.domain=\"csdn.net\";\r\n            //pop($(\"body > .ask_second\"));\r\n            //editor.codemirror.getValue = \"\";\r\n            $(\".ask_second\").remove();\r\n            $(\"body\").append(second_pop_str);\r\n            editor = new Editor();\r\n            $( document ).data( 'editor_all', editor );\r\n            editor.render(document.getElementById('editor_all'));\r\n\r\n\r\n            $(\"#askInputSecond\").focus();//\r\n            $(\".CodeMirror\").removeClass(\"CodeMirror-focused\");\r\n            $(\".comm_ask_second .CodeMirror textarea\").blur();\r\n            //$(\".CodeMirror-code, .CodeMirror-measure\").html(\"\");\r\n            $.ajax({\r\n                type: \"get\",\r\n                url: check_accept_rules_url, //\"http://ask.csdn.net/users/check_accept_rules\",//判断是否登录，\r\n                dataType: \"jsonp\",\r\n                jsonp: \"callback\",\r\n                success: function(obj) {\r\n\r\n                    if (obj.error == 0) {\r\n                        pop($(\"body > .ask_second\"));\r\n\r\n                        $(\".CodeMirror\").removeClass(\"CodeMirror-focused\");\r\n                    } else if (obj.error == 1) {\r\n                        window.location.href = \"https://passport.csdn.net/\";\r\n                    } else {\r\n                        alert(obj.msg);\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    var i = 0;\r\n                }\r\n            });\r\n\r\n        });\r\n\r\n        function pop($popup){\r\n            //遮罩\r\n            var w = $( document ).width();\r\n            var h = $( document ).height();\r\n            var $marker = $( '<div class=\"marker\"></div>' );\r\n            if ( $.browser && $.browser.msie) {\r\n                w = w - 18;\r\n            }\r\n\r\n            $marker.css( {\r\n                opacity: 0.5,\r\n                width: w + 'px',\r\n                height: h + 'px'\r\n            } );\r\n\r\n            $( 'body' ).append( $marker );\r\n            //位置及弹出\r\n\r\n            //var top = $( window ).height() / 2 + $( window ).scrollTop();\r\n            //var top =document.documentElement.clientHeight / 2 + $( window ).scrollTop();\r\n\r\n            /*$popup.css( {\r\n             top: top + 'px',\r\n             left:\"50%\"\r\n\r\n             } );*/\r\n\r\n            setTimeout( function () {\r\n                $popup.show();\r\n                $popup.css( {\r\n                    opacity: 1\r\n                } );\r\n                $(\".CodeMirror\").removeClass(\"CodeMirror-focused\");\r\n            }, 200 );\r\n            //初始化基本的事件绑定等\r\n            //取消事件绑定\r\n\r\n            var $cancel=$popup.find( '[nodetype=\"cancel\"]' );\r\n            var $close = $popup.find( '[nodetype=\"close\"]' );\r\n            $cancel.add($close).unbind( 'click' );\r\n            $cancel.add($close).bind( 'click', function () {\r\n                $(\"#common_ask_div_sc\").css(\"display\",\"none\");\r\n                $popup.css( {\r\n                    opacity: 0\r\n                } );\r\n                var $btn_sub = $popup.find( '[nodetype=\"ok\"]' );\r\n                $btn_sub.css(\"background-color\", \"#be0000\");\r\n                isSubmitting = false;\r\n                setTimeout( function () {\r\n                    $popup.hide();\r\n                }, 350 );\r\n                $( '.marker' ).remove();\r\n                return false;\r\n            } );\r\n            //提交事件绑定，需要判断是不是第二个弹窗\r\n\r\n            if($popup.hasClass(\"ask_first\")){\r\n\r\n                //绑定自动搜索\r\n                AskSearch({ $inputBox: $(\".comm_ask_first #askInput\"),\r\n                    $container: $(\"body > #common_ask_div_sc\"),\r\n                    searchUrl: ask_topic_autocomplete_url, //\"http://192.168.6.227:9403/ask_topic/autocomplete\", //搜索的Url\r\n                    isFirst: true\r\n\r\n                })\r\n            }\r\n\r\n            else{\r\n                //还远重设值\r\n                $(\".err_div\").css(\"display\", \"none\");\r\n                $(\" .comm_ask_second #askInputSecond\").val(\"\");\r\n                $(\" .comm_ask_second #wmd-input\").val(\"\");\r\n                $(\" .comm_ask_second span.tag\").remove();\r\n                //$(\" .comm_ask_second  #ask2_tagRecomm_div label\").remove();\r\n                $(\" .comm_ask_second  #ask2_tagRecomm_div a\").remove();\r\n                $(\".comm_ask_second #chk_cb\").attr(\"checked\",false);\r\n                $(\".comm_ask_second #cb_num\").attr(\"readonly\",true);\r\n                $(\" .comm_ask_second #cb_num\").val(\"\");\r\n                $(\" .comm_ask_second #wmd-preview\").empty();\r\n                $(\" .comm_ask_second [name='txtSearchTags']\").val(\"\");\r\n                /*$(\" .comm_ask_second #wmd-preview\").css(\"display\",\"none\");\r\n                 $(\" .comm_ask_second #wmd-input\").css(\"display\",\"block\");*/\r\n\r\n\r\n                //给标签加上foucs效果\r\n                $(\" .comm_ask_second #divSearchTags input\").focus(function(){\r\n                    $(\" .comm_ask_second #divSearchTags\").addClass('focus');\r\n                }).blur(function(){\r\n                    $(\" .comm_ask_second #divSearchTags\").removeClass('focus');\r\n                })\r\n                //悬赏的开启\r\n                $(\".comm_ask_second #chk_cb\").click(function(){\r\n                    if ($(\".comm_ask_second #chk_cb\")[0].checked) {\r\n                        $(\".comm_ask_second #cb_num\").attr(\"readonly\",false)\r\n\r\n                    }\r\n                    else{\r\n                        $(\".comm_ask_second #cb_num\").attr(\"readonly\",true);\r\n                        $(\".comm_ask_second #cb_num\").val(\"\");\r\n                        coin_flag = false;\r\n                    }\r\n                })\r\n                var $submit = $popup.find( '[nodetype=\"ok\"]' );\r\n                $submit.unbind('click');\r\n                $submit.bind( 'click', function () {\r\n                    var _this = this;\r\n                    if (isSubmitting) return;\r\n                    isSubmitting = true;\r\n                    $(this).css(\"background-color\", \"#999\");\r\n                    // data = _this.getBackData();需要自行序列化值\r\n                    var _title = $(\".comm_ask_second #askInputSecond\").val();\r\n                    var _content = editor.codemirror.getValue();\r\n                    /* if (_content) {\r\n                     _content = _content.replace(/\\<br\\>/g, \"\\n\");\r\n                     _content = _content.replace(/\\<p\\>/g, \"\");\r\n                     _content = _content.replace(/\\<\\/p\\>/g, \"\");\r\n                     }*/\r\n                    var _tagList = $(\".comm_ask_second [name='txtSearchTags']\").val();\r\n                    var _fromType = window.location.hostname;//\"read_index\";\r\n\r\n                    var _isreward = $(\" .comm_ask_second #chk_cb\")[0].checked;\r\n\r\n                    var _coin = $(\" .comm_ask_second #cb_num\").val();\r\n\r\n                    //验证\r\n                    $(\".err_div\").css(\"display\", \"none\");\r\n                    if (!valid($(\" .comm_ask_second #askInputSecond\"),_title,\"问题标题\",10,50)){\r\n\r\n                        return false;\r\n                    }\r\n\r\n\r\n                    if( !valid($(\" .comm_ask_second #wmd-input\"),_content,\"问题描述\",30,10000)){\r\n                        return false;\r\n                    };\r\n                    if( !valid( $(\" .comm_ask_second #divSearchTags\"),_tagList.split(','),\"问题标签\",1,5)){\r\n                        $(\" .comm_ask_second #divSearchTags\").addClass('focus');\r\n                        return false;\r\n                    };\r\n\r\n                    //那个C币那个如果勾选了才验证是不是数字,还需验证C币的值够不够\r\n                    var _cbNum = $(\".comm_ask_second #cb_num\").val();\r\n                    if ($(\".comm_ask_second #chk_cb\")[0].checked) {\r\n                        if (!/^[1-9]\\d*$/.test(_cbNum)) {\r\n                            $(\".err_div\").css(\"display\", \"block\");\r\n                            $(\".err_txt\").text(\"我要悬赏只能录入数字！\");\r\n                            $(\".comm_ask_second #cb_num\").focus();\r\n\r\n                            $(_this).css(\"background-color\", \"#be0000\");\r\n                            isSubmitting = false;\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    function valid(fild,fild_value,name,minL,maxL){\r\n\r\n                        if((fild_value && fild_value[0] == \"\") || fild_value.length==0){\r\n                            mess = '请输入' + name;\r\n                            $(\".err_div\").css(\"display\", \"block\");\r\n                            $(\".err_txt\").text(mess);\r\n                            fild.focus();\r\n\r\n                            $(_this).css(\"background-color\", \"#be0000\");\r\n                            isSubmitting = false;\r\n\r\n                            return false;\r\n                        }\r\n                        if(fild_value.length<minL||fild_value.length>maxL){\r\n                            mess = '请输入长度为' +minL+\"-\"+maxL+\"的\"+name;\r\n\r\n                            $(\".err_txt\").text(mess);\r\n                            $(\".err_div\").css(\"display\", \"block\");\r\n                            fild.focus();\r\n\r\n                            $(_this).css(\"background-color\", \"#be0000\");\r\n                            isSubmitting = false;\r\n\r\n                            return false;\r\n                        }\r\n                        else{\r\n                            return true;\r\n                        }\r\n                    }\r\n                    //验证C币不够不许提交\r\n                    if(coin_flag){\r\n                        $(\".err_div\").css(\"display\", \"block\");\r\n                        $(_this).css(\"background-color\", \"#be0000\");\r\n                        isSubmitting = false;\r\n                        return false;\r\n                    }\r\n                    var tempDomain = document.domain;\r\n                    document.domain = 'csdn.net';\r\n                    //_fromType = \"\";\r\n                    //留意该接口请求类型,异步提交数据，在该次加入了验证的能力，\r\n                    //$.ajax({\r\n                    //\ttype: \"get\",\r\n                    ajaxProxy(create_question_proxy, {\r\n                        type: \"post\",\r\n                        data: {\r\n                            \"question[title]\": _title,\r\n                            \"question[body]\": _content,\r\n                            \"question[tag_list]\": _tagList,\r\n                            \"question[from_type]\": _fromType,\r\n                            \"question[is_reward]\": _isreward,\r\n                            \"question[coin]\": _coin\r\n                        },\r\n                        url: create_question_url,\r\n                        dataType: \"json\",\r\n                        //dataType: \"jsonp\",\r\n                        //jsonp: \"callback\",\r\n                        //async: false,\r\n                        success: function(obj) {\r\n                            document.domain = tempDomain;\r\n                            if (obj.status) {\r\n                                //跳转到新页面,关闭,重设这个值当前页面\r\n                                $(\".comm_ask_second\").css(\"display\",\"none\");\r\n                                $(_this).css(\"background-color\", \"#be0000\");\r\n                                isSubmitting = false;\r\n                                $( '.marker' ).remove();\r\n                                var href=\"//ask.csdn.net/questions/\"+obj.id;\r\n                                window.open(href, \"target=_blank,location=1\");\r\n                                alert(\"你的问题已发布到技术问答频道。\");\r\n                            } else {\r\n                                $(\".err_div\").css(\"display\", \"block\");\r\n                                $(\".err_txt\").text(obj.msg);\r\n                                $(_this).css(\"background-color\", \"#be0000\");\r\n                                isSubmitting = false;\r\n                            }\r\n                        },\r\n                        error: function(err) {\r\n                            document.domain = tempDomain;\r\n                            var i = 0;\r\n                        }\r\n                    });\r\n\r\n                    //需要调用关闭这个窗口\r\n                    return false;\r\n                } );\r\n                //绑定自动搜索\r\n                AskSearch({    $inputBox: $(\".comm_ask_second #askInputSecond\"),\r\n                    $container: $(\"body > #common_ask_div_sc\"),\r\n                    searchUrl: ask_topic_autocomplete_url, //\"http://192.168.6.227:9403/ask_topic/autocomplete\", //搜索的Url\r\n                    isFirst: false\r\n                });\r\n\r\n                $(\".comm_ask_second .CodeMirror textarea\").bind(\"focus\", function() {\r\n                    $(\".CodeMirror\").addClass(\"CodeMirror-focused\");\r\n                });\r\n\r\n                //动态去后台获取推荐标签start\r\n                $(\".comm_ask_second #askInputSecond\").bind(\"blur\", function(){\r\n                    var _title = $(\".comm_ask_second #askInputSecond\").val();\r\n                    var _content = editor.codemirror.getValue();//$(\".comm_ask_second #wmd-input\").val();\r\n                    /* if (_content) {\r\n                     _content = _content.replace(/\\<br\\>/g, \"\\n\");\r\n                     } else {\r\n                     _content = \"\";\r\n                     }*/\r\n                    setTimeout(function(){$(\"#div_sc\").css(\"display\", \"none\");},400);\r\n                    loadRecommTags( _title, _content);\r\n                });\r\n                $(\".comm_ask_second .CodeMirror textarea\").bind(\"blur\", function(){\r\n                    var _title = $(\".comm_ask_second #askInputSecond\").val();\r\n                    var _content = editor.codemirror.getValue();//$(\".comm_ask_second #wmd-input\").val();\r\n                    /*if (_content) {\r\n                     _content = _content.replace(/\\<br\\>/g, \"\\n\");\r\n                     } else {\r\n                     _content = \"\";\r\n                     }*/\r\n                    loadRecommTags( _title, _content);\r\n                });\r\n                //动态去后台获取推荐标签end\r\n                //异步后台验证C币足够？\r\n                $(\".comm_ask_second #cb_num\").bind(\"blur\",function(){\r\n\r\n                    if($(\".comm_ask_second #chk_cb\")[0].checked){\r\n                        $(\".err_div\").css(\"display\", \"none\");\r\n                        if (!/^[0-9]\\d*$/.test( $(\".comm_ask_second #cb_num\").val())) {\r\n                            $(\".err_div\").css(\"display\", \"block\");\r\n                            $(\".err_txt\").text(\"我要悬赏只能录入数字！\");\r\n                            $(\".comm_ask_second #cb_num\").focus();\r\n                            return false;\r\n                        }\r\n                        $.ajax({\r\n                            type: \"get\",\r\n                            url: valid_coin,\r\n                            dataType: \"jsonp\",\r\n                            jsonp: \"callback\",\r\n                            async: false,\r\n                            success: function(obj) {\r\n                                if (obj.error==0) {\r\n                                    //这个状态下表示拿到了C币\r\n                                    if( $(\".comm_ask_second #cb_num\").val()>obj.score){\r\n                                        $(\".err_div\").css(\"display\", \"block\");\r\n                                        $(\".err_txt\").text(\"您的C币余额不足\");\r\n                                        //验证不通过不许提交\r\n                                        coin_flag=true;\r\n                                    }\r\n                                    else{\r\n                                        coin_flag=false;\r\n                                    }\r\n                                } else {\r\n                                    $(\".err_div\").css(\"display\", \"block\");\r\n                                    $(\".err_txt\").text(obj.msg);\r\n                                    coin_flag=true;\r\n                                }\r\n                            },\r\n                            error: function(err) {\r\n                                // alert(\"后台出错了\");\r\n                            }\r\n                        });}\r\n\r\n                })\r\n                //提问的自动TAG,需要你自行粘贴那个JS文件\r\n                Creat_Dynamic_Tag(\".comm_ask_second #divSearchTags\", ask_topic_tag_suggest_url, \".comm_ask_second input[name='txtSearchTags']\");\r\n\r\n            }\r\n\r\n        }//close pop function\r\n\r\n        function ShowSecondPop() {\r\n            // askFirst.popup.closeFun();隐藏起来\r\n\r\n            $(\"body > .ask_first\").find( '[nodetype=\"close\"]' ).click();//隐藏起来第一个\r\n\r\n            pop($(\"body > .ask_second\"));\r\n        }\r\n\r\n        //自动搜索提示\r\n        function AskSearch(conf) {\r\n\r\n            $(\"body\").click(function(e){\r\n\r\n                var target=  e.target;\r\n\r\n                if($(target).closest(\"#common_ask_div_sc\").length<1){\r\n                    conf.$container.css(\"display\",\"none\");\r\n                }\r\n\r\n            })\r\n\r\n            var $inputBox = conf.$inputBox;\r\n            var $container = conf.$container;\r\n            var searchUrl = conf.searchUrl;\r\n            var isFirst = conf.isFirst;  //调用搜索的是首次弹出窗还是提问弹出窗\r\n            var nowItem = -1;\r\n            var userInput = \"\";\r\n            $container.css(\"display\", \"none\");\r\n            $inputBox.css(\"autocomplete\", \"off\");\r\n            $container.css(\"z-index\", \"1100\");\r\n\r\n            //$inputBox.unbind(\"keyup\");\r\n            $inputBox[0].onkeyup=function(ev) {//propertychange\r\n                var oEvent = ev||event;\r\n                if(oEvent.keyCode == 40 || oEvent.keyCode == 38 || oEvent.keyCode == 27 || (oEvent.keyCode >= 113 && oEvent.keyCode <= 123) ||\r\n                    oEvent.keyCode == 16 || oEvent.keyCode == 17 || oEvent.keyCode == 18 || oEvent.keyCode == 9 || oEvent.keyCode == 20){\r\n                    return;\r\n                }\r\n                $container.css(\"opacity\", 0);\r\n                var rect = this.getBoundingClientRect();\r\n                var scrTop = (document.body.scrollTop || document.documentElement.scrollTop);\r\n                $container.css(\"left\", rect.left);\r\n                $container.css(\"top\", rect.bottom + scrTop);//rect.top + rect.height\r\n                //$container.css(\"top\", rect.bottom);\r\n                var inVal = this.value;\r\n                if ( this.value.length > 0 ) {\r\n                    showHint(inVal,$container,$inputBox,isFirst);\r\n                } else {\r\n                    $container.css(\"display\", \"none\");\r\n                }\r\n                userInput = inVal;\r\n\r\n            };\r\n            //$inputBox.unbind(\"keydown\");\r\n            $inputBox[0].onkeydown=function(ev){\r\n                var evt = ev||event;\r\n                if (evt.keyCode == 27) {\r\n                    $container.css(\"display\", \"none\");\r\n                    $inputBox.val(userInput);\r\n                }\r\n                if (evt.keyCode == 13) {\r\n                    $container.css(\"display\", \"none\");\r\n                }\r\n                if (evt.keyCode == 40) {\r\n                    nowItem ++;\r\n                    var suggItems = $(\".sItem\", $container);\r\n                    var itemCnt = suggItems.length;\r\n                    if ( nowItem === itemCnt) {\r\n                        nowItem = -1;\r\n                    }\r\n                    suggItems.removeClass(\"sItemHover\");\r\n                    if (nowItem != -1) {\r\n                        var nowSugg = suggItems.eq(nowItem);\r\n                        nowSugg.addClass(\"sItemHover\");\r\n                        $inputBox.val($(\".sfirst\", nowSugg).text());\r\n                    } else {\r\n                        $inputBox.val(userInput);\r\n                    }\r\n                }\r\n                if (evt.keyCode == 38) {\r\n                    nowItem --;\r\n                    var suggItems = $(\".sItem\", $container);\r\n                    var itemCnt = suggItems.length;\r\n                    if (nowItem == -2) {\r\n                        nowItem = itemCnt - 1;\r\n                    }\r\n                    suggItems.removeClass(\"sItemHover\");\r\n                    if (nowItem != -1) {\r\n                        var nowSugg = suggItems.eq(nowItem);\r\n                        nowSugg.addClass(\"sItemHover\");\r\n                        $inputBox.val($(\".sfirst\", nowSugg).text());\r\n                    } else {\r\n                        $inputBox.val(userInput);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        //以下方法是AskSerch的原型方法拆解\r\n        function showHint(inVal,$container,$inputBox,isFirst) {\r\n            $container.css(\"display\", \"block\");\r\n            $.ajax( {\r\n                type: \"get\",\r\n                url: ask_topic_autocomplete_url, //\"http://192.168.6.210//mcs/problem_solving/10710/1\",\r\n                data: {query: inVal, fields:\"title,id,comments\"},\r\n                dataType: 'jsonp',\r\n                jsonp: \"callback\",\r\n                async: false,\r\n                success: function (obj) {\r\n                    if (obj != null && obj.contents) {\r\n                        fillSuggestData($container, obj.contents,$inputBox,isFirst);\r\n                    }\r\n                },\r\n                error: function(err){\r\n                    var i = 0;\r\n                    //alert('err');\r\n                }\r\n            } );\r\n        }\r\n\r\n        function fillSuggestData ($container, items,$inputBox,isFirst) {\r\n            if (isFirst) {\r\n                $container.html(\"<div class=\\\"sTitle\\\">可能存在类似的问题：</div><div class=\\\"sFooter\\\"><a class=\\\"sFirstNewAsk\\\">我想提一个新问题</a></div>\");\r\n            } else {\r\n                $container.html(\"<div class=\\\"sTitle\\\">可能存在类似的问题：</div>\");\r\n            }\r\n            var tpl = '<div class=\"sItem clearfix\"><a href=\"{2}\" target=\"_blank\"><span class=\"sfirst\">{0}</span><span class=\"ssecond\">{1}</span></a></div>';\r\n\r\n            if (items.length > 0) {\r\n                $container.css(\"opacity\", 1);\r\n                //$container.css(\"display\", \"none\");\r\n            }\r\n            for (var i = 0; i < items.length; i++){\r\n                var item = items[i];\r\n                var itemHtml = tpl.replace(/\\{0\\}/, item.title)\r\n                    .replace(/\\{1\\}/, item.comments + \"个回答\")\r\n                    .replace(/\\{2\\}/, ask_detail_url + item.id);\r\n\r\n                if (isFirst) {\r\n                    $(\".sFooter\", $container).before(itemHtml);\r\n                } else {\r\n                    $container.append(itemHtml);\r\n                }\r\n            }\r\n            if (isFirst) {\r\n                $(\"#common_ask_div_sc .sFirstNewAsk\").unbind(\"click\");\r\n                $(\"#common_ask_div_sc .sFirstNewAsk\").bind(\"click\", function(){\r\n                    ShowSecondPop();\r\n                });\r\n            }\r\n            $(\".sItem\", $container).each(function(i, item) {\r\n                    var _i = i;\r\n                    var _item = $(item);\r\n                    _item.bind(\"mouseover\", function() {\r\n                        $(\".sItem\", $container).removeClass(\"sItemHover\");\r\n                        $(this).addClass(\"sItemHover\");\r\n                        nowItem = _i;\r\n                    });\r\n                    _item.bind(\"click\", function() {\r\n                        //$inputBox.val($(\".sfirst\", $(this)).text());\r\n                        $container.css(\"display\",\"none\");\r\n                    });\r\n                }\r\n            );\r\n        }\r\n        //获取后台推荐标签\r\n        function  loadRecommTags( _title, _content){\r\n            if (_title == \"\" && _content==\"\") return;\r\n            var dataStr = JSON.stringify({title: _title, body: _content, size: 4});\r\n            //$.ajax({\r\n\r\n            var tempDomain = document.domain;\r\n            document.domain = 'csdn.net';\r\n            ajaxProxy(ask_topic_tag_suggest_proxy, {\r\n                headers: {\r\n                    'X-acl-token': 'Yz3GAP4stGOIrLaIrnDed-uThp8K'\r\n                },\r\n                type: \"POST\",\r\n                url: ask_topic_tag_suggest_url + \"?dataType=json\",\r\n                data: dataStr,//{title: _title, body: _content, size: 4},\r\n                contentType: \"application/json\",\r\n                dataType: \"json\",\r\n                //dataType: \"jsonp\",\r\n                //jsonp: \"callback\",\r\n                //contentType:'application/x-www-form-urlencoded; charset=UTF-8',\r\n                success: function(obj) {\r\n                    document.domain = tempDomain;\r\n                    if (obj!=null && obj.length > 0) {\r\n                        var $dataContainer = $( \".comm_ask_second #ask2_tagRecomm_div\");\r\n                        $dataContainer.html(\"<span class=\\\"drt_tit\\\">推荐标签：</span>\");\r\n                        //var tpl = \"<label class=\\\"se_key\\\">{0}</label>\";\r\n                        var tpl = \"<a href=\\\"#\\\" class=\\\"se_key\\\">{0}</a>\";\r\n\r\n                        var items = obj;\r\n                        for (var i = 0; i < items.length; i++){\r\n                            var item = items[i];\r\n                            if (item.name == \"\") continue;\r\n                            var itemHtml = tpl.replace(/\\{0\\}/, item.name + \"&nbsp;&nbsp;＋\");\r\n                            $dataContainer.append(itemHtml);\r\n                            if (i == 4) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        try {\r\n                            window['trackingAd']($dataContainer);\r\n                        } catch (ex) {}\r\n                        $(\".comm_ask_second .se_key\").each(function(i,item){\r\n                            var _item = $(item);\r\n                            _item.bind(\"click\", function(){\r\n                                var cTagsObj = $(\".comm_ask_second input[name='txtSearchTags']\");\r\n                                var cTags = cTagsObj.val();\r\n                                var tagArr = cTags.split(',');\r\n\r\n                                var tagText = _item.text();\r\n                                var tagName = tagText.substring(0, tagText.length - 3);\r\n\r\n                                for (var i = 0; i < tagArr.length; i ++) {\r\n                                    if (tagArr[i] === tagName) {\r\n                                        return;\r\n                                    }\r\n                                }\r\n                                var oTagStr = cTags;\r\n                                if (tagArr.length >= 5) {\r\n                                    //$(\".err_div\").css(\"display\", \"block\");\r\n                                    //$(\".err_txt\").text(\"标签最多只能录入5个！\");\r\n                                    //setTimeout(function(){$(\".err_div\").css(\"display\", \"none\");}, 5000);\r\n                                    return;\r\n                                    //oTagStr = \"\";\r\n                                    //for (var i = 0; i < 4; i ++) {\r\n                                    //  oTagStr += tagArr[i] + \",\";\r\n                                    //}\r\n                                    //oTagStr = oTagStr.substring(0, oTagStr.length-1);\r\n                                }\r\n                                var tagCon = $(\".comm_ask_second #divSearchTags\");\r\n                                var tagInput = tagCon.find(\"input\");\r\n\r\n                                var preNode = tagInput[0].previousSibling;\r\n                                if (tagArr.length >= 5 && preNode) {\r\n                                    tagInput[0].parentNode.removeChild(preNode);\r\n                                }\r\n                                tagInput.before('<span class=\"tag\">'+'<span>'+tagName+'</span>'+'<a title=\"删除标签\" href=\"javascript:;\">'+'×'+'</a>'+'</span>');\r\n\r\n                                var newTags = oTagStr == \"\" ? tagName : oTagStr + \",\" + tagName;\r\n                                cTagsObj.val(newTags);\r\n                                return false;\r\n                            });\r\n                        });\r\n                    }\r\n                },\r\n                error: function(err){\r\n                    document.domain = tempDomain;\r\n                    var i = 0;\r\n                    //alert('初始化推荐标签错误！');\r\n                }\r\n            });\r\n        }\r\n\r\n        //自动Tag\r\n        function Creat_Dynamic_Tag(conid,dataurl,subinput)\r\n        {\r\n            var oTagscon=$(conid)[0];\r\n            var tagInput=$(conid).find('input')[0];\r\n\r\n            var iNow=-1;\r\n            var oldValue='';\r\n            var tags_array = [];\r\n\r\n            var oUl = document.createElement('ul');\r\n            oUl.className = 'complete_list';\r\n            var oBody=document.getElementsByTagName('body')[0];\r\n            oBody.appendChild(oUl);\r\n\r\n            tagInput.onkeyup=function(ev)\r\n            {\r\n                var oEvent=ev || event;\r\n\r\n                if(oEvent.keyCode==40 || oEvent.keyCode==38|| oEvent.keyCode==13){\r\n                    return false;\r\n                }\r\n\r\n                $(this).removeAttr(\"style\");\r\n\r\n                if(oEvent.keyCode==8&&tagInput.value==''){\r\n\r\n                    oUl.style.display = 'none';\r\n                    return false;\r\n                }\r\n\r\n                $.ajax({\r\n                    type: \"get\",\r\n                    //url:dataurl,\r\n                    url: \"https://recommend-api.csdn.net/tag/complete?\",\r\n                    //data:{'title': tagInput.value, body: tagInput.value, size: 4},\r\n                    data: {'query': tagInput.value},\r\n                    dataType:\"jsonp\",\r\n                    //jsonp: \"callback\",\r\n                    success: function(jsonstr){\r\n                        //获取input输入框的绝对位置\r\n                        var tagInput_pos = getPos(tagInput);\r\n                        var scrTop = (document.body.scrollTop || document.documentElement.scrollTop);\r\n\r\n                        //弹出下拉框相对于input输入框向下偏移值\r\n                        var mp =242;\r\n                        iNow=-1;\r\n                        oldValue=tagInput.value;\r\n\r\n                        var data = jsonstr.suggestions;\r\n\r\n                        if(data.length!=0)\r\n                        {\r\n\r\n                            var bb = $( window ).height() - tagInput_pos.top;\r\n                            $(oUl).empty();\r\n                            //$(oUl).css({left:tagInput_pos.left,top:tagInput_pos.top+mp+scrTop})\r\n                            $(oUl).css({left:tagInput_pos.left,bottom:bb});\r\n                            for(var i=0;i<data.length;i++)\r\n                            {\r\n                                $(oUl).append('<li>'+data[i]+'</li>');\r\n                            }\r\n                            $(oUl).css('display','block');\r\n                        }\r\n\r\n                        var aLi = oUl.children;\r\n\r\n                        for(var i=0; i<aLi.length; i++)\r\n                        {\r\n                            aLi[i].index=i;\r\n\r\n                            aLi[i].onmouseover=function(){\r\n\r\n                                tagInput.value = this.innerHTML;\r\n\r\n                                for(var i=0; i<aLi.length; i++){\r\n                                    aLi[i].className='';\r\n                                }\r\n                                this.className = 'outborder';\r\n                                iNow=this.index;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                });\r\n            }\r\n\r\n            tagInput.onblur = function()\r\n            {\r\n                if(tagInput.value=='')\r\n                {\r\n                    return false;\r\n                }\r\n                else\r\n                {\r\n                    if ($(subinput).val() != \"\") {\r\n                        tags_array = $(subinput).val().split(\",\");\r\n                    }\r\n                    var re=/[^0-9a-zA-Z\\u4e00-\\u9fa5\\-+#]+/;\r\n                    var re2 = /\\-$/;\r\n                    var re3 = /^\\-/;\r\n                    var str_arr = tagInput.value.split(re);\r\n                    var str = str_arr.join(\"-\");\r\n\r\n                    if(str=='-')\r\n                    {\r\n                        $(tagInput).css('background-color','#fbd8db');\r\n                        return false;\r\n                    }\r\n\r\n                    if(re2.test(str))\r\n                    {\r\n                        str = str.substring(0,str.length-1);\r\n                    }\r\n\r\n                    if(re3.test(str))\r\n                    {\r\n                        str = str.substr(1);\r\n                    }\r\n\r\n                    if(find_in_arr(tags_array,str))\r\n                    {\r\n                        $(tagInput).css('background-color','#fbd8db');\r\n                        return false;\r\n                    }\r\n                    var tags_len = tags_array.length;\r\n                    if (tags_len >= 5) {\r\n                        //$(\".err_div\").css(\"display\", \"block\");\r\n                        //$(\".err_txt\").text(\"标签最多只能录入5个！\");\r\n                        //setTimeout(function(){$(\".err_div\").css(\"display\", \"none\");}, 5000);\r\n                        return;\r\n                        //tags_array.splice(tags_len - 1, 1);\r\n                        //_remove_last_tag(conid);\r\n                    }\r\n\r\n                    _add_tag(conid,str);\r\n                    tagInput.value = '';\r\n                    tags_array.push(str);\r\n                    $(subinput).val(tags_array.join(','));\r\n                    oUl.style.display = 'none';\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            tagInput.onkeydown=function(ev){\r\n\r\n                var aLi = oUl.children;\r\n\r\n                var oEvent=ev || event;\r\n\r\n                if(oEvent.keyCode==13||oEvent.keyCode==188){\r\n\r\n                    if(tagInput.value=='')\r\n                    {\r\n                        return false;\r\n                    }\r\n                    else\r\n                    {\r\n                        if ($(subinput).val() != \"\") {\r\n                            tags_array = $(subinput).val().split(\",\");\r\n                        }\r\n                        var re=/[^0-9a-zA-Z\\u4e00-\\u9fa5\\-+#]+/;\r\n                        var re2 = /\\-$/;\r\n                        var re3 = /^\\-/;\r\n                        var str_arr = tagInput.value.split(re);\r\n                        var str = str_arr.join(\"-\");\r\n                        if(str=='-')\r\n                        {\r\n                            $(tagInput).css('background-color','#fbd8db');\r\n                            return false;\r\n                        }\r\n\r\n                        if(re2.test(str))\r\n                        {\r\n                            str = str.substring(0,str.length-1);\r\n                        }\r\n\r\n                        if(re3.test(str))\r\n                        {\r\n                            str = str.substr(1);\r\n                        }\r\n\r\n                        if(find_in_arr(tags_array,str))\r\n                        {\r\n                            $(tagInput).css('background-color','#fbd8db');\r\n                            return false;\r\n                        }\r\n                        var tags_len = tags_array.length;\r\n                        if (tags_len >= 5) {\r\n                            //$(\".err_div\").css(\"display\", \"block\");\r\n                            //$(\".err_txt\").text(\"标签最多只能录入5个！\");\r\n                            //setTimeout(function(){$(\".err_div\").css(\"display\", \"none\");}, 5000);\r\n                            return;\r\n                            //tags_array.splice(tags_len - 1, 1);\r\n                            //_remove_last_tag(conid);\r\n                        }\r\n\r\n                        _add_tag(conid,str);\r\n                        tagInput.value = '';\r\n                        oUl.style.display = 'none';\r\n                        tags_array.push(str);\r\n                        $(subinput).val(tags_array.join(','));\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if(oEvent.keyCode==8&&tagInput.value==''){\r\n\r\n                    _remove_last_tag(conid);\r\n                    oUl.style.display = 'none';\r\n                    tags_array.pop();\r\n                    $(subinput).val(tags_array.join(','));\r\n                }\r\n\r\n                if(oEvent.keyCode==40){\r\n                    iNow++;\r\n\r\n                    if(iNow==aLi.length){\r\n                        iNow=-1;\r\n                    }\r\n\r\n                    for(var i=0; i<aLi.length; i++){\r\n                        aLi[i].className='';\r\n                    }\r\n                    if(iNow!=-1){\r\n                        aLi[iNow].className='outborder';\r\n                        tagInput.value=aLi[iNow].innerHTML;\r\n                    }else{\r\n                        tagInput.value=oldValue;\r\n                    }\r\n                }\r\n\r\n                if(oEvent.keyCode==38){\r\n                    iNow--;\r\n                    if(iNow==-2){\r\n                        iNow=aLi.length-1;\r\n                    }\r\n\r\n                    for(var i=0; i<aLi.length; i++){\r\n                        aLi[i].className='';\r\n                    }\r\n                    if(iNow!=-1){\r\n                        aLi[iNow].className='outborder';\r\n                        tagInput.value=aLi[iNow].innerHTML;\r\n                    }else{\r\n                        tagInput.value=oldValue;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            //点击每个标签后的'x'删除当前标签\r\n\r\n            oTagscon.onclick = function(e)\r\n            {\r\n                var e = e || window.event;\r\n                var target = e.srcElement || e.target;\r\n\r\n                if (target.title ==\"删除标签\")\r\n                {\r\n                    if ($(subinput).val() != \"\") {\r\n                        tags_array = $(subinput).val().split(\",\");\r\n                    }\r\n                    var cur_str = target.parentNode.children[0].innerHTML;\r\n                    tags_array = remove_in_arr(tags_array,cur_str);\r\n                    $(subinput).val(tags_array.join(','));\r\n                    _remove_cur_tag($(target));\r\n                    tagInput.focus();\r\n                    $(tagInput).css('background-color','#fbd8db');\r\n                    $(oUl).css('display','none');\r\n                }\r\n            }\r\n\r\n            tagInput.onclick=function(ev){\r\n                var oEvent=ev || event;\r\n                oEvent.cancelBubble=true;\r\n            }\r\n\r\n            document.onclick = function()\r\n            {\r\n                oUl.style.display = 'none';\r\n            }\r\n\r\n            //查找数组中指定的元素,并且删除这个元素\r\n            function remove_in_arr(arr,str)\r\n            {\r\n                for(var i=0;i<arr.length;i++)\r\n                {\r\n                    if(arr[i]==str)\r\n                    {\r\n                        arr.splice(i,1);\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n        }\r\n\r\n\r\n        //查找数组中指定的元素,并且删除这个元素\r\n        function remove_in_arr(arr,str)\r\n        {\r\n            for(var i=0;i<arr.length;i++)\r\n            {\r\n                if(arr[i]==str)\r\n                {\r\n                    arr.splice(i,1);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n\r\n\r\n        //查找数组中有没有相同的元素\r\n        function find_in_arr(arr,str)\r\n        {\r\n            var find = false;\r\n\r\n            for(var i=0;i<arr.length;i++)\r\n            {\r\n                if(arr[i]==str)\r\n                {\r\n                    find = true;\r\n                }\r\n            }\r\n            return find;\r\n        }\r\n\r\n        //增加标签 obj为增加标签的容器，str为标签中的文字内容。\r\n        function _add_tag(obj,str)\r\n        {\r\n            var tagCon = $(obj);\r\n            var tagInput = tagCon.find('input');\r\n            tagInput.before('<span class=\"tag\">'+'<span>'+str+'</span>'+'<a title=\"删除标签\" href=\"javascript:;\">'+'×'+'</a>'+'</span>');\r\n        }\r\n\r\n        //删除最后一个标签\r\n        function _remove_last_tag(obj)\r\n        {\r\n            var tagCon = $(obj);\r\n            tagCon.find('.tag').last().remove();\r\n        }\r\n\r\n        //删除当前标签\r\n        function _remove_cur_tag(obj)\r\n        {\r\n            obj.parent().remove();\r\n        }\r\n\r\n        function getPos(obj)\r\n        {\r\n            var l=0;\r\n            var t=0;\r\n            while(obj)\r\n            {\r\n                l+=obj.offsetLeft;\r\n                t+=obj.offsetTop;\r\n                obj=obj.offsetParent;\r\n            };\r\n            return {left:l,top:t}\r\n        };\r\n\r\n    });\r\n})();\r\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 12618
        },
        "cache": {},
        "timings": {
          "blocked": 3.28899989835918,
          "dns": -1,
          "connect": -1,
          "send": 0.02899998798966008,
          "wait": 4128.346000099551,
          "receive": 31223.341000033546,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.917Z",
        "time": 27156.058999942616,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/ads.csdn.net/js/async_new.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Thu, 16 Jun 2016 09:33:16 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5762725c-3596\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13718,
            "mimeType": "application/javascript",
            "text": "(function (d, c) {\n    var host_info = document.domain;\n    var prefix_domain = '';\n    if (host_info.match(/^beta*/)) {\n        prefix_domain = 'beta';\n    } else if (host_info.match(/^l[a-z]*/)) {\n        prefix_domain = 'l';\n    }\n    var host_http = 'http://' + prefix_domain + 'ads.csdn.net/';\n\n    var a = \"8c38e720de1c90a6f6ff52f3f89c4d57\";\n    c.reviveAsync = c.reviveAsync || {};\n    if (!c.reviveAsync.hasOwnProperty(a)) {\n        f = c.reviveAsync[a] = {\n            id: Object.keys(c.reviveAsync).length,\n            name: \"revive\",\n            start: function () {\n                var e = function () {\n                    try {\n                        if (!f.done) {\n                            d.removeEventListener(\"DOMContentLoaded\", e, false);\n                            c.removeEventListener(\"load\", e, false);\n                            f.done = true;\n                            f.apply(f.detect())\n                        }\n                    } catch (g) {\n                        console.log(g)\n                    }\n                };\n                if (d.readyState === \"complete\") {\n                    setTimeout(e)\n                } else {\n                    d.addEventListener(\"DOMContentLoaded\", e, false);\n                    c.addEventListener(\"load\", e, false)\n                }\n            },\n            ajax: function (e, g) {\n                /*\n                 var h = new XMLHttpRequest();\n                 h.onreadystatechange = function() {\n                 if (this.readyState == 4) {\n                 if (this.status == 200) {\n                 //f.spc(JSON.parse(this.responseText))\n                 }\n                 }\n                 };\n                 h.open(\"GET\", e + \"?\" + f.encode(g).join(\"&\"), true);\n                 h.withCredentials = true;\n                 h.send()\n                 */\n                /*\n                 var oHead = document.getElementsByTagName('HEAD').item(0);\n                 var oScript= document.createElement(\"script\");\n                 oScript.type = \"text/javascript\";\n                 oScript.src=e + \"?\" + f.encode(g).join(\"&\");\n                 oHead.appendChild(oScript);\n                 */\n                //alert(1);\n\n            },\n            encode: function (m, n) {\n                var e = [], h, i;\n                for (h in m) {\n                    if (m.hasOwnProperty(h)) {\n                        var l = n ? n + \"[\" + h + \"]\" : h;\n                        if ((/string|number|boolean/).test(typeof m[h])) {\n                            e.push(encodeURIComponent(l) + \"=\"\n                            + encodeURIComponent(m[h]))\n                        } else {\n                            var g = f.encode(m[h], l);\n                            for (i in g) {\n                                e.push(g[i])\n                            }\n                        }\n                    }\n                }\n                return e\n            },\n            apply: function (g_m) {\n                var g = g_m[0];\n                if (g.zones.length) {\n                    var e = host_http + \"get_ads.php\";\n                    g.zones = g.zones.join(\"|\");\n                    g.loc = d.location.href;\n                    g.ip = d.ip;\n                    g.iframe = g.iframe.join(\"|\");\n                    if (d.referrer) {\n                        g.referer = d.referrer\n                    }\n                    //var aaa= document.getElementById(\"test1\");\n                    //alert(aaa.innerHTML);\n                    //g_m[1].innerHTML = \"aaa<script type='text/javascript' src='\"+e + \"?\" + f.encode(g).join(\"&\")+\"'><\\/script>\";\n\n                    //f.ajax(e, g)\n                    var span = document.createElement(\"span\");\n                    g_m[1] = g_m[1].appendChild(span);\n                    if (g_m[1]) g_m[1].parentNode.removeChild(g_m[1]);\n                    var scriptObj = document.createElement(\"script\");\n                    scriptObj.src = e + \"?ip=\" + f.GetQueryString(\"ip\") + \"&\" + f.encode(g).join(\"&\");\n                    scriptObj.type = \"text/javascript\";\n                    document.getElementsByTagName(\"head\")[0].appendChild(scriptObj);\n\n                    //var sinfo = '{\"revive-0-0\":{\"html\":\"<table width=\\'150\\' height=\\'300\\' border=\\'0\\' cellspacing=\\'0\\' cellpadding=\\'0\\' align=\\'center\\' bgcolor=\\'#fff\\' style=\\'background-color:#fff;border-left:1px solid #e8e8e8;border-right:1px solid #e8e8e8;\\'>    <tbody>     <tr style=\\'vertical-align:top;\\'>      <td width=\\'150\\'>&nbsp;<\\/td>      <td style=\\'text-align:center;\\'><img src=\\'http:\\/\\/img.bss.csdn.net\\/201511241004259379.png\\' \\/>       <p style=\\'height:14px\\'><\\/p><p style=\\'font-size:16px;font-family:\\'\\u5fae\\u8f6f\\u96c5\\u9ed1\\',\\u5b8b\\u4f53,Arial,sans-serif;line-height:22px;color:#ff9900;text-align:center;\\'>\\u56fe\\u6587\\u6df7\\u6392\\u5e7f\\u544a\\u6d4b\\u8bd5<p> <p style=\\'font-size:14px;font-family:\\'\\u5fae\\u8f6f\\u96c5\\u9ed1\\',\\u5b8b\\u4f53,Arial,sans-serif;line-height:22px;color:#666;text-align:left;\\'>\\u8fd9\\u662f\\u7b80\\u5355\\u7684\\u56fe\\u6587\\u6df7\\u6392\\u6d4b\\u8bd5<p><\\/td>  <td width=\\'90\\'>&nbsp;<\\/td>     <td width=\\'150\\' style=\\'border-right:1px solid #e8e8e8;\\'>&nbsp;<\\/td>     <\\/tr>    <\\/tbody>  <\\/table> \",\"width\":\"150\",\"height\":\"300\"}}';\n                    //var kinfo = '{\"revive-0-0\":{\"html\":\"aaabbb\",\"width\":\"150\",\"height\":\"300\"}}';\n                    //alert(sinfo);\n                    //f.spc(JSON.parse(sinfo));\n                }\n            },\n            detect: function () {\n                var o = d.querySelectorAll(\"ins[data-\" + f.name + \"-id='\" + a\n                + \"']\");\n                var n = {\n                    zones: [],\n                    iframe: [],\n                    prefix: f.name + \"-\" + f.id + \"-\"\n                };\n                for (var g = 0; g < o.length; g++) {\n                    var k = o[g];\n                    var ak = k;\n                    if (k.hasAttribute(\"data-\" + f.name + \"-zoneid\")) {\n                        var l = new RegExp(\"^data-\" + f.name + \"-(.*)$\"), e;\n                        for (var h = 0; h < k.attributes.length; h++) {\n                            if (e = k.attributes[h].name.match(l)) {\n                                if (e[1] == \"zoneid\") {\n                                    n.zones[g] = k.attributes[h].value;\n                                    k.id = n.prefix + g\n                                } else {\n                                    if (e[1] != \"id\") {\n                                        n[e[1]] = k.attributes[h].value\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (ak.hasAttribute(\"iframe\")) {\n                        var al = new RegExp(\"iframe\"), e;\n                        for (var h = 0; h < ak.attributes.length; h++) {\n                            if (e = ak.attributes[h].name.match(al)) {\n                                if (e == \"iframe\") {\n                                    n.iframe[g] = ak.attributes[h].value;\n                                }\n                            }\n                        }\n                    } else {\n                        n.iframe[g] = 'false';\n                    }\n                }\n                var n_m = new Array();\n                n_m[0] = n;\n                n_m[1] = k;\n                return n_m;\n            },\n            createFrame: function (h) {\n                var e = d.createElement(\"IFRAME\"), g = e.style;\n                e.scrolling = \"no\";\n                e.frameBorder = 0;\n                e.width = h.width > 0 ? h.width : 0;\n                e.height = h.height > 0 ? h.height : 0;\n                g.border = 0;\n                g.overflow = \"hidden\";\n                return e\n            },\n            loadFrame: function (g, e) {\n                var h = g.contentDocument || g.contentWindow.document;\n                h.open();\n                h.writeln(\"<!DOCTYPE html>\");\n                h.writeln(\"<html>\");\n                h.writeln('<head><base target=\"_top\"></head>');\n                h.writeln('<body border=\"0\" margin=\"0\" style=\"margin: 0; padding: 0\">');\n                h.writeln(e);\n                h.writeln(\"</body>\");\n                h.writeln(\"</html>\");\n                h.close()\n            },\n            spc: function (k) {\n                for (var e in k) {\n                    if (k.hasOwnProperty(e)) {\n                        var o = k[e];\n                        var n = d.getElementById(e);\n                        if (o.html) {\n                            if (n) {\n                                var m = d.createElement(\"div\");\n                                var w=o.width;\n                                var h=o.height;\n\t\t\t\t\t\t\t\tm.style.width=w+\"px\";\n\t\t\t\t\t\t\t\tm.style.height=h+\"px\";\n                                //m.style = \"padding: 0px; margin: 0px; border: 0px none;width:\"+o.width+\"px;height:\"+o.height+\"px\";\n                                //m.class = \"J_adv\";\n                                m.setAttribute('class','J_adv'); \n                                m.setAttribute(\"data-view\", o.data_view);\n                                m.setAttribute(\"data-mod\", 'ad_popu_' + o.data_aid);//广告位id\n                                m.setAttribute(\"data-mtp\", o.data_mod);//广告位类型\n                                m.setAttribute(\"data-order\", o.data_order);//广告位类型\n                                if (o.hasOwnProperty('data_swapimg')) {\n                                    m.setAttribute('data-swapimg', o.data_swapimg);\n                                }\n                                //var img =new Image();\n                    \t\t\t//img.src=\"http://ads.csdn.net/add_num.php?mod=ad_popu_\"+o.data_aid+\"&ck=-\";\n                    \t\t\t\n                    \t\t\tvar adv={};\n                    \t\t\tadv.data={};\n                    \t\t\tvar preAdr=d.referrer || \"-\";   // 前一个文档地址\n                    \t\t\tadv.data.ref = preAdr;\n                    \t\t\tadv.data.mtp = o.data_mod;\n                    \t\t\tadv.data.mod = 'ad_popu_'+o.data_aid;\n                    \t\t\tadv.data.con = 'ad_content_'+o.data_ideaid+',ad_order_'+o.data_order;\n                    \t\t\t//f.sendData(adv,\"//ads.csdn.net/add_num.php?\");\n                    \t\t\tf.sendData(adv,\"//dc.csdn.net/re?\");\n                    \t\t\t\n                                m.setAttribute(\"data-con\", 'ad_content_' + o.data_ideaid);\n                                m.setAttribute(\"class\", \"J_adv\");\n                                if (o.iframeFriendly) {\n                                    var l = f.createFrame(o);\n                                    m.appendChild(l);\n                                    n.parentNode.replaceChild(m, n);\n                                    f.loadFrame(l, o.html);\n                                } else {\n                                    m.innerHTML = o.html;\n                                    var g = m.getElementsByTagName(\"SCRIPT\");\n                                    for (var l = 0; l < g.length; l++) {\n                                        var q = document.createElement(\"SCRIPT\");\n                                        var p = g[l].attributes;\n                                        for (var h = 0; h < p.length; h++) {\n                                            q[p[h].nodeName] = p[h].value\n                                        }\n                                        if (g[l].innerHTML) {\n                                            q.text = g[l].innerHTML;\n                                        }\n                                        m.replaceChild(q, g[l])\n                                    }\n                                    n.parentNode.replaceChild(m, n)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //CSDN.track.addAdvs();\n                \n                 if(f.isExitsFunction('CSDN.track.addAdvs')){\n                \t CSDN.track.addAdvs();\n                 }\n                 \n            },\n            //是否存在指定函数\n            isExitsFunction: function (funcName) {\n                try {\n                    if (typeof(eval(funcName)) == \"function\") {\n                        return true;\n                    }\n                } catch (e) {\n                }\n                return false;\n            },\n            GetQueryString: function (name) {\n                var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n                var r = window.location.search.substr(1).match(reg);\n                if (r != null) return unescape(r[2]);\n                else return null;\n            },\n            //获取用户ID\n    \t\tgetUserId:function(){\n    \t\t\tvar result=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(d.cookie);\n    \t\t\tvar uid= (result != null ? result[3] : void 0) || '-';\n    \t\t\treturn uid;\n    \t\t},\n    \t\t//提交数据\n    \t\tsendData:function(adv,url){\n    \t\t\tadv.data.uid=f.getUserId();\n    \t\t\tprotocol=\"http:\";\n    \t\t\tadv.data.ck='-';\n    \t\t\tvar dataStr=this.paramData(adv.data);\n    \t\t\tvar img =new Image();\n    \t\t\timg.onload=img.onerror=function(){\n    \t\t\t\timg.onload=img.onerror=null;\n    \t\t\t\timg=null;\n    \t\t\t}\n\t\t\t\timg.src=protocol+url+dataStr;\n    \t\t},\n    \t\t//数据转换为字符串形式\n    \t\tparamData:function(data){\n    \t\t\tvar dataArr=[];\n    \t\t\tfor(var key in data){\n    \t\t\t\tvar text=key+\"=\"+data[key];\n    \t\t\t\ttext.replace(/^\\s+|\\s+$/g,\"\");\n    \t\t\t\tdataArr.push(text);\n    \t\t\t}\n    \t\t\treturn dataArr.join(\"&\")\n    \t\t}\n        };\n        try {\n            f.start()\n        } catch (b) {\n            console.log(b)\n        }\n    }\n})(document, window);\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 4007
        },
        "cache": {},
        "timings": {
          "blocked": 3.1920000910759,
          "dns": -1,
          "connect": -1,
          "send": 0.02899998798966008,
          "wait": 4435.2839998900945,
          "receive": 22717.553999973454,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.917Z",
        "time": 7152.470000088215,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/csdnimg.cn/pubfooter/js/repoAddr2.js%3Fv=0.4674630036781866",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 10:38:25 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b221-1ec\""
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "492"
            }
          ],
          "cookies": [],
          "content": {
            "size": 492,
            "mimeType": "text/plain",
            "text": "(function(){\r\n  var prot_as = window.location.protocol;\r\n  var repo_url_as = prot_as + \"//dc2.csdn.net/track\"; /*\"//117.79.93.210/track\"; \"//dc2.csdn.net/track\";*/\r\n  var repo_body_referer = window.location;\r\n  var repo_body_referer2 = encodeURIComponent(repo_body_referer);\r\n  var i = new Image();\r\n  i.onload = i.onerror = function(){\r\n    i.onload = i.onerror = null;\r\n    i.removeAttribute(\"src\");\r\n    i = null;\r\n  };\r\n  i.src = repo_url_as + \"?\" + Math.random();\r\n  /*referer*/\r\n\r\n})();"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 639
        },
        "cache": {},
        "timings": {
          "blocked": 3.06900008581579,
          "dns": -1,
          "connect": -1,
          "send": 0.02899998798966008,
          "wait": 4586.207000073045,
          "receive": 2563.164999941365,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.918Z",
        "time": 17297.55699983798,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/csdnimg.cn/rabbit/tracking-ad/main.js%3F75eacd6",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 01 Nov 2016 03:41:48 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58180efc-2559\""
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "9561"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9561,
            "mimeType": "text/plain",
            "text": "// Generated by CoffeeScript 1.8.0\n\n/*\n @file 推广位跟踪\n @author 曹宇 <caoyu#at#csdn.net>\n @version 20130902\n */\n\n(function() {\n  (function(definition, undef) {\n    var $, exports, global, i;\n    global = this;\n    $ = global.jQuery;\n    exports = {};\n    definition(global, exports, $);\n    if (global.csdn === undef) {\n      global.csdn = exports;\n    }\n    for (i in exports) {\n      global[i] = global.csdn[i] = exports[i];\n    }\n  })(function(global, exports, $, undef) {\n    var iarr = [], _key=0;\n    var ads, crossdomainGet, domReadyListener, done, findAllAds, linksContent, protocol, ref, s, trackingAd, viewedHeight;\n    protocol = global.location.protocol.substr(0, 4) === 'http' ? '' : 'http:';\n    ref = global.document.referrer || '-';\n    ads = [];\n    viewedHeight = 0;\n    domReadyListener = function() {\n      var ad, groups, k, n, v, w, _i, _len, _ref, _ref1;\n      n = 0;\n      w = $(global).scroll(function() {\n        if (!ads[0]) {\n          return;\n        }\n        global.clearTimeout(n);\n        return n = global.setTimeout(function() { \n          var ad, top, _i, _len;\n          top = w.scrollTop() || document.body.scrollTop || document.documentElement.scrollTop  + w.height();  //IE兼容问题\n          if (top > viewedHeight) {\n            viewedHeight = top;\n            for (_i = 0, _len = ads.length; _i < _len; _i++) {\n              ad = ads[_i];\n              if (!(!ad.viewed && top >= ad.top)) {\n                continue;\n              }\n              ad.viewed = true;\n              crossdomainGet(ad.data(), true);\n            }\n          }\n        }, 100);\n      });\n      groups = {};\n      _ref = $('.tracking-ad,.csdn-tracking-statistics');\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        ad = _ref[_i];\n        k = $(ad).attr('data-mod');\n        ((_ref1 = groups[k]) != null ? _ref1.push(ad) : void 0) || (groups[k] = [ad]);\n      }\n      for (k in groups) {\n        v = groups[k];\n        trackingAd($(v));\n      }\n      return w.triggerHandler('scroll');\n    };\n\n    /*\n     跟踪指定的推广位，包括曝光和点击\n     @param {CSS Selector/jQuery Object/DOMElement/DOMElement[]} ele 包含推广链接的推广位容器标签\n     @param {Object} opts 选项，如下\n     @param {String} opts.pid 产品线标识，可选，默认取当前页域名中foo.csdn.net中的foo，不会处理三级域名的情况\n     @param {String} opts.mod 模块id，必须\n     @param {String} opts.mtp 模块类型，可选，默认会探测是否有带链接的图片，如果有则是3图片，否则2文字\n     @param {String/RegExp} opts.trim 对最终名称做进一步裁剪的正则，可选，始终会先裁剪掉两边的空白字符\n     @param {CSS Selector} filter 可选，对跟踪的推广链接进一步过滤，这里将包含那些class=\"foo\"但是不包括class=\"foo bar\"的链接\n     */\n    trackingAd = exports.trackingAd = function(ele, opts) { \n      var filter, mod, mtp, pid, trim, _ref,dsm;\n      if (opts == null) {\n        opts = {};\n      }\n      if (typeof ele === 'string' || !ele instanceof $) {\n        ele = $(ele);\n      }\n      pid = opts.pid || ele.attr('data-pid') || global.document.body.getAttribute('data-pid') || ((_ref = /(\\w+)\\.\\w+\\.\\w+$/.exec(global.location.host)) != null ? _ref[1] : void 0);\n      mod = opts.mod || ele.attr('data-mod');\n      blk = opts.blk || ele.attr(\"chg-blk\");\n      mtp = opts.mtp || ele.attr('data-mtp') || ($('a img', ele)[0] ? 3 : 2);\n      trim = opts.trim || ele.attr('data-trim');\n      //提交模式 默认GET模式\n      dsm = typeof (dsm=opts.dsm || ele.attr('data-dsm') || 'get') === \"string\" ? (dsm.toLowerCase()) : 'get'; \n      \n      if (typeof trim === 'string' && trim.charAt(0) === '/') {\n        trim = trim.split('/');\n        trim = new RegExp(trim.slice(1, -1), trim.slice(-1));\n      }\n\n      filter = opts.filter || ele.attr('data-filter') || '';\n      return findAllAds(ele, filter, function(links) {\n        var ad, con;\n        con = linksContent(mtp, trim, links);\n        ad = {\n          top: ele.offset().top,\n          ele: ele,\n          viewed: false,\n          data: function() {\n            var _ref1;\n            return {\n              uid: ((_ref1 = /(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(global.document.cookie)) != null ? _ref1[3] : void 0) || '-',\n              ref: ref,\n              pid: pid,\n              mod: mod,\n              dsm: dsm,\n              mtp: mtp,\n              con: con,\n              ck: '-'\n            };\n          }\n        };\n        ads.push(ad);\n        if (viewedHeight > ad.top) {\n          $(global).triggerHandler('scroll');\n        }\n        links.each(function() {\n          if (blk === \"0\") return;\n          if (this.target === '') {\n            return this.target = '_blank';\n          }\n        });\n        return links.click(function() {\n          var d;\n          if (this.href && this.innerHTML.replace(/^\\s+|\\s+$/g, '')) {\n            d = ad.data();\n            d.ck = linksContent(mtp, trim, $(this));\n            crossdomainGet(d);\n          }\n        });\n      });\n    };\n    findAllAds = function(cont, filter, callback) {\n      var count, iframes, links;\n      links = $('a' + filter, cont); \n      iframes = $('iframe', cont);\n      if (iframes[0]) {\n        count = iframes.length;\n        return iframes.each(function() {\n          var ifr, listener;\n          ifr = $(this);\n          listener = function() {\n            if (ifr === null) {\n              return;\n            }\n            links = links.add(ifr.contents().find('a' + filter));\n            ifr = null;\n            count--;\n            if (count === 0) {\n              return callback(links);\n            }\n          };\n          return ifr.load(listener);\n        });\n      } else {\n        return callback(links);\n      }\n    };\n    linksContent = function(mtp, trim, ele) {\n      return ele.map(function() {\n        var img, text;\n        if (mtp === 3) {\n          img = $('img', this)[0];\n          if (img) {\n            text = img.title || img.alt || img.src;\n          }\n        }\n        if (!text) {\n          text = this.innerHTML.replace(/<[^>]+>/g, '').replace(/^\\s+|\\s+$/g, '') || this.title || this.alt || this.innerHTML.replace(/^\\s+|\\s+$/g, '');\n        }\n          \n        if (trim) {\n          text = (text + '').replace(trim, '');\n        }\n        if (this.attributes['strategy'])\n        {\n            return text + ',' + this.href + ',' + this.attributes['strategy'].nodeValue;\n        }\n        else\n        {\n            return text + ',' + this.href;\n        }\n\n      }).get().join(';');\n    };\n    crossdomainGet = function(data, isA) {\n      //测试地址和真实访问地址，测试内容自己本地模仿\n      var _url = protocol + '//dc.csdn.net/re?dataType=text',dsm;\n      var str = '';\n      if (!data.con) {\n        return;\n      }\n      dsm = data['dsm']; \n      data[Math.random() * 10000 | 0] = '';\n      data['x-acl-token'] = 'status_js_dkuyqthzbajmncbsb_token';\n      //处理body字符格式\n      if((data['dsm']).toLowerCase()===\"post\")\n      {\n         str = JSON.stringify(data);\n         str = (\"[\"+str+\"]\").toString();\n      }\n      if(dsm===\"get\")\n      {   \n          if (isA) {\n            var ik = iarr.push(new Image()) - 1;\n            iarr[ik].onload = iarr[ik].onerror = function () {\n              var _a = ik;\n              iarr[_a].onload = iarr[_a].onerror = null;\n              iarr[_a].removeAttribute(\"src\");\n              return iarr[_a] = null;\n            }\n            return iarr[ik].src = protocol + '//dc.csdn.net/re?' + $.param(data);\n          } else {\n            var i;\n            i = new Image();\n            i.onload = i.onerror = function() {\n              i.onload = i.onerror = null;\n              i.removeAttribute('src');\n              return i = null;\n            };\n            return i.src = protocol + '//dc.csdn.net/re?' + $.param(data);\n          }\n      }\n      if(dsm===\"post\")\n      {    \n           $.ajax({\n               url:_url,\n               type:'post',\n               async:true,\n               contentType:'text/plain',\n               dataType:'json',\n               xhrFields:{\n                 withCredentials:true\n               },\n               success:function(reponse){\n               },\n               data:str,\n               error:function(){\n                   console.error('服务器曝光错误！')\n               }\n           });\n      } \n    };\n    if ($ === undef) {\n      done = false;\n      s = document.createElement('script');\n      s.type = 'text/javascript';\n      s.charset = 'utf-8';\n      current_protocol = location.protocol;\n      s.src = current_protocol+'//c.csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js';\n      s.onload = s.onreadystatechange = function() {\n        if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {\n          done = true;\n          global.jQuery.noConflict();\n          $ = global.jQuery;\n          //设置IE跨域访问 兼容到包含9以下\n          if(window.navigator.appVersion.match(/MSIE (\\d)*/i)&&Number(window.navigator.appVersion.match(/MSIE (\\d)*/i)[1],10)<=9)\n          {\n            $.support.cors = true;\n          }\n          $(domReadyListener);\n          return s.onload = s.onreadystatechange = null;\n        }\n      };\n      document.getElementsByTagName('head')[0].insertBefore(s, null);\n    } else {\n      $(domReadyListener);\n    }\n  });\n\n}).call(this);\n\n///#//// sourceMappingURL=main.js.map     ///\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 9709
        },
        "cache": {},
        "timings": {
          "blocked": 2.94299982488155,
          "dns": -1,
          "connect": -1,
          "send": 0.029999995604160112,
          "wait": 4779.571000020955,
          "receive": 12515.01299999654,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:12:34.918Z",
        "time": 39906.191000016406,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/cbjs.baidu.com/js/m.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Wed, 25 Jan 2017 14:07:39 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5888b12b-1c581\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 116097,
            "mimeType": "application/javascript",
            "text": "try{!function(){var t;window._SF_&&window._SF_._global_&&window._SF_._global_._ssp?(t=window._SF_._global_._ssp,t.DUP_4_SF=!0,t.destroy=function(){}):t=window._ssp_global=window._ssp_global||{};var e={global:t,proxyName:!1,basePath:\"https://cpro.baidustatic.com/cpro/ui/dup/\"};!function(){var i={name:\"oojs\",namespace:\"\",classes:{},noop:function(){},$oojs:function(){var i={};if(\"undefined\"!=typeof window&&window&&\"undefined\"!=typeof document&&document?(this.runtime=\"browser\",i.global=window):(this.runtime=\"node\",i.global=t),i.proxyName=\"proxy\",i.path=\"node\"===this.runtime?process.cwd()+\"/src/\":\"/src/\",\"undefined\"!=typeof e)for(var n in e)n&&e.hasOwnProperty(n)&&(i[n]=e[n]);this.global=i.global,i.proxyName&&(Function.prototype[i.proxyName]=this.proxy),this.setPath(i.path),this.global.oojs=this.global.oojs||this},path:{},pathCache:{},getPath:function(t){var e=t?t.split(\".\"):!1,i=this.path;if(e)for(var n=0,o=e.length;o>n;n++){var r=e[n].toLowerCase();if(!i[r])break;i=i[r]}return i.pathValue},setPath:function(t,e){var i=this.path;if(\"object\"!=typeof t){if(e)for(var n=t.split(\".\"),o=0,r=n.length;r>o;o++){var s=n[o].toLowerCase();i[s]=i[s]||{pathValue:i.pathValue},i=i[s]}else e=t;i.pathValue=e,this.pathCache={}}else for(var a in t)a&&t.hasOwnProperty(a)&&this.setPath(a,t[a])},getClassPath:function(t){if(!this.pathCache[t]){this.pathCache[t]=this.getPath(t)+t.replace(/\\./gi,\"/\")+\".js\";var e=this.getPath(t),i=e.length-1;e.lastIndexOf(\"\\\\\")!==i&&e.lastIndexOf(\"/\")!==i&&(e+=\"/\"),this.pathCache[t]=e+t.replace(/\\./gi,\"/\")+\".js\"}return this.pathCache[t]},loadDeps:function(t,e){e=e||{};var i=t.__deps,n=(t.__namespace,[]);for(var o in i)if(i.hasOwnProperty(o)&&i[o]){var r;if(\"string\"!=typeof i[o]?(t[o]=i[o],t[o]&&t[o].__name&&(r=t[o].__full)):(r=i[o],t[o]=this.find(r)),!r||e[r])continue;if(e[r]=!0,t[o])t[o].__deps&&(n=n.concat(this.loadDeps(t[o],e)));else{if(\"node\"===this.runtime)try{t[o]=require(this.getClassPath(r))}catch(s){n.push(r)}t[o]||n.push(r)}}return n},fastClone:function(t){var e=function(){};e.prototype=t;var i=new e;return i},deepClone:function(t,e){\"number\"!=typeof e&&(e=10);var i,n=e-1;if(e>0)if(t instanceof Date)i=new Date,i.setTime(t.getTime());else if(t instanceof Array){i=[];for(var o=0,r=t.length;r>o;o++)i[o]=this.deepClone(t[o],n)}else if(\"object\"==typeof t){i={};for(var s in t)if(t.hasOwnProperty(s)){var a=t[s];i[s]=this.deepClone(a,n)}}else i=t;else i=t;return i},proxy:function(t,e){var i=Array.prototype.slice.apply(arguments),n=i.shift(),o=\"function\"==typeof this?this:i.shift();return function(){var t=Array.prototype.slice.apply(arguments);return o.apply(n,t.concat(i))}},find:function(t){var e,i=t.split(\".\");e=this.classes[i[0]];for(var n=1,o=i.length;o>n;n++){if(!e||!e[i[n]]){e=null;break}e=e[i[n]]}return e},reload:function(t){var e=this.find(t);if(e)if(e.__registed=!1,\"node\"===this.runtime){var i=this.getClassPath(t);delete require.cache[require.resolve(i)],e=require(i)}else e=this.define(e);else e=this.using(t);return e},create:function(t,e,i,n,o,r){\"string\"==typeof t&&(t=this.using(t));var s=new t.__constructor(e,i,n,o,r);return s},using:function(t){var e=this.find(t);return e||\"node\"===this.runtime&&(require(this.getClassPath(t)),e=this.find(t)),e},define:function(t){var e=t.name||\"__tempName\",i=t.namespace||\"\";t.__name=e,t.__namespace=i,t.__full=i.length>1?i+\".\"+e:e,t.__deps=t.deps,t.__oojs=this,t.__constructor=function(t,e,i,n,o){if(this.__clones&&this.__clones.length>0)for(var r=0,s=this.__clones.length;s>r;r++){var a=this.__clones[r];this[a]=this.__oojs.deepClone(this[a])}this.__constructorSource(t,e,i,n,o)},t.__constructorSource=t[e]||this.noop,t.__staticSource=t[\"$\"+e]||this.noop,t.__staticUpdate=function(){var e=[];for(var i in this)if(this.hasOwnProperty(i)){var n=this[i];\"object\"!=typeof n||null===n||\"deps\"===i||0===i.indexOf(\"__\")||t.__deps&&t.__deps[i]||e.push(i)}this.__clones=e,this.__constructor.prototype=this},t.__static=function(){this.__staticSource(),this.__staticUpdate()};for(var n,o=!1,r=!1,s=i.split(\".\"),a=s.length,d=this.classes,l=0;a>l;l++)n=s[l],n&&(d[n]=d[n]||{},d=d[n]);d[e]=d[e]||{};var c=d;if(d=d[e],d.__name&&d.__registed){if(d.__registed){o=!0;for(var h in t)h&&t.hasOwnProperty(h)&&(\"undefined\"==typeof d[h]||d[h]===this.noop)&&(r=!0,d[h]=t[h])}}else t.__registed=!0,c[e]=t;if(t=c[e],!o||r){var p=this.loadDeps(t);if(p.length>0){if(this.loader=this.loader||this.using(\"oojs.loader\"),\"browser\"!==this.runtime||!this.loader)throw new Error('class \"'+t.name+'\" loadDeps error:'+p.join(\",\"));this.loader.loadDepsBrowser(t,p)}else t.__static()}return\"node\"===this.runtime&&arguments.callee.caller.arguments[2]&&(arguments.callee.caller.arguments[2].exports=t),t}};i.define(i)}();var i=t.oojs,n=(new Date).getTime();i.setPath(\"https://dup.baidustatic.com/\"),i.define({name:\"static\",namespace:\"dup.ui.assertion.dan\",deps:{},painterName:\"static\",assert:function(t){var e=t.pdb_deliv,i=e.deliv_des;return!(1!==e.brandad||24!==i.product_type)}}),i.define({name:\"couplet\",namespace:\"dup.ui.assertion.dan\",deps:{},painterName:\"couplet\",assert:function(t){var e=t.pdb_deliv,i=e.deliv_des;return 1===e.brandad&&22===i.product_type}}),i.define({name:\"danEexpand\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"danEexpand\",assert:function(t){var e=t.pdb_deliv,i=e.deliv_des;return 1===e.brandad&&25===i.product_type}}),i.define({name:\"barrier\",namespace:\"dup.ui.assertion.dan\",deps:{},painterName:\"barrier\",assert:function(t){var e=t.pdb_deliv,i=e.deliv_des;return 1===e.brandad&&23===i.product_type}}),i.define({name:\"video\",namespace:\"dup.ui.assertion.dan\",deps:{},painterName:\"video\",assert:function(t){var e=t.pdb_deliv,i=e.deliv_des;return!(1!==e.brandad||20!==i.product_type&&21!==i.product_type)}}),i.define({name:\"topSearchBar\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"topSearchBar\",assert:function(t){var e=t.placement,i=e.container,n=e.fillstyle;return 3==i.anchoredType&&i.slide&&8==n.btnStyleId,!1}}),i.define({name:\"bottomSearchBar\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"bottomSearchBar\",assert:function(t){var e=t.placement,i=(e.basic,e.container),n=e.fillstyle;return!(3!=i.anchoredType||!i.slide||9!=n.btnStyleId)}}),i.define({name:\"slide\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"slide\",assert:function(t){var e=t.placement,i=e.container,n=e.fillstyle;return 10==i.anchoredType&&i.slide&&n.btnStyleId<=7,!1}}),i.define({name:\"baiduRec\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"baiduRec\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 3===i.rspFormat&&1===i.flowType&&1===n.anchoredType}}),i.define({name:\"inlayFix\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"inlayFix\",assert:function(t){var e=t.placement,i=e.basic,n=e.container,o=n.floated;return 1===i.rspFormat&&1===i.flowType&&1===n.anchoredType?o?1===o.trigger?!0:!this.isFloat(o):!0:!1},isFloat:function(t){for(var e in t)return!0;return!1}}),i.define({name:\"insideText\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"insideText\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 3===i.rspFormat&&1===i.flowType&&8===n.occurrence&&11===n.anchoredType}}),i.define({name:\"dynamicFloat\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"dynamicFloat\",assert:function(t){var e=t.placement,i=e.basic,n=e.container,o=n.floated;return!(1!==i.rspFormat||1!==i.flowType||1!==n.anchoredType||!o||8!==o.trigger)}}),i.define({name:\"float\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"float\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 1===i.rspFormat&&1===i.flowType&&3===n.anchoredType,!1}}),i.define({name:\"inlayFix\",namespace:\"dup.ui.assertion.mobile\",deps:{},painterName:\"inlayFix\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 1===i.rspFormat&&2===i.flowType&&1===n.anchoredType}}),i.define({name:\"float\",namespace:\"dup.ui.assertion.mobile\",painterName:\"float\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 1===i.rspFormat&&2===i.flowType&&(3===n.anchoredType||11===n.anchoredType)}}),i.define({name:\"config\",namespace:\"dup.common\",DUP_PREFIX:\"BAIDU_SSP_\",HTTP_PROTOCOL:\"http:\",LOADER_DEFINE_NAME:\"___adblockplus\",LCR_COOKIE_NAME:\"BAIDU_SSP_lcr\",REQUEST_URL:\"//pos.baidu.com/\",POS_URL:\"\",ISPDB_DELIV:!1,DUP_TM:\"BAIDU_DUP_SETJSONADSLOT\",HTML_POST:\"HTML_POST\",SSP_JSONP:\"SSP_JSONP\",STATIC_JSONP:\"STATIC_JSONP\",LOG_URL:\"//eclick.baidu.com/se.jpg\",CACHE_URL:\"//pos.baidu.com/bfp/snippetcacher.php?\",STORAGE_TIMER:864e5,STATUS_CREATE:1,STATUS_REQUEST:2,STATUS_RESPONSE:4,STATUS_RENDERED:8,STATUS_FINISH:16,EXP_SWITCH:!1,EXP_SATUS:!1,BASE_ID:\"110007\",EXP_ID:\"\",RD_ID:\"110008\",SHUNT_NUMBER:500,IS_PREVIEW:!1,IS_CNAME:!1,FIRST_ONCESEACH:!1,AD_ICON:\"https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.0/bd-logo08.png\",$config:function(){this.HTTP_PROTOCOL=\"https:\"===document.location.protocol?\"https:\":\"http:\",0!==location.protocol.indexOf(\"http\")&&(this.HTTP_PROTOCOL=\"https:\"),i.global.userConfig&&i.global.userConfig.domain&&(this.REQUEST_URL_CNAME=i.global.userConfig.domain||\"\")}}),i.define({name:\"lang\",namespace:\"dup.common.utility\",hasOwn:Object.prototype.hasOwnProperty,getAttribute:function(t,e){for(var i=t,n=e.split(\".\");n.length;){if(void 0===i||null===i)return;i=i[n.shift()]}return i},serialize:function(t){if(\"object\"!=typeof t)return\"\";var e=[];for(var i in t)this.hasOwn.call(t,i)&&e.push(i+\"=\"+encodeURIComponent(t[i]));return e.join(\"&\")},getType:function(t){for(var e={},i=\"Array Boolean Date Error Function Number RegExp String\".split(\" \"),n=0,o=i.length;o>n;n++)e[\"[object \"+i[n]+\"]\"]=i[n].toLowerCase();return null==t?\"null\":e[Object.prototype.toString.call(t)]||\"object\"},isEmptyObj:function(t){for(var e in t)return!1;return!0},argumentsToArray:function(t){var e=[];switch(this.getType(t)){case\"object\":e=Array.prototype.slice.call(t);break;case\"array\":e=t;break;case\"number\":case\"string\":e.push(t)}return e},template:function(t,e){var i=/{(.*?)}/g;return t.replace(i,function(t,i,n,o){return e[i]||\"\"})},encodeHTML:function(t){var e={'\"':\"&quot;\",\">\":\"&gt;\",\"<\":\"&lt;\",\"&\":\"&amp;\"};return t.replace(/[\\\"<>\\&]/g,function(t){return e[t]})},format:function(t,e){var i=/\\{(\\w+)\\:(\\w+)\\}/g,n=this;return t.replace(i,function(t,i,o){var r=e[i];switch(o){case\"number\":r=+r||0;break;case\"boolean\":r=!!r;break;case\"html\":r=n.encodeHTML(r)}return r})},jsonToObj:function(t){var e=\"\";return window.JSON&&window.JSON.parse&&(e=window.JSON.parse(t)),e},objToString:function(t){var e=\"\";try{e=window.JSON&&window.JSON.stringify?window.JSON.stringify(t):window.eval(t)}catch(i){}return e},trim:function(t){return t.replace(/(^\\s*)|(\\s*$)/g,\"\")},unique:function(t){for(var e=[],i={},n=t.length,o=0;n>o;o++){var r=t[o];i[r]||(e[e.length]=r,i[r]=!0)}return e},isArray:function(t){return\"[object Array]\"==Object.prototype.toString.call(t)},isFunction:function(t){return\"[object Function]\"==Object.prototype.toString.call(t)},toArray:function(t){if(null===t||void 0===t)return[];if(this.isArray(t))return t;if(\"number\"!=typeof t.length||\"string\"==typeof t||this.isFunction(t))return[t];if(t.item){for(var e=t.length,i=new Array(e);e--;)i[e]=t[e];return i}return[].slice.call(t)},encode:function(t){return void 0===t?\"\":encodeURIComponent(t)},encodeUrl:function(t){var e=escape(t);return e=e.replace(/([*+-.\\/@_])/g,function(t){return\"%\"+t.charCodeAt(0).toString(16)}),e.replace(/%/g,\"_\")},isPlain:function(t){var e,i=Object.prototype.hasOwnProperty;if(!(t&&\"[object Object]\"===Object.prototype.toString.call(t)&&\"isPrototypeOf\"in t))return!1;if(t.constructor&&!i.call(t,\"constructor\")&&!i.call(t.constructor.prototype,\"isPrototypeOf\"))return!1;for(e in t);return void 0===e||i.call(t,e)},clone:function(t){var e,i,n=t;if(!t||t instanceof Number||t instanceof String||t instanceof Boolean)return n;if(this.isArray(t)){n=[];var o=0;for(e=0,i=t.length;i>e;e++)n[o++]=this.clone(t[e])}else if(this.isPlain(t)){n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=this.clone(t[e]))}return n}}),i.define({name:\"browser\",namespace:\"dup.common.utility\",deps:{lang:\"dup.common.utility.lang\"},$browser:function(){this.win=window,this.nav=window.navigator,this.checkBrowser()},checkBrowser:function(){var t=navigator.userAgent,e=window.RegExp;this.antBrowser=!1,/msie (\\d+\\.\\d)/i.test(t)&&(this.ie=document.documentMode||+e.$1),/opera\\/(\\d+\\.\\d)/i.test(t)&&(this.opera=+e.$1),/firefox\\/(\\d+\\.\\d)/i.test(t)&&(this.firefox=+e.$1),/(\\d+\\.\\d)?(?:\\.\\d)?\\s+safari\\/?(\\d+\\.\\d+)?/i.test(t)&&!/chrome/i.test(t)&&(this.safari=+(e.$1||e.$2)),/chrome\\/(\\d+\\.\\d)/i.test(t)&&(this.chrome=+e.$1,this.test360()&&(this.qihoo=!0)),/qqbrowser\\/(\\d+\\.\\d)/i.test(t)&&(this.tencent=!0),(/ucbrowser\\/(\\d+\\.\\d)/i.test(t)||/ubrowser\\/(\\d+\\.\\d)/i.test(t))&&(this.uc=!0),/miuibrowser\\/(\\d+\\.\\d)/i.test(t)&&(this.xiaomi=!0),/vivobrowser\\/(\\d+\\.\\d)/i.test(t)&&(this.vivo=!0),/oppobrowser\\/(\\d+\\.\\d)/i.test(t)&&(this.oppo=!0);try{/(\\d+\\.\\d)/.test(this.lang.getAttribute(window,\"external.max_version\"))&&(this.maxthon=+e.$1)}catch(i){}(this.tencent||this.uc||this.xiaomi||this.vivo||this.oppo)&&(this.antBrowser=!0),this.isWebkit=/webkit/i.test(t),this.isGecko=/gecko/i.test(t)&&!/like gecko/i.test(t);for(var n=[\"Android\",\"iPad\",\"Phone\",\"iOS\",\"iPod\",\"Linux\",\"Macintosh\",\"Windows\"],o=\"\",r=0;r<n.length;r++){if(o=n[r],\"iPad\"===o||\"iPhone\"===o||\"iOS\"===o||\"iPod\"===o){this.isIOS=!0;break}if(\"Android\"===o){this.isAndroid=!0;break}if(t.match(new RegExp(o.toLowerCase(),\"i\")))break}this.platform=o},test360:function(){try{return\"scoped\"in document.createElement(\"style\")}catch(t){return!1}},getFlashPlayerVersion:function(){var t=0;try{var e=\"https:\"===location.protocol;if(this.chrome>=45||e)return 0;if(this.nav.plugins&&this.nav.mimeTypes.length){var i=this.nav.plugins[\"Shockwave Flash\"];i&&i.description&&(t=i.description.replace(/([a-zA-Z]|\\s)+/,\"\").replace(/(\\s)+r/,\".\")+\".0\")}if(0===t&&(this.win.ActiveXObject||this.win.hasOwnProperty(\"ActiveXObject\")))for(var n=30;n>=2;n--)try{var o=new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.\"+n);if(o){var r=o.GetVariable(\"$version\");if(t=r.replace(/WIN/g,\"\").replace(/,/g,\".\"),t>0)break}}catch(s){}t=parseInt(t,10),this.getFlashPlayerVersion=function(){return t}}catch(a){t=0}return t}}),i.define({name:\"cookie\",namespace:\"dup.common.utility\",deps:{lang:\"dup.common.utility.lang\"},get:function(t,e){var i=new RegExp(\"(^| )\"+t+\"=([^;]*)(;|$)\"),n=i.exec(document.cookie);return n?e?decodeURIComponent(n[2]):n[2]:\"\"},set:function(t,e,i,n){var o=i.expires;document.cookie=t+\"=\"+(n?encodeURIComponent(e):e)+(i.path?\"; path=\"+i.path:\"\")+(o?\"; expires=\"+o.toGMTString():\"\")+(i.domain?\"; domain=\"+i.domain:\"\")},remove:function(t){var e=new Date;e.setTime(e.getTime()-86400),this.set(t,\"\",{path:\"/\",expires:e})}}),i.define({name:\"additionalParam\",namespace:\"dup.business.parameter\",deps:{},$additionalParam:function(){this.paramsList=[]},ParamsMap:{clid:{key:\"apdi\",encode:!0},cuid:{key:\"udi\",encode:!0},ctkey:{key:\"lcdi\",encode:!0}},paramCheck:function(t,e){for(var i in e)if(i&&e.hasOwnProperty(i)&&this.ParamsMap[i]){var n=this.ParamsMap[i],o={};try{n.key&&(o.key=n.key,o.value=this.paramEncode(n,e[i])),n&&!n.key&&(o.key=i,o.value=this.paramEncode(n,e[i])),this.paramsList.push(o)}catch(r){}}},paramEncode:function(t,e){var i;return i=t.encode?encodeURIComponent(e):e}}),i.define({name:\"requestCache\",namespace:\"dup.business\",deps:{config:\"dup.common.config\"},slotInfoMap:{},secondResult:{},add:function(t,e){this.slotInfoMap[t]=e},get:function(t){return this.slotInfoMap[t]},cacheRequest:function(t,e){if(!t||this.secondResult[t])return!1;this.secondResult[t]=e;var i=this.get(t),n=this.config.CACHE_URL+\"dpv=\"+t+\"&di=\"+i.slotId;this.loadScript(n)},loadScript:function(t){var e=document.createElement(\"script\");e.charset=\"utf-8\",e.async=!0,e.src=t;var i=document.getElementsByTagName(\"head\")[0]||document.body;i.insertBefore(e,i.firstChild)}}),i.define({name:\"storage\",namespace:\"dup.common.utility\",store:null,isAvailable:!1,$storage:function(){try{this.store=window.localStorage,this.store&&this.store.removeItem&&(this.isAvailable=!0)}catch(t){}},available:function(){var t=!1;return this.store&&this.store.removeItem&&(t=!0),t},setItem:function(t,e,i){if(this.store){e=i?encodeURIComponent(e):e;try{this.store.setItem(t,e)}catch(n){}}},getItem:function(t,e){if(this.store){var i=this.store.getItem(t);return e&&i?decodeURIComponent(i):i}return null},addItem:function(t,e,i){if(this.store){e=i?encodeURIComponent(e):e;var n=this.getItem(t)||\"\";n+=(n&&\"|\")+e;try{this.setItem(t,n)}catch(o){}}},removeItem:function(t){this.store&&this.store.removeItem(t)},spliceItem:function(t,e,i){if(this.store){e=i?encodeURIComponent(e):e;var n=this.getItem(t)||\"\";if(n=n.replace(new RegExp(e+\"\\\\|?\",\"g\"),\"\").replace(/\\|$/,\"\"))try{this.setItem(t,n)}catch(o){}else this.store.removeItem(t)}}}),i.define({name:\"loader\",namespace:\"dup.common\",deps:{config:\"dup.common.config\"},$loader:function(){this.loadingCls=this.loadingCls||{}},load:function(t,e,n){var o=i.getClassPath(e),r=this.check(o);if(!r){var s=document.createElement(\"script\");s.type=\"text/javascript\",s.async=!0,s.src=o;var a=i.proxy(this,this.onLoadStatusHandler,t,s);s.onload=s.onerror=s.onreadystatechange=a;var d=document.getElementsByTagName(\"script\")[0];d.parentNode.insertBefore(s,d),this.loadingCls[t]=n}},check:function(){for(var t in this.loadingCls)if(this.loadingCls.hasOwnProperty(t)&&this.loadingCls[t]===!0)return!0;return!1},onLoadStatusHandler:function(t,e,i){var e,i;3===arguments.length?(e=arguments[1],i=arguments[2]):(e=arguments[0],i=arguments[1]);var n=this.loadingCls[e];i&&/loaded|complete|undefined/.test(i.readyState)&&(i.onload=i.onerror=i.onreadystatechange=null,i=void 0,n&&n())}}),i.define({name:\"float\",namespace:\"dup.ui.assertion.mobile\",painterName:\"float\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 1===i.rspFormat&&2===i.flowType&&(3===n.anchoredType||11===n.anchoredType)}}),i.define({name:\"dynamicFloat\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"dynamicFloat\",assert:function(t){var e=t.placement,i=e.basic,n=e.container,o=n.floated;return!(1!==i.rspFormat||1!==i.flowType||1!==n.anchoredType||!o||8!==o.trigger)}}),i.define({name:\"interface\",namespace:\"dup.business\",deps:{lang:\"dup.common.utility.lang\"},apiMap:{},$Interface:function(){},register:function(t,e,n){this.apiMap[t]=i.proxy(e,n)},executeTask:function(t){for(var e in t){var i=t[e];if(\"array\"===this.lang.getType(i)&&(\"id\"!==e||\"container\"!==e||\"size\"!==e||\"async\"!==e)){var n=this.apiMap[e];if(n)return n.apply(null,i)}}},perform:function(t,e){var i=this.apiMap[t];return i?i.apply(null,e):void 0}}),i.define({name:\"expBranch\",namespace:\"dup.business\",deps:{config:\"dup.common.config\"},tactics:function(){var t=1e3-this.config.SHUNT_NUMBER,e=1e9*Math.random();e<1e6*this.config.SHUNT_NUMBER?(this.config.EXP_SATUS=!0,this.config.EXP_ID=this.config.RD_ID):e>=1e6*t&&(this.config.EXP_ID=this.config.BASE_ID)}}),i.define({name:\"material\",namespace:\"dup.business\",deps:{lang:\"dup.common.utility.lang\",config:\"dup.common.config\"},$material:function(){var t=this;this.materialFactory={},this.materialFactory.text=function(e){var i=\"font-size:{size:number}{unit:string};color:{defaultColor:string};font-weight:{defaultBold:string};font-style:{defaultItalic:string};text-decoration:{defaultUnderline:string};\",n='<span style=\"word-wrap:break-word;\"><a href=\"{clickUrl:string}\" target=\"{target:string}\" style=\"'+i+'\"{events}>{text:string}</a></span>',o=/\\{events\\}/;if(1===e.version)n=n.replace(o,\"\");else if(2===e.version){var r=\"this.style.color='{defaultColor:string}';this.style.fontWeight='{defaultBold:string}';this.style.fontStyle='{defaultItalic:string}';this.style.textDecoration='{defaultUnderline:string}';\",s=\"this.style.color='{hoverColor:string}';this.style.fontWeight='{hoverBold:string}';this.style.fontStyle='{hoverItalic:string}';this.style.textDecoration='{hoverUnderline:string}';\",a=' onmouseover=\"'+s+'\" onmouseout=\"'+r+'\"';n=n.replace(o,a);for(var d=[\"default\",\"hover\"],l=0;l<d.length;l++){var c=d[l],h=c+\"Color\",p=c+\"Bold\",u=c+\"Italic\",m=c+\"Underline\";e[h]=\"#\"+e[h],e[p]=e[p]?\"bold\":\"normal\",e[u]=e[u]?\"italic\":\"normal\",e[m]=e[m]?\"underline\":\"none\"}}return t.lang.format(n,e)},this.materialFactory.image='<a href=\"{clickUrl:string}\" target=\"{target:string}\"><img src=\"{src:string}\" title=\"{title:html}\" alt=\"{title:html}\" border=\"0\" height=\"{height:number}\" width=\"{width:number}\" /></a>',this.materialFactory.flash=function(e){var i=[\"<script>\",\"var BD = BD || {};\",\"BD.MC = BD.MC || {};\",\"BD.MC.ADFlash = BD.MC.ADFlash || {};\",\"BD.MC.ADImg = BD.MC.ADImg || {};\",\"BD.MC.ADFlash.w = {width:number};\",\"BD.MC.ADFlash.h = {height:number};\",'BD.MC.ADFlash.mu = \"{src:string}\";','BD.MC.ADFlash.cu = \"{clickUrl:string}\";',\"BD.MC.ADFlash.wm = {wmode:number};\",'BD.MC.ADFlash.ct = \"{clickTag:string}\";',\"BD.MC.ADImg.w = {imageWidth:number};\",\"BD.MC.ADImg.h = {imageHeight:number};\",'BD.MC.ADImg.mu = \"{imageSrc:string}\";','BD.MC.ADImg.cu = \"{imageClickUrl:string}\";','BD.MC.ADImg.tw = \"{target:string}\";',\"BD.MC.ADImg.flag = {backupImage:number};\",\"</script>\",'<script src =\"','//cbjs.baidu.com/js/{file:string}.js\">',\"</script>\"];return e.file=e.hasLink?\"cflash\":\"flash\",e.imageClickUrl=e.clickUrl,e.hasLink||(e.clickUrl=\"\"),t.lang.format(i.join(\"\"),e)},this.materialFactory.rich=function(t){return t.content},this.materialFactory.slide=function(e,i){for(var n='<div id=\"bd_ec_clb_asp\" style=\"width:{width:number}px;height:{height:number}px;overflow:hidden;\">{html:string}</div><script>(function(){var d = document;function G(id) { return d.getElementById(id); };var container = G(\"bd_ec_clb_asp\");var pages = container.childNodes;var pl = 0;for (var i = 0; i < pages.length; i++) {if (pages[i].nodeType === 1) {pl++;}}var cp = 0;function showPage(pn) { pages[pn].style.display = \"\"; };function hidePages() {for (var i = 0; i < pl; i++) {pages[i].style.display = \"none\";}};function roll() {hidePages();showPage(cp);cp == (pages.length - 1) ? cp = 0 : cp++;};var autoRoll;function setRoll() { autoRoll = window.setInterval(function() { roll(); }, {interval:number});};roll();setRoll();container.onmouseover = function() { window.clearInterval(autoRoll); };container.onmouseout = function() {setRoll(); };})();</script>',o=[],r=e.materials,s=0;s<r.length;s++){var a=r[s];\"string\"!=typeof a&&(a=t.formatMaterial(a,i,!0)),o.push(a)}e.html=\"<div>\"+o.join(\"</div><div>\")+\"</div>\";var d=i.response.placement,l=d.container;return e.width=i.width||l.width,e.height=i.height||l.height,t.lang.format(n,e)}},formatMaterial:function(t,e,i){if(\"string\"==typeof t)return t;if(!t.type)return\"\";var n=this.materialFactory[t.type];if(n){var o=\"string\"==typeof n?this.lang.format(n,t):n(t,e);return i?o:\"<!DOCTYPE html><body>\"+o}return\"\"}}),i.define({name:\"monitor\",namespace:\"dup.business\",sendLog:function(t){if(t.response){var e=t.response.pdb_deliv.deliv_des,i=e._html,n=i&&i.monitorUrl;if(n){var o=new Image,r=\"log\"+ +new Date;window[r]=o,\"http\"==n.substr(0,4).toLowerCase()?(\"http://\"==n.substr(0,7).toLowerCase()&&(n=n.replace(\"http://\",\"//\")),\"https://\"==n.substr(0,8).toLowerCase()&&(n=n.replace(\"https://\",\"//\"))):n=\"//\"+n;var s=function(){o.onload=o.onerror=o.onabort=null;try{delete window[r]}catch(t){window[r]=void 0}};o.onload=o.onerror=o.onabort=s,o.src=n}}}}),i.define({name:\"inlayFix\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"inlayFix\",assert:function(t){var e=t.placement,i=e.basic,n=e.container,o=n.floated;return 1===i.rspFormat&&1===i.flowType&&1===n.anchoredType?o?1===o.trigger?!0:!this.isFloat(o):!0:!1},isFloat:function(t){for(var e in t)return!0;return!1}}),i.define({name:\"float\",namespace:\"dup.ui.assertion\",deps:{},painterName:\"float\",assert:function(t){var e=t.placement,i=e.basic,n=e.container;return 1===i.rspFormat&&1===i.flowType&&3===n.anchoredType,!1}}),i.define({name:\"unicode\",namespace:\"dup.common.utility\",deps:{},toDecode:function(t){var e=[];if(t instanceof Array){for(var i=0;i<t.length;i++){var n=t[i];e.push(this.decode(n))}return e}return\"string\"==typeof t?this.decode(t):void 0},toEncode:function(t){var e=[];if(t instanceof Array){for(var i=0;i<t.length;i++){var n=t[i];e.push(this.encode(n))}return e}return\"string\"==typeof t?this.encode(t):void 0},decode:function(t){return unescape(t.replace(/\\\\(u[0-9a-fA-F]{4})/gm,\"%$1\"))},encode:function(t){return escape(t).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm,function(t,e,i){return e&&\"\\\\\"+e.toLowerCase()||unescape(i)})}}),i.define({name:\"dom\",namespace:\"dup.common.utility\",deps:{lang:\"dup.common.utility.lang\",browser:\"dup.common.utility.browser\"},$dom:function(){},g:function(t,e){return t?\"string\"===this.lang.getType(t)&&t.length>0?(e=e||window,e.document.getElementById(t)):!t.nodeName||1!==t.nodeType&&9!==t.nodeType?null:t:null},getDocument:function(t){return 9===t.nodeType?t:t.ownerDocument||t.document},getWindow:function(t){var e=this.getDocument(t);return e.parentWindow||e.defaultView||null},isWindow:function(t){try{if(t&&\"object\"==typeof t&&t.document&&\"setInterval\"in t)return!0}catch(e){return!1}return!1},isInIframe:function(t,e){return t=t||window,t!=window.top&&t!=t.parent||!this.isWindow(t)},checkParentAccess:function(t){try{return!!t.parent.location.toString()}catch(e){return!1}},isInCrossDomainIframe:function(t,e){e=2===arguments.length?e:t.parent;for(var i=0,n=10;i++<n&&this.isInIframe(t,e);){if(!this.checkParentAccess(t))return!0;t=t.parent}return i>=n},ready:function(t,e,n){n=n||this.win||window;var o=n.document;e=e||0,this.domReadyMonitorRunTimes=0,this.readyFuncArray=this.readyFuncArray||[],this.readyFuncArray.push({func:t,delay:e,done:!1});var r=i.proxy(this,function(){var t=!1;this.domReadyMonitorRunTimes++;var e=!1;try{n.frameElement&&(e=!0)}catch(i){e=!0}if(this.browser.ie&&this.browser.ie<9&&!e)try{o.documentElement.doScroll(\"left\"),t=!0}catch(i){}else if(\"complete\"===o.readyState||this.domContentLoaded)t=!0;else if(this.domReadyMonitorRunTimes>3e5)return void(this.domReadyMonitorId&&(n.clearInterval(this.domReadyMonitorId),this.domReadyMonitorId=null));if(t)try{if(this.readyFuncArray&&this.readyFuncArray.length)for(var r=0,s=this.readyFuncArray.length;s>r;r++){var a=this.readyFuncArray[r];a&&a.func&&!a.done&&(a.delay?(a.done=!0,n.setTimeout(a.func,a.delay)):(a.done=!0,a.func()))}}catch(d){throw d}finally{this.domReadyMonitorId&&(n.clearInterval(this.domReadyMonitorId),this.domReadyMonitorId=null)}},this),s=i.proxy(this,function(){this.domContentLoaded=!0,r()});this.domReadyMonitorId||(this.domReadyMonitorId=n.setInterval(r,50),o.addEventListener?(o.addEventListener(\"DOMContentLoaded\",s,!1),n.addEventListener(\"load\",s,!1)):o.attachEvent&&n.attachEvent(\"onload\",s,!1))},bind:function(t,e,i){return\"string\"==typeof t&&(t=this.g(t)),e=e.replace(/^on/i,\"\").toLowerCase(),t.addEventListener?t.addEventListener(e,i,!1):t.attachEvent&&t.attachEvent(\"on\"+e,i),t},getNotCrossDomainTopWindow:function(t,e){1===arguments.length&&\"number\"===this.lang.getType(arguments[0])&&(e=arguments[0],t=void 0),e=e||10;for(var i=window,n=0;n++<e&&this.isInIframe(i)&&!this.isInCrossDomainIframe(i)&&(!t||!t(i));)i=i.parent;return i},getTopElement:function(t){var e=this.isWindow(t)?t.document:this.getDocument(t);return\"CSS1Compat\"===e.compatMode?e.documentElement:e.body},getDocumentTitle:function(){var t=this.getNotCrossDomainTopWindow(),e=t.document.title,i=60;return e.length>i&&(e=e.substr(0,i)),e},getPageClient:function(){var t;return\"number\"==typeof window.innerWidth?t={width:window.innerWidth,height:window.innerHeight}:document.documentElement&&document.documentElement.clientWidth?t={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight}:document.body&&document.body.clientWidth&&(t={width:document.body.clientWidth,height:document.body.clientHeight}),t},getNotCrossDomainWin:function(){var t=this.getWinList();return t[t.length-1]},getWinList:function(){for(var t=0,e=window,i=e.top,n=[e];e!==i&&t++<10&&this.isWindow(e)&&this.isWindow(e.parent);)e=e.parent,n.push(e);return getWinList=function(){return n},n}}),i.define({name:\"style\",namespace:\"dup.common.utility\",deps:{dom:\"dup.common.utility.dom\",lang:\"dup.common.utility.lang\",browser:\"dup.common.utility.browser\"},$style:function(){},getClientWidth:function(t){t=t||window;try{var e=this.dom.getTopElement(t).clientWidth;if(e||0===e)return e}catch(i){}return-1},getClientHeight:function(t){t=t||window;try{var e=this.dom.getTopElement(t).clientHeight;if(e||0===e)return e}catch(i){}return-1},getPositionCore:function(t){var e={top:0,left:0};if(t===this.dom.getTopElement(t))return e;var i=this.dom.getDocument(t),n=i.body,o=i.documentElement;if(n&&t.getBoundingClientRect){var r=t.getBoundingClientRect();e.left=Math.floor(r.left)+Math.max(o.scrollLeft,n.scrollLeft),e.top=Math.floor(r.top)+Math.max(o.scrollTop,n.scrollTop),e.left-=o.clientLeft,e.top-=o.clientTop;var s=this.getStyle(n,\"borderLeftWidth\"),a=this.getStyle(n,\"borderTopWidth\"),d=parseInt(s,10),l=parseInt(a,10);e.left-=isNaN(d)?2:d,e.top-=isNaN(l)?2:l}return e},getStyle:function(t,e){if(!t)return\"\";var i=\"\";i=e.indexOf(\"-\")>-1?e.replace(/[-][^-]{1}/g,function(t){return t.charAt(1).toUpperCase()}):e.replace(/[A-Z]{1}/g,function(t){return\"-\"+t.charAt(0).toLowerCase()});var n,o=this.dom.getWindow(t);if(o&&o.getComputedStyle){if(n=o.getComputedStyle(t,null))return n.getPropertyValue(e)||n.getPropertyValue(i)}else if(t.currentStyle)return n=t.currentStyle,n[e]||n[i];return\"\"},getPosition:function(t){if(t){var e=this.dom.g(t);if(!e)return!1;var i=this.getPositionCore(e),n=this.dom.getWindow(e);if(!n)return i;for(var o=0,r=10;n!==n.parent&&o++<r&&!this.dom.isInCrossDomainIframe(n)&&n.frameElement;){var s=this.getPositionCore(n.frameElement);i.left+=s.left,i.top+=s.top,n=n.parent}return i}},getOpacityInWin:function(t){for(var e=t,i=this.dom.getWindow(e),n=100;e&&e.tagName;){var o=100;if(this.browser.ie){if(this.browser.ie>5)try{o=parseInt(this.lang.getAttribute(e,\"filters.alpha.opacity\"),10)||100}catch(r){}n=n>o?o:n}else{try{o=100*(i.getComputedStyle(e,null).opacity||1)}catch(r){}n*=o/100}e=e.parentNode}return 0===n?0:n||100},getOpacity:function(t){for(var e=this.dom.g(t),i=this.dom.getWindow(e),n=this.getOpacityInWin(e),o=0,r=10;o++<r&&this.dom.isInIframe(i)&&!this.dom.isInCrossDomainIframe(i);){var s=i.frameElement?this.getOpacityInWin(i.frameElement):100;n*=s/100,i=i.parent}return n},getScrollWidth:function(t){t=t||window;try{var e=this.dom.getTopElement(t).scrollWidth;if(e||0===e)return e}catch(i){}return-1},getScrollHeight:function(t){t=t||window;try{var e=this.dom.getTopElement(t).scrollHeight;if(e||0===e)return e}catch(i){}return-1},getScrollTop:function(t){t=t||window;var e=t.document;return t.pageYOffset||e.documentElement.scrollTop||e.body.scrollTop},getScrollLeft:function(t){var e=t||window,i=this.dom.getTopElement(e);return e.pageXOffset||i.scrollLeft},getOuterWidth:function(t,e){var i=this.dom.g(t),n=i.offsetWidth;return e&&(n+=this.getMargin(i,\"Left\")+this.getMargin(i,\"Right\")),n},getMargin:function(t,e){var i=this.getStyle(t,\"margin\"+e).toString().toLowerCase().replace(\"px\",\"\").replace(\"auto\",\"0\");return parseInt(i,10)||0},getOuterHeight:function(t,e){var i=this.dom.g(t),n=i.offsetHeight;return e&&(n+=this.getMargin(i,\"Top\")+this.getMargin(i,\"Bottom\")),n},canFixed:function(){var t=!0;return this.browser.ie&&(this.browser.ie<7||\"BackCompat\"===document.compatMode)&&(t=!1),t},setStyle:function(t,e,i){var n=this.dom.g(t);n.style[e]=i},setStyles:function(t,e){for(var i in e)e.hasOwnProperty(i)&&this.setStyle(t,i,e[i]);return t},getDefaultStyle:function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,!1)[e]},isVisible:function(t){return\"none\"!==this.getDefaultStyle(t,\"display\")&&\"hidden\"!==this.getDefaultStyle(t,\"visibility\")&&\"100\"==this.getOpacity(t)}}),i.define({name:\"url\",namespace:\"dup.common.utility\",deps:{dom:\"dup.common.utility.dom\"},getQueryValue:function(t,e,i){var n=new RegExp(\"(\\\\?|&|#)\"+e+\"=([^&#]*)(&|#)?\"),o=t.match(n),r=\"\";return o&&(r=o[2]),i&&(r=decodeURIComponent(r)),r},getTopWindowUrl:function(t){var e=this.dom.getNotCrossDomainTopWindow(t),i=\"\";return this.dom.isInIframe(e)&&(i=e.document.referrer),\ni=i||e.location.href},getMainDomain:function(t){t=t||document.domain,0===t.indexOf(\"www.\")&&(t=t.substr(4)),\".\"===t.charAt(t.length-1)&&(t=t.substring(0,t.length-1));var e=[\"com\",\"cn\",\"net\",\"org\",\"gov\",\"info\",\"la\",\"cc\",\"co\",\"jp\",\"us\",\"hk\",\"tv\",\"me\",\"biz\",\"in\",\"be\",\"io\",\"tk\",\"cm\",\"li\",\"ru\",\"ws\",\"hn\",\"fm\",\"tw\",\"ma\",\"in\",\"vn\",\"name\",\"mx\",\"gd\",\"im\"],i=new RegExp(\"([a-z0-9][a-z0-9\\\\-]*?\\\\.(?:\"+e.join(\"|\")+\")(?:\\\\.(?:cn|jp|tw|ru|th))?)$\",\"i\"),n=t.match(i);return n?n[0]:t},queryToJson:function(t){for(var e,i,n,o,r=t.substr(t.indexOf(\"?\")+1),s=r.split(\"&\"),a=s.length,d={},l=0;a>l;l++)o=s[l].split(\"=\"),e=o[0],i=o[1],n=d[e],\"undefined\"==typeof n?d[e]=i:\"[object Array]\"==Object.prototype.toString.call(n)?n.push(i):d[e]=[n,i];return d}}),i.define({name:\"data\",namespace:\"dup.common.utility\",deps:{lang:\"dup.common.utility.lang\",dom:\"dup.common.utility.dom\"},$data:function(){this.pageInfo={}},data:function(){this.topWin=this.dom.getNotCrossDomainTopWindow(),this.globalInfo=this.topWin.BAIDU_SSP__info||(this.topWin.BAIDU_SSP__info={})},forEach:function(t,e){var i,n,o,r=t.length;if(\"function\"==typeof e)for(o=0;r>o&&(n=t[o],i=e.call(t,n,o),i!==!1);o++);return t},putInfo:function(t,e,i){var n,o=i?this.globalInfo:this.pageInfo;if(\"string\"===this.lang.getType(t)){for(var r=t.split(\".\"),s=o;r.length;){var a=r.shift();s[a]=r.length?void 0!==s[a]?s[a]:{}:e,s=s[a]}n=e}return n},removeInfo:function(t,e){var i=e?this.globalInfo:this.pageInfo;switch(this.lang.getType(t)){default:return!1;case\"string\":for(var n=t.split(\".\");n.length;){var o=n.shift();if(!n.length||void 0===i[o])return delete i[o],!0;i=i[o]}}return!1},getInfo:function(t,e){var i,n=e?this.globalInfo:this.pageInfo;return\"string\"===this.lang.getType(t)&&(i=this.lang.getAttribute(n,t)),i},getOnce:function(t){var e=window,i=e[t];return e[t]=void 0,i},defineOnce:function(t,e){var i=window;return i[t]?i[t]:(i[t]=e,e)},getConfig:function(t){return t?(this.pageInfo=this.getInfo(\"pageConfig\")||{},this.pageInfo[t]):!1},putConfig:function(t,e){return t&&e?(this.pageInfo=this.getInfo(\"pageConfig\")||{},this.pageInfo[t]=e,this.putInfo(\"pageConfig\",this.pageInfo),!0):!1}}),i.define({name:\"origentation\",namespace:\"dup.business\",deps:{lang:\"dup.common.utility.lang\",data:\"dup.common.utility.data\"},orientKey:\"bizOrientations\",orientUrgentKey:\"bizUrgentOrientations\",hasOwn:Object.prototype.hasOwnProperty,watchingSlotsMap:{},slotFinishedCallback:function(){},addOrientation:function(t,e){var i=this.beforeSavingOrientation.apply(this,arguments);return this.saveOrientation(t,i)},addOrientationOnce:function(t,e){var i=this.beforeSavingOrientation.apply(this,arguments);return this.saveOrientation(t,i,{urgent:!0,merge:!0})},setOrientationOnce:function(t,e){var i=this.beforeSavingOrientation.apply(this,arguments);return this.saveOrientation(t,i,{urgent:!0,override:!0})},beforeSavingOrientation:function(t,e){var i=/^[0-9a-zA-Z]+$/;return t&&i.test(t)&&e?e=\"array\"===this.lang.getType(e)?e:Array.prototype.slice.call(arguments,1):[]},saveOrientation:function(t,e,i){if(!e||!e.length)return!1;i=i||{urgent:!1,merge:!1,override:!1};var n=i.merge?this.data.getInfo(this.orientKey):{},o=i.urgent?this.orientUrgentKey:this.orientKey,r=i.override?{}:this.data.getInfo(o)||n,s={};for(var a in r)this.hasOwn.call(r,a)&&(s[a]=\"array\"===this.lang.getType(r[a])?r[a].slice():r[a]);for(var d=s[t]||[],l=e.length,c=0;l>c;c++){var h=e[c];\"string\"==typeof h&&(h=encodeURIComponent(h),h.length<=100&&(d[d.length]=h))}return d.length?(s[t]=this.lang.unique(d),this.data.putInfo(o,s),!0):!1},getOrientationQuery:function(t){t=t||500,t=Math.max(0,Math.min(t,500));var e,i=[],n=this.data.getInfo(this.orientUrgentKey)||this.data.getInfo(this.orientKey)||{};if(\"object\"===this.lang.getType(n))for(var o in n)this.lang.hasOwn.call(n,o)&&(e=o+\"=\"+n[o].join(\",\"),i[i.length]=e);this.data.putInfo(this.orientUrgentKey,void 0),i.sort(function(t,e){return t.length-e.length});for(var r=\"\",s=i.length,a=0;s>a&&!(r.length+i[a].length>=t);a++)r+=(a?\"&\":\"\")+i[a];return r},addSlotStatusCallback:function(t,e){this.setSlotFinishCallback(t),this.addWatchSlotId(e)},setSlotFinishCallback:function(t){this.slotFinishedCallback=t},addWatchSlotId:function(t){this.watchingSlotsMap[t]=!0}}),i.define({name:\"browserParam\",namespace:\"dup.business.parameter\",deps:{config:\"dup.common.config\",browser:\"dup.common.utility.browser\",dom:\"dup.common.utility.dom\",style:\"dup.common.utility.style\",url:\"dup.common.utility.url\",cookie:\"dup.common.utility.cookie\"},$browserParam:function(){this.win=window,this.doc=this.win.document,this.nav=this.win.navigator},getTopWin:function(){return this.topWindow||(this.topWindow=this.dom.getNotCrossDomainTopWindow()),this.topWindow},paramsList:[{key:\"dbv\",value:function(){return this.browser.qihoo?\"1\":this.browser.chrome?\"2\":\"0\"}},{key:\"drs\",value:function(){var t={uninitialized:0,loading:1,loaded:2,interactive:3,complete:4};try{return t[this.doc.readyState]}catch(e){return-1}}},{key:\"pcs\",value:function(){var t=[this.style.getClientWidth(this.getTopWin()),this.style.getClientHeight(this.getTopWin())];return t.join(\"x\")}},{key:\"pss\",value:function(){var t=[this.style.getScrollWidth(this.getTopWin()),this.style.getScrollHeight(this.getTopWin())];return t.join(\"x\")}},{key:\"cfv\",value:function(){return this.browser.getFlashPlayerVersion()}},{key:\"cpl\",value:function(){return this.nav.plugins.length||0}},{key:\"chi\",value:function(){return this.win.history.length||0}},{key:\"cce\",value:function(){return this.nav.cookieEnabled||0}},{key:\"cec\",value:function(){return(this.doc.characterSet?this.doc.characterSet:this.doc.charset)||\"\"}},{key:\"tlm\",value:function(){return Date.parse(this.doc.lastModified)/1e3}},{key:\"prot\",value:function(){return\"https:\"===this.config.HTTP_PROTOCOL?\"2\":\"\"}},{key:\"rw\",value:function(){var t=Math.max(320,Math.min(window.innerWidth,window.innerHeight));return isNaN(t)&&(t=Math.min(this.style.getClientWidth(),this.style.getClientHeight())),t||0}},{key:\"ltu\",encode:!0,limit:700,value:function(){if(this.slotInfo.rpdn&&0!==location.protocol.indexOf(\"http\"))return\"https://\"+this.slotInfo.rpdn;var e,n=i.proxy(this,function(t){var e=200,i=60,n=this.style.getClientWidth(t),o=this.style.getClientHeight(t);return e>0&&i>0&&n>2*e&&o>2*i});return e=t.location&&t.location.href?t.location.href:this.url.getTopWindowUrl(n),e.indexOf(\"cpro_prev\")>0&&(e=e.slice(0,e.indexOf(\"?\"))),e}},{key:\"liu\",encode:!0,limit:700,value:function(){return this.dom.isInIframe(this.win)?this.doc.URL:\"\"}},{key:\"ltr\",encode:!0,limit:300,value:function(){var t=this.getTopWin(),e=\"\";try{e=t.opener?t.opener.document.location.href:\"\"}catch(i){}return e||t.document.referrer}},{key:\"lcr\",encode:!0,value:function(){if(\"union\"===this.slotInfo.productLine)return\"\";var t=this.doc.referrer;if(!t)return\"\";var e=t.replace(/^https?:\\/\\//,\"\");e=e.split(\"/\")[0],e=e.split(\":\")[0],e=this.url.getMainDomain(e);var i=this.url.getMainDomain(),n=this.cookie.get(this.config.LCR_COOKIE_NAME);return n&&i===e?n:i!==e?(this.cookie.set(this.config.LCR_COOKIE_NAME,t,{domain:i}),t):\"\"}},{key:\"ecd\",encode:!0,value:function(){return this.browser.ie&&this.browser.ie<8?0:1}}],setSlotInfo:function(t){this.slotInfo=t}}),i.define({name:\"systemParam\",namespace:\"dup.business.parameter\",deps:{dom:\"dup.common.utility.dom\",style:\"dup.common.utility.style\"},$systemParam:function(){this.win=window,this.doc=this.win.document,this.screen=this.win.screen,this.nav=this.win.navigator},paramsList:[{key:\"par\",value:function(){var t=[this.screen.availWidth,this.screen.availHeight];return t.join(\"x\")}},{key:\"pis\",value:function(){var t=this.dom.isInIframe(this.win)?[this.style.getClientWidth(),this.style.getClientHeight()]:[-1,-1];return t.join(\"x\")}},{key:\"ccd\",value:function(){return this.screen.colorDepth||0}},{key:\"cja\",value:function(){return this.nav.javaEnabled().toString()}},{key:\"cmi\",value:function(){return this.nav.mimeTypes.length||0}},{key:\"col\",value:function(){return(this.nav.language||this.nav.browserLanguage||this.nav.systemLanguage||\"\").replace(/[^a-zA-Z0-9\\-]/g,\"\")}},{key:\"cdo\",value:function(){var t=this.win.orientation;return void 0===t&&(t=-1),t}},{key:\"sr\",value:function(){var t=[this.screen.width,this.screen.height];return t.join(\"x\")}},{key:\"tcn\",value:function(){var t=+new Date;return Math.round(t/1e3)}}]}),i.define({name:\"event\",namespace:\"dup.common.utility\",deps:{dom:\"dup.common.utility.dom\"},bind:function(t,e,i){var n=this.dom.isWindow(t)?t:this.dom.g(t);if(n)if(n.addEventListener)n.addEventListener(e,i,!1);else if(n.attachEvent)n.attachEvent(\"on\"+e,i);else{var o=n[\"on\"+e];n[\"on\"+e]=function(){o&&o.apply(this,arguments),i.apply(this,arguments)}}return n},off:function(t,e,i){var n,o,r=t._listeners_;if(!r)return t;if(\"undefined\"==typeof e){for(n in r)delete r[n];return t}if(e.indexOf(\"on\")&&(e=\"on\"+e),\"undefined\"==typeof i)delete r[e];else if(o=r[e])for(n=o.length-1;n>=0;n--)o[n].handler===i&&o.splice(n,1);return t},unBind:function(t,e,i){return\"string\"==typeof t&&(t=this.dom.g(t)),t=this.off(t,e.replace(/^\\s*on/,\"\"),i)},app:function(t,e){return t.bind.apply(t,Array.prototype.slice.call(arguments,1))}}),i.define({name:\"fingerPrint\",namespace:\"dup.business\",deps:{browser:\"dup.common.utility.browser\",event:\"dup.common.utility.event\",dom:\"dup.common.utility.dom\",storage:\"dup.common.utility.storage\"},start:function(){this.idPrefix=\"BAIDU_DUP_fp_\",this.fpElId=this.idPrefix+\"wrapper\",this.dom.g(this.fpElId)||this.event.bind(window,\"load\",i.proxy(this,this.createFPIframe))},createFPIframe:function(){if(!this.dom.g(this.fpElId)){var t=window,e=t.document,i=e.body,n=this.dom.isInIframe(t)?e.URL:\"\",o=null,r=null;if((this.browser.ie>9||!this.browser.ie)&&n)try{o=e.cookie,r=this.storage.isAvailable}catch(s){return}var a=\"https://pos.baidu.com/wh/o.htm?ltr=\",d=e.createElement(\"div\");d.id=this.fpElId,d.style.position=\"absolute\",d.style.left=\"-1px\",d.style.bottom=\"-1px\",d.style.zIndex=0,d.style.width=0,d.style.height=0,d.style.overflow=\"hidden\",d.style.visibility=\"hidden\",d.style.display=\"none\";var l=e.createElement(\"iframe\");l.id=this.idPrefix+\"iframe\",l.src=a,l.style.width=0,l.style.height=0,l.style.visibility=\"hidden\",l.style.display=\"none\";try{d.insertBefore(l,d.firstChild),i&&i.insertBefore(d,i.firstChild)}catch(s){}}}}),i.define({name:\"asserter\",namespace:\"dup.ui.assertion\",deps:{mobile:\"dup.ui.assertion.mobile.float\",dynamicFloat:\"dup.ui.assertion.dynamicFloat\"},assert:function(t){for(var e=t.response.placement.userdefine||\"\",i=e.split(\"|\")||[],n={},o=0,r=i.length;r>o;o++){var s=i[o],a=s.split(\"=\"),d=a[0];d&&(n[d]=a[1])}if(n.hasOwnProperty(\"painter\"))return n.painter;var l=t.styleOpenApi.tn||\"\",c=parseInt(t.styleOpenApi.xuanting||0,10);return l.indexOf(\"mobile\")>=0?c>0||this.mobile.assert(t.response)?\"mobile.float\":\"mobile.inlayFix\":\"template_float_searchBar\"===l?\"searchBar\":c>0||this.dynamicFloat.assert(t.response)?\"dynamicFloat\":l&&l.length>0?\"inlayFix\":\"\"}}),i.define({name:\"sceneTactics\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",exp:\"dup.business.expBranch\",url:\"dup.common.utility.url\",browser:\"dup.common.utility.browser\"},$sceneTactics:function(){this.config.REQUEST_URL_CNAME&&this.browser.antBrowser&&(this.config.REQUEST_URL=\"//\"+this.config.REQUEST_URL_CNAME+\"/\",this.config.IS_CNAME=!0);var t=String.fromCharCode(Math.floor(26*Math.random())+97),e=String.fromCharCode(Math.floor(26*Math.random())+97);this.config.POS_URL||(this.config.POS_URL=this.config.HTTP_PROTOCOL+this.config.REQUEST_URL+t+\"c\"+e+\"m?\"),this.config.EXP_SWITCH&&this.exp.tactics()},sceneTactics:function(){}}),i.define({name:\"creativePreview\",namespace:\"dup.business\",deps:{url:\"dup.common.utility.url\",dom:\"dup.common.utility.dom\",cookie:\"dup.common.utility.cookie\",config:\"dup.common.config\",lang:\"dup.common.utility.lang\"},PREV_TEMP_URL:\"//cpro.baidu.com/cpro/ui/preview/templates/\",validate:function(t,e,i,n,o){var r=!1,s=this.getPrevValue(i,o);if(!s)return r;for(var a=this.parsePreviewData(s),d=1===parseInt(a.type,10),l=!(n.length>0),c=!(n.length>0),h=0,p=n.length;p>h;h++){var u=n[h];0===u?c=!0:4===u||50===u?(c=!0,l=!0):1!==u&&2!==u||(l=!0)}return!d&&l?r=parseInt(a.imgWidth,10)===parseInt(t,10)&&parseInt(a.imgHeight,10)===parseInt(e,10):d&&c&&this.isAvalibleTextSize(t,e)&&(r=!0),r},isAvalibleTextSize:function(t,e){for(var i=[\"1024_60\",\"120_240\",\"120_600\",\"125_125\",\"160_600\",\"180_150\",\"200_200\",\"234_60\",\"250_250\",\"300_120\",\"300_250\",\"300_280\",\"336_280\",\"360_150\",\"360_300\",\"460_60\",\"468_60\",\"480_160\",\"500_200\",\"580_90\",\"640_60\",\"728_90\",\"760_60\",\"760_75\",\"760_90\",\"960_60\",\"960_75\",\"960_90\"],n=0,o=i.length;o>n;n++)if(t+\"_\"+e===i[n])return!0;return!1},getPreviewUrl:function(t,e,i,n){var o=window.location.href;if(!this.validate(t,e,n,i,o))return\"\";var r=n.indexOf(\"inlay\")>=0?\"bd_cpro_prev\":\"bd_cpro_fprev\",s=this.getPrevValue(n,o),a=this.parsePreviewData(s),d=\"\";return n.indexOf(\"inlay\")>=0?d=this.getInlayUrl(parseInt(a.type,10),r,s,\"text_default_\"+t+\"_\"+e):n.indexOf(\"float\")>=0&&(d=this.getFloatUrl(parseInt(a.type,10),r,s)),d},getPrevValue:function(t,e){var i;i=e?e.substring(e.indexOf(\"?\")):this.dom.isInCrossDomainIframe(window)?window.location.search.slice(1):window.top.location.search.slice(1);var n,o=document.referrer,r=t.indexOf(\"inlay\")>=0||\"ui\"===t?\"bd_cpro_prev\":\"bd_cpro_fprev\",s=\"\";try{n=document.cookie}catch(a){}return i.indexOf(r)>-1&&(s=this.url.getQueryValue(i,r)),!s&&n&&-1!==n.indexOf(r)&&(s=this.cookie.get(r)),s||-1===o.indexOf(r)||(s=this.url.getQueryValue(o,r)),s},parsePreviewData:function(t){return t=decodeURIComponent(t).replace(/\\\\x1e/g,\"&\").replace(/\\\\x1d/g,\"=\").replace(/\\\\x1c/g,\"?\").replace(/\\\\x5c/g,\"\\\\\"),this.lang.jsonToObj(t)},getFloatUrl:function(t,e,i){var n;n=2===t?\"float_image.html\":4===t||3===t?\"float_flash.html\":\"blank_tips.html\";var o=this.PREV_TEMP_URL+n+\"?\",r=\"tn=template_float_all_normal\"+(\"&\"+e+\"=\"+i).replace(/\\./g,\"%252e\")+\"&ut=\"+ +new Date;return o+r},getInlayUrl:function(t,e,i,n){var o;o=1===t?n+\".html\":2===t?\"image.html\":4===t||3===t?\"flash.html\":\"blank_tips.html\";var r=this.PREV_TEMP_URL+o+\"?\";return r+=(\"\"+e+\"=#\"+i+\"&ut=\"+ +new Date).replace(/\\.(?!swf)/g,\"%252e\")}}),i.define({name:\"deliveryLimit\",namespace:\"dup.business\",deps:{inlayFixAssert:\"dup.ui.assertion.inlayFix\",dynamicFloatAssert:\"dup.ui.assertion.dynamicFloat\",floatAssert:\"dup.ui.assertion.float\",dom:\"dup.common.utility.dom\"},MAX_COUNT:{},TYPE:{INLAY:\"inlay\",COUPLET:\"couplet\",POPUP:\"popup\",LINKUNIT:\"linkunit\"},$deliveryLimit:function(){this.displayedMap=this.displayedMap||{},this.MAX_COUNT[this.TYPE.INLAY]=25,this.MAX_COUNT[this.TYPE.COUPLET]=2,this.MAX_COUNT[this.TYPE.POPUP]=1,this.MAX_COUNT[this.TYPE.LINKUNIT]=25},validate:function(t){if(\"union\"!==t.productLine)return!0;var e=this.getSlotType(t),i=this.getAdCount(e),n=this.MAX_COUNT[e];return n>i},getAdCount:function(t){var e=this.displayedMap[t]||{},i=0;for(var n in e)n&&e[n]&&e.hasOwnProperty(n)&&(this.dom.g(n)?i++:e[n]=void 0);return i},setAdsCount:function(t,e){var i=this.displayedMap[t];return i||(this.displayedMap[t]={},i=this.displayedMap[t]),i[e]=1,!0},getSlotType:function(t){var e=this.TYPE.INLAY,i=t.response;if(!i)return e;var n=i.placement;if((this.inlayFixAssert.assert(i)||this.dynamicFloatAssert.assert(i))&&(e=this.TYPE.INLAY),n&&n.fillstyle)for(var o=i.placement.fillstyle.elements||[],r=0,s=o.length;s>r;r++)if(5===o[r])return this.TYPE.LINKUNIT;return e}}),i.define({name:\"landingPage\",namespace:\"dup.ui.painter\",deps:{lang:\"dup.common.utility.lang\",style:\"dup.common.utility.style\",browser:\"dup.common.utility.browser\",dom:\"dup.common.utility.dom\"},activate:function(t){return this.validate(t)?(this.expansionActionName=\"BaiduCproExpansion\"+t.containerId,this.pageIframeId=t.containerId+\"_ExpansionLP\",t.paramObj.expToken=this.expansionActionName,this.dom.bind(window,\"message\",i.proxy(this,this.onPostMessageHandler)),!0):!1},validate:function(t){var e=parseInt(t.styleOpenApi.expansion||0,10);return 1===e&&!this.browser.isIOS&&\"postMessage\"in window},onPostMessageHandler:function(t){if(\"object\"==typeof t&&t.data){var e=t.data;if(\"string\"==typeof e&&!(e.indexOf(this.expansionActionName)<0)){this.expandContainerEl=document.createElement(\"div\");var n=Math.max(this.style.getClientWidth(),this.style.getClientHeight()),o=this.expandContainerEl.style;o.position=\"fixed\",o.left=\"0\",o.top=n+\"px\",o.zIndex=2147483647,o.background=\"#ffffff\",o.width=\"100%\",o.transition=o.WebkitTransition=o.MozTransition=o.OTransition=\"top 1s ease-in-out\",e=e.slice(this.expansionActionName.length);var r=['<iframe id=\"{lpIframeId}\" ','src=\"{clickUrl}\" width=\"{iframeWidth}\" ','height=\"{iframeHeight}\" align=\"center,center\" ','marginwidth=\"0\"  marginheight=\"0\" ','frameborder=\"0\"></iframe>','<div id=\"{lpIframeId}_closeBtn\" ','style=\"position:absolute;right:0;top:0;',\"width:{closeBtnSize}px;\",\"height:{closeBtnSize}px;\",\"overflow:hidden;display:block;\",\"background:url('https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.0/xuantingClose.png') \",\"no-repeat 0 0; \",\"_filter:progid:DXImageTransform\",\".Microsoft.AlphaImageLoader(\",\"enabled=true, sizingMethod=none, \",\"src='https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.0/xuantingClose.png');\",\"_background:none;cursor:pointer;\",'background-position:center;background-size:100%,100%;\">&nbsp;</div>'].join(\"\"),s=Math.min(this.style.getClientWidth(),this.style.getClientHeight()),a={lpIframeId:this.pageIframeId,clickUrl:e,iframeWidth:this.style.getClientWidth(),iframeHeight:this.style.getClientHeight(),closeBtnSize:80*s/640};this.expandContainerEl.innerHTML=this.lang.template(r,a),this.expandContainerEl.style.top=\"0\",document.body.appendChild(this.expandContainerEl),this.dom.bind(window,\"resize\",i.proxy(this,this.onResizeHandler));var d=this.dom.g(this.pageIframeId+\"_closeBtn\");this.dom.bind(d,\"click\",i.proxy(this,this.onCloseBtnClickHandler))}}},onCloseBtnClickHandler:function(){this.expandContainerEl.style.top=Math.max(this.style.getClientWidth(),this.style.getClientHeight())+\"px\",this.expandContainerEl&&this.expandContainerEl.parentNode?(this.expandContainerEl.parentNode.removeChild(this.expandContainerEl),this.expandContainerEl=null):this.expandContainerEl.innerHTML=\"\"},onResizeHandler:function(){var t=this.style.getClientWidth(),e=this.style.getClientHeight(),i=this.dom.g(this.pageIframeId);i.style.width=t+\"px\",i.style.height=e+\"px\",i.setAttribute(\"width\",t),i.setAttribute(\"height\",e)}}),i.define({name:\"hiddenFloatAd\",namespace:\"dup.ui.painter\",deps:{style:\"dup.common.utility.style\",dom:\"dup.common.utility.dom\"},TOP:2,BOTTOM:3,render:function(t){if(!this.validate(t))return!1;this.alreadyEnableHidden=!0,this.autoCloseTime=t.response.placement.container.closeTime||5,t.styleOpenApi.cpro_close_time&&(this.autoCloseTime=parseInt(t.styleOpenApi.cpro_close_time,10)||5),this.autoCloseTime=this.autoCloseTime>=3?this.autoCloseTime:3;var e=parseInt(t.styleOpenApi.cpro_show_dist,10)||5;e=e>=5?e:5,this.percentage=(1/e).toFixed(2);var n=t.response.placement,o=n.container;this.dockTo=parseInt(o.location,10)||this.BOTTOM,this.adWrapEl=document.getElementById(t.containerId),this.adWrapEl.style.display=\"block\",this.adIframe=this.dom.g(t.containerId+\"_frame\");var r=this.dom.g(t.containerId+\"_closebtn\"),s=parseInt(this.adWrapEl.style.height||t.height,10),a=parseInt(r.style.height,10);this.hiddenHeight=-1*(s+a),this.haveSetIframeUrl=!0,this.countDownTimerId=!1,this.close4ever=!1,this.shrinkAd(),this.transitionDecorator(this.adWrapEl),this.lastScrollTop=this.style.getScrollTop(),this.dom.bind(r,\"click\",i.proxy(this,this.closeBtnOnClickHandler)),this.dom.bind(window,\"scroll\",i.proxy(this,this.onScrollHandler))},validate:function(t){var e=!!t.styleOpenApi.cpro_enable_hidden_float,i=t.response.placement.container,n=i.anchoredType,o=i.floated.trigger;return e||\"11\"==n&&o?this.alreadyEnableHidden?!1:(this.alreadyEnableHidden=!0,!0):!1},shrinkAd:function(){this.dockTo===this.TOP?this.adWrapEl.style.top=this.hiddenHeight+\"px\":this.dockTo===this.BOTTOM&&(this.adWrapEl.style.bottom=this.hiddenHeight+\"px\")},expandAd:function(){this.dockTo===this.TOP?this.adWrapEl.style.top=0:this.adWrapEl.style.bottom=0,this.adIframe&&!this.haveSetIframeUrl&&(this.adIframe.src=this.adIframe.getAttribute(\"_src\"),this.haveSetIframeUrl=!0)},transitionDecorator:function(t){var e=\"-webkit-transition: all .3s linear;-moz-transition: all .3s linear;-ms-transition: all .3s linear;-o-transition: all .3s linear;transition: all .3s linear;\";t.style.cssText=t.style.cssText+e},startCountDown:function(t,e){var i=t,n=setInterval(function(){i--,0>=i&&(clearInterval(n),e&&e())},1e3);this.countDownTimerId=n},closeBtnOnClickHandler:function(){this.shrinkAd(),this.close4ever=!0},onScrollHandler:function(){var t=Math.max(document.documentElement.clientHeight,window.innerHeight||0)*this.percentage,e=this.style.getScrollTop(),n=e>this.lastScrollTop?\"down\":\"top\";this.totalScrollLength+=e-this.lastScrollTop,this.lastScrollTop=e,\"top\"===n&&!this.close4ever&&Math.abs(this.totalScrollLength)>=t&&!this.countDownTimerId?(this.expandAd(),this.startCountDown(this.autoCloseTime,i.proxy(this,this.onTimeCountDownHandler))):\"down\"===n&&(this.totalScrollLength=0)},onTimeCountDownHandler:function(){this.shrinkAd(),this.countDownTimerId=!1,this.totalScrollLength=0}}),i.define({name:\"slotParam\",namespace:\"dup.business.parameter\",deps:{dom:\"dup.common.utility.dom\",style:\"dup.common.utility.style\"},$slotParam:function(){this.win=window},paramsList:[{key:\"di\",value:function(){return this.slotInfo.slotId}},{key:\"dri\",value:function(){return this.slotInfo.index}},{key:\"dis\",value:function(){var t=0;this.dom.isInIframe(this.win)&&(t+=1),this.dom.isInCrossDomainIframe(this.win,this.win.top)&&(t+=2);var e=this.style.getClientWidth(),i=this.style.getClientHeight();return(40>e||10>i)&&(t+=4),t}},{key:\"dai\",value:function(){return this.slotInfo.count}},{key:\"ps\",value:function(){var t=\"0\",e=this.dom.g(this.slotInfo.containerId),i=this.style.getPosition(e);return i&&void 0!==i.top&&void 0!==i.left&&(t=i.top+\"x\"+i.left),t}},{key:\"coa\",encode:!0,value:function(){var t=[],e=this.slotInfo.styleOpenApi;\"-1\"===this.slotInfo.pcwd&&(e.cpro_ftpc=\"true\");for(var i in e)if(i&&\"undefined\"!=typeof e[i]&&e.hasOwnProperty(i)){var n=i;\"cpro_w\"===i&&(n=\"rsi0\"),\"cpro_h\"===i&&(n=\"rsi1\"),t.push(n+\"=\"+encodeURIComponent(e[i]))}return t.join(\"&\")}},{key:\"cw\",value:function(){var t=this.slotInfo.styleOpenApi.cpro_ftpc||\"true\"===this.slotInfo.styleOpenApi.cpro_ftpc||\"-1\"===this.slotInfo.pcwd,e=this.dom.g(this.slotInfo.containerId);return t&&e&&e.parentElement.clientWidth?e.parentElement.clientWidth||0:void 0}}],setSlotInfo:function(t){this.slotInfo=t}}),i.define({name:\"preview\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",url:\"dup.common.utility.url\",data:\"dup.common.utility.data\"},CLB_PREFIX:\"baidu_clb_preview_\",DUP_PREFIX:\"baidu_dup_preview_\",getValue:function(t){var e,i=this.url.getTopWindowUrl();return e=this.url.getQueryValue(i,this.CLB_PREFIX+t),e||(e=this.url.getQueryValue(i,this.DUP_PREFIX+t)),e},getInfo:function(){var t,e=this.getValue(\"sid\"),i=this.getValue(\"mid\"),n=this.getValue(\"vc\"),o=+this.getValue(\"ts\"),r=+new Date;return 3e4>=r-o&&(t={sid:e,mid:i,vc:n}),this.getInfo=function(){return t},t},isUnionPreview:function(t){var e=!1;return t?/cpro_template=/gi.test(t)&&(this.data.putInfo(\"#unionPreviewSwitch\",!0),e=!0):e=!!this.data.getInfo(\"#unionPreviewSwitch\"),e},setUnionPreviewData:function(t){this.data.putInfo(\"#unionPreviewData\",t)},getUnionPreviewData:function(){var t=this.data.getInfo(\"#unionPreviewData\");return t?\"prev=\"+encodeURIComponent(t)+\"&pt=union\":\"\"},clearUnionPreviewData:function(){this.data.removeInfo(\"#unionPreviewSwitch\"),this.data.removeInfo(\"#unionPreviewData\")},getSearchParams:function(t){var e={},i=this.getInfo();return i&&t==i.sid&&(e.mid=i.mid,e.sid=i.vc,this.config.IS_PREVIEW=!0),e}}),i.define({name:\"log\",namespace:\"dup.common.utility\",deps:{config:\"dup.common.config\",lang:\"dup.common.utility.lang\",event:\"dup.common.utility.event\",storage:\"dup.common.utility.storage\"},storageKey:\"BAIDU_DUP_log_storage\",loadImage:function(t,e){var i=new Image,n=\"BAIDU_DUP_log_\"+Math.floor(2147483648*Math.random()).toString(36);window[n]=i,i.onload=i.onerror=i.onabort=function(){i.onload=i.onerror=i.onabort=null,window[n]=null,i=null,e&&e(this.storageKey,t,!0)},i.src=t},resendLog:function(){var t=this.storage.getItem(this.storageKey);if(t){t=t.split(\"|\");for(var e=0,i=t.length;i>e;e++)this.loadImage(decodeURIComponent(t[e]),this.storage.spliceItem)}},monitorLog:function(t){var e,i=t.id?t.id:\"\",n=t.async?t.async:\"\",o=t.type?t.type:\"ssplog\",r=t.pos?t.pos:\"\",s=t.status?t.status:\"\",a=t.mes?encodeURIComponent(t.mes):\"\",d=t.exps?t.exps:\"\";e=this.config.LOG_URL+[\"?type=\"+o,\"id=\"+i,\"pos=\"+r,\"status=\"+s,\"async=\"+n,\"mes=\"+a,\"exps=\"+d,\"from=ssp\",\"tm=\"+ +new Date].join(\"&\"),this.sendLogRequest(e)},sendLogRequest:function(t){var e=new Image,i=+new Date,n=\"baidu_dan_log_\"+i;window[n]=e,e.onload=e.onerror=e.onabort=function(){try{delete window[n]}catch(t){window[n]=void 0}e=null},t+=t.indexOf(\"?\")>-1?\"&\":\"?\",t+=\".stamp=\"+Math.random(),e.src=t},sendLog:function(t){t=\"object\"===this.lang.getType(t)?t:{};var e=t.url||this.config.LOG_URL,i=t.data||{},n=t.option||\"now\",o=this.lang.serialize(i);switch(e+=(e.indexOf(\"?\")>=0?\"&\":\"?\")+o+(o?\"&\":\"\")+\"rdm=\"+ +new Date,n){case\"now\":this.loadImage(e);break;case\"block\":break;case\"unload\":default:this.storage.addItem(this.storageKey,e,!0),this.event.bind(window,\"unload\",function(){this.loadImage(e,this.storage.spliceItem)})}}}),i.define({name:\"painterSelector\",namespace:\"dup.business\",deps:{asserter:\"dup.ui.assertion.asserter\"},getPainter:function(t){var e=this.asserter.assert(t);if(e)return\"dup.ui.painter.\"+e;for(var n=t.response,o=[\"dan.static\",\"dan.couplet\",\"dan.expand\",\"dan.barrier\",\"dan.video\",\"bottomSearchBar\",\"inlayFix\",\"baiduRec\",\"dynamicFloat\",\"insideText\",\"mobile.inlayFix\",\"mobile.float\"],r=0,s=o.length;s>r;r++){var a=i.using(\"dup.ui.assertion.\"+o[r]);if(a&&a.assert(n))return\"dup.ui.painter.\"+o[r]}e||(t.errors=t.errors||[],t.errors.push(\"painterName is empty\"))}}),i.define({name:\"businessParam\",namespace:\"dup.business.parameter\",deps:{config:\"dup.common.config\",preview:\"dup.business.preview\",dom:\"dup.common.utility.dom\",origentation:\"dup.business.origentation\"},paramsList:[{key:\"dcb\",value:function(){return this.config.LOADER_DEFINE_NAME}},{key:\"dtm\",value:function(){return this.config.SSP_JSONP}},{key:\"dvi\",value:function(){return\"0.0\"}},{key:\"dci\",value:function(){return\"-1\"}},{key:\"dds\",value:function(){return\"\"}},{key:\"dpt\",value:function(){var t=\"none\";return this.preview.isUnionPreview()&&(t=\"union\"),t}},{key:\"tsr\",value:function(){var t=0,e=+new Date;return this.config.startTime&&(t=e-this.config.startTime),t}},{key:\"tpr\",value:function(){var e,i=24e4,n=(new Date).getTime();e=t.DUP_4_SF?t:this.dom.isInIframe(window)?window.top:window;var o=e.BAIDU_DUP2_pageFirstRequestTime;return o?n-o>=i&&(o=e.BAIDU_DUP2_pageFirstRequestTime=n):o=e.BAIDU_DUP2_pageFirstRequestTime=n,o||\"\"}},{key:\"cop\",encode:!0,value:function(){return this.origentation.getOrientationQuery()}},{key:\"ti\",encode:!0,value:function(){return this.dom.getDocumentTitle()}},{key:\"ari\",value:function(){return 2}}]}),i.define({name:\"param\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",slotParams:\"dup.business.parameter.slotParam\",businessParams:\"dup.business.parameter.businessParam\",browserParams:\"dup.business.parameter.browserParam\",browser:\"dup.common.utility.browser\",systemParams:\"dup.business.parameter.systemParam\",additionalParam:\"dup.business.parameter.additionalParam\",style:\"dup.common.utility.style\",dom:\"dup.common.utility.dom\",preview:\"dup.business.preview\",requestCache:\"dup.business.requestCache\"},snap:function(t){for(var e=[],i=t.paramsList,n=0,o=i.length;o>n;n++){var r=i[n],s=r.key,a=r.encode,d=r.value,l=r.limit;try{d=\"function\"==typeof d?d.apply(t):d,d=a?encodeURIComponent(d):d,d=l?d.substr(0,l):d,e.push({key:s,value:d})}catch(c){var h=this.config.LOG_URL;h+=\"?type=adcodex_error\",h+=\"&info=\"+encodeURIComponent(c.message),h+=\"&stack=\"+encodeURIComponent(c.stack||\"\"),h+=\"&key=\"+encodeURIComponent(s),h+=\"&t=\"+(new Date).getTime(),(new Image).src=h}}return e},processExtendsParam:function(t){var e=t.response,i=e.placement.container;if(5!==i.sizeType){var n=e.pdb_deliv,o=e.rtb_deliv,r=e.order_deliv;0===parseInt(n.deliv_id,10)&&(n.deliv_id=0),0===parseInt(n.demand_id,10)&&(n.demand_id=0),0===parseInt(o.deliv_id,10)&&(o.deliv_id=0),0===parseInt(o.demand_id,10)&&(o.demand_id=0),0===parseInt(r.deliv_id,10)&&(r.deliv_id=0),0===parseInt(r.demand_id,10)&&(r.demand_id=0);var s=e[\"extends\"]||{};if(s&&s.hasOwnProperty(\"sspw\")&&s.hasOwnProperty(\"ssph\")){var a=parseInt(s.sspw||0,10),d=parseInt(s.ssph||0,10),l=parseInt(s.cbsz||0,10);if(a&&d&&(i.width=a,i.height=d),l>0&&(i.sizeType=l),1===l)t.width=a,t.height=d;else if(2===l){var c=this.translateScaleToPixelSize(a,d);t.width=c.width,t.height=c.height}}var h=t.width||i.width,p=t.height||i.height,u=e.placement.complement_type;if(0===u){var m=this.dom.g(t.containerId);m.style.width=h+\"px\",m.style.height=p+\"px\",m.style.display=\"inline-block\"}}},translateScaleToPixelSize:function(t,e,i){var n=i||{};return t=Math.abs(t),e=Math.abs(e),n.width||(n.width=Math.max(320,Math.min(window.innerWidth,window.innerHeight)),isNaN(n.width)&&(n.width=Math.min(this.style.getClientWidth(),this.style.getClientHeight()))),n.height||(n.height=Math.ceil(n.width/t*e)),{width:n.width,height:n.height}},getParamObj:function(t){var e=[];this.slotParams.setSlotInfo(t),this.browserParams.setSlotInfo(t),e=e.concat(this.snap(this.slotParams)),e=e.concat(this.snap(this.businessParams)),e=e.concat(this.snap(this.browserParams)),e=e.concat(this.snap(this.additionalParam)),e=e.concat(this.snap(this.systemParams));for(var i={},n=0,o=e.length;o>n;n++){var r=e[n];i[r.key]=r.value}t.width>0&&t.height>0&&(i.sz=t.width+\"x\"+t.height);var s=this.preview.getSearchParams(t.slotId);return i.mid=s.mid,i.sid=s.sid,i},getParamString:function(t){var e=[];for(var i in t)if(i&&(t[i]||0===t[i])&&t.hasOwnProperty(i)){var n=t[i];e.push(i+\"=\"+n)}return e.join(\"&\")},getPmpRequestUrl:function(t){var e,i={},n=[],o=t.paramObj;for(var r in o)r&&o.hasOwnProperty(r)&&(i[r]=o[r]);var s=t.timestampWatcher,a=s.t1,d=s.t2,l=s.t3,c=t.response;if(c){var h=c.placement.container;i.qn=c.queryid,t.paramObj.qn=c.queryid;var p=t.width,u=t.height;p>0&&u>0&&(i.sz&&(i.sz=\"\"),n.push(\"sz=\"+p+\"x\"+u)),(t.pcwd||5===h.sizeType)&&n.push(\"conwid=\"+p),(t.pchd||5===h.sizeType)&&n.push(\"conhei=\"+u);var m=c.pdb_deliv;m.deliv_id&&n.push(\"pdbid=\"+m.deliv_id),c.media_protect&&n.push(\"mpdi=\"+c.media_protect);var f=c.order_deliv;f.deliv_id&&n.push(\"orderid=\"+f.deliv_id),f.demand_id&&n.push(\"odid=\"+f.demand_id);var g=c.rtb_deliv;g.deliv_id&&n.push(\"rtbid=\"+g.deliv_id),g.demand_id&&n.push(\"rdid=\"+g.demand_id);var y=c.placement.complement_type;if(t.isNeedCacheRequest||4===y||7===y){var v=i.qn;i.dpv=v,t.paramObj.dpv=v,this.requestCache.add(v,t)}0===t.id.indexOf(\"u\")?n.push(\"dc=3\"):n.push(\"dc=2\"),s&&a>0&&(i.tt=a+\".\"+(d-a)+\".\"+(l-a)+\".\"+(+new Date-a)),i.exps&&(n.push(\"exps=\"+i.exps),i.exps=\"\")}var w=n.join(\"&\");return e=t.posUrl&&(this.browser.antBrowser||t.proxy)?t.posUrl+w+\"&\"+this.getParamString(i):this.config.POS_URL+w+\"&\"+this.getParamString(i)}}),i.define({name:\"slot\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",param:\"dup.business.param\",dom:\"dup.common.utility.dom\",log:\"dup.common.utility.log\",lang:\"dup.common.utility.lang\",browser:\"dup.common.utility.browser\",storage:\"dup.common.utility.storage\",origentation:\"dup.business.origentation\"},slotIdCountMap:{},slotCount:0,storageTime:{},$slot:function(){this.slotsMap=this.slotsMap||{}},getSlotInfo:function(t){return this.slotsMap[t]},getSlotInfoByRawId:function(t){for(var e in this.slotsMap)if(this.slotsMap.hasOwnProperty(e)&&e.indexOf(t)>-1)return this.slotsMap[e];return{}},createSlot:function(t){var e=\"\"+t.slotId;this.slotIdCountMap[e]=this.slotIdCountMap[e]||0;var i={};return i.index=this.slotIdCountMap[e]++,i.count=++this.slotCount,i.id=e+\"_\"+i.index,i.containerId=this.config.DUP_PREFIX+\"_wrapper_\"+e+\"_\"+i.index,\ni.slotId=t.slotId,i.productLine=t.productLine,i.errors=[],i.isAsync=t.isAsync,this.setStatus(i.id,this.config.STATUS_CREATE),n?i.timestampWatcher={t1:n}:i.timestampWatcher={t1:0},window.cproStyleApi?i.styleOpenApi=window.cproStyleApi[e]||{}:i.styleOpenApi={},0===e.indexOf(\"u\")&&(i.productLine=\"union\",i.width=i.styleOpenApi.cpro_w||i.styleOpenApi.rsi0||0,i.height=i.styleOpenApi.cpro_h||i.styleOpenApi.rsi1||0),i},cloneSlot:function(t){var e;return e=window.JSON&&window.JSON.parse?JSON.parse(JSON.stringify(t)):this.lang.clone(t),e.index=this.slotIdCountMap[e.slotId]++,e.id=e.slotId+\"_\"+e.index,e},processSlot:function(t){if(t.isPdbAd=!1,t.isNeedCacheRequest=!1,t.response){var e=t.response.rtb_deliv,i=t.response.order_deliv,n=parseInt(e.deliv_id,10),o=parseInt(e.demand_id,10),r=parseInt(i.deliv_id,10),s=parseInt(i.demand_id,10);t.isPdbAd=!(n||o||r||s),t.isNeedCacheRequest=0!==n||0!==r}},addSlot:function(t){this.slotsMap[t.id]=t},clearStatus:function(t,e){t.status=t.status^e},checkStatus:function(t,e){return(t.status&e)>0},setStatus:function(t,e){var i=this.getSlotInfo(t);i&&(i.status|=e),(e&this.config.STATUS_CREATE)>0&&(this.storageTime[t]=+new Date),(e&this.config.STATUS_FINISH)>0&&this.adSlotFinish(t)},addErrorInfo:function(t,e){t.errors=t.errors||[],t.errors.push(e)},adSlotFinish:function(t){var e={},i=!1,n=this.getSlotInfo(t);if(n.response){var o=n.response?n.response.pdb_deliv:{};for(var r in this.origentation.watchingSlotsMap)if(r&&this.origentation.watchingSlotsMap.hasOwnProperty(r)&&this.origentation.watchingSlotsMap[r]&&0===(\"\"+t).indexOf(\"\"+r)&&n.response){var s=o.deliv_des,a=s.width||0,d=s.height||0;0===a||0===d?e[t]=!1:e[t]=!0,i=!0}i&&this.origentation.slotFinishedCallback(e)}},process:function(){var t=this.slotsMap;for(var e in t)if(e&&t[e]&&t.hasOwnProperty(e)){var i=t[e];if(i.status>=this.config.STATUS_REQUEST)continue;this.createContainer(i),this.requestSlotInfo(i)}},requestSlotInfo:function(t){this.config.FIRST_ONCESEACH||(this.config.FIRST_ONCESEACH=!0,this.dom.bind(window,\"message\",i.proxy(this,this.onMessageHandler)));var e=!1;t.paramObj=this.param.getParamObj(t),t.paramObj.exps=t.exps||this.config.EXP_ID,t.paramObj.pcn=this.config.IS_CNAME?this.config.REQUEST_URL_CNAME:\"\";var n,o;t.posUrl&&(this.browser.antBrowser||t.proxy)?(t.paramObj.ctxant=\"1\",t.paramObj.pcn=t.pcn,n=this.param.getParamString(t.paramObj),o=t.posUrl+n):(n=this.param.getParamString(t.paramObj),o=this.config.POS_URL+n),t.paramObj.dtm=this.config.HTML_POST,t.timestampWatcher.t2=+new Date;var r=!1;\"union\"===t.productLine&&(r=!0),t.isAsync===!0&&(r=!0),e=this.reqLocalInfo(t),e?(this.setStatus(t.id,this.config.STATUS_REQUEST),window[this.config.LOADER_DEFINE_NAME](e)):(this.sendJsonpRequest(o,r),this.setStatus(t.id,this.config.STATUS_REQUEST))},onMessageHandler:function(t){var e=(t.origin||t.originalEvent.origin,t.data);e&&e.placement&&e.placement.update&&e.queryid&&e.tuid&&this.updateInfo(e)},updateInfo:function(t){var e={},i=t.placement.update;this.storageSlotInfo=this.storage.getItem(t.tuid),this.storageSlotInfo&&(e=this.lang.jsonToObj(this.storageSlotInfo),this.storage.isAvailable&&window.JSON&&window.JSON.stringify&&e&&e.placement&&e.placement.update&&e.placement.update!==i&&(t.adExpire=(new Date).getTime(),this.storage.setItem(t.tuid,JSON.stringify(t))))},reqLocalInfo:function(t){try{if(this.browser.ie&&this.browser.ie<9)return!1;var e={};return this.storage.isAvailable?(this.storageSlotInfo=this.storage.getItem(t.id),this.storageSlotInfo?e=this.lang.jsonToObj(this.storageSlotInfo):!1):!1}catch(i){var n=encodeURIComponent(i),o={type:\"elog\",pos:\"localAdInfo\",id:t.id,mes:n,exps:this.config.EXP_ID};this.log.monitorLog(o)}},adInfoStorage:function(t){try{var e=t.response||{},i=!1;e&&e.pdb_deliv&&e.pdb_deliv.deliv_des&&e.pdb_deliv.deliv_des._html&&(i=!0);var n=!1;e&&e.tuid&&(n=0===e.tuid.indexOf(\"u\"));var o=t.id;!i&&n&&this.storage.isAvailable&&window.JSON&&window.JSON.stringify&&o&&!this.storageSlotInfo&&(e.adExpire=(new Date).getTime(),this.storage.setItem(o,JSON.stringify(e)))}catch(r){}},createContainer:function(t){if(!(t.status>this.config.STATUS_CREATE)){var e=this.dom.g(t.containerId);if(e)return void this.setStatus(t.id,this.config.STATUS_CREATE);t.isAsync?\"union\"===t.productLine&&(t.containerId=\"cpro_\"+t.slotId):(document.write('<div id=\"'+t.containerId+'\"></div>'),this.dom.g(t.containerId)||this.createBackupWrapper(t)),this.setStatus(t.id,this.config.STATUS_CREATE)}},createBackupWrapper:function(t){try{var e=document.getElementsByTagName(\"script\"),i=e[e.length-1];if(i){var n=i.parentNode;if(n){var o=document.createElement(\"div\");return o.id=t.containerId,n.insertBefore(o,i),!0}}}catch(r){}return!1},sendJsonpRequest:function(t,e){if(e){var i=document.createElement(\"script\");i.type=\"text/javascript\",i.async=!0,i.src=t;var n=document.getElementsByTagName(\"script\")[0];n&&n.parentNode?n.parentNode.insertBefore(i,n):document.write('<script charset=\"utf-8\" src=\"'+t+'\"></script>')}else document.write('<script charset=\"utf-8\" src=\"'+t+'\"></script>')},adInfoIsAvailable:function(t){var e=t.response;if(!e)return!0;var i=e.pdb_deliv,n=e.rtb_deliv,o=e.order_deliv,r=e.pdb_deliv.deliv_des,s=(r._html,e.placement.complement_type);return!(!this.config.IS_PREVIEW&&0===i.deliv_id&&0===n.deliv_id&&0===o.deliv_id&&7==s)}}),i.define({name:\"detect\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",log:\"dup.common.utility.log\",slot:\"dup.business.slot\"},$detect:function(){},sendLog:function(t){t.url=\"\",t.host=window.location.hostname,t.from=\"SSP\",this.config.EXP_ID&&(t.exp=this.config.EXP_ID),this.log.sendLog({data:t,option:\"now\"})},checkFail:function(){var t=this.slot.slotsMap;for(var e in t)if(e&&t.hasOwnProperty(e)&&t[e]){var i=t[e],n=i.slotId,o=\"\";i.response&&(o=i.response.queryid);var r=i.status,s=i.errors||[],a=decodeURIComponent(s.join(\",\"));a&&this.sendLog({type:\"hlog\",exp:this.config.EXP_ID||\"\",status:r,pos:\"checkFail\",id:n,sid:o,index:i.index,errorInfo:a})}}}),i.define({name:\"viewWatch\",namespace:\"dup.business\",deps:{dom:\"dup.common.utility.dom\",lang:\"dup.common.utility.lang\",style:\"dup.common.utility.style\",browser:\"dup.common.utility.browser\",log:\"dup.common.utility.log\",slot:\"dup.business.slot\"},analysisUrl:\"//eclick.baidu.com/a.js\",maxTime:72e5,STATUS:{WAIT:0,LOAD:1,RUN:2,UNLOAD:3},clientParam:{},focusSwitch:!0,watchingList:null,intervalId:null,intervalTimeSpan:500,isEventInited:!1,$viewWatch:function(){this.winFocused=!0,this.win=window,this.pageStayTime=null==this.pageStayTime?0:this.pageStayTime,this.intervalStatus=this.STATUS.WAIT},viewWatch:function(){},regisetViewWatch:function(t){this.isEventInited||(this.initializeEvent(),this.isEventInited=!0),this.watchingList=this.watchingList||[];var e=this.dom.g(t.containerId);if(e){var i=t.paramObj,n=t.width,o=t.height,r=\"\";if(t.response){var s=t.response.placement,a=s.container;n=a.width,o=a.height,r=t.response.queryid}var d=new Date,l={slotId:t.slotId,domId:t.containerId,jk:r,word:i.ltu,iframeStatus:i.dis,aw:n,ah:o,viewContext:{pageStayTime:0,pageStayTimeStamp:d,inViewTime:0,inViewTimeStamp:d,currViewStatus:!1,focusTime:0,adViewTime:0,currAdViewStatus:!1,adViewTimeStamp:d}};this.calculateClientParam(l,e),this.watchingList.push(l)}},unregisetViewWatch:function(t){if(this.watchingList)for(var e=t.containerId,i=0;i<this.watchingList.length;i++){var n=this.watchingList[i];if(n.domId==e)return void this.watchingList.splice(i,1)}},buildAnalysisUrl:function(t,e){if(t&&e){var i=t+\"?\",n=e.viewContext;n.inViewTime>this.maxTime&&(n.inViewTime=this.maxTime),n.adViewTime>this.maxTime&&(n.adViewTime=this.maxTime),n.pageStayTime>=this.maxTime&&(n.pageStayTime=this.maxTime);var o=[];return o.push(\"tu=\"+e.slotId),o.push(\"jk=\"+e.jk),o.push(\"word=\"+e.word),o.push(\"if=\"+e.iframeStatus),o.push(\"aw=\"+e.aw),o.push(\"ah=\"+e.ah),o.push(\"pt=\"+n.pageStayTime),o.push(\"it=\"+n.inViewTime),o.push(\"vt=\"+n.adViewTime),o.push(\"csp=\"+e.desktopResolution),o.push(\"bcl=\"+e.browserRegion),o.push(\"pof=\"+e.pageRegion),o.push(\"top=\"+e.top),o.push(\"left=\"+e.left),i+o.join(\"&\")}},initializeEvent:function(){this.windowOnLoadHandler(),this.dom.ready(i.proxy(this,this.windowOnLoadDelay),2e3),this.dom.bind(this.win,\"beforeunload\",i.proxy(this,this.windowOnUnloadHandler))},calculateClientParam:function(t,e){var i=this.style.getPosition(e);t.left=i.left||0,t.top=i.top||0;var n=window.screen.availWidth,o=window.screen.availHeight;n>1e4&&(n=0),o>1e4&&(o=0),t.desktopResolution=n+\",\"+o,t.browserRegion=this.style.getClientWidth(window)+\",\"+this.style.getClientHeight(window),t.pageRegion=this.style.getScrollWidth(window)+\",\"+this.style.getScrollHeight(window)},updateViewStatus:function(t,e,i){var n,o,r,s=new Date;return n=o=r=this.intervalTimeSpan,this.intervalStatus===this.STATUS.LOAD&&(this.intervalStatus=this.STATUS.RUN,n=o=0,r=o=0),t.currViewStatus?(this.intervalStatus===this.STATUS.LOAD&&(n=parseInt(s.getTime()-t.inViewTimeStamp.getTime(),10),0>n?n=0:n>this.intervalTimeSpan&&(n=this.intervalTimeSpan)),t.inViewTime+=n,t.inViewTimeStamp=s):e&&(t.inViewTimeStamp=s),t.currViewStatus=e,t.currAdViewStatus?(this.intervalStatus===this.STATUS.UNLOAD&&(r=parseInt(s.getTime()-t.adViewTimeStamp.getTime(),10),0>r?r=0:r>this.intervalTimeSpan&&(r=this.intervalTimeSpan)),t.adViewTime+=r,t.adViewTimeStamp=s):i&&(t.adViewTimeStamp=s),t.currAdViewStatus=i,t.pageStayTime=t.pageStayTime||0,this.pageStayTime=this.pageStayTime||0,this.intervalStatus===this.STATUS.UNLOAD&&(this.pageTimeSpan=parseInt(s.getTime()-t.pageStayTimeStamp.getTime(),10),0>o?o=0:o>this.intervalTimeSpan&&(o=this.intervalTimeSpan)),t.pageStayTime+=o,this.pageStayTime+=o,this.winFocused&&(t.focusTime+=o),t.pageStayTimeStamp=s,t},computeViewStatus:function(t){var e=t.domId,i=this.dom.g(e);if(!i)return{isInView:!1,isAdView:!1};var n=!1,o=!1;if(this.winFocused)try{var r=this.style.getClientWidth(this.win),s=this.style.getClientHeight(this.win),a=this.getPosition(i),d=this.style.getOuterWidth(i),l=this.style.getOuterHeight(i);n=a.top>=0&&a.bottom<=s&&a.left>=0&&a.left<=r;var c=a.top>0?a.top:0,h=a.bottom>s?s:a.bottom,p=a.left>0?a.left:0,u=a.right>r?r:a.right,m=d*l;if(h>c&&u>p){var f=(h-c)*(u-p);o=f>.5*m}}catch(g){}return{isInView:n,isAdView:o}},getPosition:function(t){var e=this.style.getPositionCore(t),i=this.style.getScrollLeft(window),n=this.style.getScrollTop(window),o=this.style.getOuterWidth(t,!1),r=this.style.getOuterHeight(t,!1);return{top:e.top-n,bottom:e.top-n+r,left:e.left-i,right:e.left-i+o,topAbs:e.top,bottomAbs:e.top+r,leftAbs:e.left,rightAbs:e.left+o}},viewableCompute:function(){if(this.watchingList){var t,e;for(t=0,e=this.watchingList.length;e>t;t++){var i=this.watchingList[t],n=this.computeViewStatus(i);i.viewContext=this.updateViewStatus(i.viewContext,n.isInView,n.isAdView),i.analysisUrl=this.buildAnalysisUrl(this.analysisUrl,i)}}},viewOnChange:function(){this.viewableCompute(),this.pageStayTime>=this.maxTime&&this.windowOnUnloadHandler(!1)},windowOnLoadHandler:function(t){this.intervalStatus=this.STATUS.LOAD,this.registerFocusEvent(this.win),(!this.browser.ie||this.browser.ie&&this.browser.ie>6)&&this.viewOnChange(),this.intervalId=setInterval(i.proxy(this,this.viewOnChange),this.intervalTimeSpan)},windowOnLoadDelay:function(t){var e,i,n,o,r;for(e=0,i=this.watchingList.length;i>e;e++)n=this.watchingList[e],n&&(r=n.domId,r&&(o=this.win.document.getElementById(r)),o&&(n.clientParam=n.clientParam||{},this.calculateClientParam(n,o)))},windowOnUnloadHandler:function(t){try{if(clearInterval(this.intervalId),this.intervalStatus!==this.STATUS.RUN)return void(this.intervalStatus=this.STATUS.UNLOAD);this.intervalStatus=this.STATUS.UNLOAD,this.viewableCompute();for(var e=0,i=this.watchingList.length;i>e;e++){var n=this.watchingList[e];n&&n.analysisUrl&&!n.isSended&&(n.isSended=!0,0===e&&(n.analysisUrl+=\"&total=\"+this.watchingList.length),this.log.sendLog({url:n.analysisUrl}))}if(t){var o,r=200,s=(new Date).getTime();if(this.browser.ie)for(o=s+r;o>s;)s=(new Date).getTime();else{for(var i=1e5,e=0;i>e;e++);o=(new Date).getTime(),i=1e5*r/(o-s),i=i>1e7?1e7:i;for(var e=0;i>e;e++);}}}catch(a){}},registerFocusEvent:function(t){var t=t||this.win;this.winFocused=!0,this.browser.ie?(this.dom.bind(t,\"focusin\",i.proxy(this,this.allDomOnFocusHandler)),this.dom.bind(t,\"focusout\",i.proxy(this,this.allDomOnBlurHandler))):(this.dom.bind(t,\"focus\",i.proxy(this,this.allDomOnFocusHandler)),this.dom.bind(t,\"blur\",i.proxy(this,this.allDomOnBlurHandler)))},allDomOnFocusHandler:function(t){this.winFocused=!0},allDomOnBlurHandler:function(t){this.winFocused=!1}}),i.define({name:\"unionDelivery\",namespace:\"dup.business.delivery\",deps:{slot:\"dup.business.slot\"},launch:function(){var t,e=window.cpro_id;window.cpro_id=null,e&&(t=this.slot.createSlot({slotId:e,productLine:\"union\",isAsync:!1}),this.slot.addSlot(t));var i=window.cproArray;if(window.cproArray=null,i)for(var n=0,o=i.length;o>n;n++)t=this.slot.createSlot({slotId:i[n].id,productLine:\"union\",isAsync:!0}),this.slot.addSlot(t);var r=window.cpro_mobile_slot;if(window.cpro_mobile_slot=null,r)for(var n=0,o=r.length;o>n;n++){var s=r[n];t=this.slot.createSlot({slotId:s.id,productLine:\"union\",isAsync:!0}),t.styleOpenApi=t.styleOpenApi||{};for(var a in s)a&&s[a]&&s.hasOwnProperty(a)&&(t.styleOpenApi[a]=s[a]);this.slot.addSlot(t)}this.slot.process()}}),i.define({name:\"dupDelivery\",namespace:\"dup.business.delivery\",deps:{slot:\"dup.business.slot\",\"interface\":\"dup.business.interface\"},launch:function(){this.delieveryObjArray=this.delieveryObjArray||[],window.BAIDU_DUP=window.BAIDU_DUP||[],window.BAIDU_DUP&&window.BAIDU_DUP instanceof Array&&(this.delieveryObjArray=this.delieveryObjArray.concat(window.BAIDU_DUP),window.BAIDU_DUP=[]),this.updateApi(),this.process()},updateApi:function(){window.BAIDU_DUP=this,window.BAIDU_DUP.load=!0,this[\"interface\"].register(\"fill\",this,this.fill),this[\"interface\"].register(\"fillAsync\",this,this.fillAsync)},process:function(){for(var t=0,e=this.delieveryObjArray.length;e>t;t++){var i=this.delieveryObjArray[t];if(i instanceof Array){var n=i.splice(0,1)[0],o=i;this[\"interface\"].perform(n,o)}}this.delieveryObjArray=[],this.slot.process()},push:function(t){this.delieveryObjArray=this.delieveryObjArray&&[],this.delieveryObjArray.push(t),this.process()},fill:function(t){var e=this.slot.createSlot({slotId:t,productLine:\"dup\",isAsync:!1});this.slot.addSlot(e),this.slot.process()},fillAsync:function(t,e){var i=this.slot.createSlot({slotId:t,productLine:\"dup\",isAsync:!0});i.containerId=e,this.slot.addSlot(i),this.slot.process()}}),i.define({name:\"standardDelivery\",namespace:\"dup.business.delivery\",deps:{config:\"dup.common.config\",slot:\"dup.business.slot\",\"interface\":\"dup.business.interface\",param:\"dup.business.param\",data:\"dup.common.utility.data\",additionalParam:\"dup.business.parameter.additionalParam\"},launch:function(){this.delieveryObjArray=this.delieveryObjArray||[],window.slotbydup=window.slotbydup||[],window.slotbydup&&window.slotbydup instanceof Array&&(this.delieveryObjArray=this.delieveryObjArray.concat(window.slotbydup),window.slotbydup=[]),this.updateApi(),this.process()},process:function(){for(var t,e=0,i=this.delieveryObjArray.length;i>e;e++){var n=this.delieveryObjArray[e];if(n.hasOwnProperty(\"id\")){var o=!1;if(n.hasOwnProperty(\"isAsync\")&&n.isAsync?o=n.isAsync:n.hasOwnProperty(\"async\")&&n.async&&(o=n.async),t=this.slot.createSlot({slotId:n.id,productLine:\"adcodex\",isAsync:o}),n.hasOwnProperty(\"pos\")&&(t.posUrl=this.config.HTTP_PROTOCOL+\"//\"+n.pos+\"/s?\",t.pcn=n.pos),this.additionalParam.paramCheck(t,n),t.containerId=n.container||t.containerId,t.display=n.display,t.rpdn=n.rpdn||\"\",t.ftpc=n.ftpc||!1,t.size=n.size||\"\",t.pcwd=n.pcwd||\"\",t.pchd=n.pchd||\"\",t.proxy=n.proxy||\"\",t.exps=n.exps||\"\",!t.styleOpenApi.cpro_w&&!t.styleOpenApi.cpro_h){var r,s=n.size;if(s&&s.indexOf(\":\")>-1){r=s.split(\":\");var a=this.param.translateScaleToPixelSize(r[0],r[1]);t.width=a.width,t.height=a.height}}this.slot.addSlot(t);var d=\"cpro_set_baiduRec_jsonpCb\";n[d]&&n.hasOwnProperty(d)&&this.data.putInfo(\"baiduRecCallback\",n.cpro_set_baiduRec_jsonpCb||\"\")}else this[\"interface\"].executeTask(n)}this.delieveryObjArray=[],this.slot.process()},updateApi:function(){window.slotbydup=this,window.slotbydup.load=!0},push:function(t){this.delieveryObjArray=this.delieveryObjArray&&[],this.delieveryObjArray.push(t),this.process()}}),i.define({name:\"expand\",namespace:\"dup.ui.painter\",deps:{config:\"dup.common.config\",dom:\"dup.common.utility.dom\",style:\"dup.common.utility.style\",event:\"dup.common.utility.event\",slot:\"dup.business.slot\"},validate:function(t){return!0},sendMessage:function(t,e){var i=this.slot.getSlotInfo(t),n=this.dom.g(i.containerId);if(n){var o=n.getElementsByTagName(\"iframe\")[0];e=JSON.stringify(e),o.contentWindow.postMessage(e,\"*\")}},getComputedWidth:function(t){return window.getComputedStyle?window.getComputedStyle(t).width:t.currentStyle.width},init:function(){function t(t){if(\"string\"!=typeof i)return!1;var i=JSON.parse(t.data);if(!i.title||\"baidudup\"!=i.title)return!1;if(\"invokeMethod\"===i.type)switch(i.method){case\"expand\":e.expandAd(i.parameters[0]);break;case\"close\":e.collapseAd(i.parameters[0])}}var e=this;(window.addEventListener||window.attachEvent)&&JSON&&JSON.parse&&this.event.bind(window,\"message\",t),this.event.bind(window,\"scroll\",function(){e.adjustPosWhenViewportChanged()}),this.event.bind(window,\"resize\",function(){e.adjustPosWhenViewportChanged()})},adjustPosWhenViewportChanged:function(){var t=this.scrollObserver;t.up,t.down,t.left,t.right;for(var e in t)for(var i in t[e]){var n=t[e][i];if(!n.isExpand)return;var o=n.origin,r=o.getElementsByTagName(\"iframe\")[0],s=(n.targetWidth,n.targetHeight,n.originWidth);n.originHeight;switch(e){case\"up\":var a=parseInt(this.getComputedWidth(o),10);r.style.left=0;break;case\"down\":var a=parseInt(this.getComputedWidth(o),10);r.style.left=0;break;case\"left\":var a=parseInt(this.getComputedWidth(o));r.style.right=a-s+\"px\";break;case\"right\":var a=parseInt(this.getComputedWidth(o));r.style.left=0}}},$expand:function(){this.observerObjs=[],this.expandStatus={},this.timers={},this.hasInit=!1,this.maxExpandTime=5e3,this.canFixed=this.style.canFixed(),this.scrollObserver={up:{},down:{},left:{},right:{}}},registerScrollSubject:function(t,e,i,n,o,r,s){if(!this.scrollObserver[t][e]){var a=this.scrollObserver[t][e]={};a.isExpand=!0,a.origin=i,a.originWidth=n,a.originHeight=o,a.targetWidth=r,a.targetHeight=s}},expand2Up:function(t,e,i,n,o,r){this.registerScrollSubject(\"up\",t,e,i,n,o,r);var s=e.getElementsByTagName(\"iframe\")[0];parseInt(this.getComputedWidth(e));s.style.bottom=0,s.style.left=0},expand2Down:function(t,e,i,n,o,r){this.registerScrollSubject(\"down\",t,e,i,n,o,r);var s=e.getElementsByTagName(\"iframe\")[0];parseInt(this.getComputedWidth(e));s.style.top=0,s.style.left=0},expand2Left:function(t,e,i,n,o,r){this.registerScrollSubject(\"left\",t,e,i,n,o,r);var s=e.getElementsByTagName(\"iframe\")[0],a=parseInt(this.getComputedWidth(e));s.style.bottom=0,s.style.right=a-i+\"px\"},expand2Right:function(t,e,i,n,o,r){this.registerScrollSubject(\"right\",t,e,i,n,o,r);var s=e.getElementsByTagName(\"iframe\")[0];parseInt(this.getComputedWidth(e));s.style.bottom=0,s.style.left=0},expandAd:function(t){if(!this.expandStatus[t]){this.expandStatus[t]=!0;var e=this.slot.getSlotInfoByRawId(t),i=e.response.placement.container,n=i.width,o=i.height,r=e.response.placement.container.slide,s=r.slideWidth,a=r.slideHeight,d=1e3*parseInt(r.extendTime,10),l=parseInt(r.slideMode,10),c=parseInt(r.direction,10),h=e.containerId,p=this.dom.g(h),u=p.getElementsByTagName(\"iframe\")[0];if(1===c||2===c?(u.setAttribute(\"height\",a),u.style.height=a+\"px\"):3!==c&&4!==c||(u.setAttribute(\"width\",s),u.style.width=s+\"px\"),2==l&&2==c||2==l&&4==c)switch(c){case 2:u.setAttribute(\"height\",a),u.style.height=a+\"px\";break;case 4:u.setAttribute(\"width\",s),u.style.width=s+\"px\"}else switch(p.style.position=\"relative\",u.style.position=\"absolute\",p.style.height=o+\"px\",c){case 1:this.expand2Up(t,p,n,o,s,a);break;case 2:this.expand2Down(t,p,n,o,s,a);break;case 3:this.expand2Left(t,p,n,o,s,a);break;case 4:this.expand2Right(t,p,n,o,s,a)}var m=this;this.timers[t]=setTimeout(function(){m.expandStatus[t]&&m.collapseAd(t)},Math.min(d))}},collapseAd:function(t){if(this.expandStatus[t]){this.expandStatus[t]=!1,clearTimeout(this.timers[t]);var e=this.slot.getSlotInfoByRawId(t),i=e.response.placement.container,n=i.width,o=i.height,r=e.containerId,s=this.dom.g(r),a=s.getElementsByTagName(\"iframe\")[0];s.style.position=\"\",s.style.width=\"\",s.style.height=\"\",s.style.top=\"\",s.style.left=\"\",a.style.position=\"\",a.style.display=\"\",a.style.top=\"\",a.style.left=\"\",a.style.right=\"\",a.style.width=\"\",a.style.height=\"\",a.setAttribute(\"height\",o),a.setAttribute(\"width\",n);for(var d in this.scrollObserver)for(var l in this.scrollObserver[d])l===t&&(this.scrollObserver[d][l].isExpand=!1)}},observer:function(t){var t=this.slot.getSlotInfoByRawId(t.slotId),e=t.response.placement.container.slide,i=t.containerId,n=this.dom.g(i);e.slideMode,e.direction;n.style.textAlign=\"left\",this.hasInit||(this.hasInit=!0,this.init())},fire:function(t,e){var i,n=function(t){return\"[object Array]\"===Object.prototype.toString.call(t)},o=this.slot.getSlotInfoByRawId(e),r=o.response.placement.container.slide;r&&(i=r.trigger);var s=n(i)?i[0]:i?i:0,a=[\"\",\"BEFORE_PAGELOAD\",\"AFTER_PAGECLOSE\",\"PAGE_PERCENT\",\"mouseover\",\"click\",\"adloaded\",\"SLIP\"];a[s]===t&&this.sendMessage(e,{title:\"baidudup\",type:\"eventHappen\",parameters:[t]})}}),i.define({name:\"frame\",namespace:\"dup.business\",deps:{config:\"dup.common.config\",slot:\"dup.business.slot\",material:\"dup.business.material\",log:\"dup.common.utility.log\",browser:\"dup.common.utility.browser\",requestCache:\"dup.business.requestCache\",param:\"dup.business.param\",lang:\"dup.common.utility.lang\",data:\"dup.common.utility.data\",viewWatch:\"dup.business.viewWatch\",creativePreview:\"dup.business.creativePreview\"},checkRichAdType:function(t){for(var e=\"\",i=[\"dui-lian\",\"popup\",\"right-down\",\"slide\",\"top-down\",\"barrier\"],n=0;n<i.length;n++)if(t.indexOf(i[n])>-1){e=i[n];break}return e},cacheRequestCallback:function(t){var e=t.html||\"success\";if(\"success\"!==e){var n=this.requestCache.get(t.dpv),o=n.response.pdb_deliv.deliv_des;o=o._html;var r=n.response,s=r.pdb_deliv,a=r.rtb_deliv,d=r.order_deliv;if(0===s.deliv_id&&(0!==parseInt(d.deliv_id,10)||0!==parseInt(a.deliv_id,10))&&\"success\"!==e&&7===r.placement.complement_type){var l=document.getElementById(n.containerId),c=document.getElementById(n.containerId+\"_left\"),h=document.getElementById(n.containerId+\"_right\");return l&&(this.viewWatch.unregisetViewWatch(n),l.parentNode.removeChild(l)),c&&c.parentNode.removeChild(c),void(h&&h.parentNode.removeChild(h))}if(n)if(o.type&&\"rich\"===o.type){var p=this.material.formatMaterial(o,n),u=document.getElementById(n.containerId),m=\"<!DOCTYPE html><body>\";p.indexOf(m)>-1&&(p=p.slice(m.length));var f=this.checkRichAdType(p);if(\"popup\"===f)u.style.display=\"none\";else if(\"barrier\"===f){u.style.display=\"none\";var g=document.getElementById(n.containerId+\"_placeholder\");g&&(g.style.display=\"none\")}var y=i.using(\"dup.ui.painter.richMaterial\");y.render(n,!0)}else{var v=this.requestCache.secondResult[t.dpv];this.slot.clearStatus(n,this.config.STATUS_FINISH),n.isPdbAd=!0,n.isNeedCacheRequest=!1,v.outerHTML=this.getFrameHTML(n)}}},requireDomainPolicy:function(){function t(t){try{return!t.contentWindow.document}catch(e){return!0}}var e=document.createElement(\"iframe\"),i=!1;return e.src=\"about:blank\",document.body.insertBefore(e,document.body.firstChild),i=t(e),document.body.removeChild(e),this.requireDomainPolicy=function(){return i},i},requireBlankPolicy:function(){var t=navigator.userAgent,e=!(!t||!t.match(/iphone.*micromessenger/i));return this.requireBlankPolicy=function(){return e},e},renderFrame:function(t,e){var i=this.slot.getSlotInfo(t);if(i&&!this.slot.checkStatus(i,this.config.STATUS_FINISH)){var n=i.response.pdb_deliv.deliv_des;n=n._html;var o=this.getFrameUrl();if(this.requireDomainPolicy()&&e.getAttribute(\"src\",2)!==o)return void(e.src=o);if(n&&\"url\"===n.type)return e.src=n.content,void this.slot.setStatus(i.id,this.config.STATUS_FINISH);try{this.slot.setStatus(i.id,this.config.STATUS_FINISH);var r=this.material.formatMaterial(n,i);r.indexOf(\"<body>\")<0&&(r=\"<!DOCTYPE html><body>\"+r);var s=e.contentWindow.document;s.open(\"text/html\",\"replace\"),s.write(r),s.body&&(s.body.style.backgroundColor=\"transparent\")}catch(a){}}},getFrameUrl:function(){return this.requireDomainPolicy()?this.data.getConfig(\"domainPolicyFileUrl\")||\"/domain-policy.htm\":this.requireBlankPolicy()?this.data.getConfig(\"blankPolicyFileUrl\")||\"/blank-policy.htm\":\"about:blank\"},getFrameHTML:function(t,e){if(e=e||\"iframe\"+t.id,t.proxy){var i=String.fromCharCode(Math.floor(26*Math.random())+97);e=i+Math.random().toString(36).slice(2)+t.id}t.iframeId=e;var n=this.processFrameData(t);return this.renderFrameHTML(n)},processFrameData:function(t){var e,n,o=\"\",r=[];if(t.response){var s=t.response.placement;n=s.container;try{r=s.fillstyle.elements||[]}catch(a){}}var d=t.width||n&&n.width,l=t.height||n&&n.height,c=this.creativePreview.getPreviewUrl(d,l,r,t.displayType||\"inlay\");if(c)e=c;else if(t.isPdbAd){var h=this.config.DUP_PREFIX+\"renderFrame\";this.data.defineOnce(h,i.proxy(this,this.renderFrame)),e=this.getFrameUrl(),o='onload=\"'+h+\"('\"+t.id+\"', this);\\\"\"}else if(t.isNeedCacheRequest){var p=this.config.DUP_PREFIX+\"cacheRequest\",u=\"adsbybaidu_callback\";this.data.defineOnce(u,i.proxy(this,this.cacheRequestCallback)),this.data.defineOnce(p,i.proxy(this.requestCache,this.requestCache.cacheRequest)),e=this.param.getPmpRequestUrl(t),o='onload=\"'+p+\"('\"+t.paramObj.dpv+\"', this);\\\"\"}else e=this.param.getPmpRequestUrl(t);var m={};return m.iframeId=t.iframeId,m.srcAttriName=\"src\",m.onloadDefine=o,m.iframeWidth=\"\"+d,m.iframeHeight=\"\"+l,m.url=e,m},renderFrameHTML:function(t){var e=[\"<iframe\",' id=\"{iframeId}\"',\" {onloadDefine}\",' {srcAttriName}=\"{url}\"',' width=\"{iframeWidth}\"',' height=\"{iframeHeight}\"',' align=\"center,center\"',' vspace=\"0\"',' hspace=\"0\"',' marginwidth=\"0\"',' marginheight=\"0\"',' scrolling=\"no\"',' frameborder=\"0\"',' style=\"border:0; vertical-align:bottom;margin:0;\"',' allowtransparency=\"true\">',\"</iframe>\"].join(\"\");return this.lang.template(e,t)}}),i.define({name:\"richMaterial\",namespace:\"dup.ui.painter\",deps:{dom:\"dup.common.utility.dom\",config:\"dup.common.config\",slot:\"dup.business.slot\",param:\"dup.business.param\",frame:\"dup.business.frame\",log:\"dup.common.utility.log\",data:\"dup.common.utility.data\"},isNeededNode:function(t,e){return t.nodeName&&t.nodeName.toUpperCase()===e.toUpperCase()},evalScript:function(t,e){try{var i=document.createElement(\"script\");i.type=\"text/javascript\",t.src?i.src=t.src:i.text=t.text||t.textContent||t.innerHTML||\"\",e.insertBefore(i,e.firstChild)}catch(n){this.log.monitorLog({error:\"createscripterror\",status:\"renderFail\"})}},render:function(t,e){try{if(!t.response)return;var i=t.response,n=(i.rtb_deliv,i.order_deliv,i.pdb_deliv.deliv_des),o=n._html,r=t.isNeedCacheRequest;if(!e&&(!o||\"rich\"!==o.type||r))return!1;var s=o.content}catch(a){}if(!t.isAsync&&!r)return document.write(s),this.slot.setStatus(t.id,this.config.STATUS_FINISH),!0;var d=this.dom.g(t.containerId);if(d&&t.isAsync&&(\"clb\"===t.productLine||\"dup\"===t.productLine)&&!r){var l=this.frame.getFrameHTML(t);return d.innerHTML=l,!0}if(!d)return!1;d.innerHTML='<span style=\"display: none\">ie</span>'+s;for(var c=d.childNodes,h=[],p=0;c[p];p++)!this.isNeededNode(c[p],\"script\")||c[p].type&&\"text/javascript\"!==c[p].type.toLowerCase()||h.push(c[p]);h.reverse();for(var u=0,m=h.length;m>u;u++)this.evalScript(h[u].parentNode.removeChild(h[u]),d);return!0}}),i.define({name:\"floatBlock\",namespace:\"dup.ui.painter\",deps:{config:\"dup.common.config\",style:\"dup.common.utility.style\",log:\"dup.common.utility.log\",dom:\"dup.common.utility.dom\",lang:\"dup.common.utility.lang\",cookie:\"dup.common.utility.cookie\",unicode:\"dup.common.utility.unicode\",frame:\"dup.business.frame\",slot:\"dup.business.slot\",deliveryLimit:\"dup.business.deliveryLimit\"},GAP:5,NORMAL_CLOSE_BTN_HEIGHT:17,COUPLET_CLOSE_BTN_HEIGHT:20,validate:function(t){if(\"union\"===t.productLine){var e=this.deliveryLimit.TYPE.POPUP;\"couplet\"!==t.blockType&&\"button\"!==t.blockType||(e=this.deliveryLimit.TYPE.COUPLET);var i=this.validateLimit(e);if(!i)return!1;this.deliveryLimit.setAdsCount(e,t.domId)}var n=this.getCloseCookieName(t);return 2!==t.closeType||!this.cookie.get(n)},validateLimit:function(t){var e=this.deliveryLimit.getAdCount(t),i=this.deliveryLimit.MAX_COUNT[t];return i>e?!0:void 0},createBlockHtmlTemplate:function(t){var e=[\"{iframe}\",\"{closeBtn}\"].join(\"\");if(!t.blockType||\"default\"===t.blockType)return e;var i=[\"box-sizing: content-box;\",\"width:{width}px;\",\"height:{height}px;\",\"padding:4px;\",\"border:#acacac 1px solid;\",\"overflow:hidden;\"];return\"button\"!==t.blockType&&\"popup\"!==t.blockType||i.push(\"position:absolute;left:0;top:\"+(this.COUPLET_CLOSE_BTN_HEIGHT+this.GAP)+\"px;\"),e=['<div style=\"'+i.join(\"\")+'\">',\"{iframe}\",\"</div>\",\"{closeBtn}\"].join(\"\")},createCloseElement:function(t){var e={},i=\"\\\\u5FAE\\\\u8F6F\\\\u96C5\\\\u9ED1\",n=\"\\\\u5173\\\\u95ED\",o=t.domId+\"_closebtn\",r=this;return e.couplet=function(){var e=[\"box-sizing: content-box;\",\"position:absolute;\",\"width:\"+t.containerWidth+\"px;\",\"height:20px;\",\"top:\"+(t.containerHeight-this.COUPLET_CLOSE_BTN_HEIGHT)+\"px;\",\"left:0;\",\"cursor:pointer;\",\"background-color:#999999;\",\"color:#fff;font-size:12px;\",\"font-family: \"+r.unicode.toDecode(i)+\";\",\"text-align:center;line-height:20px;\"].join(\"\"),s='<div id=\"'+o+'\" style=\"'+e+'\">'+r.unicode.toDecode(n)+\"</div>\";return s},e.button=e.popup=function(){var e=61,i=t.containerWidth-e,n=\"\\\\u5FAE\\\\u8F6F\\\\u96C5\\\\u9ED1\",s=\"\\\\u5173\\\\u95ED\",a=[\"box-sizing: content-box;\",\"position:absolute;width:\"+e+\"px;\",\"height:20px;top:0;\",\"left:\"+i+\"px;\",\"margin:0;padding:0;margin-bottom:5px;\",\"cursor:pointer;overflow:hidden;\"].join(\"\"),d=['<div id=\"'+o+'\" style=\"'+a+'\">','<div style=\"',\"box-sizing: content-box;\",\"width:40px;height:20px;\",\"background-color:#999999;\",\"color:#fff;float:left;\",\"margin-right:1px;font-size:12px;\",\"font-family:\"+r.unicode.toDecode(n)+\";\",\"text-align: center;line-height:20px;\",'\">'+r.unicode.toDecode(s)+\"</div>\",'<a style=\"maring:0;padding:0;',\"display:inline-block;border:none;\",\"overflow:hidden;height:20px;\",\"line-height:20px;cursor:pointer;\",\"width:20px;background:url(\",\"'https://cpro.baidustatic.com/cpro/ui/\",\"noexpire/img/2.0.1/xuanfu_close.png\",\"') no-repeat 0 0;margin-bottom:3px;\",'float:left\" ></a>',\"</div>\"].join(\"\");return d},e[\"default\"]=function(){var e=\"https://cpro.baidustatic.com/cpro/ui/noexpire/img/clb/1.0.0/close.gif\",i=[\"box-sizing: content-box;\",\"height:15px;\",\"border:1px solid #e1e1e1;\",\"background:#f0f0f0;\",\"margin:0;\",\"padding:0;\",\"overflow:hidden;\"].join(\"\"),n=[\"box-sizing: content-box;\",\"float:right;\",\"clear:right;\",\"margin:2px 5px 0 0;\",\"width:39px;\",\"height:13px;\",\"cursor:pointer;\",\"background:url(\"+e+\") no-repeat scroll 0 0;\"].join(\"\"),o=['<div style=\"'+i+'\">','<span id=\"'+t.domId+'_closebtn\" style=\"'+n+'\" ',\"onmouseover=\\\"this.style.backgroundPosition='0 -20px';\\\" \",\"onmouseout=\\\"this.style.backgroundPosition='0 0';\\\" \",\">\",\"</span>\",\"</div>\"].join(\"\");return o},e[t.blockType]()},getVerticalStyle:function(t){var e=t.vSpace||10;\"center\"===t.verticalType&&(e=.5*(this.style.getClientHeight()-t.containerHeight));var i=t.verticalType;return i&&\"center\"!==i||(i=\"top\"),{cssName:i,cssValue:e}},getHorizontalStyle:function(t){var e=t.hSpace||10;if(t.contentWidth>0&&1===t.dockType){var i=Math.floor(.5*(this.style.getClientWidth()-t.contentWidth));i>=t.width&&(e=\"right\"===t.horizontalType?i-t.containerWidth-e:i-t.containerWidth-e)}else\"center\"===t.horizontalType&&(e=.5*(this.style.getClientWidth()-t.containerWidth));var n=t.horizontalType;return n&&\"center\"!==n||(n=\"left\"),{cssName:n,cssValue:e}},createContainerElementByInfo:function(t){var e=null;this.dom.g(t.domId)?e=this.dom.g(t.domId):(e=document.createElement(\"div\"),e.id=t.domId);var i=[\"box-sizing: content-box;\",\"width: \"+t.containerWidth+\"px;\",\"height: \"+t.containerHeight+\"px;\",\"overflow: hidden;\",\"z-index: 2147483647;\"];\nif(1===t.followType){if(this.style.canFixed())i.push(\"position: fixed;\");else{i.push(\"position: absolute;\"),this.updatePosition(t,e);var n=this;this.dom.bind(window,\"scroll\",function(){n.updatePosition(t,t.domId)}),this.dom.bind(window,\"resize\",function(){n.updatePosition(t,t.domId)})}var o=this.getVerticalStyle(t),r=this.getHorizontalStyle(t);i.push(o.cssName+\":\"+o.cssValue+\"px;\"),i.push(r.cssName+\":\"+r.cssValue+\"px;\")}else{i.push(\"position: absolute;\");var o=this.getVerticalStyle(t),r=this.getHorizontalStyle(t);i.push(o.cssName+\":\"+o.cssValue+\"px;\"),i.push(r.cssName+\":\"+r.cssValue+\"px;\")}return e.style.cssText=i.join(\"\"),e},updatePosition:function(t,e){var i=this.dom.g(e);if(i){var n=i.style,o=\"CSS1Compat\"!==document.compatMode,r=document.body?document.body:document.documentElement,s=o?r:document.documentElement,a=(s.clientWidth,s.clientHeight),d=(window.pageXOffset||s.scrollLeft,window.pageYOffset||s.scrollTop);t.contentWidth>0&&1===t.dockType;\"top\"===t.verticalType||0===t.verticalType.length?n.top=d+t.vSpace+\"px\":n.top=d+a-t.vSpace-t.containerHeight+\"px\"}},getCloseCookieName:function(t){var e=\"bd_close_\"+t.id;return\"couplet\"!==t.blockType&&\"button\"!==t.blockType||(e+=\"_\"+t.horizontalType),e},setCookieClose:function(t){var e=this.getCloseCookieName(t),i=new Date;i.setTime(i.getTime()+9e5),this.cookie.set(e,!0,{expires:i,path:\"/\"})},registEvent:function(t){var e=t.domId+\"_closebtn\",n=this.dom.g(e);this.dom.bind(n,\"click\",i.proxy(this,this.closeBtnOnClickHandler)),this.dom.bind(n,\"mouseover\",i.proxy(this,this.closeBtnOnMouseOverHandler)),this.dom.bind(n,\"mouseout\",i.proxy(this,this.closeBtnOnMouseOutHandler))},closeBtnOnClickHandler:function(){var t=document.getElementById(this.info.domId);t&&t.parentNode&&t.parentNode.removeChild(t),2===this.info.closeType&&this.setCookieClose(this.info);var e=\"//eclick.baidu.com/fcb.jpg?jk={jk}&dt={dt}&rnd={rnd}\",i={jk:this.info.queryId||\"\",dt:(new Date).getTime(),rnd:Math.floor(2147483648*Math.random())};try{this.log.loadImage(this.lang.template(e,i))}catch(n){}},closeBtnOnMouseOverHandler:function(){var t=this.info.domId+\"_closebtn\",e=this.dom.g(t);if(e)if(\"couplet\"===this.info.blockType)e.style.backgroundColor=\"#0066cc\";else if(\"popup\"===this.info.blockType||\"button\"===this.info.blockType){var i=e.getElementsByTagName(\"div\")[0];i.style.backgroundColor=\"#0066cc\";var n=e.getElementsByTagName(\"a\")[0];n.style.backgroundImage=\"url(https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.0/xuanfu_mouseover_close.png)\"}},closeBtnOnMouseOutHandler:function(){var t=this.info.domId+\"_closebtn\",e=this.dom.g(t);if(e)if(\"couplet\"===this.info.blockType)e.style.backgroundColor=\"#999999\";else if(\"popup\"===this.info.blockType||\"button\"===this.info.blockType){var i=e.getElementsByTagName(\"div\")[0];i.style.backgroundColor=\"#999999\";var n=e.getElementsByTagName(\"a\")[0];n.style.backgroundImage=\"url(https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.1/xuanfu_close.png)\"}},autoClose:function(){var t=document.getElementById(this.adInfo.domId);t&&t.parentNode&&t.parentNode.removeChild(t)},render:function(t,e){if(this.validate(t)){this.info=t;var n=this.createCloseElement(t),o=this.createBlockHtmlTemplate(t),r={width:t.width,height:t.height,iframe:this.frame.getFrameHTML(e),closeBtn:n},s=this.createContainerElementByInfo(t);s.innerHTML=this.lang.template(o,r),this.dom.g(t.domId)||document.body.insertBefore(s,document.body.firstChild),this.registEvent(t);var a=t.closeTime||0;a>0&&setTimeout(i.proxy(this,this.autoClose),1e3*a),e.isPdbAd||this.slot.setStatus(e.id,this.config.STATUS_FINISH)}}}),i.define({name:\"inlayFix\",namespace:\"dup.ui.painter.mobile\",deps:{config:\"dup.common.config\",lang:\"dup.common.utility.lang\",style:\"dup.common.utility.style\",dom:\"dup.common.utility.dom\",slot:\"dup.business.slot\",param:\"dup.business.param\",expand:\"dup.ui.painter.expand\",monitor:\"dup.business.monitor\",frame:\"dup.business.frame\",richMaterial:\"dup.ui.painter.richMaterial\",landingPage:\"dup.ui.painter.landingPage\"},$inlayFix:function(){this.win=window},processSlotInfo:function(t){var e={},i=t.response.placement,n=i.container,o=(i.fillstyle,n.sizeType),r=n.width,s=n.height;if(t.styleOpenApi.scale){o=2;var a=t.styleOpenApi.scale,d=a.split(\".\");r=d[0],s=d[1]}if(1===o)e.width=r,e.height=s;else if(2===o||5===o){t.pcwd||t.ftpc?(e.wScale=t.pcwd||\"-1\",t.styleOpenApi.cpro_ftpc=\"true\"):e.wScale=r,t.pchd?e.hScale=t.pchd:e.hScale=s;var l={},c=t.styleOpenApi.cpro_ftpc||\"true\"===t.styleOpenApi.cpro_ftpc||\"-1\"===e.wScale;c=5===o?!0:c;var h=this.dom.g(t.containerId);c&&h&&h.parentElement.clientWidth&&(l.width=h.parentElement.clientWidth||0),\"-1\"===e.hScale&&h&&h.parentElement&&(l.height=h.parentElement.clientHeight||0);var p=this.param.translateScaleToPixelSize(e.wScale,e.hScale,l);n.width=p.width,n.height=p.height,t.width=p.width,t.height=p.height,e.width=p.width,e.height=p.height}else if(3===o){var u=this.getCurViewportWidth(r);n.width=t.width=e.width=u,n.height=t.height=e.height=s}e.sizeType=o;var m=t.styleOpenApi,f=m.cpro_w||m.rsi0||0,g=m.cpro_h||m.rsi1||0;return(f||g)&&(e.width=f||this.getCurViewportWidth(r),e.height=g||s,t.width=e.width,t.height=e.height),e},getCurViewportWidth:function(t){var e=this.isUnionPreview?t:Math.max(320,this.win.innerWidth);return isNaN&&isNaN(e)&&(e=this.style.getClientWidth()),e},parseHtmlSnippet:function(t){var e=['<div style=\"box-sizing: content-box;width:{width}px;height:{height}px;position:relative;margin:0 auto;\">',\"{closeBtnHtml}\",\"{iframeHtml}\",\"</div>\"].join(\"\");return this.lang.template(e,t)},decorateContainer:function(t,e){if(t){var i=t.style;i.cssText=[\"box-sizing: content-box;\",\"text-align:center;\",\"display:block;\",\"font-size:0;\",\"width:100%;\",\"height:\"+e.height+\"px;\"].join(\"\")}},validate:function(t){return!0},render:function(t){if(this.slot.setStatus(t.id,this.config.STATUS_RENDERED),this.validate(t)){if(!this.slot.adInfoIsAvailable(t))return!1;this.monitor.sendLog(t),t.displayType=\"inlay-mobile\";var e=this.dom.g(t.containerId);if(e){this.monitor.sendLog(t);var i=this.richMaterial.render(t),n=this;if(i)return void(this.supportPostMessage&&setTimeout(function(){n.expand.fire(\"adloaded\",t.id)},800));this.landingPage.activate(t);var o=this.processSlotInfo(t);if(this.decorateContainer(e,o),t.width=o.width,t.height=o.height,2===o.sizeType||5===o.sizeType){var r=t.response.pdb_deliv.deliv_des;if(r&&r._html){r=r._html;var s=r.type;\"text\"!==s&&\"image\"!==s&&\"flash\"!==s||(r.width=t.width,r.height=t.height)}}var a={id:t.id,width:o.width,height:o.height,closeBtnHtml:\"\",iframeHtml:this.frame.getFrameHTML(t)},d=this.parseHtmlSnippet(a);e.innerHTML=d,t.isPdbAd||this.slot.setStatus(t.id,this.config.STATUS_FINISH)}}}}),i.define({name:\"float\",namespace:\"dup.ui.painter.mobile\",deps:{config:\"dup.common.config\",lang:\"dup.common.utility.lang\",style:\"dup.common.utility.style\",dom:\"dup.common.utility.dom\",cookie:\"dup.common.utility.cookie\",slot:\"dup.business.slot\",frame:\"dup.business.frame\",monitor:\"dup.business.monitor\",richMaterial:\"dup.ui.painter.richMaterial\",painter:\"dup.ui.painter.mobile.inlayFix\",hiddenFloatAd:\"dup.ui.painter.hiddenFloatAd\"},$float:function(){},\"float\":function(){},containerFilter:function(t){var e=!1,i=t.response.placement,n=i.container,o=n.location;if(2===o)return!1;var r=3.4;if(1!==n.sizeType){var s=n.width/n.height;e=!(r>s)}if(t.styleOpenApi){if(t.styleOpenApi.rsi0||t.styleOpenApi.rsi1){var a=t.width/t.height;e=!(r>a)}if(t.styleOpenApi.cpro_w||t.styleOpenApi.cpro_h){var d=t.width/t.height;e=!(r>d)}if(t.styleOpenApi.scale){var l=t.styleOpenApi.scale.split(\".\"),c=l[0]/l[1];e=!(r>c)}}return e},processSlotInfo:function(t){var e=t.response.placement,i=e.container,n=e.fillstyle,o=parseFloat(n.opacity||.9),r=n.backgroundColor||\"#000\",s=this.painter.processSlotInfo(t);s.backgroundOpacity=o,s.backgroundColor=r;var a=i.location;return 2!==a&&3!==a&&(a=3),s.locationType=a,s.containerId=t.containerId,s.closeType=i.closeType,s},parseHtmlSnippet:function(t){var e=['<div style=\"width:{width}px;height:{height}px;position:relative;margin:0 auto;\">',\"{closeBtnHtml}\",\"{iframeHtml}\",\"</div>\"].join(\"\");return this.lang.template(e,t)},parseCloseBtnLayoutData:function(t){var e=40,i=40,n=0,o=\"\",r=Math.max(document.documentElement.clientWidth,window.innerWidth||0);e=r*(1/8),i=.4*e,n=16*(e/50);var s=0;2===t.locationType?(o=4,s=t.height):3===t.locationType&&(o=3,s=\"-\"+i);var a={domId:t.containerId,right:n,top:s,closeBtnWidth:\"\"+e,closeBtnHeight:i,closeBtnImgUrl:\"https://cpro.baidustatic.com/cpro/ui/noexpire/img/2.0.0/xuantingClose\"+o+\".png\"};return a},parseCloseButtonHtml:function(t){var e=[\"<div\",' id=\"{domId}_closebtn\"',' style=\"',\"box-sizing: content-box;\",\"position:absolute;\",\"right:0px;\",\"top:{top}px;\",\"width:{closeBtnWidth}px;\",\"height:{closeBtnHeight}px;\",\"overflow:hidden;\",\"display:block;\",\"background:url('{closeBtnImgUrl}') no-repeat 0 0;\",\"_filter:progid:DXImageTransform.\",\"Microsoft.AlphaImageLoader(\",\"enabled=true,\",\" sizingMethod=none,\",\" src='{closeBtnImgUrl}');\",\"_background:none;\",\"cursor:pointer;\",\"background-position:center;\",\"background-size:100% 100%;\",'z-index:2147483647;\">&nbsp;</div>'].join(\"\"),i=this.parseCloseBtnLayoutData(t);return this.lang.template(e,i)},decorateContainer:function(t,e){if(t){var i=\"absolute\";this.style.canFixed()&&(i=\"fixed\");var n=\"\";2===e.locationType?n=\"top\":3===e.locationType&&(n=\"bottom\");var o=0;\"absolute\"===i&&(o=this.style.getScrollTop(window)+this.style.getClientHeight(window)-e.height);var r=t.style;r.cssText=[\"box-sizing: content-box;\",\"position:\"+i,\"z-index:2147483647;\",n+\":\"+o,\"background-color:\"+e.backgroundColor,\"opacity:\"+e.backgroundOpacity,\"text-align:center\",\"display:block\",\"font-size:0\",\"left:0\",\"width:100%\",\"height:\"+e.height+\"px\"].join(\";\")}},getCloseCookieKey:function(t){return\"bd_close_\"+t.id},closeBtnOnClickHandler:function(t,e){var i=this.dom.g(e.containerId);if(i&&i.parentNode&&i.parentNode.removeChild(i),2===e.closeType){var n=\"bd_close_\"+this.id,o={path:\"\"};this.cookie.set(n,!0,o)}},validate:function(t){var e=!0,i=\"bd_close_\"+this.id,n=this.cookie.get(i,window);return 2===t.closeType&&n&&(e=!1),e},render:function(t){if(!this.slot.adInfoIsAvailable(t))return!1;this.slot.setStatus(t.id,this.config.STATUS_RENDERED),this.id=t.id,t.displayType=\"inlay-mobile\";var e=this.processSlotInfo(t);if(this.validate(e)){this.monitor.sendLog(t);var n=this.richMaterial.render(t);if(!n){var o=this.dom.g(t.containerId);if(o&&(t.width=e.width,t.height=e.height,this.containerFilter(t))){this.decorateContainer(o,e);var r=this.parseCloseButtonHtml(e);if(2===e.sizeType){var s=t.response.pdb_deliv.deliv_des;if(s&&s._html){s=s._html;var a=s.type;\"text\"!==a&&\"image\"!==a&&\"flash\"!==a||(s.width=t.width,s.height=t.height)}}var d={id:t.id,width:e.width,height:e.height,closeBtnHtml:r,iframeHtml:this.frame.getFrameHTML(t)},l=this.parseHtmlSnippet(d);o.innerHTML=l;var c=this.dom.g(t.containerId+\"_closebtn\");c&&this.dom.bind(c,\"click\",i.proxy(this,this.closeBtnOnClickHandler,t)),this.hiddenFloatAd.render(t),t.isPdbAd||this.slot.setStatus(t.id,this.config.STATUS_FINISH)}}}}}),i.define({name:\"clbDelivery\",namespace:\"dup.business.delivery\",deps:{slot:\"dup.business.slot\",frame:\"dup.business.frame\",\"interface\":\"dup.business.interface\",config:\"dup.common.config\",log:\"dup.common.utility.log\",origentation:\"dup.business.origentation\",data:\"dup.common.utility.data\"},clbSlotArr:{BAIDU_CLB_fillSlot:!0,BAIDU_CLB_singleFillSlot:!0,BAIDU_CLB_fillSlotWithSize:!0,BAIDU_CLB_fillSlotAsync:!0,BAIDU_CLB_preloadSlots:!0},launch:function(){var t;try{var e=window.BAIDU_CLB_SLOT_ID;window.BAIDU_CLB_SLOT_ID=null,e&&(t=this.slot.createSlot({slotId:e,productLine:\"clb\",isAsync:!1}),this.slot.addSlot(t),this.slot.process());for(var n in this.clbSlotArr)\"BAIDU_CLB_preloadSlots\"===n?this.data.defineOnce(n,i.proxy(this,this.reSet)):this.data.defineOnce(n,i.proxy(this,this.getClbFillSlot));this.updateApi()}catch(o){}},reSet:function(){},getClbFillSlot:function(t,e){var i;t&&!e&&(i=this.slot.createSlot({slotId:t,productLine:\"clb\",isAsync:!1})),t&&e&&(i=this.slot.createSlot({slotId:t,productLine:\"clb\",isAsync:!0}),i.containerId=e),this.slot.addSlot(i),this.slot.process()},updateApi:function(){try{this.data.defineOnce(\"BAIDU_CLB_prepareMoveSlot\",i.proxy(this,this.prepareMove)),this.data.defineOnce(\"BAIDU_DUP_addSlotStatusCallback\",i.proxy(this.origentation,this.origentation.addSlotStatusCallback)),this.data.defineOnce(this.config.DUP_PREFIX+\"renderFrame\",i.proxy(this.frame,this.frame.renderFrame)),this.data.defineOnce(\"BAIDU_CLB_setConfig\",i.proxy(this.data,this.data.putConfig)),this.data.defineOnce(\"BAIDU_CLB_addOrientation\",i.proxy(this.origentation,this.origentation.addOrientation)),this.data.defineOnce(\"BAIDU_CLB_addOrientationOnce\",i.proxy(this.origentation,this.origentation.addOrientationOnce)),this.data.defineOnce(\"BAIDU_CLB_setOrientationOnce\",i.proxy(this.origentation,this.origentation.setOrientationOnce)),this.data.defineOnce(\"BAIDU_CLB_addSlot\",i.proxy(this,this.reSet)),this.data.defineOnce(\"BAIDU_CLB_enableAllSlots\",i.proxy(this,this.reSet)),this.data.defineOnce(\"BAIDU_CLB_SETHTMLSLOT\",i.proxy(this,this.reSet))}catch(t){}},prepareMove:function(t){try{for(var e=0,i=t+\"_\"+e;this.slot.getSlotInfo(i)&&0!==this.slot.getSlotInfo(i)[0];){var n=this.slot.getSlotInfo(i);this.slot.clearStatus(n,this.config.STATUS_FINISH),i=t+\"_\"+ ++e}}catch(o){}}}),i.define({name:\"inlayFix\",namespace:\"dup.ui.painter\",deps:{config:\"dup.common.config\",dom:\"dup.common.utility.dom\",slot:\"dup.business.slot\",frame:\"dup.business.frame\",viewWatch:\"dup.business.viewWatch\",richMaterial:\"dup.ui.painter.richMaterial\",monitor:\"dup.business.monitor\",expand:\"dup.ui.painter.expand\",event:\"dup.common.utility.event\",lang:\"dup.common.utility.lang\",browser:\"dup.common.utility.browser\",deliveryLimit:\"dup.business.deliveryLimit\"},$inlayFix:function(){this.supportPostMessage=!(this.browser.ie&&this.browser.ie<8)},bindEvent4Expand:function(t){var e=this.dom.g(t.containerId),i=this;this.event.bind(e,\"mouseover\",function(e){var n=e.target||e.srcElement;\"iframe\"!==n.tagName.toLowerCase()&&\"iframe\"!==n.nodeName.toLowerCase()||i.expand.fire(\"mouseover\",t.id)})},validate:function(t){if(\"union\"===t.productLine){var e=this.deliveryLimit.getSlotType(t),i=this.deliveryLimit.validate(t);return i&&this.deliveryLimit.setAdsCount(e,t.containerId),i}return!0},render:function(t){this.slot.setStatus(t.id,this.config.STATUS_RENDERED);var e=this.dom.g(t.containerId);if(!this.slot.adInfoIsAvailable(t))return this.slot.setStatus(t.id,this.config.STATUS_FINISH),!1;t.displayType=\"inlay\";var i=null==t.response?null:t.response.placement.container.slide,n=!(!i||this.lang.isEmptyObj(i)||!this.supportPostMessage);if(n&&(this.expand.observer(t),this.bindEvent4Expand(t)),this.validate(t)){this.monitor.sendLog(t);var o=this.richMaterial.render(t),r=this;if(o)return void(this.supportPostMessage&&setTimeout(function(){r.expand.fire(\"adloaded\",t.id)},800));if(!e)return void this.slot.addErrorInfo(t,\"container dom not founded\");var s=this.frame.getFrameHTML(t);e.innerHTML=s,this.viewWatch.regisetViewWatch(t),t.isPdbAd||this.slot.setStatus(t.id,this.config.STATUS_FINISH),n&&setTimeout(function(){r.expand.fire(\"adloaded\",t.id)},800)}}}),i.define({name:\"float\",namespace:\"dup.ui.painter\",deps:{config:\"dup.common.config\",dom:\"dup.common.utility.dom\",lang:\"dup.common.utility.lang\",frame:\"dup.business.frame\",slot:\"dup.business.slot\",richMaterial:\"dup.ui.painter.richMaterial\",monitor:\"dup.business.monitor\",expand:\"dup.ui.painter.expand\",floatBlock:\"dup.ui.painter.floatBlock\",viewWatch:\"dup.business.viewWatch\"},GAP:5,NORMAL_CLOSE_BTN_HEIGHT:17,COUPLET_CLOSE_BTN_HEIGHT:20,validate:function(t){var e=t.response.placement,i=e.container,n=i.floated;if(this.dom.isInIframe(window))return!1;var o=parseInt(n.clientw||0,10);return o>4095&&(o=4095),!(o>=screen.width)},processSlotInfo:function(t){var e=t.response.placement,i=e.container,n=i.floated,o=n.dockType,r=i.closeType,s=i.closeTime||0,a=n.vspace||0,d=n.hspace||0,l=t.response.rtb_deliv.deliv_id&&t.response.order_deliv.deliv_id,c=t.width||i.width,h=t.height||i.height,p=+c,u=+h,m=[\"default\",\"couplet\",\"button\",\"popup\"],f=parseInt(n.blockType||0,10),g=m[f];\"default\"!==g&&(p+=2*this.GAP+1,u+=2*this.GAP+1),u+=\"couplet\"===g?this.COUPLET_CLOSE_BTN_HEIGHT:\"button\"===g||\"popup\"===g?this.COUPLET_CLOSE_BTN_HEIGHT+this.GAP:this.NORMAL_CLOSE_BTN_HEIGHT;var y=i.location,v=\"\",w=\"\";switch(y){case 1:v=\"center\",w=\"center\";break;case 2:v=\"top\";break;case 3:v=\"bottom\";break;case 4:w=\"left\";break;case 5:w=\"right\";break;case 7:v=\"top\",w=\"left\";break;case 8:v=\"top\",w=\"right\";break;case 9:v=\"bottom\",w=\"left\";break;case 10:v=\"bottom\",w=\"right\"}0===a&&\"button\"===g?(v=\"bottom\",a=40):0===a&&\"couplet\"===g&&(v=\"top\",a=150);var b=t.response.queryid,I={id:t.id,domId:t.containerId,width:c,height:h,containerWidth:p,containerHeight:u,verticalType:v,horizontalType:w,followType:n.follow||1,blockType:g,dockType:o,closeType:r,closeTime:s,vSpace:a,hSpace:d,contentWidth:n.contw,isRTB:l,queryId:b,productLine:t.productLine};return I},render:function(t){if(this.validate(t)){if(this.slot.setStatus(t.id,this.config.STATUS_RENDERED),!this.slot.adInfoIsAvailable(t))return!1;t.displayType=\"float\",this.monitor.sendLog(t);var e=this.richMaterial.render(t);if(!e){var n=[];n.push(t);var o=t.response.placement,r=o.container,s=parseInt(r.location||0,10);if(6===s){n=[];var a=this.slot.cloneSlot(t),d=this.slot.cloneSlot(t);a.response.placement.container.location=5,a.containerId=a.containerId+\"_right\",this.slot.addSlot(a),n.push(a),d.response.placement.container.location=4,d.containerId=d.containerId+\"_left\",this.slot.addSlot(d),n.push(d)}for(var l=0,c=n.length;c>l;l++){var h=n[l],p=i.create(this.floatBlock);p.render(this.processSlotInfo(h),h)}this.viewWatch.regisetViewWatch(t)}}}}),i.define({name:\"main\",namespace:\"dup.ui.delivery\",deps:{config:\"dup.common.config\",slot:\"dup.business.slot\",fingerPrint:\"dup.business.fingerPrint\",data:\"dup.common.utility.data\",storage:\"dup.common.utility.storage\",loader:\"dup.common.loader\",painterSelector:\"dup.business.painterSelector\",origentation:\"dup.business.origentation\",param:\"dup.business.param\",detect:\"dup.business.detect\",\"interface\":\"dup.business.interface\",log:\"dup.common.utility.log\",scene:\"dup.business.sceneTactics\",clbDelivery:\"dup.business.delivery.clbDelivery\",unionDelivery:\"dup.business.delivery.unionDelivery\",dupDelivery:\"dup.business.delivery.dupDelivery\",standardDelivery:\"dup.business.delivery.standardDelivery\",inlayFixPainter:\"dup.ui.painter.inlayFix\",floatPainter:\"dup.ui.painter.float\",mobileInlayFixPainter:\"dup.ui.painter.mobile.inlayFix\",mobileFloatPainter:\"dup.ui.painter.mobile.float\"},process:function(){this.prepareApi(),this.unionDelivery.launch(),this.dupDelivery.launch(),this.clbDelivery.launch(),this.standardDelivery.launch(),this.fingerPrint.start()},prepareApi:function(){this[\"interface\"].register(\"addOrientation\",this.origentation,this.origentation.addOrientation),this[\"interface\"].register(\"addOrientationOnce\",this.origentation,this.origentation.addOrientationOnce),this[\"interface\"].register(\"setOrientationOnce\",this.origentation,this.origentation.setOrientationOnce),this.data.defineOnce(this.config.LOADER_DEFINE_NAME,i.proxy(this,this.callback))},callback:function(t){try{var e=this.slot.getSlotInfo(t.tuid);e.response=t,this.slot.setStatus(e.id,this.config.STATUS_RESPONSE),this.slot.processSlot(e),e.timestampWatcher.t3=(new Date).getTime(),this.slot.adInfoStorage(e),this.param.processExtendsParam(e);var n=this.painterSelector.getPainter(e);if(!n)return;var o=i.using(n);o?o.render(e):n&&this.loader.load(e.id,n,i.proxy(this,this.painterLoadedCallback,n,e))}catch(r){var s=encodeURIComponent(r),a={type:\"elog\",pos:\"callback\",id:t.tuid,mes:s};this.log.monitorLog(a)}},painterLoadedCallback:function(t,e){var n=i.using(t);n&&n.render(e)}});var o=i.using(\"dup.ui.delivery.main\");o.process()}()}catch(e){var url=[\"//eclick.baidu.com/se.jpg?\",\"type=fatalError\",\"mes=\"+encodeURIComponent(e)].join(\"&\"),img=new Image;img.src=url}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 32634
        },
        "cache": {},
        "timings": {
          "blocked": 2.81900004483759,
          "dns": -1,
          "connect": -1,
          "send": 0.03200001083314996,
          "wait": 4408.222000114619,
          "receive": 35495.117999846116,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.879Z",
        "time": 22660.915000131354,
        "request": {
          "method": "GET",
          "url": "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/hm.js?6bcd52f51e9b3dce32bec4a3997715ac"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "hm.baidu.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [
            {
              "name": "6bcd52f51e9b3dce32bec4a3997715ac",
              "value": ""
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 17:13:27 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 18357.7260000166,
          "dns": -1,
          "connect": 1631.1190000269016,
          "send": 0.20599993880023248,
          "wait": 2671.1540000979003,
          "receive": 0.7100000511527469,
          "ssl": 1630.9139998628998
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "2156",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.886Z",
        "time": 10850.501999957487,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/ico_sear_top.gif",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/www.csdn.net/css/content.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8af-15a\""
            },
            {
              "name": "content-type",
              "value": "image/gif"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "346"
            }
          ],
          "cookies": [],
          "content": {
            "size": 346,
            "mimeType": "image/gif",
            "text": "R0lGODlhDQAOANUAAP////7+/v39/fz8/Pr6+vb29vX19fT09PLy8vHx8e7u7ufn5+Xl5eLi4uDg4N/f393d3dvb29ra2tjY2NbW1tLS0tHR0dDQ0M/Pz87OzsrKysfHx8XFxcPDw8LCwsDAwL29vby8vLu7u7q6urm5ubW1tbGxsbCwsKurq6mpqaenp6ampqWlpaSkpKKioqGhoZ+fn5ubm5qampmZmZiYmJeXl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAADYALAAAAAANAA4AAAZ3QEAg0MhoIAQhYAlAnGizmYz1EAYABBXNoyA0UrEFkyLrLK8HV4r5mSWuzE3NcAXNBuflxS3MyBhMQiQteAAHMCgFTBEzFYETMy8cFSQyNBJ5AA4rUCwmMjIUgUsGCAECIzIzFkOZZyJRGHlwSwMhMyWjmQEUBEEAOw==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 482
        },
        "cache": {},
        "timings": {
          "blocked": 0.863000052049756,
          "dns": -1,
          "connect": -1,
          "send": 0.09400001727044593,
          "wait": 10167.52199991608,
          "receive": 682.0229999720868,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.887Z",
        "time": 10665.277000050992,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/css/logo.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/www.csdn.net/css/content.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 30 Jan 2017 10:40:03 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588f1803-13e7\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "5095"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5095,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAPAAAABaCAYAAACG0tsaAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyFpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDE0IDc5LjE1MTQ4MSwgMjAxMy8wMy8xMy0xMjowOToxNSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MURCOUUwODE3NTczMTFFNjg4MzNBMkFBQjM3QTBFMTkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MURCOUUwODA3NTczMTFFNjg4MzNBMkFBQjM3QTBFMTkiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjU2RkM1MjQzNzU2QjExRTY5RDY3QTZBRjdEMzE2OTJCIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjU2RkM1MjQ0NzU2QjExRTY5RDY3QTZBRjdEMzE2OTJCIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+DlB7KQAAEFxJREFUeNrsXQmQFdUV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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5232
        },
        "cache": {},
        "timings": {
          "blocked": 0.878999941051006,
          "dns": -1,
          "connect": -1,
          "send": 0.046000117436052035,
          "wait": 10083.547999849512,
          "receive": 580.8040001429927,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.887Z",
        "time": 12165.559000102803,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/css/x.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/www.csdn.net/css/content.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 30 Jan 2017 00:50:02 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588e8dba-4719\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "18201"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18201,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 18339
        },
        "cache": {},
        "timings": {
          "blocked": 0.75699994340539,
          "dns": -1,
          "connect": -1,
          "send": 0.039000064134598,
          "wait": 10052.92299995196,
          "receive": 2111.8400001433038,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.887Z",
        "time": 12579.855999909341,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/css/y.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/www.csdn.net/css/content.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 30 Jan 2017 00:50:02 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588e8dba-6170\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "24944"
            }
          ],
          "cookies": [],
          "content": {
            "size": 24944,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 25082
        },
        "cache": {},
        "timings": {
          "blocked": 0.619000056758523,
          "dns": -1,
          "connect": -1,
          "send": 0.04299986176192805,
          "wait": 10083.758000051579,
          "receive": 2495.435999939242,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.891Z",
        "time": 10733.627000125125,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img.ads.csdn.net/2016/201608021757063065.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 02 Aug 2016 09:57:07 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"57a06e73-4a1\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "1185"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1185,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAYAAAA1+Nx+AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyFpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDE0IDc5LjE1MTQ4MSwgMjAxMy8wMy8xMy0xMjowOToxNSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2MDEwMEQ0RTVBQ0YxMUU1OEM5QUI1QUJDMzM0M0UyQSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo2MDEwMEQ0RjVBQ0YxMUU1OEM5QUI1QUJDMzM0M0UyQSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjYwMTAwRDRDNUFDRjExRTU4QzlBQjVBQkMzMzQzRTJBIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjYwMTAwRDRENUFDRjExRTU4QzlBQjVBQkMzMzQzRTJBIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+e7ECaQAAARZJREFUeNq0VD0LwjAQbaDgYMHN9l9Id2ed3fUHdO9enP0ZOrvr7C6462zdhDh0qi/lBWKaWBD74Mi1d7l3X60IgmAAGfH8JyrIM1TB67qeBT1ACHEMdeZ42Fn2ISSCSMjLY9No+SDppYodOi7GvJzAaQXiLfQ7g5QMFMO2hu2Ac+7xaWATNBetTFZGyTnVhLa5x8dLENFpj+Nq2STPCQJm8DmpiqGn0M/QH7o6w7dFoKGCXxzvVYUZs54aVabWcPMuAh8kLhdsUcyZmXgxOfkrgQpwY9aZZzUL3wzM1ZMdRHpWuvcKY7bKXN8PgojD23DVvrbK1XtXcqHV39zzYdko2YrIEby0CSpms+jhb1GJvn92bwEGAB5hdPSlm6EwAAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1321
        },
        "cache": {},
        "timings": {
          "blocked": 0.253000063821673,
          "dns": -1,
          "connect": -1,
          "send": 0.04699989221990197,
          "wait": 10049.230000004158,
          "receive": 684.0970001649257,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:06.895Z",
        "time": 11989.404000109062,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/www/images/pic_footer_icon.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/www.csdn.net/css/content.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 11:06:29 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b8b5-1d52\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "7506"
            }
          ],
          "cookies": [],
          "content": {
            "size": 7506,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 7643
        },
        "cache": {},
        "timings": {
          "blocked": 0.363000202924013,
          "dns": -1,
          "connect": -1,
          "send": 0.06899982690811196,
          "wait": 10044.470000080768,
          "receive": 1944.5019999984615,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:16.739Z",
        "time": 4787.102000089362,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/www.csdn.net/ui/scripts/Csdn/counter.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Mon, 25 Jun 2012 06:25:39 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"4fe80463-79\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 121,
            "mimeType": "application/javascript",
            "text": "document.write('<script type=\"text/javascript\" charset=\"UTF-8\" src=\"http://message.csdn.net/msg.popup.js\"><'+'/script>');"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 289
        },
        "cache": {},
        "timings": {
          "blocked": 0.427999999374151,
          "dns": -1,
          "connect": -1,
          "send": 0.102000078186393,
          "wait": 4665.027000010009,
          "receive": 121.54500000179269,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.527Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "http://message.csdn.net/msg.popup.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Intervention",
              "value": "<https://www.chromestatus.com/feature/5718547946799104>; level=\"warning\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.530Z",
        "time": 9530.517000006512,
        "request": {
          "method": "GET",
          "url": "https://dc2.csdn.net/track?0.36893381570793804",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/track?0.36893381570793804"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "image/webp,image/*,*/*;q=0.8"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "dc2.csdn.net"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [
            {
              "name": "0.36893381570793804",
              "value": ""
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 17:13:27 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20,
            "mimeType": "text/plain",
            "text": "No such site at :443"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 20
        },
        "cache": {},
        "timings": {
          "blocked": 3901.66099998169,
          "dns": -1,
          "connect": 1612.4040000140603,
          "send": 0.11199992149977334,
          "wait": 471.9940000213701,
          "receive": 3544.3460000678915,
          "ssl": 1612.1689998544803
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "2198",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.574Z",
        "time": 7967.020999873057,
        "request": {
          "method": "GET",
          "url": "https://ask.csdn.net/assets/ask_float_fonts_css-6b30a53970eb5c3a2a045e3df585b475.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/assets/ask_float_fonts_css-6b30a53970eb5c3a2a045e3df585b475.css"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "ask.csdn.net"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 17:13:27 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 3857.48599981889,
          "dns": -1,
          "connect": 1576.1710000224398,
          "send": 0.14499993995013938,
          "wait": 2532.8050001990105,
          "receive": 0.4139998927666966,
          "ssl": 1575.87699987926
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "2205",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.577Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "http://ask.csdn.net/upload.html",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.582Z",
        "time": 1689.9510000366718,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/images/common_float_block.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/c.csdnimg.cn/comm_ask/css/ask_float_block.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 22 Dec 2016 09:37:14 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"585b9eca-7205\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "29189"
            }
          ],
          "cookies": [],
          "content": {
            "size": 29189,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 29327
        },
        "cache": {},
        "timings": {
          "blocked": 0.527000054717064,
          "dns": -1,
          "connect": -1,
          "send": 0.11799996718764294,
          "wait": 454.2559999972583,
          "receive": 1235.0500000175089,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.609Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "http://ads.csdn.net/get_ads.php?ip=null&zones=149%7C126%7C129%7C127%7C128%7C145%7C146%7C137%7C138%7C139%7C140%7C131%7C132%7C133%7C134%7C135%7C136%7C130%7C141%7C142%7C143%7C144%7C150%7C151%7C152&iframe=false%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse&prefix=revive-0-&loc=https%3A%2F%2Fweb.hfelo.se%2Fcsdn.net%2F",
          "httpVersion": "unknown",
          "headers": [],
          "queryString": [
            {
              "name": "ip",
              "value": "null"
            },
            {
              "name": "zones",
              "value": "149%7C126%7C129%7C127%7C128%7C145%7C146%7C137%7C138%7C139%7C140%7C131%7C132%7C133%7C134%7C135%7C136%7C130%7C141%7C142%7C143%7C144%7C150%7C151%7C152"
            },
            {
              "name": "iframe",
              "value": "false%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse%7Cfalse"
            },
            {
              "name": "prefix",
              "value": "revive-0-"
            },
            {
              "name": "loc",
              "value": "https%3A%2F%2Fweb.hfelo.se%2Fcsdn.net%2F"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:21.705Z",
        "time": 11888.391999993473,
        "request": {
          "method": "GET",
          "url": "https://dc.csdn.net/re?9817=&uid=-&ref=-&pid=web&mod=popu_125&dsm=get&mtp=3&con=https%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201507010655315634.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3BUML%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201501080056201415.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3BC%23%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%5B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%5D%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201605050006573691.png%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314%3BFFmpeg%E9%9F%B3%E8%A7%86%E9%A2%91%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98+iOS%26amp%3BAndroid%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314&ck=-&x-acl-token=status_js_dkuyqthzbajmncbsb_token",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/re?9817=&uid=-&ref=-&pid=web&mod=popu_125&dsm=get&mtp=3&con=https%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201507010655315634.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3BUML%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201501080056201415.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3BC%23%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%5B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%5D%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201605050006573691.png%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314%3BFFmpeg%E9%9F%B3%E8%A7%86%E9%A2%91%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98+iOS%26amp%3BAndroid%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314&ck=-&x-acl-token=status_js_dkuyqthzbajmncbsb_token"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "image/webp,image/*,*/*;q=0.8"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "dc.csdn.net"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [
            {
              "name": "9817",
              "value": ""
            },
            {
              "name": "uid",
              "value": "-"
            },
            {
              "name": "ref",
              "value": "-"
            },
            {
              "name": "pid",
              "value": "web"
            },
            {
              "name": "mod",
              "value": "popu_125"
            },
            {
              "name": "dsm",
              "value": "get"
            },
            {
              "name": "mtp",
              "value": "3"
            },
            {
              "name": "con",
              "value": "https%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201507010655315634.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3BUML%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F1168%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201501080056201415.jpg%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3BC%23%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%5B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%5D%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F286%3Bhttps%3A%2F%2Fweb.hfelo.se%2Fimg.bss.csdn.net%2F201605050006573691.png%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314%3BFFmpeg%E9%9F%B3%E8%A7%86%E9%A2%91%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98+iOS%26amp%3BAndroid%2Chttp%3A%2F%2Fedu.csdn.net%2Fcourse%2Fdetail%2F2314"
            },
            {
              "name": "ck",
              "value": "-"
            },
            {
              "name": "x-acl-token",
              "value": "status_js_dkuyqthzbajmncbsb_token"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 17:13:31 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20,
            "mimeType": "text/plain",
            "text": "No such site at :443"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 20
        },
        "cache": {},
        "timings": {
          "blocked": 4793.88900008053,
          "dns": -1,
          "connect": 3042.9699998348897,
          "send": 0.278000021349726,
          "wait": 3800.9660001844304,
          "receive": 250.28899987227305,
          "ssl": 3042.1750000678003
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "2207",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:33.596Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "https://pos.baidu.com/wh/o.htm?ltr=",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [
            {
              "name": "ltr",
              "value": ""
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_CONNECTION_RESET"
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_4"
      },
      {
        "startedDateTime": "2017-02-17T17:13:44.727Z",
        "time": 14641.258999938145,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/c.csdnimg.cn/public/favicon.ico",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/csdn.net/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 16 Nov 2015 10:51:21 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"5649b529-5f26\""
            },
            {
              "name": "content-type",
              "value": "image/vnd.microsoft.icon"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "24358"
            }
          ],
          "cookies": [],
          "content": {
            "size": 24358,
            "mimeType": "image/vnd.microsoft.icon",
            "text": "
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 24506
        },
        "cache": {},
        "timings": {
          "blocked": 0.386999920010567,
          "dns": -1,
          "connect": -1,
          "send": 0.11099991388618902,
          "wait": 3003.6810000892733,
          "receive": 11637.080000014976,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_4"
      }
    ]
  }
}