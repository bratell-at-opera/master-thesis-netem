{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2017-02-17T15:16:07.557Z",
        "id": "page_8",
        "title": "https://web.hfelo.se/9gag.com",
        "pageTimings": {
          "onContentLoad": 99987.98700002953,
          "onLoad": 109301.94399994798
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2017-02-17T15:16:07.557Z",
        "time": 1194.9930000118911,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/9gag.com",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 301,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "status",
              "value": "301"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "location",
              "value": "/9gag.com/"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "/9gag.com/",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 135
        },
        "cache": {},
        "timings": {
          "blocked": 0,
          "dns": 0,
          "connect": 0.434000045061111,
          "send": 0.12500002048909697,
          "wait": 1193.5479999519898,
          "receive": 0.8859999943510957,
          "ssl": 1144.60300002247
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:08.753Z",
        "time": 29192.80599988997,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/9gag.com/",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:51 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd953-1dcdd\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 122077,
            "mimeType": "text/html",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        \n<title>9GAG - Go Fun Yourself</title>\n<link rel=\"preconnect\" href=\"http://tags.crwdcntrl.net/\">\n\n<link rel=\"preconnect\" href=\"http://ajax-9gag-lol.9cache.com/\" /><link rel=\"preconnect\" href=\"http://assets-9gag-fun.9cache.com/\" /><link rel=\"preconnect\" href=\"http://js-webt-lol.9cache.com/\" /><link rel=\"preconnect\" href=\"http://img-9gag-fun.9cache.com/\" /><link rel=\"preconnect\" href=\"http://miscmedia-9gag-fun.9cache.com/\" /><link rel=\"preconnect\" href=\"http://accounts-cdn.9gag.com/\" /><link rel=\"preconnect\" href=\"http://accounts.9gag.com/\" /><link rel=\"preconnect\" href=\"http://notif.9gag.com/\" /><link rel=\"preconnect\" href=\"http://avatars-cdn.9gag.com/\" /><link rel=\"preconnect\" href=\"http://rlog.9gag.com/\" />\n<link rel=\"preconnect\" href=\"http://platform.twitter.com/\" /><link rel=\"preconnect\" href=\"../fbcdn.net/index.html\" /><link rel=\"preconnect\" href=\"http://staticxx.facebook.com/\" /><link rel=\"preconnect\" href=\"http://www.gstatic.com/\" /><link rel=\"preconnect\" href=\"http://ssl.gstatic.com/\" /><link rel=\"preconnect\" href=\"http://fonts.gstatic.com/\" /><link rel=\"preconnect\" href=\"http://accounts.google.com/\" /><link rel=\"preconnect\" href=\"http://apis.google.com/\" /><link rel=\"preconnect\" href=\"http://tpc.googlesyndication.com/\" /><link rel=\"preconnect\" href=\"http://pagead2.googlesyndication.com/\" /><link rel=\"preconnect\" href=\"http://cm.g.doubleclick.net/\" /><link rel=\"preconnect\" href=\"http://securepubads.g.doubleclick.net/\" /><link rel=\"preconnect\" href=\"http://partner.googleadservices.com/\" />\n\n<link rel=\"image_src\" href=\"http://images-cdn.9gag.com/img/9gag-fb-pic.png\" />\n<link rel=\"publisher\" href=\"https://plus.google.com/u/0/110969448173982102496\" />\n<link rel=\"canonical\" href=\"index.html\" />\n<link rel=\"alternate\" href=\"android-app://com.ninegag.android.app/http/9gag.com/hot\" />\n<link rel=\"shortcut icon\" href=\"../assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/core/img/favicon_v2.png\" />\n\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"keywords\" content=\"fun,funny,lol,meme,GIF,wtf,omg,fail,anime,cosplay,forever alone,cute\" />\n<meta name=\"description\" content=\"9GAG has the best funny pics, gifs, videos, gaming, anime, manga, movie, tv, cosplay, sport, food, memes, cute, fail, wtf photos on the internet!\" />\n<meta name=\"robots\" content=\"noodp\" />\n<meta name=\"twitter:card\" content=\"photo\" />\n<meta name=\"twitter:site\" content=\"@9gag\" />\n<meta name=\"twitter:image\" content=\"http://images-cdn.9gag.com/img/9gag-fb-pic.png\" />\n<meta property=\"og:title\" content=\"Just For Fun\" />\n<meta property=\"og:site_name\" content=\"9GAG\" />\n<meta property=\"og:url\" content=\"http://9gag.com/\" />\n<meta property=\"og:description\" content=\"9GAG is the easiest way to have fun!\" />\n<meta property=\"og:type\" content=\"website\" />\n<meta property=\"og:image\" content=\"http://images-cdn.9gag.com/img/9gag-fb-pic.png\" />\n<meta property=\"fb:app_id\" content=\"111569915535689\" />\n<meta name=\"viewport\" content=\"width=980, initial-scale=1\" />\n<meta name=\"verify-v1\" content=\"vvFhqhXLAn+191Kl3iZjjHHY6wzkyGG0CJqGMoFIZEg=\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta property=\"al:ios:url\" content=\"ninegag://9gag.com/hot\" />\n<meta property=\"al:ios:app_store_id\" content=\"545551605\" />\n<meta property=\"al:ios:app_name\" content=\"9GAG\" />\n<meta property=\"al:android:url\" content=\"http://9gag.com/hot\" />\n<meta property=\"al:android:package\" content=\"com.ninegag.android.app\" />\n\n<link href=\"../assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css\" media=\"screen,projection\" rel=\"stylesheet\" type=\"text/css\" />\n\n<!--[if lt IE 9]>\n<script src=\"http://ie7-js.googlecode.com/svn/version/2.1(beta4)/IE9.js\"></script>\n<![endif]-->\n\n        <script type=\"text/javascript\">\n\n    function getLocalStorage(lsKey, lsIndex) {\n        var ls = localStorage;\n        if(ls && ls.getItem(lsKey) ) {\n            var lsValue = ls.getItem(lsKey);\n            var lsArray = JSON.parse(lsValue);\n            if( lsArray['data'] != undefined && lsArray['data'][lsIndex] != undefined){\n                return lsArray['data'][lsIndex];\n            }\n        }\n        return '';\n    }\n\n</script>\n        <script type=\"text/javascript\">\n\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n            ga('create', 'UA-4838180-1', {'cookieDomain':'9gag.com', 'sampleRate':100});\n\n        \n    \n    if(typeof getLocalStorage != \"undefined\" && getLocalStorage('cacheableUser','hashId') != '') {\n        ga('set', '&uid', getLocalStorage('cacheableUser','hashId'));\n            }\n\n    ga('send', 'pageview');\n    </script>\n        <script type='text/javascript'>\nvar googletag = googletag || {};\ngoogletag.cmd = googletag.cmd || [];\n(function() {\nvar gads = document.createElement('script');\ngads.async = true; gads.type = 'text/javascript';\nvar useSSL = 'https:' == document.location.protocol;\ngads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';\nvar node = document.getElementsByTagName('script')[0];\nnode.parentNode.insertBefore(gads, node);\n})();\n</script>\n\n<script type='text/javascript'>\ngoogletag.cmd.push(function() {\ngoogletag.pubads().set(\"page_url\", \"http://9gag.com/\");\n\ngoogletag.pubads().enableSingleRequest();\ngoogletag.enableServices();\n});\n</script>\n\n        <script>\n    !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?\n        n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;\n        n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;\n        t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,\n        document,'script','//connect.facebook.net/en_US/fbevents.js');\n\n    fbq('init', '1224451260918407');\n    fbq('track', 'PageView');\n    fbq('track', 'ViewContent');\n</script>    </head>\n    <body class=\"background-white\">\n        <section class=\"announcement-banner badge-volatile-banner yellow hide\" id=\"jsid-banner-confirm-email\">\n    <p>Hey <span id=\"jsid-banner-confirm-email-username\"></span>, please verify your email address. If you didn't receive an email, we can <a href=\"http://9gag.com/member/resend-confirmation\">resend it</a> or you can <a href=\"https://9gag.com/settings\">change your email address</a>.</p>\n</section>\n        \n        <div class=\"badge-sticky-subnav-static\">\n            <header id=\"top-nav\" class=\"badge-sticky-nav\">\n                                    <div class=\"nav-wrap\">\n    \n<nav class=\"nav-menu\">\n    <ul class=\"primary\">\n        <li>\n            <a class=\"logo\" href=\"index.html\" onclick=\"GAG.GA.track('NavigationBar', 'TapLogo', 'Hot', '');\">9GAG</a>\n        </li>\n        <li>\n            <a class=\"hot selected\" href=\"http://9gag.com/hot\" onclick=\"GAG.GA.track('NavigationBar', 'TapHot', 'Hot', '');\">\n                Hot            </a>\n        </li>\n        <li>\n            <a class=\"trending \" href=\"http://9gag.com/trending\" onclick=\"GAG.GA.track('NavigationBar', 'TapTrending', 'Hot', '');\">\n                Trending            </a>\n        </li>\n        <li>\n            <a class=\"fresh \" href=\"http://9gag.com/fresh\" onclick=\"GAG.GA.track('NavigationBar', 'TapFresh', 'Hot', '');\">\n                Fresh            </a>\n        </li>\n        <li>\n            <a class=\"section\" id=\"jsid-header-funny-menu\" href=\"javascript:void(0);\" onclick=\"GAG.GA.track('NavigationBar', 'TapSectionMenu', 'Hot', '');\">\n                Sections<span class=\"caret\"></span>\n            </a>\n        </li>\n    </ul>\n    <ul class=\"flex menu\">\n                                    <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.tv?ref=9nav', OuterLinkTitle:'Video'});\" href=\"http://9gag.tv?ref=9nav\">\n                        Video                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/cosplay?ref=9nav', OuterLinkTitle:'Cosplay'});\" href=\"http://9gag.com/cosplay?ref=9nav\">\n                        Cosplay                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/girl?ref=9nav', OuterLinkTitle:'Girl'});\" href=\"http://9gag.com/girl?ref=9nav\">\n                        Girl                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/nsfw', OuterLinkTitle:'NSFW'});\" href=\"http://9gag.com/nsfw\">\n                        NSFW                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/gif?ref=9nav', OuterLinkTitle:'GIF'});\" href=\"http://9gag.com/gif?ref=9nav\">\n                        GIF                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/wtf?ref=9nav', OuterLinkTitle:'WTF'});\" href=\"http://9gag.com/wtf?ref=9nav\">\n                        WTF                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/gaming', OuterLinkTitle:'Gaming'});\" href=\"http://9gag.com/gaming\">\n                        Gaming                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/mobile?ref=9nav', OuterLinkTitle:'Get Our App!'});\" href=\"http://9gag.com/mobile?ref=9nav\">\n                        Get Our App!                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"new\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/horror?ref=9nav', OuterLinkTitle:'No Fear No Fun!'});\" href=\"http://9gag.com/horror?ref=9nav\">\n                        No Fear No Fun!                    </a>\n                </li>\n                            <li>\n                    <a target=\"_blank\" class=\"new\" onclick=\"GAG.GA.track('NavigationBar','TapOuterLink', 'Hot', '', { OuterLinkUrl:'http://9gag.com/imadedis?ref=9nav', OuterLinkTitle:'I Made Dis!'});\" href=\"http://9gag.com/imadedis?ref=9nav\">\n                        I Made Dis!                    </a>\n                </li>\n                    \n    </ul>\n\n    <div id=\"jsid-header-funny-menu-items\" class=\"popup-menu section-list hide badge-popup-menu\" >\n        <ul><li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Funny'});\" href=\"http://9gag.com/funny\">Funny</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'I Made Dis (beta)'});\" href=\"http://9gag.com/imadedis\">I Made Dis (beta)</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'No Fear No Fun (beta)'});\" href=\"http://9gag.com/horror\">No Fear No Fun (beta)</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'School'});\" href=\"http://9gag.com/school\">School</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Timely'});\" href=\"http://9gag.com/timely\">Timely</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'WTF'});\" href=\"http://9gag.com/wtf\">WTF</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'GIF'});\" href=\"http://9gag.com/gif\">GIF</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'NSFW'});\" href=\"http://9gag.com/nsfw\">NSFW</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Gamers Unite'});\" href=\"http://9gag.com/gaming\">Gamers Unite</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Anime & Manga'});\" href=\"http://9gag.com/anime-manga\">Anime & Manga</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Movie & TV'});\" href=\"http://9gag.com/movie-tv\">Movie & TV</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Cute Animals'});\" href=\"http://9gag.com/cute\">Cute Animals</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Girl'});\" href=\"http://9gag.com/girl\">Girl</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Awesome'});\" href=\"http://9gag.com/awesome\">Awesome</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Cosplay'});\" href=\"http://9gag.com/cosplay\">Cosplay</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Sport '});\" href=\"http://9gag.com/sport\">Sport </a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Yummy'});\" href=\"http://9gag.com/food\">Yummy</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Ask 9GAG'});\" href=\"http://9gag.com/ask9gag\">Ask 9GAG</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Dark Humor'});\" href=\"http://9gag.com/darkhumor\">Dark Humor</a></li>\n<li class=\"badge-section-menu-items\" data-locales=\"\"><a class=\"\" onclick=\"GAG.GA.track('NavigationBar', 'TapSection', 'Hot', '', {SectionName:'Country '});\" href=\"http://9gag.com/country\">Country </a></li></ul>    </div><!-- / section -->\n</nav>    <div class=\"function-wrap\">\n\n    <div class=\"general-function\">\n        <a id=\"jsid-header-search-btn\" class=\"search\" href=\"javascript:void(0)\"  onclick=\"GAG.GA.track('NavigationBar', 'TapSearch', 'Hot');\">Search</a>\n    </div><!-- / general-function -->\n\n    <div id=\"jsid-visitor-function\" class=\"visitor-function hide\">\n        <a class=\"btn-mute badge-login-button\" href=\"https://9gag.com/login\" onclick=\"GAG.GA.track('NavigationBar', 'TapLogin', 'Hot');\" rel=\"nofollow\">Log in</a>\n                    <a class=\"btn-primary badge-signup-button\" href=\"https://9gag.com/signup\" onclick=\"GAG.GA.track('NavigationBar', 'TapSignUp', 'Hot');\" rel=\"nofollow\">Sign up</a>\n            </div>\n\n    <div id=\"jsid-user-function\" class=\"user-function hide\">\n        <div id=\"jsid-header-notification-menu\" class=\"notification badge-evt\" data-evt=\"Noti,OpenNotiMenu,Hot\">\n            <a id=\"jsid-notification-unread-count\" class=\"bell\" href=\"javascript:void(0);\" rel=\"nofollow\">\n            </a>\n        </div>\n        <div id=\"jsid-header-user-menu\" class=\"avatar\">\n            <a class=\"avatar-container\" href=\"javascript:void(0);\" onclick=\"GAG.GA.track('NavigationBar', 'TapAvatar', 'Hot');\" rel=\"nofollow\">\n                <img id=\"jsid-avatar\" src=\"index.html\" alt=\"Avatar\">\n            </a>\n        </div>\n\n                    <div class=\"upload\">\n                <a id=\"jsid-upload-btn\" class=\"btn-primary\" href=\"javascript:void(0);\" onclick=\"GAG.GA.track('UploadAction', 'TapUpload', 'Hot', '', {Element: 'NavigationBarButton'});\" rel=\"nofollow\">Upload</a>\n            </div>\n        \n        <div id=\"jsid-header-notification-items\" class=\"notification-menu hide\">\n            <div class=\"title\">\n                <h3>Activities</h3>\n            </div>\n            <div class=\"scrollbar\"><div class=\"track\"><div class=\"thumb\"></div></div></div>\n            <div class=\"notification-list viewport\">\n                <ul id=\"jsid-header-notification-items-container\" class=\"overview\">\n                    <li class=\"empty\">\n                        <div class=\"empty-message\">\n                            <p>Loading notifications...</p>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"bumper\">\n                <a id=\"jsid-header-notification-see-all\" class=\"see-all badge-evt\" href=\"http://9gag.com/notifications\" data-evt=\"Noti,TapNotiMenuAll,Hot\" rel=\"nofollow\">See all</a>\n            </div>\n        </div>\n\n        <div id=\"jsid-header-user-menu-items\" class=\"popup-menu user hide\">\n        <span class=\"arrow-wrap\">\n            <span class=\"arrow\"></span>\n        </span>\n            <ul>\n                <li><a id=\"jsid-my-profile\" href=\"javascript:void(0)\" onclick=\"GAG.GA.track('NavigationBar', 'TapProfile', 'Hot');\" rel=\"nofollow\">My Profile</a></li>\n                                <li><a href=\"https://9gag.com/settings\" onclick=\"GAG.GA.track('NavigationBar', 'TapSettings', 'Hot');\" rel=\"nofollow\">Settings</a></li>\n                                <li><a class=\"badge-logout-btn\" href=\"https://9gag.com/logout\" onclick=\"GAG.GA.track('NavigationBar', 'TapLogout', 'Hot');\" rel=\"nofollow\">Logout</a></li>\n            </ul>\n        </div>\n\n    </div><!-- end user-function-->\n    <div id=\"jsid-header-search-dropdown\" class=\"popup-menu search hide\">\n    <form id=\"headbar-search\" class=\"badge-header-search\" action=\"http://9gag.com/search\" onsubmit=\"GAG.GA.track('Search','SubmitSearch', 'Search', '', {Element: 'NavigationBarInputBox'})\">\n        <div class=\"headbar-search\">\n            <input\n                type=\"text\"\n                name=\"query\"\n                id=\"jsid-search-input\"\n                class=\"ui-autocomplete-input search_input\"\n                data-placeholder=\"Type to search&#8230;\" tabindex=\"1\" />\n        </div><!-- / headbar-search -->\n        <div id=\"jsid-headbar-search-suggest\" class=\"headbar-search-suggest ui-widget\">\n        </div>\n    </form>\n</div><!-- / popup-menu --></div><!-- / function-wrap --></div>\n                \n            </header>\n        </div>\n\n        \n        \n        \n        \n\n        <div class=\"toast badge-toast-container\" style=\"display:none\">\n    <p class=\"close\">\n    <span class=\"badge-toast-message\"></span>\n<a class=\"btn-close badge-toast-close\" href=\"index.html#\">&#10006;</a>\n</p>\n</div>\n        <div id=\"container\" class=\"\">\n            <div class=\"badge-page page \">\n\n                <div class=\"main-wrap\">\n    <div id=\"gag-ads-init-mode\" data-mode=\"\"></div>\n\n    \n    <section id=\"list-view-2\" class=\"badge-list-view-element variant-right\">\n        \n<div class=\"badge-entry-collection\">\n        \n<article\n    data-entry-id=\"aQ96Erz\"\n    data-entry-url=\"http://9gag.com/gag/aQ96Erz\"\n    data-entry-votes=\"3764\"\n    data-entry-comments=\"137\"\n    id=\"jsid-entry-entity-aQ96Erz\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aQ96Erz,l\"\n               data-entry-id=\"aQ96Erz\"\n               data-position=\"1\"\n               href=\"http://9gag.com/gag/aQ96Erz\"\n               target=\"_blank\">\n                Cheese :)            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/aQ96Erz\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"aQ96Erz\"\n       data-position=\"1\"\n       style=\"min-height:513.04347826087px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/aQ96Erz_460s_v1.jpg\" alt=\"Cheese :)\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aQ96Erz\"\n            href=\"http://9gag.com/gag/aQ96Erz\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aQ96Erz\"\n            data-position=\"1\"\n        >\n                <span class=\"badge-item-love-count\">3,764</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aQ96Erz#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aQ96Erz\" data-position=\"1\">137 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aQ96Erz#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aQ96Erz\" data-position=\"1\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aQ96Erz,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aQ96Erz\"\n                       data-position=\"1\"\n                       data-share=\"http://9gag.com/gag/aQ96Erz?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aQ96Erz,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Cheese%20%3A%29\"\n                       data-entry-id=\"aQ96Erz\"\n                       data-position=\"1\"\n                       data-share=\"http://9gag.com/gag/aQ96Erz?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"avG2EmX\"\n    data-entry-url=\"http://9gag.com/gag/avG2EmX\"\n    data-entry-votes=\"5997\"\n    data-entry-comments=\"215\"\n    id=\"jsid-entry-entity-avG2EmX\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,avG2EmX,l\"\n               data-entry-id=\"avG2EmX\"\n               data-position=\"2\"\n               href=\"http://9gag.com/gag/avG2EmX\"\n               target=\"_blank\">\n                Any Eragon fans here?            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/avG2EmX\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"avG2EmX\"\n       data-position=\"2\"\n       style=\"min-height:661.95652173913px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/avG2EmX_460s.jpg\" alt=\"Any Eragon fans here?\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-avG2EmX\"\n            href=\"http://9gag.com/gag/avG2EmX\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"avG2EmX\"\n            data-position=\"2\"\n        >\n                <span class=\"badge-item-love-count\">5,997</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/avG2EmX#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"avG2EmX\" data-position=\"2\">215 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/avG2EmX#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"avG2EmX\" data-position=\"2\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,avG2EmX,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"avG2EmX\"\n                       data-position=\"2\"\n                       data-share=\"http://9gag.com/gag/avG2EmX?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,avG2EmX,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Any%20Eragon%20fans%20here%3F\"\n                       data-entry-id=\"avG2EmX\"\n                       data-position=\"2\"\n                       data-share=\"http://9gag.com/gag/avG2EmX?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"ad7yWLj\"\n    data-entry-url=\"http://9gag.com/gag/ad7yWLj\"\n    data-entry-votes=\"3105\"\n    data-entry-comments=\"195\"\n    id=\"jsid-entry-entity-ad7yWLj\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,ad7yWLj,l\"\n               data-entry-id=\"ad7yWLj\"\n               data-position=\"3\"\n               href=\"http://9gag.com/gag/ad7yWLj\"\n               target=\"_blank\">\n                Welcome to the Russian army            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container with-button\">\n    <a href=\"http://9gag.com/gag/ad7yWLj\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,LongPostImage\"\n       data-entry-id=\"ad7yWLj\"\n       data-position=\"3\"\n       style=\"min-height:300px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/ad7yWLj_460c276.jpg\" alt=\"Welcome to the Russian army\"/>\n    </a>\n\n        <a class=\"badge-evt post-read-more\" data-evt=\"PostList,TapPost,Hot,,LongPostViewFullPost\" href=\"http://9gag.com/gag/ad7yWLj\" target=\"_blank\">View Full Post <span class=\"shadow\"></span></a>\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-ad7yWLj\"\n            href=\"http://9gag.com/gag/ad7yWLj\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"ad7yWLj\"\n            data-position=\"3\"\n        >\n                <span class=\"badge-item-love-count\">3,105</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/ad7yWLj#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"ad7yWLj\" data-position=\"3\">195 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/ad7yWLj#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"ad7yWLj\" data-position=\"3\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,ad7yWLj,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"ad7yWLj\"\n                       data-position=\"3\"\n                       data-share=\"http://9gag.com/gag/ad7yWLj?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,ad7yWLj,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Welcome%20to%20the%20Russian%20army\"\n                       data-entry-id=\"ad7yWLj\"\n                       data-position=\"3\"\n                       data-share=\"http://9gag.com/gag/ad7yWLj?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"aRm6zAM\"\n    data-entry-url=\"http://9gag.com/gag/aRm6zAM\"\n    data-entry-votes=\"4172\"\n    data-entry-comments=\"205\"\n    id=\"jsid-entry-entity-aRm6zAM\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aRm6zAM,l\"\n               data-entry-id=\"aRm6zAM\"\n               data-position=\"4\"\n               href=\"http://9gag.com/gag/aRm6zAM\"\n               target=\"_blank\">\n                Cucumber plants exploding their seeds            </a>\n        </h2>\n    </header>\n\n\n                                    <div class=\"badge-post-container post-container\">\n    <a href=\"http://9gag.com/gag/aRm6zAM\"\n       class=\"badge-animated-cover badge-track badge-track-no-follow\"\n       style=\"min-height:272.82608695652px;\">\n\n       \n        <div class=\"badge-animated-container-animated\" data-image=\"http://img-9gag-fun.9cache.com/photo/aRm6zAM_460sa.gif\" data-mp4=\"http://img-9gag-fun.9cache.com/photo/aRm6zAM_460sv.mp4\" data-webm=\"http://img-9gag-fun.9cache.com/photo/aRm6zAM_460svwm.webm\">\n            <video preload=\"auto\" poster=\"../img-9gag-fun.9cache.com/photo/aRm6zAM_460s.jpg\" style=\"min-height:272.82608695652px;width: 500px;\" width=\"500\" loop muted\n                   onPlay=\"GAG.Piwik.trackEvent('PostList', 'PlayGif', 'Hot', '', { PostKey : 'aRm6zAM', Position : 4});\"\n            >\n                <source src=\"../img-9gag-fun.9cache.com/photo/aRm6zAM_460sv.mp4\" type=\"video/mp4\">\n                <source src=\"../img-9gag-fun.9cache.com/photo/aRm6zAM_460svwm.webm\" type=\"video/webm\">\n                <div class=\"badge-item-animated-img\"></div>\n            </video>\n        </div>\n        <div class=\"badge-animated-container-static gif-post presenting\">\n            <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/aRm6zAM_460s.jpg\" alt=\"Cucumber plants exploding their seeds\"\n                 style=\"\" />\n                        <span class=\"play badge-gif-play hide\">GIF</span>\n        </div>\n    </a>\n</div>\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aRm6zAM\"\n            href=\"http://9gag.com/gag/aRm6zAM\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aRm6zAM\"\n            data-position=\"4\"\n        >\n                <span class=\"badge-item-love-count\">4,172</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aRm6zAM#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aRm6zAM\" data-position=\"4\">205 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aRm6zAM#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aRm6zAM\" data-position=\"4\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aRm6zAM,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aRm6zAM\"\n                       data-position=\"4\"\n                       data-share=\"http://9gag.com/gag/aRm6zAM?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aRm6zAM,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Cucumber%20plants%20exploding%20their%20seeds\"\n                       data-entry-id=\"aRm6zAM\"\n                       data-position=\"4\"\n                       data-share=\"http://9gag.com/gag/aRm6zAM?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"aPB68Zg\"\n    data-entry-url=\"http://9gag.com/gag/aPB68Zg\"\n    data-entry-votes=\"6854\"\n    data-entry-comments=\"221\"\n    id=\"jsid-entry-entity-aPB68Zg\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aPB68Zg,l\"\n               data-entry-id=\"aPB68Zg\"\n               data-position=\"5\"\n               href=\"http://9gag.com/gag/aPB68Zg\"\n               target=\"_blank\">\n                Wish my teachers was this professional            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/aPB68Zg\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"aPB68Zg\"\n       data-position=\"5\"\n       style=\"min-height:448.91304347826px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/aPB68Zg_460s.jpg\" alt=\"Wish my teachers was this professional\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aPB68Zg\"\n            href=\"http://9gag.com/gag/aPB68Zg\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aPB68Zg\"\n            data-position=\"5\"\n        >\n                <span class=\"badge-item-love-count\">6,854</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aPB68Zg#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aPB68Zg\" data-position=\"5\">221 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aPB68Zg#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aPB68Zg\" data-position=\"5\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aPB68Zg,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aPB68Zg\"\n                       data-position=\"5\"\n                       data-share=\"http://9gag.com/gag/aPB68Zg?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aPB68Zg,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Wish%20my%20teachers%20was%20this%20professional\"\n                       data-entry-id=\"aPB68Zg\"\n                       data-position=\"5\"\n                       data-share=\"http://9gag.com/gag/aPB68Zg?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"aLD6n3g\"\n    data-entry-url=\"http://9gag.com/gag/aLD6n3g\"\n    data-entry-votes=\"7855\"\n    data-entry-comments=\"198\"\n    id=\"jsid-entry-entity-aLD6n3g\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aLD6n3g,l\"\n               data-entry-id=\"aLD6n3g\"\n               data-position=\"6\"\n               href=\"http://9gag.com/gag/aLD6n3g\"\n               target=\"_blank\">\n                The struggle is real            </a>\n        </h2>\n    </header>\n\n\n            <div class=\"post-container\">\n    <a href=\"http://9gag.com/gag/aLD6n3g\" \n    \tclass=\"badge-evt badge-nsfw-entry-cover\"\n    \tdata-evt=\"PostList,TapPost,Hot,,PostNsfwMask\"\n\t   data-entry-id=\"aLD6n3g\"\n\t   data-position=\"6\"\n        style=\"min-height: 306px;\">\n\t\t<div class=\"nsfw-post\">\n\t\t\t<h3>Not Safe For Work</h3>\n\t\t\t<p>Click to view this post.</p>\n\t\t</div>\n\t</a>\n</div>\n        <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aLD6n3g\"\n            href=\"http://9gag.com/gag/aLD6n3g\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aLD6n3g\"\n            data-position=\"6\"\n        >\n                <span class=\"badge-item-love-count\">7,855</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aLD6n3g#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aLD6n3g\" data-position=\"6\">198 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aLD6n3g#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aLD6n3g\" data-position=\"6\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aLD6n3g,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aLD6n3g\"\n                       data-position=\"6\"\n                       data-share=\"http://9gag.com/gag/aLD6n3g?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aLD6n3g,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"The%20struggle%20is%20real\"\n                       data-entry-id=\"aLD6n3g\"\n                       data-position=\"6\"\n                       data-share=\"http://9gag.com/gag/aLD6n3g?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"aVqjxxO\"\n    data-entry-url=\"http://9gag.com/gag/aVqjxxO\"\n    data-entry-votes=\"5431\"\n    data-entry-comments=\"343\"\n    id=\"jsid-entry-entity-aVqjxxO\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aVqjxxO,l\"\n               data-entry-id=\"aVqjxxO\"\n               data-position=\"7\"\n               href=\"http://9gag.com/gag/aVqjxxO\"\n               target=\"_blank\">\n                We have our own accent...            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/aVqjxxO\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"aVqjxxO\"\n       data-position=\"7\"\n       style=\"min-height:365.21739130435px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/aVqjxxO_460s.jpg\" alt=\"We have our own accent...\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aVqjxxO\"\n            href=\"http://9gag.com/gag/aVqjxxO\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aVqjxxO\"\n            data-position=\"7\"\n        >\n                <span class=\"badge-item-love-count\">5,431</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aVqjxxO#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aVqjxxO\" data-position=\"7\">343 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aVqjxxO#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aVqjxxO\" data-position=\"7\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aVqjxxO,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aVqjxxO\"\n                       data-position=\"7\"\n                       data-share=\"http://9gag.com/gag/aVqjxxO?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aVqjxxO,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"We%20have%20our%20own%20accent...\"\n                       data-entry-id=\"aVqjxxO\"\n                       data-position=\"7\"\n                       data-share=\"http://9gag.com/gag/aVqjxxO?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"a7rvGRL\"\n    data-entry-url=\"http://9gag.com/gag/a7rvGRL\"\n    data-entry-votes=\"5960\"\n    data-entry-comments=\"233\"\n    id=\"jsid-entry-entity-a7rvGRL\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,a7rvGRL,l\"\n               data-entry-id=\"a7rvGRL\"\n               data-position=\"8\"\n               href=\"http://9gag.com/gag/a7rvGRL\"\n               target=\"_blank\">\n                We all loved that scene            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/a7rvGRL\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"a7rvGRL\"\n       data-position=\"8\"\n       style=\"min-height:275px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/a7rvGRL_460s.jpg\" alt=\"We all loved that scene\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-a7rvGRL\"\n            href=\"http://9gag.com/gag/a7rvGRL\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"a7rvGRL\"\n            data-position=\"8\"\n        >\n                <span class=\"badge-item-love-count\">5,960</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/a7rvGRL#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"a7rvGRL\" data-position=\"8\">233 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/a7rvGRL#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"a7rvGRL\" data-position=\"8\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,a7rvGRL,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"a7rvGRL\"\n                       data-position=\"8\"\n                       data-share=\"http://9gag.com/gag/a7rvGRL?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,a7rvGRL,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"We%20all%20loved%20that%20scene\"\n                       data-entry-id=\"a7rvGRL\"\n                       data-position=\"8\"\n                       data-share=\"http://9gag.com/gag/a7rvGRL?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"aOzoEov\"\n    data-entry-url=\"http://9gag.com/gag/aOzoEov\"\n    data-entry-votes=\"6955\"\n    data-entry-comments=\"270\"\n    id=\"jsid-entry-entity-aOzoEov\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,aOzoEov,l\"\n               data-entry-id=\"aOzoEov\"\n               data-position=\"9\"\n               href=\"http://9gag.com/gag/aOzoEov\"\n               target=\"_blank\">\n                The more you know..            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/aOzoEov\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"aOzoEov\"\n       data-position=\"9\"\n       style=\"min-height:1600px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/aOzoEov_460s.jpg\" alt=\"The more you know..\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-aOzoEov\"\n            href=\"http://9gag.com/gag/aOzoEov\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"aOzoEov\"\n            data-position=\"9\"\n        >\n                <span class=\"badge-item-love-count\">6,955</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/aOzoEov#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"aOzoEov\" data-position=\"9\">270 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/aOzoEov#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"aOzoEov\" data-position=\"9\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,aOzoEov,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"aOzoEov\"\n                       data-position=\"9\"\n                       data-share=\"http://9gag.com/gag/aOzoEov?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,aOzoEov,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"The%20more%20you%20know..\"\n                       data-entry-id=\"aOzoEov\"\n                       data-position=\"9\"\n                       data-share=\"http://9gag.com/gag/aOzoEov?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n            \n<article\n    data-entry-id=\"a3qvpW3\"\n    data-entry-url=\"http://9gag.com/gag/a3qvpW3\"\n    data-entry-votes=\"12668\"\n    data-entry-comments=\"233\"\n    id=\"jsid-entry-entity-a3qvpW3\"\n    class=\"badge-entry-container badge-entry-entity\">\n    <header>\n        \n        <h2 class=\"badge-item-title\">\n            <a class=\"badge-evt badge-track\"\n               data-evt=\"PostList,TapPost,Hot,,PostTitle\"\n               data-track=\"post,v,,,d,a3qvpW3,l\"\n               data-entry-id=\"a3qvpW3\"\n               data-position=\"10\"\n               href=\"http://9gag.com/gag/a3qvpW3\"\n               target=\"_blank\">\n                Good guy Jamie.            </a>\n        </h2>\n    </header>\n\n\n                                    \n<div class=\"badge-post-container post-container \">\n    <a href=\"http://9gag.com/gag/a3qvpW3\"\n       class=\"badge-evt badge-track badge-track-no-follow\"\n       data-evt=\"PostList,TapPost,Hot,,PostImage\"\n       data-entry-id=\"a3qvpW3\"\n       data-position=\"10\"\n       style=\"min-height:498.91304347826px;\" target=\"_blank\">\n        <img class=\"badge-item-img\" src=\"../img-9gag-fun.9cache.com/photo/a3qvpW3_460s.jpg\" alt=\"Good guy Jamie.\"/>\n    </a>\n\n        </div>\n\n\n                            <div class=\"post-text-container badge-item-description\">\n            </div>\n    <p class=\"post-meta\">\n        <a class=\"badge-evt point\" id=\"love-count-a3qvpW3\"\n            href=\"http://9gag.com/gag/a3qvpW3\"\n            target=\"_blank\"\n            data-evt=\"PostList,TapPost,Hot,,Point\"\n            data-entry-id=\"a3qvpW3\"\n            data-position=\"10\"\n        >\n                <span class=\"badge-item-love-count\">12,668</span> points</a> &middot;\n        <a class=\"comment badge-evt\" href=\"http://9gag.com/gag/a3qvpW3#comment\" target=\"_blank\"\n           data-evt=\"PostList,TapPost,Hot,,CommentCountText\" data-entry-id=\"a3qvpW3\" data-position=\"10\">233 comments</a>\n    </p>\n\n    <div class=\"badge-item-vote-container post-afterbar-a in-list-view  \">\n        <div class=\"vote\">\n            <ul class=\"btn-vote left\">\n                <li><a class=\"badge-item-vote-up up \" href=\"javascript:void(0);\" rel=\"nofollow\">Upvote</a></li>\n                <li><a class=\"badge-item-vote-down down \" href=\"javascript:void(0);\" rel=\"nofollow\">Downvote</a></li>\n                <li><a class=\"comment badge-evt badge-item-comment\" target=\"_blank\" href=\"http://9gag.com/gag/a3qvpW3#comment\"\n                       data-evt=\"PostList,TapPost,Hot,,Comment\" data-entry-id=\"a3qvpW3\" data-position=\"10\" rel=\"nofollow\">Comment</a></li>\n            </ul>\n        </div>\n        <div class=\"share right\">\n            <ul>\n                <li><a href=\"javascript:void(0);\" class=\"badge-facebook-share badge-evt badge-track btn-share facebook\"\n                       data-track=\"social,fb.s,,,d,a3qvpW3,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,FacebookButton\"\n                       data-entry-id=\"a3qvpW3\"\n                       data-position=\"10\"\n                       data-share=\"http://9gag.com/gag/a3qvpW3?ref=fb.s\" rel=\"nofollow\">Facebook</a></li>\n\n                <li><a href=\"javascript:void(0);\" class=\"badge-twitter-share badge-evt badge-track btn-share twitter\"\n                       data-track=\"social,t.s,,,d,a3qvpW3,l\"\n                       data-evt=\"PostList,ShareSocial,Hot,,TwitterButton\"\n                       data-title=\"Good%20guy%20Jamie.\"\n                       data-entry-id=\"a3qvpW3\"\n                       data-position=\"10\"\n                       data-share=\"http://9gag.com/gag/a3qvpW3?ref=t\" rel=\"nofollow\">Twitter</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n\n</article>\n                \n    </div>\n\n    <div class=\"loading\">\n        <a class=\"btn badge-load-more-post\" href=\"http://9gag.com/?id=a3qvpW3%2CaOzoEov%2Ca7rvGRL&amp;c=10\" data-loading-text=\"Loading more posts...\" data-load-count-max=\"30\">Load more posts</a>\n    </div>\n\n<span id=\"jsid-gat-interval\" data-post-interval=\"-1\" class=\"hide\">1485789846</span>\n<span id=\"jsid-latest-entries\" class=\"hide\">aQ96Erz,avG2EmX,ad7yWLj,aRm6zAM,aPB68Zg,aLD6n3g,aVqjxxO,a7rvGRL,aOzoEov,a3qvpW3</span>    </section>\n</div>\n\n                <section id=\"sidebar\">\n                                                            <div id=\"sidebar-content\">\n    <section class=\"badge-block-ad block-ad\">\n        <div id=\"jsid-ad-container-sidebar_top\" class=\"badge-gag-ads-container img-container\"></div>\n    </section>\n\n    \n    <section class=\"block-feature-cover\">\n                <ul id=\"jsid-featured-item-container\"\n            data-ads-position=\"\"\n            data-ads-tag=\"\"\n            data-list-key=\"hot\"\n            data-item-displayed=\"60\"\n            data-load-more-trigger=\"10\"\n        </ul>\n        <div class=\"loading hide\">\n            <a class=\"btn spin\" href=\"index.html#\">Loading</a>\n        </div>\n    </section>\n\n    <div id=\"jsid-featured-sidebar-tail\">\n        <section id=\"jsid-featured-sidebar-ad\" class=\"badge-block-ad block-ad\">\n            <div id=\"jsid-ad-container-sidebar_bottom\" class=\"badge-gag-ads-container img-container\"></div>\n        </section>\n\n                <section class=\"get-the-app\">\n            <h2 class=\"sidebar-title\">Get the App</h2>\n            <ul>\n                <li><a class=\"app-store\" href=\"http://9gag.com/iphone\" target=\"_blank\" onclick=\"GAG.GA.track('DownloadApp', 'DownloadApple', 'Hot');\">Download on App Store</a></li>\n                <li><a class=\"google-play\" href=\"http://9gag.com/android\" target=\"_blank\" onclick=\"GAG.GA.track('DownloadApp', 'DownloadGoogle', 'Hot');\">Get it on Google Play</a></li>\n            </ul>\n        </section>\n\n        <section class=\"block-social-love\">\n    <h2 class=\"sidebar-title\">Connect with 9GAG!</h2>\n    <ul class=\"social-love\">\n        <li class=\"facebook badge_facebook_render\"><fb:like href=\"https://facebook.com/9gag\" layout=\"button_count\" show_faces=\"false\" width=\"240\" height=\"40\" action=\"like\" colorscheme=\"light\"></fb:like></li>\n        <li class=\"twitter\"><a href=\"https://twitter.com/9gag\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow @9gag</a></li>\n        <li><a class=\"instagram-follow\" target=\"_blank\" href=\"http://instagram.com/9GAG\" onClick=\"GAG.GA.track('Social', 'LikeInstagram', 'Hot', '', { Url : 'http://instagram.com/9GAG'});\">Follow on Instagram</a></li>\n    </ul>\n</section>\n                <section class=\"footer\">\n    <p class=\"static\">\n        <a href=\"http://9gag.com/advertise\">Advertise</a> &middot;\n        <a href=\"http://9gag.com/contact\">Contacts</a> &middot;\n        <a href=\"http://9gag.com/privacy\">Privacy</a> &middot;\n        <a href=\"http://9gag.com/tos\">Terms</a> &middot;\n        <a href=\"http://9gag.com/jobs\" target=\"_blank\">Jobs</a>\n    </p>\n    <p class=\"static\">9GAG &copy; 2017</p>\n    <a class=\"badge-scroll-to-top back-to-top\" href=\"javascript: void(0);\">Back to top</a>\n</section>\n            </div>\n</div>                                                    </section>\n\n                                <div id=\"overlay-container\" class=\"overlay-scroll-container hide\">\n\t<section id=\"modal-upload\" class=\"badge-overlay-upload modal upload hide\">\n    <a class=\"btn-close badge-overlay-close\" href=\"javascript:void(0);\">&#10006;</a>\n    \n<div class=\"badge-upload-step badge-upload-file-step\">\n    <section id=\"upload-file\" class=\"select-file\">\n        <header>\n            <h3>Upload a Post</h3>\n            <p>Choose how you want to upload the post</p>\n        </header>\n        <div class=\"spacer\">\n            <a href=\"javascript:void(0);\" id=\"jsid-upload-file-btn\" class=\"source-file\">\n                <p>Select or drop image here</p>\n            </a>\n                            <div class=\"other-source\">\n                    <div class=\"wrapper\">\n                        <a href=\"javascript:void(0);\" id=\"jsid-upload-url-btn\" class=\"source-url\">\n                            <p>Add from URL</p>\n                        </a>\n                    </div>\n                        <div class=\"wrapper\">\n                            <a href=\"http://memeful.com/generator?ref=9gag\" target=\"_blank\" onclick=\"GAG.GA.track('UploadAction', 'TapMakeMeme');\" class=\"source-meme\">\n                                <p>Make a meme</p>\n                            </a>\n                        </div>\n                </div>\n                    </div>\n    </section>\n</div>\n\n<div class=\"badge-upload-step badge-upload-url-step hide\">\n    <section id=\"upload-url\">\n        <header>\n            <h3>Upload from URL</h3>\n            <p>Type or paste Image URL</p>\n        </header>\n        <div class=\"spacer\">\n            <div class=\"badge-upload-url-message message hide\">\n                <p></p>\n            </div><!-- / message -->\n            <div class=\"field textbox last\">\n                <input id=\"jsid-upload-url-input\" type=\"url\" placeholder=\"http://\">\n            </div>\n        </div>\n    </section>\n    <div class=\"btn-container\">\n        <a class=\"badge-upload-url-next-btn btn right disabled\" href=\"javascript:void(0);\">Next</a>\n        <a class=\"badge-upload-url-back-btn btn grey right\" href=\"javascript:void(0);\">Back</a>\n\n    </div>\n</div>\n\n<div class=\"badge-upload-step badge-upload-info-step hide\">\n    <section id=\"upload-info\">\n        <header>\n            <h3>Give your post a title</h3>\n                <p>An accurate, descriptive title can help people discover your post.</p>\n        </header>\n        <div class=\"spacer\">\n            <div class=\"badge-upload-info-message message hide\">\n                <p></p>\n            </div><!-- / message -->\n\n            <div class=\"field post-info\">\n                <div id=\"jsid-upload-file-preview\" class=\"preview\">\n                </div><!-- / preview -->\n                <input id=\"jsid-upload-file-id\" name=\"upload-id\" type=\"hidden\" value=\"\" />\n                <input id=\"jsid-upload-csrf-token\" name=\"csrftoken\" type=\"hidden\" value=\"\" />\n                <textarea id=\"jsid-upload-title\" placeholder=\"Describe your post...\" data-minlength=\"5\" data-maxlength=\"140\"></textarea>\n                <p id=\"jsid-char-count\" class=\"count\">140</p>\n            </div><!-- / .post-info -->\n            <div class=\"field checkbox\">\n                <label>\n                    <p>This post is Not Safe for Work</p>\n                    <input id=\"jsid-upload-is-nsfw\" type=\"checkbox\">\n                </label>\n            </div><!-- / checkbox -->\n            <div id=\"jsid-source-checkbox-div\" class=\"field checkbox last\">\n                <label>\n                    <p>Attribute original poster</p>\n                    <input id=\"jsid-source-checkbox\" type=\"checkbox\">\n                </label>\n            </div><!-- / checkbox -->\n            <div id=\"jsid-source-input\" class=\"field textbox hide\">\n                <input id=\"jsid-source-input-textbox\" type=\"url\" placeholder=\"http://\">\n            </div><!-- / textbox -->\n        </div><!-- / spacer -->\n        <div class=\"badge-upload-captcha upload captcha spacer hide\">\n            <div class=\"badge-g-recaptcha captcha-inner\"></div>\n        </div>\n    </section><!-- / upload-info -->\n    <div class=\"btn-container\">\n        <a class=\"badge-upload-info-next-btn btn right disabled\" href=\"javascript:void(0);\">Next</a>\n        <a class=\"badge-upload-info-back-btn btn grey right\" href=\"javascript:void(0);\">Back</a>\n    </div><!-- / btn-container -->\n</div>\n\n<div class=\"badge-upload-step badge-upload-pick-section-step hide\">\n    <section class=\"pick-section\">\n        <header>\n            <h3>Pick a section</h3>\n                <p>Submitting to the right section to make sure your post gets the right exposure it deserves!\n                                    </p>\n        </header>\n        <div class=\"spacer\">\n            <ul id=\"jsid-section-list\" class=\"section-picker\" data-sections-count-max=\"1\">\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481536354.227_YsUzaZ_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Funny</h3>\n                                <p>Why so serious</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"funny\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1484906556.1775_yhaSE5_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>I Made Dis (beta)</h3>\n                                <p>There's a Tesla in everyone</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"imadedis\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1484897957.5863_rUSaGe_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>No Fear No Fun (beta)</h3>\n                                <p>Fear to the limit of fun</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"horror\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1480492149.9937_SuGene_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>School</h3>\n                                <p>Dumb things you might have done too</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"school\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1449833861.7814_BetU7e_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Timely</h3>\n                                <p>Your take on news around the world </p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"timely\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481538540.3927_umEzEP_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>WTF</h3>\n                                <p>Jaw-dropping moments</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"wtf\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541097.3956_HanUhe_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Gamers Unite</h3>\n                                <p>We don't die, we respawn!</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"gaming\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481537858.9056_aZAvYJ_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Anime & Manga</h3>\n                                <p>Embrace your inner weeb!</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"anime-manga\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1465265912.1472_aDurYD_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Movie & TV</h3>\n                                <p>You either die a hero, or live long enough to see yourself become the villain</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"movie-tv\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1482203076.0883_u8yQU9_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Cute Animals</h3>\n                                <p>It's so fluffy I'm gonna die!</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"cute\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1449833759.8316_zUNATY_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Girl</h3>\n                                <p>Eye candies</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"girl\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1465779419.894_jErUja_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Awesome</h3>\n                                <p>Things that make you WOW</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"awesome\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481525996.4198_aXYzE6_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Cosplay</h3>\n                                <p>Be the character you love</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"cosplay\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1472001038.4195_uVUzYN_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Sport </h3>\n                                <p>The sports fanatics hub </p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"sport\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541202.9406_avy9Uq_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Yummy</h3>\n                                <p>Crazy foodies </p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"food\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1464856777.129_sAsYpE_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Ask 9GAG</h3>\n                                <p>I have a question</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"ask9gag\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481540748.1656_aVesEZ_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Dark Humor</h3>\n                                <p>One ticket to hell please!</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"darkhumor\">\n                            </div>\n                        </a>\n                    </li>\n                                                        <li class=\"\" data-locales=\"\">\n                        <a class=\"badge-upload-section-list-item\" href=\"javascript:void(0);\">\n                            <div class=\"icon\">\n                                <img src=\"../miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541267.9381_qa8YWa_n.jpg\" />\n                            </div><!-- / icon -->\n                            <div class=\"text\">\n                                <h3>Country </h3>\n                                <p>Around the world in a section</p>\n                            </div><!-- / text -->\n                            <div class=\"badge-upload-section-list-item-selector selector \" data-url=\"country\">\n                            </div>\n                        </a>\n                    </li>\n                                <li>\n                    <a class=\"badge-upload-section-list-item badge-upload-section-list-profile-only\" href=\"javascript:void(0);\">\n                        <div class=\"icon\">\n                        </div><!-- / icon -->\n                        <div class=\"text\">\n                            <h3>My Profile Only</h3>\n                            <p>Post will only be visible in your profile</p>\n                        </div><!-- / text -->\n                        <div class=\"badge-upload-section-list-item-selector badge-upload-section-list-item-profile-only selector\" data-url=\"\">\n                        </div>\n                    </a>\n                </li>\n            </ul>\n        </div><!-- / spacer -->\n    </section><!-- / pick-section -->\n    <div class=\"btn-container\">\n        <a class=\"badge-upload-pick-section-post-btn btn right disabled\" href=\"javascript:void(0);\">Post</a>\n        <a class=\"badge-upload-pick-section-back-btn btn grey right\" href=\"javascript:void(0);\">Back</a>\n\n    </div><!-- / btn-container -->\n</div>\n\n<div id=\"jsid-drop-zone-template\" class=\"hide\">\n    <div class=\"dz-preview dz-file-preview\" >\n        <div class=\"dz-image hide\"><img data-dz-thumbnail /></div>\n    </div>\n</div>\n\n<div id=\"jsid-drop-zone-preview\" class=\"dropzone-previews hide\">\n</div>\n</section>\n\t\n    <section id=\"modal-report\" class=\"badge-overlay-report modal report hide\">\n\t<header>\n\t\t<h3>Report Post</h3>\n\t\t<p>What do you report this post for?</p>\n\t\t<a class=\"btn-close badge-overlay-close\" href=\"index.html#\">✖</a>\n\t</header>\n\t<form id=\"form-modal-report\" class=\"popup-report\" action=\"index.html\" onsubmit=\"return false;\">\n\t\t<div class=\"field checkbox\">\n\t\t\t<label><input name=\"radio-report\" type=\"radio\" value=\"1\"> Contains a trademark or copyright violation</label>\n\t\t</div>\n\t\t<div class=\"field checkbox\">\n\t\t\t<label><input name=\"radio-report\" type=\"radio\" value=\"2\"> Spam, blatant advertising, or solicitation</label>\n\t\t</div>\n\t\t<div class=\"field checkbox\">\n\t\t\t<label><input name=\"radio-report\" type=\"radio\" value=\"3\"> Contains offensive materials/nudity</label>\n\t\t</div>\n\t\t<div class=\"field checkbox\">\n\t\t\t<label><input name=\"radio-report\" type=\"radio\" value=\"4\"> Repost of another post on 9GAG</label>\n\n\t\t\t<input id=\"jsid-repost-link\" type=\"text\" class=\"text\" placeholder=\"http://9gag.com/gag/post_ID\">\n\t\t</div>\n\n\t\t<div class=\"btn-container\">\n\t\t\t<input type=\"submit\" value=\"Submit\" class=\"badge-report-submit-btn\" data-text-loading=\"Please wait ...\">\n\t\t</div>\n\t</form>\n</section>    <section class=\"modal signup badge-overlay-signin hide\">\n    <a class=\"btn-close badge-overlay-close\" href=\"index.html#\">&#10006;</a>\n    <section id=\"signup\">\n    <h2>Login</h2>\n    <p class=\"lead\">Connect with a social network</p>\n    <div class=\"social-signup\">\n        <a class=\"btn-connect-option facebook badge-facebook-connect\" href=\"index.html#\" onclick=\"GAG.GA.track('Login', 'ConnectFacebook', 'Hot');\">Facebook</a>\n        <span class=\"badge-gplus-connect\"><a class=\"btn-connect-option google-plus badge-gplus-connect-btn\" href=\"javascript:void(0);\" onclick=\"GAG.GA.track('Login', 'ConnectGoogle', 'Hot');\">Google</a></span>\n            </div>\n    <form id=\"login-email\" class=\"badge-login-form\" action=\"https://9gag.com/login\" method=\"POST\">\n        <input type=\"hidden\" id=\"jsid-login-form-csrftoken\" name=\"csrftoken\" value=\"\"/>\n        <input type=\"hidden\" id=\"jsid-login-form-next-url\" name=\"next\" value=\"\"/>\n                                <input type=\"hidden\" name=\"location\" value=\"1\"/>\n                        <p class=\"lead\">Log in with your email address </p>\n        <div class=\"field\">\n            <label for=\"jsid-login-email-name\">Email</label>\n            <input id=\"jsid-login-email-name\" type=\"text\" name=\"username\" value=\"\" autofocus=\"autofocus\"/>\n        </div>\n        <div class=\"field\">\n            <label for=\"login-email-password\">Password</label>\n            <input id=\"login-email-password\" type=\"password\" name=\"password\" value=\"\" />\n                    </div>\n        <div class=\"btn-container\">\n            <input class=\"btn left\" type=\"submit\" value=\"Log in\" onclick=\"GAG.GA.track('Login', 'LoginEmail',  'Hot');\"/>\n            <a class=\"forgot-password\" href=\"https://9gag.com/recover\" onclick=\"GAG.GA.track('Login', 'TapForgotPassword',  'Hot');\">Forgot Password</a>\n        </div>\n    </form>\n</section>\n</section>\t<section class=\"modal signup hide badge-overlay-signup-fb\">\n    <a class=\"badge-overlay-close btn-close\" href=\"index.html#\">&#10006;</a>\n    <section id=\"signup\">\n    <div id=\"signup-fb\" class=\"\">\n        <h2>Hey there!</h2>\n        <p class=\"lead\">9GAG is your best source of fun. Share anything you find interesting, get real responses from people all over the world, and discover what makes you laugh.</p>\n        <div class=\"social-signup\">\n            <a class=\"btn-connect-option facebook badge-facebook-connect\" href=\"index.html#\" onclick=\"GAG.GA.track('SignUp', 'connectFacebook', 'Hot');\">Facebook</a>\n            <span class=\"badge-gplus-connect\"><a class=\"btn-connect-option google-plus badge-gplus-connect-btn\" href=\"javascript:void(0);\" onclick=\"GAG.GA.track('SignUp', 'connectGoogle', 'Hot');\">Google</a></span>\n                    </div>\n                <p class=\"alternative\">Sign up with your <a href=\"index.html#\" class=\"badge-signup-email-link\" onclick=\"GAG.GA.track('SignUp', 'TapSignUpEmail', 'Hot');\">Email Address</a></p>\n                <p class=\"alternative\">Have an account? <a href=\"https://9gag.com/login?ref=\" class=\"badge-signup-login-link\"  onclick=\"GAG.GA.track('SignUp', 'TapLogin', 'Hot');\">Login</a></p>\n    </div>\n\n    <div id=\"signup-email\" class=\" hide\">\n        <h2>Become a member</h2>\n        <form id=\"signup-email\" action=\"https://9gag.com/member/email-signup\" autocomplete=\"off\" method=\"post\">\n            <input type=\"hidden\" id=\"jsid-login-form-next-url\" name=\"next\" value=\"\"/>\n            <div class=\"field\">\n                <label for=\"signup-email-name\">Full Name</label>\n                <input id=\"signup-email-name\" type=\"text\" name=\"fullname\" class=\"badge-input-fullname badge-input-field\" placeholder=\"\" value=\"\" maxlength=\"20\"/>\n            </div>\n            <div class=\"field\">\n                <label for=\"signup-email-email\">Email Address</label>\n                <input type=\"email\" name=\"email\" id=\"signup-email-email\" class=\"badge-input-email badge-input-field\" placeholder=\"\" value=\"\" />\n            </div>\n            <div class=\"field\">\n                <label for=\"signup-email-password\">Password</label>\n                <input id=\"signup-email-password\" type=\"password\" name=\"password\" value=\"\">\n            </div>\n            <div class=\"field captcha\">\n                <div class=\"badge-g-recaptcha\"></div>\n                <p class=\"error-message red\"></p>\n            </div>\n            <div class=\"btn-container\">\n                <input class=\"btn left\" type=\"submit\" value=\"Sign Up\" onclick=\"GAG.GA.track('SignUp', 'SignUpEmail', 'Hot');\"/>\n            </div>\n            <input type=\"hidden\" name=\"tzo\" class=\"badge-input-tzo\" value=\"0\" />\n            <input type=\"hidden\" name=\"next\" value=\"\" class=\"badge-signup-form-next-url\"/>\n            <input type=\"hidden\" name=\"csrftoken\" id=\"csrftoken\" value=\"\"/>\n            <input type=\"hidden\" name=\"src\" value=\"\" />\n            <input type=\"hidden\" name=\"ref\" value=\"\" />\n            <input type=\"hidden\" name=\"app\" value=\"web\" />\n        </form>\n    </div>\n</section>\n\n</section>\t<div id=\"jsid-modal-post-zoom\" class=\"hide\" style=\"height: 100%;\">\n\t<div class=\"badge-post-zoom-img zoom-container\">\t\t\t\n\t</div>\n\t<a class=\"badge-overlay-close close-button\" href=\"javascript: void(0);\">Close</a>\n</div>\t<div class=\"hide\" id=\"jsid-idle-popup-container\">\n    <section class=\"modal idle\">\n        <a class=\"btn-close badge-btn-close\" href=\"javascript:void(0);\">&#10006;</a>\n        <section id=\"idle\">\n            <h2>Wake up!</h2>\n            <p class=\"lead\">You've been idle for <span class=\"badge-idle-popup-idleTime\">3 minutes</span>. Scroll, click or press any key to dismiss.</p>\n            <div class=\"content\">\n                <div class=\"lhs\">\n                    <section class=\"badge-block-ad block-ad\">\n                        <div id=\"jsid-ad-container-idle_popup\" class=\"image-container\">\n                        </div>\n                    </section>\n                </div><!-- / lhs -->\n                <div class=\"rhs\">\n                    <section class=\"ticker\">\n                        <h3>Most commented post</h3>\n                        <ul id=\"jsid-idle-popup-posts\">\n                        </ul>\n                    </section>\n                </div><!-- / rhs -->\n            </div><!-- / content -->\n        </section>\n    </section>\n</div><!--end .overlay-scroll-container-->\n\t<div class=\"badge-drag-and-drop drag-and-drop hide\">\n    <h1>Drop to upload</h1>\n</div><!-- drag and drop -->\n</div><!--end overlay-container-->                \n                <div class=\"clearfix\"></div>\n            </div>\n\n            \n                        <div id=\"jsid-sticky-button\" class=\"badge-sticky-button hide\">\n</div>\n        </div><!--end #container-->\n\n\n        <script type=\"text/javascript\" src=\"../assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/js/gag.js\"></script>\n<script type=\"text/javascript\">\n    // Load js\n    GAG.App.loadConfigs({\"page\":{\"domain\":\"9gag.com\",\"assets_url\":\"\\/\\/assets-9gag-fun.9cache.com\\/s\\/fab0aa49\\/5a4d5ba8d75a8056277ba16a160971c7b0cec27d\\/static\\/dist\\/web6\\/img\",\"cookie_domain\":\".9gag.com\",\"back_url\":\"%2F\",\"page_key\":\"Hot\",\"page_list\":\"hot\",\"is_nsfw_post\":false,\"is_fresh_post\":false,\"is_house_ad_post\":false,\"default_comment_type\":\"9gag\",\"webNotiSleepTtl\":1800},\"configs\":{\"facebook\":{\"app_id\":\"111569915535689\",\"app_ns\":\"ninegag\"},\"gplus\":{\"client_id\":\"489167509892.apps.googleusercontent.com\",\"app_package_name\":\"com.ninegag.android.app\"},\"t\":{\"trackUrl\":\"\\/\\/t.9gag.com\\/img.gif\",\"rlogTrackUrl\":\"\\/\\/web-t.9gag.com\\/img.gif\",\"rlogUrl\":\"\\/\\/web-t.9gag.com\\/m.gif\",\"appId\":\"web.9gag.desktop.release\",\"appVersion\":\"00000\"},\"endPoint\":\"http:\\/\\/ajax-9gag-lol.9cache.com\",\"idlePopupIdleTime\":180000,\"gaEventEnabled\":true,\"piwikEnabled\":true,\"maxFilesize\":5242880,\"maxVideoFilesize\":5242880,\"captchaPublicKey\":\"6Lf0iMkSAAAAALGZpEfzpO13sqJNiEgr6znqfm9r\"},\"user\":{},\"rcfgAds\":{\"anime-manga\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"anime-manga_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"anime-manga_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"ask9gag\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"ask9gag_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"ask9gag_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"awesome\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"awesome_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"awesome_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cosplay\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cosplay_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cosplay_hot\":{\"displayAdEnabled\":true,\"placements\":{\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-cosplay-list-sidebar2-300x250-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-cosplay-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-cosplay-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"country\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"country_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"country_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cute\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cute_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"cute_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"darkhumor\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"darkhumor_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"darkhumor_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"food\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"food_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"food_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"fresh\":{\"displayAdEnabled\":true,\"placements\":{\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-sidebar2-300x250-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"funny\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"funny_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"funny_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gaming\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gaming_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gaming_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gif\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gif_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"gif_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"girl\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"girl_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"girl_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"horror\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"horror_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"horror_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"idle_popup\":{\"displayAdEnabled\":true,\"placements\":{\"idle_popup\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-idlepop-300x250\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"idle_popup_housead\":{\"displayAdEnabled\":true,\"placements\":{\"idle_popup\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-idlepop-300x250\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"imadedis\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"imadedis_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"imadedis_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"kpop\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"kpop_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"list_default\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-footer-728x90\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"post_footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-leaderboard-728x90-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-sidebar2-300x250-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":8000,\"width\":\"300px\",\"height\":\"250px\"},{\"adTag\":\"\\/16921351\\/9gag-list-sidebar2-300x250-sticky-test\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":8001,\"idRangeEnd\":9000,\"width\":\"300px\",\"height\":\"250px\"},{\"adTag\":\"\\/16921351\\/9gag-list-sidebar-300x600-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":9001,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"600px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"movie-tv\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"movie-tv_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"movie-tv_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"nsfw\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"nsfw_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"nsfw_hot\":{\"displayAdEnabled\":true,\"placements\":{\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-list-sidebar2-300x250\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"post_default\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-footer-728x90\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"post_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-leaderboard-728x90-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-sidebar2-300x250-btf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-featured-sidebar-300x250\",\"occurrence\":\"8...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-post-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"post_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-post-footer-728x90\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"post_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-post-leaderboard-728x90-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-post-sidebar2-300x250-btf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-post-featured-sidebar-300x250\",\"occurrence\":\"8...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-post-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"post_housead\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gaghouse-post-footer-728x90\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"post_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gaghouse-post-leaderboard-728x90-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gaghouse-post-sidebar2-300x250-btf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gaghouse-post-featured-sidebar-300x250\",\"occurrence\":\"8...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gaghouse-post-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"post_nsfw\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-post-footer-728x90\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"post_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-post-leaderboard-728x90-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"728px\",\"height\":\"90px\"}],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-post-sidebar2-300x250-btf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-post-featured-sidebar-300x250\",\"occurrence\":\"8...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-nsfw-post-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"random\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"random_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"random_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"school\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"school_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"school_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"section_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-sidebar2-300x250-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-other-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"section_hot\":{\"displayAdEnabled\":true,\"placements\":{\"sidebar_bottom\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-sidebar2-300x250-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":8000,\"width\":\"300px\",\"height\":\"250px\"},{\"adTag\":\"\\/16921351\\/9gag-list-sidebar2-300x250-sticky-test\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":8001,\"idRangeEnd\":9000,\"width\":\"300px\",\"height\":\"250px\"},{\"adTag\":\"\\/16921351\\/9gag-list-sidebar-300x600-sticky\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":9001,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"600px\"}],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-featured-sidebar-300x250\",\"occurrence\":\"7...10\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":2},\"sidebar_top\":{\"rules\":[{\"adTag\":\"\\/16921351\\/9gag-list-sidebar1-300x250-atf\",\"occurrence\":\"\",\"adNetwork\":\"DFP\",\"idRangeStart\":0,\"idRangeEnd\":10000,\"width\":\"300px\",\"height\":\"250px\"}],\"displayType\":1}}},\"sport\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"sport_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"sport_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"timely\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"timely_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"timely_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"wtf\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"wtf_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"wtf_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"xmas\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"xmas_fresh\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}},\"xmas_hot\":{\"displayAdEnabled\":true,\"placements\":{\"footer\":{\"rules\":[],\"displayType\":1},\"post_footer\":{\"rules\":[],\"displayType\":1},\"sidebar_bottom\":{\"rules\":[],\"displayType\":1},\"sidebar_repetitive\":{\"rules\":[],\"displayType\":2},\"sidebar_top\":{\"rules\":[],\"displayType\":1}}}},\"targetedAdTags\":[],\"sticky\":{\"buttons\":[[\"Have fun on your phone!\",\"http:\\/\\/9gag.com\\/apps?ref=havefun\",\"6\"],[\"Like us now!\",\"https:\\/\\/www.facebook.com\\/9gag?ref=likeus\",\"6\"],[\"Follow us on Instagram!\",\"https:\\/\\/instagram.com\\/9gag?ref=followus\",\"6\"],[\"Watch viral videos!\",\"http:\\/\\/9gag.tv?ref=viralvideo\",\"6\"],[\"Download our FREE apps!\",\"http:\\/\\/9gag.com\\/apps?ref=freeapps\",\"6\"],[\"Watch the best videos!\",\"http:\\/\\/9gag.tv?ref=bestvideos\",\"6\"],[\"Follow us on Twitter!\",\"https:\\/\\/twitter.com\\/9gag?ref=followus\",\"6\"]],\"dismiss\":120,\"noAd\":12}}).loadAsynScripts(['facebook', 'twitter', 'gplus', 'recaptcha']);\n</script>\n\n<script type=\"text/javascript\">\n    var _paq = _paq || [];\n    _paq.push(['enableLinkTracking']);\n    (function() {\n        var u='//web-t.9gag.com';\n        _paq.push(['setTrackerUrl', u+'/piwik.php']);\n        _paq.push(['setSiteId', 7]);\n        _paq.push(['setCustomVariable', 1, 'AppVersion', '00000', 'visit']);\n        var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n        g.type='text/javascript'; g.async=true; g.defer=true; g.src='//js-webt-lol.9cache.com/piwik.7688214.js'; s.parentNode.insertBefore(g,s);\n    })();\n</script>\n\n<script type=\"text/javascript\">\n    if(location.pathname.indexOf('/gaming') > -1) {\n        var gameTracking = document.createElement('script');\n        gameTracking.setAttribute(\"type\",\"text/javascript\");\n        gameTracking.setAttribute(\"src\", \"http://tags.crwdcntrl.net/c/10020/cc_af.js\");\n        document.getElementsByTagName(\"body\")[0].appendChild(gameTracking);\n    }\n</script>        <div id=\"fb-root\" style=\"display:none;\"></div>\n        <!-- 9gVQ01EVjlHTUVkMMRVRywEVFlXTn1TY -->\n        <script>\n    var _comscore = _comscore || [];\n    _comscore.push({ c1: \"2\", c2: \"22471533\" });\n    (function() {\n        var s = document.createElement(\"script\"), el = document.getElementsByTagName(\"script\")[0]; s.async = true;\n        s.src = (document.location.protocol == \"https:\" ? \"https://sb\" : \"http://b\") + \".scorecardresearch.com/beacon.js\";\n        el.parentNode.insertBefore(s, el);\n    })();\n</script>\n<noscript>\n    <img src=\"../b.scorecardresearch.com/p%3Fc1=2&amp;c2=22471533&amp;cv=2.0&amp;cj=1\" />\n</noscript>    </body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 16752
        },
        "cache": {},
        "timings": {
          "blocked": 0.500999856740236,
          "dns": -1,
          "connect": -1,
          "send": 0.06800005212426208,
          "wait": 365.9810000099245,
          "receive": 28826.25599997118,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.147Z",
        "time": 52642.64900004491,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:53 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd955-15ffa\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 90106,
            "mimeType": "text/css",
            "text": "a,blockquote,body,dd,div,dl,dt,fieldset,form,h1,h2,h3,h4,h5,h6,html,img,input,label,li,ol,p,pre,td,th,ul{margin:0;padding:0;outline:0}body{font:13px Helvetica Neue,Arial,Helvetica,Geneva,sans-serif;background-color:#fff;-webkit-font-smoothing:antialiased;-webkit-text-size-adjust:none}.background-grey{background-color:#eee}.background-black{background-color:#000}a{color:#09f;text-decoration:none}.caret{display:inline-block;vertical-align:middle;margin-left:2px;width:0;height:0;border-top:4px solid #ccc;border-right:4px solid transparent;border-left:4px solid transparent}#container{position:relative;overflow:hidden;margin:0 auto;clear:both}.page{width:940px;margin:0 auto 40px}.page.post-page{width:1068px}.main-wrap{float:left;width:600px}.page.post-page .main-wrap{width:728px}input[type=email],input[type=password],input[type=text],input[type=url],textarea{-webkit-appearance:none;-moz-appearance:none;border:1px solid #ddd;font:14px Helvetica Neue,Arial,Helvetica,Geneva,sans-serif}input[type=email],input[type=password],input[type=text],input[type=url]{line-height:20px;height:20px;padding:9px;border-radius:3px;display:block;margin:6px 0;width:440px}input[type=email].error,input[type=password].error,input[type=text].error,input[type=url].error,textarea.error{color:#b94a48}textarea{border-radius:3px;padding:9px;resize:none}select,textarea{outline:0;line-height:20px;margin:6px 0;display:block}select{box-sizing:border-box;height:40px;padding:5px 0;font:13px Helvetica Neue,Arial,Helvetica,Geneva,sans-serif;border:1px solid #999;font-weight:700}.field{margin:20px 0;position:relative}.field label{display:block;font-weight:700}.field p.tips{color:#999;font-size:12px}.field p.error-message{font-size:12px;color:red;margin-top:10px}.field.checkbox{margin:10px 0}.field.checkbox label{font-weight:400;position:relative;padding:4px 0 4px 20px}.field.checkbox label input[type=checkbox]{position:absolute;left:0;top:6px}.field.checkbox label input[type=radio]{position:absolute;left:0;top:5px}.file-field{background-color:#f4f4f4;height:20px;padding:9px;border:1px solid #ddd;border-radius:3px;margin:6px 0;box-shadow:inset 0 1px 1px rgba(0,0,0,.1)}.date-picker{overflow:hidden;width:420px}.date-picker input.day,.date-picker input.month,.date-picker input.year{float:left;text-align:center}.date-picker input.year{width:37%}.date-picker input.day,.date-picker input.month{width:20%;margin-left:2%}.field.captcha h3{margin:20px 0 5px;font-size:13px}.field.avatar label{margin-bottom:6px}.field.avatar .avatar-container{float:left;border-radius:3px;overflow:hidden}.field.avatar .avatar-container img{display:block;width:80px;height:80px}.field.avatar .control{float:left;margin:20px 0 20px 20px;height:40px}.field.avatar input[type=file]{margin-bottom:6px}.profile-background-color-picker{margin:5px 0 0}.profile-background-color-picker ul{overflow:hidden;margin:0;padding:0;list-style-type:none}.profile-background-color-picker li{float:left;margin:0 10px 10px 0}.profile-background-color-picker li a{display:block;border-radius:3px;height:40px;width:40px;text-indent:-999px;overflow:hidden;background-color:#f4f4f4}.profile-background-color-picker li a.selected{background-image:url(../img/profile-color-selected.png);background-repeat:no-repeat}.profile-background-color-picker li a.selected:hover{opacity:1;cursor:default}.profile-background-color-picker li a:hover{opacity:.7}.group-cell{background-color:#f4f4f4;margin:30px 0;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.1);width:460px}.group-cell .header{height:40px;padding:10px 10px 0}.group-cell .header h3{line-height:20px;padding:10px;color:#999;font-size:13px}.group-cell .content{padding:10px 0;margin:0 20px;border-top:1px solid #ddd}.btn-container{padding:10px 0;margin-top:20px;overflow:hidden}a.btn,input[type=submit]{color:#fff;background-color:#09f;padding:8px 24px;height:20px;border:none;border-radius:3px;font:700 14px/20px Helvetica Neue,Arial,Helvetica,Geneva,sans-serif;cursor:pointer;text-decoration:none;display:inline-block;text-align:center;-webkit-appearance:none;box-sizing:content-box}a.btn:hover,input[type=submit]:hover{background-color:#33adff}a.btn:active,input[type=submit]:active{background-color:#007acc}a.btn.size-30{font-size:12px;padding:4px 15px}a.btn.red{background-color:#fe2232;border-color:#fe2232}a.btn.grey{background-color:#f4f4f4;color:#999}a.btn.grey:hover{background-color:#eee}a.btn.grey:active{background-color:#e9e9e9}a.btn.disabled{opacity:.5;cursor:default;pointer-events:none}a.btn.btn-block{display:block;height:36px;line-height:36px;font-size:20px}a.thick{line-height:20px;padding:10px 15px;display:block}input[type=submit].disabled{background-color:#f4f4f4;cursor:default;color:#aaa}.popup-menu{position:absolute;left:50%;margin-left:-60px;z-index:3;min-width:160px}.popup-menu .arrow-wrap{position:absolute;border-bottom:7px solid #ccc;border-left:6px solid transparent;border-right:6px solid transparent;top:0;left:50%;margin-left:-6px;display:none}.popup-menu .arrow-wrap .arrow{border-bottom:6px solid #fff;border-left:5px solid transparent;border-right:5px solid transparent;top:2px;left:-5px;position:absolute}.popup-menu ul{list-style-type:none;overflow:hidden;padding:5px 0;background-color:#fff;box-shadow:0 5px 10px rgba(0,0,0,.2);border:1px solid #ccc}.popup-menu a{display:block;color:#777;background-color:#fff;line-height:30px;padding:0 20px;font-size:13px}.popup-menu a:hover{background-color:#f4f4f4;color:#000}.popup-menu a.selected{color:#000}.popup-menu.funny{margin-left:-190px;top:35px}.popup-menu.funny .arrow-wrap{margin-left:-45px}.popup-menu.user{margin-left:auto;left:auto;right:10px;top:48px;z-index:3;min-width:10px;width:160px}.popup-menu.user .arrow-wrap{margin-left:30px}.popup-menu.download{right:0;left:auto;top:35px;width:200px;margin-left:auto}.popup-menu.upload{right:10px;left:auto;top:48px;width:160px}.popup-menu.more-share{left:288px;top:24px}.popup-menu.postpage-share{left:402px;top:34px}.popup-menu.section-list{left:331px}.popup-menu.search{top:48px;right:10px;left:auto;margin-left:0;z-index:3;box-shadow:0 5px 10px rgba(0,0,0,.2)}.headbar-search{border:1px solid #ccc;background-color:#fff;padding:8px 12px;width:200px}.headbar-search input[type=text]{margin:0;width:100%;border:0;border-radius:0;height:auto;line-height:normal;padding:0}.headbar-search-suggest ul{border-top:0}.headbar-search-suggest ul a{padding:0 12px}.headbar-search-suggest ul a strong{color:#000}.flexMenu-popup{z-index:1;list-style-type:none;overflow:hidden;padding:5px 0;background-color:#fff;box-shadow:0 5px 10px rgba(0,0,0,.2);border:1px solid #ccc}.nav-menu .flexMenu-popup li{float:none}.nav-menu .flexMenu-popup li a{text-align:left;color:#777;background-color:#fff;line-height:30px;padding:0 20px;font-size:13px}.nav-menu .flexMenu-popup li a:hover{background-color:#f4f4f4;color:#000}.toast{position:absolute;width:100%;top:100px;left:0;z-index:3;color:#000;text-align:center;height:0}.toast p{display:inline-block;background-color:#ffe168;padding:5px 10px;line-height:20px;border-radius:3px;box-shadow:0 3px 5px rgba(0,0,0,.3);position:relative}.toast p.close{padding-right:35px}.toast.toast-color-green p{background-color:#690}.toast.toast-color-yellow p{background-color:#ffe168}.toast.toast-color-red p{background-color:#c00}.toast a.btn-close{color:#000;position:absolute;top:5px;right:10px}section.announcement-banner{background-color:#222;height:40px;box-shadow:inset 0 -1px 2px rgba(0,0,0,.2);color:#fff;overflow:hidden;width:100%;text-align:center;min-width:940px;position:relative}section.announcement-banner.yellow{background-color:#ffe168;color:#000}section.announcement-banner.blue{background-color:#c6ebff;color:#000}section.announcement-banner p{line-height:40px;height:40px}section.announcement-banner p a{font-weight:700}section.announcement-banner a.btn-close{position:absolute;top:0;right:0;display:block;width:40px;height:40px;background:url(../img/icon-close.png) 50% no-repeat;background-size:30%;text-indent:-999px;overflow:hidden}a.give-feedback{position:fixed;right:-40px;top:50%;display:block;color:#999;font-weight:700;background-color:#ddd;line-height:30px;height:30px;padding:0 10px;-moz-transform:rotate(-90deg);-o-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-webkit-transform:rotate(-90deg)}.placeholder{display:block;background-color:rgba(0,0,0,.1)}.placeholder.post-long{width:700px;height:1200px}.placeholder.post-700{width:700px;height:400px}.placeholder.post-540{width:540px;height:400px}.placeholder.post-520{width:520px;height:400px}.placeholder.post-520.long{width:520px;height:800px}.placeholder.post-500{width:500px;height:300px}.placeholder.post-460{width:460px;height:400px}.placeholder.post-300{width:300px;height:145px}.placeholder.post-300x100{width:300px;height:100px}.placeholder.post-240{width:240px;height:240px}.placeholder.post-220{width:220px;height:147px}.placeholder.size-180x120{width:180px;height:120px}.placeholder.post-160{width:160px;height:160px}.placeholder.post-120{width:120px;height:68px}.placeholder.post-90{width:90px;height:60px}.placeholder.post-80{width:80px;height:80px}.placeholder.post-50{width:50px;height:50px}.placeholder.post-40{width:40px;height:40px}.placeholder.ad-728{width:728px;height:90px}.placeholder.ad-700{width:700px;height:90px}.placeholder.ad-600{width:300px;height:600px}.placeholder.ad-300{width:300px;height:250px}.placeholder.ad-125{width:125px;height:125px}.placeholder.avatar-120{width:120px;height:120px}.placeholder.avatar-80{width:80px;height:80px}.placeholder.avatar-50{width:50px;height:50px}.placeholder.avatar-40{width:40px;height:40px}.placeholder.avatar-30{width:30px;height:30px}.placeholder.photo-700{width:700px;height:400px}.placeholder.photo-640{width:640px;height:360px}.placeholder.banner-300{width:100%;height:300px}.placeholder.size-240-80{width:240px;height:80px}header#top-nav{background-color:#000;width:100%;min-width:960px;box-shadow:0 1px 0 rgba(0,0,0,.2)}header#top-nav .nav-wrap{position:relative;height:48px}header#top-nav .nav-wrap:after,header#top-nav .nav-wrap:before{content:\" \";display:table}header#top-nav .nav-wrap:after{clear:both}header#top-nav a{text-decoration:none}header#top-nav a.logo{display:block;height:48px;width:64px;background:url(../img/header-logo.png) 50% no-repeat;background-size:40px 40px;text-indent:-9999px;overflow:hidden;box-sizing:border-box;border-right:1px solid #333}header#top-nav h1 a:hover{background-color:hsla(0,0%,100%,.2)}.nav-menu{margin-right:196px}.nav-menu ul{list-style-type:none}.nav-menu ul:after,.nav-menu ul:before{content:\" \";display:table}.nav-menu ul:after{clear:both}.nav-menu>ul li{display:block;float:left}.nav-menu>ul li a{display:block;color:#aaa;position:relative;line-height:48px;font-size:13px;padding:0 8px;text-align:center;box-sizing:border-box}.nav-menu>ul li a:hover{color:#fff}.nav-menu .primary{float:left;margin-right:8px}.nav-menu .primary a{text-align:center;border-right:1px solid #333;color:#fff;font-weight:700}.nav-menu .primary a.hot{width:56px}.nav-menu .primary a.trending{width:88px}.nav-menu .primary a.fresh{width:64px}.nav-menu .primary a.section{width:86px}.nav-menu .primary a:hover{color:#fff}.nav-menu .primary a.selected,.nav-menu .primary a:hover{background-color:hsla(0,0%,100%,.2)}.nav-menu a.menu{color:#000}.nav-menu a.menu span.drop-arrow{border-top-color:#000}.nav-menu a.selected span.label{color:#ee0005;font-weight:700;border-color:#ee0005}.nav-menu a.new:after{content:\"New\";display:block;position:absolute;text-transform:uppercase;padding:0 3px;top:6px;right:0;color:#fff;font-size:8px;border-radius:2px;background-color:#00a256;height:12px;line-height:12px}.nav-menu .flexMenu-popup a.new:after{display:none}.function-wrap{position:absolute;right:0;top:0}.badge-user-function-placeholder{float:right;width:207px;height:47px}.user-function,.visitor-function{float:left;padding:9px 10px}.user-function .upload,.visitor-function .upload{float:right}.user-function .btn-primary,.visitor-function .btn-primary{color:#fff;display:inline-block;line-height:30px;height:30px;padding:0 16px;border-radius:2px;font-size:12px;font-weight:700;margin-left:10px;background-color:#09f}.user-function .btn-primary:hover,.visitor-function .btn-primary:hover{background-color:#33adff}.user-function .btn-primary:active,.visitor-function .btn-primary:active{background-color:#007acc}.upload .btn-primary{padding-left:34px;background:#09f url(../img/upload-icon.png) 4px 0 no-repeat}.user-function .btn-mute,.visitor-function .btn-mute{display:inline-block;color:#bbb;line-height:30px;height:30px;padding:0 12px}.user-function .notification{float:left;margin-right:10px}.notification .bell{display:block;width:30px;height:30px;position:relative;background:#333 url(../img/sprite-bell.png) center 0/30px 60px no-repeat;border-radius:15px;color:#fff;font-weight:700;text-align:center;line-height:29px}.notification .bell:hover{background:#fff url(../img/sprite-bell.png) center -30px/30px 60px no-repeat}.notification .bell.new{background-color:#f25;background-image:none}.user-function .chat{float:left;width:40px;margin-left:10px}.chat .bubble{display:block;width:40px;height:30px;background:url(../img/chat-bubble.png) 0 1px no-repeat;position:relative}.chat .bubble:hover{background:url(../img/chat-bubble.png) 0 -29px no-repeat}.chat .bubble.selected{background:url(../img/chat-bubble.png) 0 -59px no-repeat}.chat .bubble .badge{display:inline-block;font-size:10px;line-height:14px;height:14px;background-color:#ff3a23;color:#fff;font-weight:700;border-radius:3px;padding:0 3px;text-shadow:0 1px 1px #ff3a23;position:absolute;left:15px;top:0;border:1px solid #000}.user-function .follow{float:left;width:40px}.follow .bubble{display:block;width:40px;height:30px;background:url(../img/following-icon.png) 0 1px no-repeat;position:relative}.follow .bubble:hover{background:url(../img/following-icon.png) 0 -29px no-repeat}.follow .bubble.selected{background:url(../img/following-icon.png) 0 -59px no-repeat}.follow .bubble .badge{display:inline-block;font-size:10px;line-height:14px;height:14px;background-color:#ff3a23;color:#fff;font-weight:700;border-radius:3px;padding:0 3px;text-shadow:0 1px 1px #ff3a23;position:absolute;left:15px;top:0;border:1px solid #f4f4f4}.user-function a.btn,.visitor-function a.btn{display:block;padding:4px 10px;font-size:12px;line-height:20px;margin-left:15px}.user-function .avatar{float:left;position:relative}.user-function .avatar-container{display:block;height:30px;width:30px;background-color:hsla(0,0%,100%,.2);border-radius:2px;overflow:hidden;position:relative}.user-function .avatar-container img{width:30px;height:30px;display:block;border:0}.visitor-function{float:right}.visitor-function a.btn{float:left}.visitor-function a.btn.blue{background-color:#09f;border-color:#09f;color:#fff}.visitor-function a.link{display:block;padding:0 10px;line-height:47px;float:left;font-size:13px;color:#999}.visitor-function a.link:hover{color:#000}.general-function{float:left;padding:9px 0}.general-function .search{display:block;width:30px;height:30px;text-indent:-999px;overflow:hidden;background:url(../img/sprite-search.png) center 0/30px 60px no-repeat}.general-function .search.selected,.general-function .search:hover{background:url(../img/sprite-search.png) center -30px/30px 60px no-repeat}a.btn-link{color:#999;line-height:30px;display:block;margin:9px 0}a.btn-link:hover{color:#2d72d9}a.btn-grey{background-color:#f4f4f4;color:#999}.notification-menu{position:absolute;top:48px;right:10px;background-color:#fff;width:320px;box-shadow:0 5px 10px rgba(0,0,0,.2);border:1px solid #ccc;z-index:2}.notification-menu .title{height:30px;border-bottom:1px solid #ddd}.notification-menu .title h3{font-size:12px;color:#000;margin:0 10px;line-height:30px}.notification-menu .bumper{width:320px;height:30px;background-color:#fff;border-radius:0 0 3px 3px;box-shadow:0 -2px 2px rgba(0,0,0,.03);border-top:1px solid #ddd}.notification-menu .bumper a.see-all{display:block;height:30px;line-height:30px;text-align:center;color:#999;font-size:12px}.notification-menu li.empty{position:relative;height:400px;padding:0;cursor:default}.notification-menu li.empty:hover{background-color:#fff}.notification-menu .empty-message{position:relative;top:50%;left:50%;height:20px;line-height:20px;width:300px;text-align:center;margin-left:-150px;margin-top:-10px;color:#999;font-weight:700;font-size:15px}#jsid-header-follow-notification-items-container .empty-message{width:400px;margin-left:-190px}.notification-menu .empty-container{height:400px;overflow:hidden}.chat-notification-menu .empty-container{background:url(../img/message-blank-graphic.png) no-repeat center 104px}.notification-menu .empty-container p{color:#999;font-weight:700;text-align:center;margin-top:208px;font-size:15px}.notification-menu .empty-container .btn-container{margin:20px 20px 0;padding:0}.notification-menu .empty-container a.btn{margin:0;padding:9px 20px;font-size:14px}.notification-menu .bumper a.see-all:hover{color:#000}.notification-list{height:400px}.notification-list ul{list-style-type:none;padding-bottom:20px}.notification-list li a.item{display:block;overflow:hidden;position:relative;color:#000;padding-bottom:10px;border-bottom:1px solid #eee;background-color:#fff}.notification-list li a.item.new{background-color:#f4f4f4;border-bottom-color:#eee}.notification-list a.item:hover{background-color:#eee}.notification-list a.item:active{background-color:#eaeaea}.notification-list li a.item.new:hover{background-color:#eee}.notification-list li a.item.new:active{background-color:#eaeaea}.notification-list li:last-child a.item{border-bottom:0}.notification-list .avatar-container{position:absolute;top:10px;left:10px;background-color:#f4f4f4;overflow:hidden;width:40px;height:40px;padding:0}.notification-list .avatar-container a,.notification-list .avatar-container img{display:block;width:40px;height:40px;border:0}.notification-list .content{margin:10px 10px 0 60px}.notification-list li.with-thumb .content{min-height:40px;margin-right:60px}.notification-list p.message{line-height:1.3em}.notification-list p.message a,.notification-list p.message span.actor{font-weight:700}.notification-list p.timestamp{font-size:11px;color:#999;line-height:16px;margin-top:5px;vertical-align:top}.notification-list p.timestamp span.icon{width:16px;height:16px;display:none;overflow:hidden;text-indent:-999px;border-radius:3px;margin-right:3px}.notification-list p.timestamp span.icon.upvote{background:#00a356 url(../img/notification-action-icon-sprite.png) 0 no-repeat}.notification-list p.timestamp span.icon.friend{background:#feca12 url(../img/notification-action-icon-sprite.png) -16px 0 no-repeat}.notification-list p.timestamp span.icon.comment{background:#13aaff url(../img/notification-action-icon-sprite.png) -32px 0 no-repeat}.notification-list .post-container{position:absolute;top:10px;right:10px;width:40px;height:40px;overflow:hidden}.notification-list .post-container a{display:block;width:50px;height:50px;border:0;overflow:hidden}.notification-list .post-container img{height:40px;width:40px;border:0}#jsid-header-follow-notification-items .post-container{position:relative;right:0;width:auto;height:auto;text-align:center}#jsid-header-follow-notification-items .notification-list .post-container img{width:460px;height:100%}.notification-detail .section-title{margin-bottom:20px}.notification-detail .section-title h3{font-size:22px}.notification-text-list{position:relative}.notification-text-list ul{list-style-type:none}.notification-text-list li{position:relative;overflow:hidden}.notification-text-list .label{border-bottom:1px solid #ddd;margin-top:20px}.notification-text-list li.message{border-bottom:1px solid #eee}.notification-text-list li:last-child{border-bottom:0}.notification-text-list .label:first-child{margin-top:0}.notification-text-list .label h3{font-size:15px;padding:10px 0}.notification-text-list p{padding:10px 0 10px 24px;line-height:1.3em}.notification-text-list a{color:#000;font-weight:700}.notification-text-list a:hover{text-decoration:underline}.notification-text-list span.time{display:inline-block;color:#999;font-size:11px}.notification-text-list span.icon{display:block;width:16px;height:16px;position:absolute;left:2px;top:11px;text-indent:-999px;overflow:hidden;border-radius:3px}.notification-text-list span.icon.upvote{background:#00a356 url(../img/notification-action-icon-sprite.png) no-repeat}.notification-text-list span.icon.comment{background:#13aaff url(../img/notification-action-icon-sprite.png) -32px 0 no-repeat}.notification-text-list span.icon.friend{background:#feca12 url(../img/notification-action-icon-sprite.png) -16px 0 no-repeat}.notification-text-list .empty-message{height:20px;line-height:20px;width:300px;color:#999;font-weight:700;font-size:15px}#jsid-header-follow-notification-items-container .notification-text-list .empty-message{width:400px}.notification-text-list .empty-message p{padding:0}.follow-notification-menu{width:500px}#jsid-header-chat-notification-items .viewport,#jsid-header-notification-items .viewport{width:320px;height:400px;overflow:hidden;position:relative}#jsid-header-follow-notification-items .viewport{width:500px;height:500px;overflow:hidden;position:relative}#jsid-header-chat-notification-items .overview,#jsid-header-notification-items .overview{list-style:none;position:absolute;left:0;top:0;padding:0;margin:0;width:320px}#jsid-header-follow-notification-items .overview{list-style:none;position:absolute;left:0;top:0;padding:0;margin:0;width:500px}#jsid-header-chat-notification-items .scrollbar,#jsid-header-follow-notification-items .scrollbar,#jsid-header-notification-items .scrollbar{float:right;width:6px;position:absolute;right:2px;z-index:1;cursor:pointer}#jsid-header-chat-notification-items .track,#jsid-header-follow-notification-items .track,#jsid-header-notification-items .track{height:100%;width:6px;position:relative}#jsid-header-chat-notification-items .thumb,#jsid-header-follow-notification-items .thumb,#jsid-header-notification-items .thumb{background:rgba(0,0,0,.4);height:20px;width:6px;overflow:hidden;position:absolute;top:0;border-radius:4px;opacity:0;-webkit-transition:opacity .5s ease .8s}#jsid-header-chat-notification-items:hover .thumb,#jsid-header-follow-notification-items:hover .thumb,#jsid-header-notification-items:hover .thumb{opacity:1;-webkit-transition:opacity .1s ease 0}#jsid-header-chat-notification-items .disable,#jsid-header-follow-notification-items .disable,#jsid-header-notification-items .disable{display:none}.noSelect{user-select:none;-o-user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none}.section-nav{background-color:#fff;border-bottom:1px solid #ddd;position:relative;width:100%;height:46px;clear:both}.section-nav .width-limit{width:980px;height:46px;margin:auto;position:relative}.section-nav a{color:#000;font-weight:700;display:block;line-height:47px;height:44px;padding:0 10px;border-bottom:3px solid transparent}.section-nav a:hover{color:#000;border-bottom:3px solid #000}.section-nav a.selected{color:#000;font-weight:700;border-bottom:3px solid #09f}.section-nav .slogan{padding:13px 0;float:left;margin-right:20px}.section-nav .slogan p{font-size:13px;line-height:21px;height:20px;color:#999}.section-nav .options{width:580px;position:absolute;top:0;left:0}.section-nav ul{list-style-type:none;height:40px;float:left}.section-nav li{float:left;vertical-align:middle;margin-right:20px;position:relative}.section-nav .social-love{float:left;padding:13px 0}.section-nav .social-love ul{width:auto;height:20px}.section-nav .social-love li{margin-left:5px;margin-right:0;float:left}.section-nav .social-love span.facebook-like{display:block;height:20px;width:88px;overflow:hidden}.fb_edge_widget_with_comment span.fb_edge_comment_widget iframe.fb_ltr{display:none!important}.section-nav .social-love span.twitter-follow{display:block;width:60px;height:20px;overflow:hidden}.section-nav .social-love span.google-plus-follow{display:block;height:20px;width:80px}.section-nav .social-love span.instagram-follow{display:block;height:18px;width:128px;border:1px solid #ccc;background-color:#fff;border-radius:3px}.section-nav .social-love span.instagram-follow a{height:18px;line-height:17px;font-size:10px;padding:0 0 0 23px;border-bottom:0;background:url(../img/instagram-follow.png) -1px -1px no-repeat;color:#555;font-weight:700}.section-nav a.customize{display:block;float:right;line-height:22px;height:22px;padding:0 15px 0 24px;background:url(../img/icn-customize.png) no-repeat 0 0;font-weight:700;color:#999;margin-top:12px;border:0;position:relative;text-indent:-9999px;overflow:hidden;width:0}.section-nav a.customize:hover{background:url(../img/icn-customize.png) no-repeat 0 -22px}.section-nav a.customize.selected{background:url(../img/icn-customize.png) no-repeat 0 -44px}.section-nav a.customize span.drop-arrow{display:inline-block;background:url(../img/dropdown.png) -5px -5px;width:10px;height:10px;margin-left:2px;top:6px;right:0;position:absolute}.section-nav a.customize:hover span.drop-arrow{background:url(../img/dropdown.png) -5px;opacity:.5}.section-nav a.customize.selected span.drop-arrow{background:url(../img/dropdown.png) -5px -45px;opacity:1}#sidebar{float:right;padding:0 0 0 40px;width:300px;position:relative}#sidebar-content{padding-top:20px;padding-bottom:60px}.post-grid{margin-bottom:10px;width:300px;overflow:hidden}.post-grid ul{list-style-type:none;overflow:hidden;width:303px}.post-grid li{float:left;margin:0 3px 3px 0;position:relative}.post-grid ul a,.post-grid ul span{display:block;width:92px;height:92px;background-color:#eee;border:3px solid #eee;overflow:hidden;text-indent:-999px}.post-grid ul a.nav-next,.post-grid ul a.nav-prev{position:absolute;top:0;left:0}.post-grid ul a.nav-prev{background:rgba(0,0,0,.3) url(../img/post-grid-nav-prev.png)}.post-grid ul a.nav-prev:hover{background:rgba(0,0,0,.1) url(../img/post-grid-nav-prev.png)}.post-grid ul a.nav-next{background:rgba(0,0,0,.3) url(../img/post-grid-nav-next.png)}.post-grid ul a.nav-next:hover{background:rgba(0,0,0,.1) url(../img/post-grid-nav-next.png)}.post-grid ul img{display:block;border:0;width:92px;height:92px}.post-grid ul a.selected,.post-grid ul a:active,.post-grid ul a:hover{border-color:#0082fb}.post-grid.single-row{margin-top:20px}.post-grid.single-row li a:hover{border-color:#eee}.post-grid.single-row li a.selected:hover{border-color:#09f}.block-menu{margin-bottom:40px}.block-menu ul{list-style-type:none;border-radius:3px;overflow:hidden;background-color:#f4f4f4}.block-menu li a{display:block;color:#999;font-size:15px;padding:0 20px;line-height:43px}.block-menu li a.selected{color:#000;font-weight:700;background-color:#fff}.block-menu li{border-bottom:1px solid #e4e4e4}.block-menu li:last-child{border-bottom:0}section.social-action{margin-bottom:20px;overflow:hidden}section.social-action a.btn-connect-option{width:235px;margin:0;font-size:15px;line-height:20px;padding:15px 15px 15px 50px;height:20px;border-radius:5px}section.social-action a.btn-connect-option.facebook{background:#3a5898 url(../img/btn-connect-option-size-50.png) no-repeat}section.section-control{margin-bottom:20px;position:relative}section.section-control .title{padding:10px;border:1px solid #ddd;background-color:#f4f4f4;border-top:0}section.section-control h3{font-size:14px}section.section-control h3 em{font-weight:400;color:#999;font-size:11px}section.section-control ul{list-style-type:none}section.section-control li{position:relative;border:1px solid #ddd;border-top:0;border-bottom:1px solid #eee}section.section-control li.group-label{background-color:#f4f4f4;line-height:14px;padding:5px 10px;font-size:11px;color:#999;font-weight:400;text-transform:uppercase;border:1px solid #ddd;border-top:0;border-bottom:0}section.section-control li.group-label:first-child{border-bottom:0}section.section-control li p{background-color:#fff;color:#000;position:relative;padding:5px 10px;line-height:20px;overflow:hidden;height:24px;font-size:13px;cursor:default;margin-right:100px}section.section-control li span.cell-title{line-height:24px;display:inline-block}section.section-control a.go-to{visibility:hidden;font-size:9px;font-weight:700;text-transform:uppercase;display:inline-block;margin-left:10px;background-color:#f4f4f4;height:14px;line-height:14px;color:#aaa;padding:0 8px;border-radius:7px;vertical-align:text-bottom}section.section-control p:hover a.go-to{visibility:visible}section.section-control a.go-to:hover{background-color:#09f;color:#fff}section.section-control .btn-container{padding:10px;margin:0;border:1px solid #ddd;border-top:0;background-color:#f4f4f4}section.section-control .btn-container a.btn{float:left}section.section-control .btn-container a.link{display:block;float:right;height:30px;line-height:30px}span.toggle{display:block;border-radius:17px;position:absolute;top:5px;right:10px;font-weight:700;text-transform:uppercase;font-size:10px;width:44px;text-align:center;background-color:#f4f4f4;color:#999;cursor:pointer;-webkit-transition:background-color .1s ease-out}span.toggle span.off,span.toggle span.on{display:block;float:left;height:24px;width:22px;line-height:24px;text-indent:-999px;overflow:hidden}span.toggle .switch{display:block;width:22px;height:22px;background-color:#fff;position:absolute;top:1px;left:1px;border-radius:11px;-webkit-transition:left .2s ease-out;box-shadow:0 0 0 1px #ddd}span.toggle.on{background-color:#00a35b;color:#fff}span.toggle.on .switch{left:21px;box-shadow:none}.block-ad{margin:0 0 20px;width:300px}.block-ad .img-container{width:300px;height:250px;overflow:hidden;background-color:#f4f4f4}.block-feature-cover .block-ad .img-container{height:250px}.block-ad img{border:0;display:block}.block-ad .subtext{text-align:right;font-size:11px;text-transform:uppercase;margin-top:5px}.block-ad .subtext a{color:#999}.block-ad.height-250{height:250px}.block-ad.height-600{height:600px}#sidebar .post-info{color:#999;padding-top:10px;border-top:1px solid #eee;margin-top:20px}#sidebar .post-info p{line-height:1.6em;font-size:12px}#sidebar .post-info a:hover{color:#09f}.thumb-list{margin:20px 0 40px}.thumb-list a{color:#999;text-decoration:none;font-size:12px;display:block;position:relative;min-height:78px}h2.sidebar-title{font-size:16px;margin-bottom:10px;font-weight:400;font-weight:700}.thumb-list h3{color:#222;font-size:13px;line-height:1.3em;max-height:6em;overflow:hidden;font-weight:400}.thumb-list a:hover h3{color:#0085f7}.thumb-list article{position:relative;overflow:hidden;min-height:78px;margin-bottom:15px}.thumb-list .image-container{position:absolute;top:0;left:0;background-color:#f4f4f4;overflow:hidden;width:140px;height:78px}.ticker{margin:0 0 20px}.ticker ul{list-style-type:none;margin:0;padding:8px 0;box-sizing:border-box;border:1px solid #eee}.ticker li a{display:block;overflow:hidden;padding:8px 15px;cursor:pointer}.ticker li a:hover{background-color:#f4f4f4}.ticker .thumbnail{background-color:#e8e8e8;border:1px solid #d8d8d8;width:62px;height:46px;float:left}.ticker a .info{color:#000;margin-left:74px}.ticker a .info h3{font-size:13px;margin-bottom:3px}.ticker a .info p{font-size:12px;color:#999}.ticker .loading{margin:0}.thumb-list img{width:140px;height:92px;display:block;border:0;margin-top:-7px}.thumb-list .info,.thumb-list footer{margin-left:150px}.thumb-list footer p{font-size:11px}.get-the-app{margin-bottom:24px}.get-the-app ul{list-style-type:none;overflow:hidden}.get-the-app li{float:left;margin-right:10px}.get-the-app li:last-child{margin-right:0}.get-the-app a{display:block;width:143px;height:42px;overflow:hidden;text-indent:-999px;border-radius:3px;border:1px solid #000}.get-the-app a.app-store{background:#000 url(../img/appstore-icon-alt-145.png) -1px -1px no-repeat}.get-the-app a.google-play{background:#000 url(../img/appstore-icon-alt-145.png) -155px -1px no-repeat}section.block-subscribe form .field{overflow:hidden;margin:0}section.block-subscribe form .field input{border-radius:3px 0 0 3px;border-right:0;width:170px;float:left;margin:0}section.block-subscribe form .field a.btn{border-radius:0 3px 3px 0;width:68px;float:left}section.block-subscribe .message{font-size:14px;line-height:40px}section.block-social-love{margin-bottom:32px}section.block-social-love .social-love:after,section.block-social-love .social-love:before{display:table;content:\" \"}section.block-social-love .social-love:after{clear:both}section.block-social-love .social-love{list-style-type:none}section.block-social-love .social-love li{float:left;margin:0 8px 8px 0}section.block-social-love .social-love a.instagram-follow{height:20px;line-height:18px;font-size:10px;padding:0 0 0 23px;border:1px solid #ccc;box-sizing:border-box;background:url(../img/instagram-follow.png) no-repeat -1px -1px;color:#555;font-weight:700;display:block;margin-top:-1px;border-radius:2px;width:128px}section.block-feature-flip-a{margin-top:20px;position:relative}section.block-feature-flip-a .img-container{width:300px;height:156px;background-color:#f4f4f4;position:relative}section.block-feature-flip-a .img-container .disc-nav{position:absolute;width:240px;bottom:0;left:50%;margin-left:-120px;padding:5px 0}section.block-feature-flip-a .arrow-nav a:hover{opacity:1}section.block-feature-flip-a .img-container img{display:block;border:0}section.block-feature-flip-a .info-container{height:90px;position:relative;border:1px solid #eee;border-top:0;padding:6px 10px 0;display:block;color:#000}section.block-feature-flip-a h3{font-size:15px;line-height:1.4em;margin-bottom:10px}section.block-feature-flip-a p.meta{color:#999;position:absolute;bottom:10px;font-size:11px}section.block-feature-flip-a p em{font-weight:400;font-style:normal}section.block-feature-flip-a span{margin-right:5px}section.block-feature-flip-a a.info-container:hover h3{color:#09f}section.block-feature-flip-a.inside .info-container{position:absolute;bottom:0;height:auto;border:0;padding:7px 10px 10px;background-color:rgba(0,0,0,.1)}section.block-feature-flip-a.inside .info-container h3{color:#fff;font-size:13px;margin-bottom:2px}section.block-feature-flip-a.inside p.meta{position:relative;bottom:auto;color:#eee}section.block-feature-flip-a.inside:hover .info-container{background-color:rgba(0,135,247,.7)}section.block-feature-flip-a.inside:hover a.info-container h3{color:#fff}section.block-feature-flip-a.inside span{font-size:10px}section.block-feature-box{margin-top:20px}section.block-feature-box ul{list-style-type:none;overflow:hidden}section.block-feature-box li{float:left;margin-right:10px;margin-bottom:10px;position:relative}section.block-feature-box li:nth-child(2n){margin-right:0}section.block-feature-box .img-container{width:145px;height:145px;background-color:#f4f4f4}section.block-feature-box li a,section.block-feature-box li a img{display:block}section.block-feature-box .info-container{width:145px;height:145px;position:absolute;top:0;opacity:0}section.block-feature-box .info-container h3{font-size:12px;line-height:1.6em;color:#fff;margin:6px 30px 6px 10px}section.block-feature-box li:hover a.info-container{background-color:rgba(0,135,247,.7);opacity:1}section.block-feature-box img{border:0}.arrow-nav a{display:block;width:30px;height:100%;position:absolute;top:0;overflow:hidden;text-indent:-999px;background:rgba(0,0,0,.1) url(http://assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/feature-flip-a-nav.png) no-repeat 0;opacity:0}.arrow-nav a.next{right:0;background:rgba(0,0,0,.1) url(http://assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/feature-flip-a-nav.png) no-repeat -30px}.disc-nav ul{list-style-type:none;overflow:hidden;text-align:center}.disc-nav li{display:inline-block;margin:0 5px}.disc-nav li a{display:block;width:6px;height:6px;overflow:hidden;background-color:#fff;text-indent:-999px;border-radius:3px;box-shadow:0 1px 1px rgba(0,0,0,.5);opacity:.3}.disc-nav li a.selected{opacity:1}section.block-feature-cover{margin-top:20px}section.block-feature-cover ul{list-style-type:none}section.block-feature-cover li{margin-bottom:20px}section.block-feature-cover .img-container{display:block;overflow:hidden;width:300px;height:105px;margin-bottom:3px;background-color:#f4f4f4}section.block-feature-cover .img-container a{display:block}section.block-feature-cover .img-container img{display:block;border:0;width:100%;margin-top:-37px}section.block-feature-cover .info-container h3{font-size:14px;line-height:1.1em;word-wrap:break-word}section.block-feature-cover .info-container a{display:block;color:#000}section.block-feature-cover li:hover .info-container a{color:#09f}a.post-read-more{background:#f4f4f4 url(../img/post-type-icon.png) no-repeat;display:block;font-weight:700;bottom:0;width:500px;height:44px;text-align:left;padding:0 20px 0 44px;line-height:44px;font-size:14px;border-left:1px solid #ccc;border-right:1px solid #ccc;border-bottom:1px solid #ccc;box-shadow:0 1px 0 rgba(0,0,0,.05);box-sizing:border-box;position:absolute}.post-read-more .shadow{width:100%;height:15px;background:url(../img/expand-crook.png) repeat-x;display:block;position:absolute;top:-15px;left:0}.post-container:hover .post-read-more{border-left:1px solid #bbb;border-right:1px solid #bbb;border-bottom:1px solid #bbb;background-color:#eee}.post-container:hover .post-read-more .shadow{background:url(../img/expand-crook.png) repeat-x 0 -15px}section .post-footer{position:relative;padding:10px 30px}section .post-footer p{line-height:20px}.video-post{overflow:hidden}.video-post img.youtube-thumb{margin:-49px 0}.video-post span.play{position:absolute;top:50%;margin-top:-30px;left:50%;margin-left:-30px;height:60px;width:60px;text-indent:-999px;overflow:hidden;background:#222 url(../img/icon-video-play-2.png) no-repeat 20px;border-radius:35px;border:5px solid #fff;opacity:.9}section#individual-post .video-post{width:600px}section#individual-post .video-post img.youtube-thumb{width:600px;margin:-57px 0}.gif-post{overflow:hidden;position:relative;cursor:pointer}.gif-spinner{background:#fff url(../img/spin-white.gif) 50% no-repeat;width:100%;height:100%;border:0;border-radius:0;top:0;left:0;margin:0;text-indent:-999px;opacity:.6;display:block;position:absolute}@keyframes spinner{to{transform:rotate(1turn)}}@-webkit-keyframes spinner{to{-webkit-transform:rotate(1turn)}}@-moz-keyframes spinner{to{-webkit-transform:rotate(1turn)}}@-o-keyframes spinner{to{-webkit-transform:rotate(1turn)}}@-ms-keyframes spinner{to{-webkit-transform:rotate(1turn)}}.simple-spinner{min-width:24px;min-height:24px}.simple-spinner:before{content:\"Loading\\2026\";position:absolute;top:50%;left:50%;width:16px;height:16px;margin-top:-10px;margin-left:-10px}.simple-spinner:not(:required):before{content:\"\";border-radius:50%;border-top:2px solid #999;border-right:2px solid transparent;animation:spinner .6s linear infinite;-webkit-animation:spinner .6s linear infinite}.badge-animated-container-static.loading .badge-item-img{visibility:hidden}.badge-animated-container-animated{position:absolute;z-index:1}.badge-animated-container-animated.post-view{position:relative}.badge-animated-container-animated.presenting,.badge-animated-container-static.presenting{z-index:2}.gif-post img.gif-post-thumb{margin:-49px 0}.gif-post span.play{position:absolute;top:50%;margin-top:-30px;left:50%;margin-left:-30px;height:60px;width:60px;text-align:center;overflow:hidden;background:#222;line-height:58px;font-size:20px;text-transform:uppercase;color:#fff;font-weight:700;border-radius:35px;opacity:.9;border:5px solid #fff}.loading span.play{background-image:url(../img/load-stripe-1.gif);width:100%;height:5px;border:0;border-radius:0;top:0;left:0;margin:0;text-indent:-999px;opacity:1;z-index:2}.nsfw-post{background:#000 url(../img/hair.png) repeat;border-radius:3px;text-align:center;height:306px;overflow:hidden}.nsfw-post h3{font-size:36px;color:#fff;margin-top:120px;margin-bottom:10px}.nsfw-post p{color:#999;font-size:18px;margin:0 20px 10px}.ad-post{overflow:hidden;position:relative;text-align:center}form#listview-search{padding:20px 0 10px;position:relative}form#listview-search .field{margin:0}form#listview-search label{position:absolute;font-size:12px;text-transform:uppercase;line-height:20px;font-weight:700;color:#aaa;display:block;left:18px;top:50%;margin-top:-8px}form#listview-search input#search-hero{line-height:20px;height:44px;padding:12px 12px 12px 50px;width:100%;box-sizing:border-box;-moz-box-sizing:border-box;font-size:15px;margin:0;border-radius:0;background:url(../img/post-function.png) 0 -520px no-repeat}p.search-result{line-height:20px;border-bottom:1px solid #ddd;color:#999;font-size:12px}ul.search-suggestion{list-style-type:none;font-size:18px;background-color:#fff;border:1px solid #ccc;box-shadow:0 5px 10px rgba(0,0,0,.2);position:absolute;width:100%;box-sizing:border-box;top:69px;z-index:1}ul.search-suggestion a{display:block;color:#999;padding:8px 18px;cursor:pointer}ul.search-suggestion a strong{color:#000}ul.search-suggestion a.ui-state-focus,ul.search-suggestion a:hover{background-color:#f4f4f4;text-decoration:none;color:#999}ul.search-suggestion a:hover strong{color:#000}ul.search-suggestion.small{font-size:12px}ul.search-suggestion.small a{line-height:20px;padding:5px 10px}.featured-post{margin-top:20px;overflow:hidden}.featured-post .post-container{background-color:#f4f4f4}.featured-post .post-container img{display:block}.featured-post a.mask{display:block;width:100%;height:100%;position:absolute;top:0;left:0;color:#fff}.featured-post .subtitle{font-style:normal;font-size:12px;display:block;text-transform:uppercase}.featured-post span.label{display:inline-block;position:absolute;top:10px;right:10px;line-height:20px;padding:0 6px;background-color:#09f;z-index:1}.featured-post .col-one,.featured-post .col-three,.featured-post .col-two{overflow:hidden;margin-bottom:12px}.featured-post .block-one,.featured-post .block-three,.featured-post .block-two{position:relative;float:left;margin-right:12px}.featured-post .block-one:last-child,.featured-post .block-three:last-child,.featured-post .block-two:last-child{margin-right:0}.featured-post .block-one,.featured-post .block-one .post-container{width:600px;height:250px}.featured-post .block-one .post-container img{width:600px;height:313px;margin-top:-31px}.featured-post .block-two,.featured-post .block-two .post-container,.featured-post .block-two .post-container img{width:294px;height:153px}.featured-post .block-three,.featured-post .block-three .post-container,.featured-post .block-three .post-container img{width:192px;height:100px}.featured-post.fill{background-color:#000}.featured-post.fill .col-one,.featured-post.fill .col-three,.featured-post.fill .col-two{margin-bottom:1px}.featured-post.fill div:last-child{margin-bottom:0}.featured-post.fill .block-one,.featured-post.fill .block-three,.featured-post.fill .block-two{margin-right:1px}.featured-post.fill .block-two,.featured-post.fill .block-two .post-container,.featured-post.fill .block-two .post-container img{width:299px;height:156px}.featured-post.fill .block-two:last-child,.featured-post.fill .block-two:last-child .post-container,.featured-post.fill .block-two:last-child .post-container img{width:300px;height:156px;margin-right:0}.featured-post.fill .block-three,.featured-post.fill .block-three .post-container,.featured-post.fill .block-three .post-container img{width:199px;height:104px}.featured-post.fill .block-three:last-child,.featured-post.fill .block-three:last-child .post-container,.featured-post.fill .block-three:last-child .post-container img{width:200px;height:104px;margin-right:0}.featured-post .block-one div.title,.featured-post .block-three div.title,.featured-post .block-two div.title{display:block;position:absolute;bottom:0;right:0;left:0;padding:30px 10px 10px;font-weight:700;z-index:1;text-shadow:0 1px 1px rgba(0,0,0,.8)}.featured-post .title:after{content:\"\";background:url(../img/featured-post-gradient.png);background-size:100% 140%;opacity:.5;top:0;bottom:0;left:0;right:0;position:absolute;z-index:-1}.featured-post a.mask:hover .title:after{opacity:.8}.featured-post .block-one .title{font-size:36px}.featured-post .block-two .title{font-size:15px}.featured-post .block-three .title{font-size:13px}section#list-view-2{margin:20px 0 0}section#list-view-2 article{margin-bottom:30px;border-top:1px solid #eee;padding:20px 0 0}section#list-view-2 article:first-child{border:0;padding:0}section#list-view-2 header{margin-bottom:10px;position:relative}section#list-view-2 .activity-text{font-size:13px;color:#000;margin-bottom:5px}section#list-view-2 .activity-text a{color:#000}section#list-view-2 .activity-text a.username{font-weight:700}section#list-view-2 .activity-text a:hover{text-decoration:underline}section#list-view-2 h2{word-wrap:break-word}section#list-view-2 h2 a{font-size:20px;color:#000}section#list-view-2 h2 a:hover{color:#09f}.post-text-container{font-size:16px;line-height:24px}.post-text-container a:hover{text-decoration:underline}.post-text-container blockquote,.post-text-container h1,.post-text-container h2,.post-text-container h3,.post-text-container hr,.post-text-container ol,.post-text-container p,.post-text-container ul{margin-top:16px}.post-text-container h1{font-size:22px}.post-text-container h2{font-size:18px}.post-text-container h3{font-size:16px}.post-text-container ol,.post-text-container ul{padding-left:24px}.post-text-container blockquote{border-left:4px solid #f4f4f4;padding-left:24px}.post-text-container hr{height:1px;border:0;background-color:#ddd}section#list-view-2 p.post-meta{color:#999;margin:10px 0}section#list-view-2 p.post-meta a{color:#999}section#list-view-2 p.post-meta a:hover{text-decoration:underline}section#list-view-2 .post-container{width:500px;position:relative}section#list-view-2 .post-container .long-post-container{max-height:500px;overflow:hidden}section#list-view-2 .post-container a{display:block}section#list-view-2 .post-container.with-button a:before{content:\" \";box-shadow:inset 0 0 0 1px rgba(0,0,0,.1);position:absolute;top:0;left:0;right:0;bottom:44px}section#list-view-2 .post-container.with-button{padding-bottom:44px}section#list-view-2 .post-container a img{display:block;width:500px;border:0}.sticky-action{position:absolute;right:-64px;width:44px;top:0}.vertical-vote{width:42px;margin-bottom:10px}.vertical-vote li{list-style-type:none;margin-bottom:10px}.horizontal-vote a,.vertical-vote a{display:block;width:42px;height:32px;border:1px solid #ddd;overflow:hidden;text-indent:-999px;border-radius:3px}.horizontal-vote a:hover,.vertical-vote a:hover{border-color:#999}.horizontal-vote a.up,.vertical-vote a.up{background:url(../img/sticky-vote.png) no-repeat}.horizontal-vote.up a.up,.vertical-vote.up a.up{background:url(../img/sticky-vote.png) no-repeat -42px 0}.horizontal-vote a.down,.vertical-vote a.down{background:url(../img/sticky-vote.png) no-repeat 0 -32px}.horizontal-vote.down a.down,.vertical-vote.down a.down{background:url(../img/sticky-vote.png) no-repeat -42px -32px}.horizontal-vote a.down:active,.horizontal-vote a.up:active,.vertical-vote a.down:active,.vertical-vote a.up:active{background-color:#f4f4f4}.horizontal-vote{overflow:hidden;float:left;list-style-type:none;margin-right:10px;position:relative;width:113px;height:34px}.horizontal-vote li{float:left;position:absolute}.horizontal-vote li:last-child{left:69px}.horizontal-vote li:hover{z-index:2}.horizontal-vote a.up:active span{background-color:#f4f4f4}.horizontal-vote.up a.up span{color:#09f}.horizontal-vote li a.up{text-indent:0;border-radius:3px 0 0 3px;padding-left:36px;width:32px;color:#999;font-weight:700;text-transform:uppercase;line-height:32px}.horizontal-vote a.up span{display:block;height:32px;line-height:32px;background-color:#fff}.horizontal-vote li a.down{border-radius:0 3px 3px 0}.others li{list-style-type:none}.others a.comment{width:42px;height:32px;border:1px solid #ddd;display:block;overflow:hidden;text-indent:-999px;border-radius:3px;background:url(../img/other-buttons.png) no-repeat 0 -32px}.others a.comment:hover{border:1px solid #999}.others a.comment:active{background-color:#f4f4f4}.sticky-social ul{list-style-type:none;overflow:hidden}.sticky-social li{border-radius:4px;border:1px solid #fff;overflow:hidden;float:left;clear:both}.sticky-social li:first-child{margin-bottom:-1px}.sticky-social a{font-weight:700;color:#fff;background-color:#000;display:block;line-height:34px;padding:0 15px}.sticky-social a.facebook{background-color:#3b5998}.sticky-social a.twitter{background-color:#00aced}.btn-vote{overflow:hidden}.btn-vote li{margin:0 10px 0 0;float:left;list-style:none}.btn-vote a{box-sizing:border-box;border:1px solid #ddd;border-radius:3px;width:44px;height:34px;display:block;text-indent:-999px}.btn-vote .up{background:url(../img/sticky-vote.png) no-repeat}.btn-vote .down{background:url(../img/sticky-vote.png) no-repeat 0 -32px}.btn-vote .comment{background:url(../img/other-buttons.png) no-repeat 0 -32px}.btn-vote .up.active{background:url(../img/sticky-vote.png) no-repeat -42px 0}.btn-vote .down.active{background:url(../img/sticky-vote.png) no-repeat -42px -32px}.btn-vote a:hover{border-color:#999}.btn-vote a:active{background-color:#f4f4f4}.fixed-wrap-post-bar{width:728px;height:54px}.badge-toolbar-pre,.post-afterbar-a{position:relative}.post-afterbar-a{margin:10px 0;padding-bottom:0}.post-afterbar-a.in-list-view{width:500px}.post-afterbar-a.in-post-top{padding:10px 0;height:34px;margin:0;border:0;background-color:#fff;width:728px}.post-afterbar-a .share{float:left}.post-afterbar-a .share ul{overflow:hidden;list-style-type:none}.post-afterbar-a .share li{float:left;margin-right:10px}.post-afterbar-a .share.right li{margin:0 0 0 10px}.post-afterbar-a .btn-share{display:block;color:#fff;font-weight:700;height:34px;background-color:#f4f4f4;line-height:34px;padding:0 15px 0 34px;border-radius:3px;text-align:center}.post-afterbar-a .btn-share.facebook{background:#3b5998 url(../img/sharing-button-a.png) 0 0 no-repeat}.post-afterbar-a .btn-share.twitter{background:#00aced url(../img/sharing-button-a.png) 0 -34px no-repeat}.post-afterbar-a .btn-share.facebook:hover,.post-afterbar-a.in-post-bot .btn-share.facebook:hover{background-color:#4c70ba}.post-afterbar-a .btn-share.facebook:active,.post-afterbar-a.in-post-bot .btn-share.facebook:active{background-color:#36528c}.post-afterbar-a .btn-share.twitter:hover,.post-afterbar-a.in-post-bot .btn-share.twitter:hover{background-color:#21c2ff}.post-afterbar-a .btn-share.twitter:active,.post-afterbar-a.in-post-bot .btn-share.twitter:active{background-color:#00a0dc}.post-afterbar-a.in-post-bot .share{float:none}.post-afterbar-a.in-post-bot .btn-share{min-width:240px;height:44px;line-height:43px;font-size:15px;padding:0}.post-afterbar-a.in-post-bot .btn-share.facebook{background:#3b5998}.post-afterbar-a.in-post-bot .btn-share.twitter{background:#00aced}.post-afterbar-a.in-post-bot.full-width .share ul{text-align:left;overflow:hidden}.post-afterbar-a.in-post-bot.full-width .share li{margin:0}.post-afterbar-a.in-post-bot.full-width .share li:first-child{display:block;float:left;margin:0 10px 0 0}.post-afterbar-a.in-post-bot.full-width .btn-share{width:359px}.post-afterbar-a .others{float:left}.post-afterbar-a .others a.more{display:block;width:42px;height:32px;border:1px solid #eee;overflow:hidden;border-radius:3px;text-indent:-999px;background:#eee url(../img/other-buttons.png) no-repeat}.post-afterbar-a .others a.more:hover{border:1px solid #999}.post-afterbar-a .others a.more:active{background-color:#ddd}.post-afterbar-a .post-nav{float:right}.post-afterbar-a .post-nav a.next{display:block;padding-right:12px;position:relative}.post-afterbar-a .post-nav a.next span.label{padding:0 8px 0 12px;font-weight:700;height:34px;line-height:34px;display:block;background-color:#ff3c1f;color:#fff;border-radius:3px 0 0 3px}.post-afterbar-a .post-nav a.next span.arrow{position:absolute;top:0;right:0;display:block;width:0;height:0;border-top:17px dashed transparent;border-bottom:17px dashed transparent;border-left:12px solid #ff3c1f}.post-afterbar-a .post-nav a.next:hover span.label{background-color:#ff6852}.post-afterbar-a .post-nav a.next:hover span.arrow{border-left-color:#ff6852}.post-afterbar-a .post-nav a.next:active span.label{background-color:#ff5a41}.post-afterbar-a .post-nav a.next:active span.arrow{border-left-color:#ff5a41}.post-afterbar-a .post-nav a.next.disabled{opacity:.2;cursor:default}.post-afterbar-a .post-nav a.next.disabled:active span.label,.post-afterbar-a .post-nav a.next.disabled:hover span.label{background-color:#ff3c1f}.post-afterbar-a .post-nav a.next.disabled:active span.arrow,.post-afterbar-a .post-nav a.next.disabled:hover span.arrow{border-left-color:#ff3c1f}.post-afterbar-meta{color:#999;border-top:1px solid #eee;padding:5px 0}.post-afterbar-meta p{line-height:20px;font-size:11px;text-transform:uppercase;text-align:right}.post-afterbar-meta a{color:#999}.post-afterbar-meta a:hover{text-decoration:underline;color:#000}.loading{text-align:center;margin-bottom:20px}.loading a.btn{display:block;line-height:65px;height:62px;font-size:18px;background-color:#fff;color:#000;box-shadow:none;padding:0;margin:0;border:1px solid #ddd}.loading a.btn:hover{border-color:#aaa}.loading a.btn:active{background-color:#fafafa}.loading a.btn.spin{background:#fff url(../img/spin-white.gif) 50% no-repeat;text-indent:-999px;overflow:hidden;border-color:#fff;cursor:default}.loading a.btn.end{background-color:#f4f4f4;color:#999;border-color:#d4d4d4;cursor:default}.loading a.btn.blue{background-color:#09f;border-color:#09f;color:#fff}.loading a.btn.blue:hover{background-color:#1a97ff;border-color:#1a97ff}.loading a.btn.blue:active{background-color:#0062b3;border-color:#0062b3}.banner-block{border:1px solid #ddd;padding:28px;margin:28px 0;height:192px;position:relative}.banner-block h3{font-size:18px;font-weight:700}.banner-block p{color:#777;line-height:1.6em;font-size:13px}.banner-block.download-app{background-color:#f8f8f8;border-color:#f8f8f8}.banner-block .block-title h3{color:red;font-size:15px;margin:15px 0}ul.mobile-download-button{list-style-type:none;overflow:hidden}ul.mobile-download-button li{float:left}ul.mobile-download-button li:first-child{margin-right:10px}ul.mobile-download-button a{display:block;width:143px;height:42px;border:1px solid #000;border-radius:4px;text-indent:-999px}ul.mobile-download-button a.app-store{background:#000 url(../img/appstore-icon-alt-145.png) -1px -1px no-repeat}ul.mobile-download-button a.google-play{background:#000 url(../img/appstore-icon-alt-145.png) -156px -1px no-repeat}.banner-block.download-app .content{overflow:hidden;float:left;position:absolute;top:60px;left:30px}.banner-block.download-app h3,.banner-block.download-app p{width:300px}.banner-block.download-app h3{margin-bottom:10px;font-size:22px}.banner-block.download-app p{margin-bottom:20px;font-size:15px}.banner-block.download-app .graphic{float:left;position:absolute;top:50px;right:30px}.banner-block.social h3{text-align:center;margin-bottom:20px}.banner-block.social ul.social-list{list-style-type:none}.banner-block.social ul.social-list li{float:left;height:150px;position:relative;border-right:1px solid #eee}.banner-block.social ul.social-list li.last,.banner-block.social ul.social-list li:last-child{border-right:0}.banner-block.social ul.social-list.col-3 li{width:33%}.banner-block.social ul.social-list.col-2 li{width:49%}.banner-block.social .facebook-like,.banner-block.social .google-follow,.banner-block.social .twitter-follow{text-align:center;position:absolute;width:100%;bottom:20px}.banner-block.social span.facebook-icon,.banner-block.social span.google-icon,.banner-block.social span.twitter-icon{display:block;width:60px;height:60px;overflow:hidden;text-indent:-999px;position:absolute;top:50%;left:50%;margin-top:-50px;margin-left:-30px}.banner-block.social span.facebook-icon{background:url(../img/social-button-sprite-60.png) no-repeat}.banner-block.social span.twitter-icon{background:url(../img/social-button-sprite-60.png) no-repeat -60px 0}.banner-block.social span.google-icon{background:url(../img/social-button-sprite-60.png) no-repeat -120px 0}.banner-block.post-list{height:212px;padding:0;border:0}.banner-block.post-list .content{overflow:hidden}.banner-block.post-list .item{width:187px;float:left;margin-right:19px}.banner-block.post-list .item:last-child{margin-right:0}.banner-block.post-list .item a{display:block;position:relative;overflow:hidden}.banner-block.post-list .image-container{width:187px;height:122px;background-color:#f4f4f4;overflow:hidden;position:absolute;top:0;left:0}.banner-block.post-list .image-container img{display:block;border:0;width:187px}.banner-block.post-list .info{margin:127px 0 0}.banner-block.post-list .info h3{font-size:13px;color:#000;font-weight:400;line-height:1.3em}.banner-block.post-list a:hover h3{color:#0085f7}.banner-block.stream-naughty{padding:30px 0 0;margin:0 0 30px;height:250px;border:0;border-top:1px solid #eee}.banner-block.stream-naughty .naughty-container{width:300px;height:250px;background-color:#f4f4f4;margin:0 auto}.banner-block.stream-naughty .naughty-background{background-color:#f8f8f8}.banner-block.stream-naughty img{display:block}.banner-block.signup{background-color:#f8f8f8;border-color:#f8f8f8}.banner-block.signup .text{text-align:center;margin:30px 0}.banner-block.signup h3{font-size:22px;margin-bottom:10px}.banner-block.signup p.desc{font-size:15px}.banner-block.signup .btn-container{padding:0;margin:0}.banner-block.signup .btn-container .btn{width:160px;margin:0 auto;display:block}.banner-block.facebook{background-color:#f8f8f8;border-color:#f8f8f8}.banner-block.facebook .content{text-align:center;margin-top:35px}.banner-block.facebook h3{font-size:22px;margin-bottom:10px}.banner-block.facebook p.desc{font-size:15px;margin-bottom:20px}.banner-block.facebook .social-container{width:200px;height:20px;padding:12px 0;background-color:rgba(0,0,0,.2);border-radius:3px;margin:0 auto}.banner-block.facebook.color{background-color:#3a5897;border-color:#3a5897}.banner-block.facebook.color h3,.banner-block.facebook.color p.desc{color:#fff}.banner-block.twitter{background-color:#f8f8f8;border-color:#f8f8f8}.banner-block.twitter .content{text-align:center;margin-top:35px}.banner-block.twitter h3{font-size:22px;margin-bottom:10px}.banner-block.twitter p.desc{font-size:15px;margin-bottom:20px}.banner-block.twitter .social-container{width:200px;height:28px;padding:8px 0;background-color:rgba(0,0,0,.2);border-radius:3px;margin:0 auto}.banner-block.twitter.color{background-color:#00aced;border-color:#00aced}.banner-block.twitter.color h3,.banner-block.twitter.color p.desc{color:#fff}.banner-block.google{background-color:#f8f8f8;border-color:#f8f8f8}.banner-block.google .content{text-align:center;margin-top:35px}.banner-block.google h3{font-size:22px;margin-bottom:10px}.banner-block.google p.desc{font-size:15px;margin-bottom:20px}.banner-block.google .social-container{width:200px;height:24px;padding:10px 0;background-color:rgba(0,0,0,.2);border-radius:3px;margin:0 auto}.banner-block.google.color{background-color:#dd4c2d;border-color:#dd4c2d}.banner-block.google.color h3,.banner-block.google.color p.desc{color:#fff}.banner-block.post-list.in-listview{border-bottom:0;margin-top:20px;margin-bottom:0;height:235px}.banner-block.download-app.in-listview,.banner-block.facebook.in-listview,.banner-block.google.in-listview,.banner-block.signup.in-listview,.banner-block.stream-naughty.in-listview,.banner-block.twitter.in-listview{margin-top:20px;margin-bottom:30px}article.post-page{margin-top:20px;width:728px}section#individual-post header{margin-bottom:6px;position:relative}section#individual-post header h2{font-size:24px;line-height:1.3em;margin-bottom:7px;word-wrap:break-word}section#individual-post header .description{font-size:16px;color:#000;line-height:24px;margin-top:4px;margin-bottom:8px}section#individual-post header ol.description,section#individual-post header ul.description{padding-left:24px}section#individual-post header .description a:hover{text-decoration:underline}section#individual-post header p.post-meta,section#individual-post header p.post-meta a{color:#999}section#individual-post header p.post-meta a:hover{text-decoration:underline}article.post-page .post-container{position:relative}article.post-page .post-container.with-button{padding-bottom:44px}article.post-page .post-container a{display:block;cursor:default}article.post-page .post-container.with-button a{cursor:pointer}article.post-page .post-container.with-button a:first-child:before{content:\" \";box-shadow:inset 0 0 0 1px rgba(0,0,0,.1);position:absolute;top:0;left:0;right:0;bottom:44px}article.post-page .post-container a.zoomable{cursor:-webkit-zoom-in;cursor:-moz-zoom-in;cursor:zoom-in}article.post-page .post-container img{display:block;width:600px}article.post-page .post-container a img{border:0;margin:0 auto}article.post-page .post-container .post-read-more{width:100%}article.post-page .post-meta .fb-like{float:left;height:20px;margin:10px 0}article.post-page .post-meta p.info{line-height:20px;margin:10px 0;color:#999;float:right;font-size:11px}article.post-page .post-meta p.right a{font-weight:700}article.post-page .post-meta p a:hover{text-decoration:underline}article.post-page .post-footer{position:relative;padding:5px 20px}.spinner-here{height:40px;opacity:.4;background:url(../img/spin-white.gif) 50% no-repeat}section.post-comment{padding-bottom:30px;margin-top:20px}#comment,#comments{margin-top:-30px;height:30px}article.post-page .post-footer .more-share-menu{left:20px}.post-control{overflow:hidden;margin:20px 0 10px}.post-control ul{list-style-type:none}.post-control li{float:left}.post-control ul.left li{margin-right:10px}.post-control ul a{display:block;border:1px solid #ddd;border-radius:3px;line-height:32px;width:70px;text-align:center;font-weight:700;color:#000;cursor:pointer}.post-control ul a:hover{border-color:#aaa}.post-control ul a:active{background-color:#fafafa}.post-control ul a.blue{background-color:#0082fb;border-color:#0082fb;color:#fff}.post-control ul a.blue:hover{background-color:#1a97ff;border-color:#1a97ff}.post-control ul a.blue:active{background-color:#0062b3;border-color:#0062b3}.post-control ul a.disabled{color:#aaa;background-color:#f4f4f4;border-color:#d4d4d4;cursor:default}.post-page .naughty-box{padding:10px 0 0}.post-page .naughty-box .img-container{background-color:#f4f4f4;width:728px;height:90px;overflow:hidden}.post-page .album-post .cell{margin-bottom:24px}.post-page .album-post .img-container{margin-bottom:8px;background-color:#f4f4f4}.post-page .album-post img{width:600px;height:auto;display:block;margin:0 auto}.post-page .album-post .caption h3{font-size:22px;margin-bottom:8px}.post-page .album-post .description p{font-size:14px;line-height:1.3em}.post-page .album-post .description ol,.post-page .album-post .description ul{padding-left:20px}section.what-to-read-next{background-color:#f4f4f4;border-top:1px solid #ddd;border-bottom:1px solid #ddd;padding:0 0 30px;min-height:200px}section.what-to-read-next .width-limit{width:940px;margin:0 auto}section.what-to-read-next h3.block-title{font-size:15px;color:red;line-height:20px;margin:17px 0}section.what-to-read-next section.thumb-list{overflow:hidden;margin:0 auto}section.what-to-read-next article{width:220px;float:left;margin:0 20px 0 0}section.what-to-read-next article:last-child{margin-right:0}section.what-to-read-next article a{overflow:hidden}section.what-to-read-next article a .image-container{width:220px;height:124px;background-color:#e4e4e4}section.what-to-read-next article a img{border:0;width:100%;height:auto;margin-top:-10px}section.what-to-read-next article .info{margin:131px 0 0}section.what-to-read-next article h3{margin-bottom:0}section.section-header{box-shadow:inset 0 0 0 1px rgba(0,0,0,.1);padding-top:16px}section.section-header .width-limit:after,section.section-header .width-limit:before{content:\" \";display:table}section.section-header .width-limit:after{clear:both}section.section-header .width-limit{width:940px;margin:0 auto;position:relative}section.section-header .logo{background-color:#f4f4f4;width:64px;height:64px;position:absolute;top:0;left:0;overflow:hidden;border-radius:3px}section.section-header .logo img{width:100%;height:100%;display:block}section.section-header .navigation{margin-left:72px}section.section-header .title:after,section.section-header .title:before{content:\" \";display:table}section.section-header .title:after{clear:both}section.section-header .title{height:30px}section.section-header h2{font-size:24px;float:left;margin-right:16px;margin-left:8px;line-height:30px}section.section-header .social-love{float:left;padding:5px 0}section.section-header .social-love ul{width:auto;height:20px;list-style-type:none}section.section-header .social-love li{margin-left:5px;margin-right:0;float:left}section.section-header .social-love span.facebook-like{display:block;height:20px;width:88px;overflow:hidden}section.section-header .social-love span.twitter-follow{display:block;width:60px;height:20px;overflow:hidden}section.section-header .social-love span.google-plus-follow{display:block;height:20px;width:80px}section.section-header .social-love span.instagram-follow{display:block;height:18px;width:128px;border:1px solid #fff;border-radius:3px;background-color:#fff}section.section-header .social-love span.instagram-follow a{height:20px;line-height:18px;font-size:10px;padding:0 0 0 23px;border:1px solid #ccc;box-sizing:border-box;background:url(../img/instagram-follow.png) no-repeat -1px -1px;color:#555;font-weight:700;display:block;margin-top:-1px;border-radius:2px}section.section-header .section-nav:after,section.section-header .section-nav:before{content:\" \";display:table}section.section-header .section-nav:after{clear:both}section.section-header .section-nav{border-bottom:0;background-color:transparent;height:50px}section.section-header .section-nav ul{height:50px}section.section-header .section-nav li{margin:0}section.section-header .section-nav:hover a{color:#999}section.section-header .section-nav:hover a.selected{border-bottom:0;color:#000}section.section-header .section-nav a{height:47px;line-height:50px;padding:0 12px}section.section-header .section-nav a:hover{border-bottom:3px solid #09f;color:#000}section.profile-header{position:relative;color:#fff;background-color:#222}section.profile-header .avatar-container{width:100px;height:100px;border-radius:3px;overflow:hidden;position:absolute;top:200px;left:50%;margin-left:-50px;box-shadow:0 0 0 1px rgba(0,0,0,.2)}section.profile-header .banner-container{width:100%;height:300px;background-color:#333;-webkit-background-size:cover;-moz-background-size:cover;-o-background-size:cover;background-size:cover;background-position:50%}section.profile-header .info{text-align:center;padding:30px 0;min-height:60px;text-shadow:0 1px 0 rgba(0,0,0,.1)}section.profile-header h2{font-size:30px;margin-bottom:5px}section.profile-header .info p{font-size:15px;color:#fff;opacity:.7}section.profile-header .avatar-container a,section.profile-header .avatar-container img{display:block}section.profile-header .avatar-container img{display:block;width:100px;height:100px}section.profile-header .avatar-container a img{border:0}section.profile-header .profile.no-banner .banner-container{display:none}section.profile-header .profile.no-banner .avatar-container{top:40px}section.profile-header .profile.no-banner .info{padding-top:150px;padding-bottom:30px}section.profile-header .profile-action{text-align:center;padding:0 0 30px}section.profile-header .profile-action .button{display:inline-block;line-height:34px;height:34px;border:1px solid #fff;border-radius:3px;padding:0 10px;color:#fff;font-weight:700}section.profile-header .profile-action .button:hover{background-color:hsla(0,0%,100%,.2)}section.profile-header .profile-action .button:active{opacity:.8}.tab-switch{margin:10px 0 0;clear:both}.tab-switch ul{overflow:hidden;list-style-type:none}.tab-switch li{float:left;margin-right:20px}.tab-switch li a{display:block;color:#999;font-size:12px;line-height:20px;padding:6px 0 4px}.tab-switch li a.selected{color:#2d72d9}section.notification-detail{width:600px;margin-top:20px}section.notification-detail .notification-list{overflow:visible;max-height:none}section.notification-detail .avatar-container{left:0}section.notification-detail .post-container{right:0}section.notification-detail .content{margin-left:60px;margin-right:60px}.overview-list{margin-bottom:40px}.overview-list li{position:relative;overflow:hidden;height:122px;margin-bottom:20px;cursor:pointer;list-style-type:none}.overview-list .post-container{position:absolute;top:0;left:0;width:220px;height:122px;overflow:hidden}.overview-list .post-container img{margin-top:-11px}.overview-list .info{margin-left:240px;float:left}.overview-list .info h3{font-size:18px;margin-bottom:10px}.overview-list li:hover h3{color:#09f}.overview-list .info p{color:#999}.overview-list .info a:hover{text-decoration:underline}.overview-list .nsfw-post{height:122px}.overview-list .nsfw-post h4{font-size:15px;color:#fff;margin-top:40px;margin-bottom:5px}.overview-list .nsfw-post p{font-size:12px;margin:0 6px 3px}.overlay-scroll-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:3;overflow:scroll;background-color:rgba(0,0,0,.8)}.overlay-scroll-container.opacity-50{background-color:rgba(0,0,0,.5)}.overlay-scroll-container.opacity-60{background-color:rgba(0,0,0,.6)}.overlay-scroll-container a.close-button{color:#fff;width:50px;line-height:40px;text-align:center;display:block;overflow:hidden;text-indent:-999px;background:url(../img/icon-close-white.png) 50% no-repeat;opacity:.8;position:fixed;top:0;right:0}.overlay-scroll-container a.close-button:hover{opacity:1}section.modal{width:540px;position:absolute;top:60px;left:50%;margin-left:-270px;background-color:#fff;box-shadow:0 3px 5px rgba(0,0,0,.3);border-radius:3px;padding-bottom:32px}section.modal header h3{margin:32px 32px 8px;font-size:24px}section.modal header p{margin:0 32px;font-size:14px;line-height:20px}section.modal header p a{color:#999;text-decoration:underline}section.modal header{padding-bottom:16px}section.modal a.btn-close{position:absolute;top:16px;right:16px;color:#ddd;text-decoration:none;display:block;width:24px;height:24px;text-indent:-999px;overflow:hidden;background:url(../img/icon-close.png) 50% no-repeat}section.modal a.btn-close:hover{opacity:.6}section.modal a.btn-close:active{opacity:.8}section.modal .spacer{padding:0 32px}section.modal.feedback form.popup-feedback,section.modal.report form.popup-report{margin:30px 40px}section.modal.feedback textarea,section.modal.report textarea{width:440px;height:80px}section.modal.language ul.language-list{list-style-type:none;font-size:13px;width:230px;float:left}section.modal.language ul.language-list a{display:block;line-height:18px;padding:4px 0}section.modal.language ul.language-list a.selected{color:#000;font-weight:700}section.modal.upload .field{margin:0;border:1px solid #ddd;border-bottom:none;border-radius:2px 2px 0 0}section.modal.upload .field.last{border-bottom:1px solid #ddd;border-radius:0 0 2px 2px}section.modal.upload .field.post-info{position:relative;height:128px;padding:16px;box-sizing:border-box}section.modal.upload .field.post-info .preview{width:96px;height:96px;position:absolute;left:16px;top:16px;cursor:-webkit-zoom-in;cursor:-moz-zoom-in;cursor:zoom-in}section.modal.upload .field.post-info .preview img{width:100%;display:block;border:none}section.modal.upload .field.post-info textarea{height:58px;border:none;border-radius:0;position:absolute;top:16px;left:128px;right:16px;width:auto;margin-top:0;font-size:16px}section.modal.upload .field.post-info .count{position:absolute;bottom:16px;right:16px;color:#999;font-size:12px}section.modal.upload .field.checkbox{margin:0;height:48px}section.modal.upload .field.checkbox label{display:block;height:20px;position:static;padding:14px;font-size:14px}section.modal.upload .field.checkbox p{line-height:20px;height:20px;margin-right:48px}section.modal.upload .field.checkbox input[type=checkbox]{right:16px;left:auto;top:40%}section.modal.upload .field.textbox input[type=url]{border:none;margin:0;line-height:20px;font-size:14px;padding:14px 16px;background-color:transparent;width:100%;height:48px;box-sizing:border-box}section.modal.upload .btn-container{padding:0 32px;margin:16px 0 0}section.modal.upload .btn-container .btn-block{float:none;margin:0}section.modal.upload .btn-container .btn{margin-left:16px}section.modal.upload .source-file{background-color:#f4f4f4;border:1px solid #ddd;border-radius:2px;height:240px;text-align:center;font-size:16px;color:#999;margin:0 0 16px;display:block;background-image:url(\"../img/upload-file.png\");background-size:96px;background-repeat:no-repeat;background-position:50%}section.modal.upload .source-file:hover{background-color:#eee}section.modal.upload .source-file:active{background-color:#eaeaea}section.modal.upload .source-file p{margin-top:160px}section.modal.upload .source-file.highlight{border-color:#09f}section.modal.upload .other-source{overflow:hidden;width:100%}section.modal.upload .other-source .wrapper{width:50%;float:left}section.modal.upload .source-meme,section.modal.upload .source-url{border-radius:2px;height:120px;box-sizing:border-box;border:1px solid #ddd;text-align:center;color:#999;font-size:12px;display:block;background-size:64px;background-repeat:no-repeat;background-position:center 20px}section.modal.upload .source-meme:hover,section.modal.upload .source-url:hover{background-color:#f9f9f9}section.modal.upload .source-meme:active,section.modal.upload .source-url:active{background-color:#f4f4f4}section.modal.upload .source-url{margin-right:8px;background-image:url(../img/upload-url.png)}section.modal.upload .source-meme{margin-left:8px;background-image:url(../img/upload-meme.png)}section.modal.upload .source-meme p,section.modal.upload .source-url p{margin-top:88px}section.modal.upload .message{background-color:#ffebee;color:#b71c1c;padding:16px;border-radius:4px;margin-bottom:24px;line-height:20px}ul.section-picker{list-style-type:none;box-sizing:border-box;border:1px solid #ddd;overflow:hidden;overflow-y:scroll;max-height:400px;border-radius:2px}ul.section-picker li a{display:block;position:relative;color:#000;height:48px;padding:16px}ul.section-picker li a:hover{background-color:#f4f4f4}ul.section-picker .icon{width:48px;height:48px;background-color:#eee;border-radius:2px;overflow:hidden;position:absolute;top:16px;left:16px}ul.section-picker .icon img{display:block;border:none;width:100%}ul.section-picker .text{margin:4px 48px 0 64px}ul.section-picker .text h3{font-size:16px;margin-bottom:2px}ul.section-picker .text p{color:#999;font-size:12px}ul.section-picker .selector{width:24px;height:24px;border-radius:12px;background-color:#eee;position:absolute;right:16px;top:50%;margin-top:-12px}ul.section-picker .selector.selected{background-image:url(\"../img/custom-checkbox.png\");background-size:100%;background-color:#09f}ul.section-picker.disabled{opacity:.5;overflow:hidden;pointer-events:none}.drag-and-drop h1{color:#fff;text-align:center;font-size:56px;line-height:56px;position:absolute;top:50%;margin-top:-28px;width:100%}.shortcut-list{padding:20px 40px}ul.keylist{list-style-type:none;float:left;width:50%}ul.keylist li{line-height:30px;margin-bottom:20px;font-size:15px}ul.keylist li strong{display:inline-block;border:1px solid #ddd;box-sizing:border-box;width:32px;text-align:center;border-radius:3px;font-size:15px;color:#555;box-shadow:0 1px 3px rgba(0,0,0,.03)}a.upload-selected{color:#000;cursor:default}.zoom-container{text-align:center;height:100%;width:100%;min-width:700px;cursor:-webkit-zoom-out;cursor:-moz-zoom-out;cursor:zoom-out}.zoom-container:before{content:\"\";display:inline-block;height:100%;vertical-align:middle}.zoom-container img{display:inline-block;vertical-align:middle;box-shadow:0 3px 10px rgba(0,0,0,.8);width:780px}section#settings{position:relative;margin:40px auto 0}section#settings h2{font-size:36px}ul.form-nav{list-style-type:none;position:absolute;top:0;left:0}ul.form-nav li a{display:block;text-decoration:none;color:#999;line-height:19px;font-weight:700;padding:10px;width:240px;border-radius:3px}ul.form-nav li a.selected{background-color:#2d72d9;color:#fff;border-color:#08a}form#setting{overflow:hidden;margin-left:300px}form#setting textarea{width:438px;height:80px}.setting-social-connect{width:460px}.setting-social-connect label{margin-bottom:6px;display:block;font-weight:700}.setting-social-connect .connection{margin-bottom:20px;background-color:#f4f4f4;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.1)}.setting-social-connect .connection .field{margin:0;padding:10px}.setting-social-connect .connection p.label{line-height:20px;padding:10px;float:left;color:#999;font-weight:700}.setting-social-connect .connection a.btn,.setting-social-connect .connection a.thick{float:right}.setting-social-connect .connection .checklist{border-top:1px solid #ddd;padding:10px 0;margin:0 20px}.setting-social-connect .connection .field.checkbox{padding:10px 0}.blank-state{background-color:#f4f4f4;margin:20px 0;height:300px;overflow:hidden;border-radius:3px}.blank-state h3{font-size:16px;text-align:center;font-weight:400;margin-top:140px;color:#999}.blank-state .btn-container{text-align:center;margin-top:10px}.blank-state .btn-container a.btn{display:inline-block}.blank-state.comment h3,.blank-state.overview h3,.blank-state.upload h3,.blank-state.upvote h3{margin-top:120px}section#static{position:relative;width:610px;margin:20px auto}section#static.advertise{width:940px}section#static h2{font-size:28px;margin-top:20px}ul.static-nav{list-style-type:none;position:absolute;top:0;left:0}ul.static-nav li a{display:block;text-decoration:none;color:#999;line-height:19px;font-weight:700;padding:10px;width:260px;border-bottom:1px solid #eee}ul.static-nav li a.selected{background-color:#2d72d9;color:#fff;border-color:#08a}.static-block{background-color:#fff;overflow:hidden}.static-block h3{font-size:22px;line-height:1.6em}.static-block p{margin:0 0 10px;line-height:1.8em;font-size:13px}.static-block blockquote{background-color:#f4f4f4;padding:40px}.static-block blockquote ol{padding:0 0 0 20px;line-height:1.6em}.static-block blockquote li{margin-bottom:20px}.static-block blockquote li:last-child{margin:0}.static-block .photo-container{margin:40px 0 20px}.static-block table{margin-bottom:40px}.static-block td,.static-block th{padding:5px 10px;line-height:1.6em;border-bottom:1px solid #eee}.static-block th{text-align:left}.advertise-block{width:940px;margin:20px auto 0}.advertise-block img.mediakit{width:940px;margin-bottom:16px}section#signup{width:460px;margin:40px auto;font-size:13px}.modal section#signup{margin:40px auto 0}section#signup h2{font-size:36px;margin-bottom:10px}section#signup p.lead{margin-bottom:20px;line-height:1.6em;color:#999}section#signup .social-signup{padding-bottom:20px;border-bottom:1px solid #eee;overflow:hidden;margin-bottom:20px}a.btn-connect-option{display:block;font-size:20px;font-weight:700;background-color:#2d72d9;color:#fff;width:145px;height:30px;line-height:28px;text-align:center;padding:15px 15px 15px 60px;border-radius:3px;float:left}a.btn-connect-option.facebook{background:#3b5998 url(../img/btn-connect-option.png) no-repeat;margin-right:20px}a.btn-connect-option.google-plus{background:#dc4d28 url(../img/btn-connect-option.png) no-repeat 0 -60px}a.btn-connect-option.twitter{background-color:#00aced}section#signup p.alternative{color:#999;margin-bottom:10px}section#signup p.alternative a{font-weight:700}section#signup #login-email p.lead{margin-bottom:10px}section#signup #login-email a.forgot-password{display:inline-block;color:#999;float:right;font-size:13px;line-height:40px}section.modal.download{background-color:transparent;color:#999;text-align:center;box-shadow:none;top:100px}section.modal.download h2{font-size:36px;color:#fff;margin-bottom:10px}section.modal.download .btn-download{display:block;max-width:160px;margin:0 auto 20px;line-height:22px;height:24px;padding:18px 0 18px 60px;border:0;font-size:20px}section.modal.download .btn-download.ios{background:#2aa9de url(../img/btn-icon-download.png) no-repeat}section.modal.download .btn-download.ios:hover{background-color:#47b5e3}section.modal.download .btn-download.ios:active{background-color:#1d8bb8}section.modal.download .btn-download.android{background:#44db5e url(../img/btn-icon-download.png) 0 -60px no-repeat}section.modal.download .btn-download.android:hover{background-color:#60e077}section.modal.download .btn-download.android:active{background-color:#26c642}section.modal.download a.link{color:#999}section.modal.download a.link:hover{color:#fff}section.modal.download a.link:active{color:#777}section#delete-account{width:460px;margin:100px auto;font-size:13px}section#delete-account h2{font-size:36px;margin-bottom:5px}section#delete-account p.lead{margin-bottom:20px;line-height:1.6em;color:#999}section#delete-account .btn-container a.btn,section#delete-account .btn-container a.thick{text-align:center;display:block;width:220px}section#delete-account .btn-container a.thick{font-size:12px;color:#999;display:inline-block;width:auto;padding:10px 0}form#delete-account{padding-top:40px;margin-top:40px;border-top:1px solid #eee}form#delete-account .field{margin-top:0}form#delete-account .btn-container{padding:0}section#social-transfer{width:600px;margin:100px auto;font-size:13px}section#social-transfer h2{font-size:26px;margin-bottom:5px}section#social-transfer p.lead{margin-bottom:20px;line-height:1.6em;color:#999}section#social-transfer .btn-container .btn,section#social-transfer .btn-container a.thick{text-align:center;display:block;width:220px}section#social-transfer .btn-container a.thick{font-size:12px;color:#999;display:inline-block;width:auto;padding:10px 0}.modal.idle{width:700px;margin-left:-350px}section#idle{width:620px;margin:32px auto 40px;font-size:13px}section#idle h2{font-size:24px;margin-bottom:5px}section#idle p.lead{line-height:1.6em;margin-bottom:20px;color:#999}section#idle .content{overflow:hidden;width:100%}section#idle .content .lhs,section#idle .content .rhs{width:300px;height:250px;float:left}section#idle .content .rhs{float:right}section#idle .ticker{border:1px solid #eee}section#idle .ticker>h3{font-size:12px;color:#999;text-transform:uppercase;height:28px;line-height:30px;padding:0 15px}section#idle .ticker ul{padding:0;border:0}section#idle .ticker a{height:39px}section#idle .ticker .thumbnail{width:53px;height:39px;box-sizing:border-box;overflow:hidden}section#idle .ticker .thumbnail img{height:39px;border:0}section#idle .ticker .info{margin-left:63px}section#idle .ticker .info h3{max-height:32px;overflow:hidden}section.footer{font-size:12px;background-color:#fff;margin-bottom:30px;margin-bottom:0}section.footer p.static{width:300px;color:#999;margin-top:10px}section.footer a{color:#999}section.footer p.static a:hover{text-decoration:underline}ul.footer-more{list-style-type:none;width:110px;box-shadow:0 3px 5px rgba(0,0,0,.3);position:absolute;bottom:20px;right:0}ul.footer-more a{display:block;line-height:18px;padding:5px 10px;background-color:#fff}.buttons-area,a.back-to-top{overflow:hidden}a.back-to-top{width:40px;height:40px;text-indent:-999px;text-align:center;border:1px solid #ddd;background:#fff url(../img/back-to-top.png) no-repeat;color:#999;border-radius:3px;position:fixed;right:20px;bottom:-100px;-webkit-transition:opacity .3s ease-in-out 0,bottom .3s ease-in-out .5s}a.back-to-top.show{bottom:20px}@media only screen and (max-width:1080px){a.back-to-top{opacity:0;bottom:-100px}}a.back-to-top:hover{border-color:#aaa}a.back-to-top:active{background-color:#fafafa}.buttons-area .keyboard-hint{height:42px;float:left}.buttons-area .keyboard-hint ul{list-style-type:none}.buttons-area .keyboard-hint li:first-child{margin-bottom:2px}.buttons-area .keyboard-hint li a{display:block;height:20px;width:50px;line-height:20px;padding-left:10px;font-size:10px;font-weight:700;color:#555;position:relative}.buttons-area .keyboard-hint strong{display:block;position:absolute;left:0;top:0;width:20px;height:18px;background-color:#fff;border-radius:3px;border:1px solid #ddd;font-weight:400;text-align:center;line-height:18px;font-size:9px;text-transform:uppercase}.buttons-area .keyboard-hint li a:hover strong{border-color:#aaa}.buttons-area .keyboard-hint li a:active strong{background-color:#fafafa}.buttons-area .keyboard-hint span.next,.buttons-area .keyboard-hint span.prev{display:inline-block;padding-left:20px}footer{padding:30px 0 60px;color:#999}footer .width-limit{width:940px;margin:0 auto}footer .primary,footer .secondary{margin-bottom:10px}footer .primary ul,footer .secondary ul{list-style-type:none;text-align:center}footer .primary li{display:inline-block;margin:0 15px}footer .secondary li{display:inline-block;margin:0 5px;color:#999}footer .primary a{color:#999}footer .secondary a{color:#999;font-size:12px}footer .naughty-box{width:940px;height:130px;background-color:#f4f4f4;margin:0 auto 20px;overflow:hidden}footer .naughty-box .image-container{width:728px;height:90px;margin:20px auto 0;background-color:#d4d4d4}footer .naughty-box img{display:block}footer .naughty-box p.advertise-here{width:728px;margin:0 auto;text-align:right;line-height:20px;font-size:12px}.outbound{background-color:#fff;width:400px;font-size:15px;padding:30px;margin:60px auto}.outbound h3{font-size:28px;margin-bottom:20px}.outbound p{margin:0 0 10px;line-height:1.6em}.outbound p.url{background-color:#f5f5f5;line-height:20px;padding:10px;width:380px;text-overflow:ellipsis;overflow:hidden;text-align:center;font-weight:700}.outbound .button-container{margin-top:30px}.outbound .button-container a.btn{margin-right:20px}a.userbadge,span.userbadge{display:inline-block;height:12px;width:25px;background-repeat:no-repeat;background-size:cover;text-indent:-999px;overflow:hidden}a.userbadge.size-24,span.userbadge.size-24{height:24px;width:50px}a.userbadge.pro,span.userbadge.pro{background-image:url(../img/pro-badge-24.png)}.clearfix{clear:both}.no-scroll{overflow:hidden;height:100%}.absolute{position:absolute!important}.fixed{position:fixed!important}.hide{display:none!important}.left{float:left!important}.right{float:right!important}.cursor-pointer{cursor:pointer!important}.post-afterbar-a.in-post-bot.full-width .three-btn .btn-share{width:236px;min-width:230px;border:0}.btn-subscribe.on{background-color:#0087f7!important}.btn-subscribe{background-color:#000!important}.btn-subscribe .display-name{text-transform:uppercase}.post-afterbar-a.in-post-bot.full-width .share.three-btn li{margin:0 10px 0 0}.post-afterbar-a.in-post-bot.full-width .share.three-btn li:last-child{margin:0}.badge-sticky-button{background-color:rgba(0,0,0,.9);right:70px;bottom:0;height:2em;line-height:2em;position:fixed;padding:0 10px;z-index:150}.profile-action h4{margin-bottom:10px;font-size:16px}.profile-action h4 a:hover{text-decoration:underline}.sidebar-milestone{margin-top:20px;height:40px;opacity:0}.sidebar-milestone a{color:#000;text-decoration:none}.sidebar-milestone .avatar-container{position:absolute;overflow:hidden;width:40px;height:40px;padding:0}.sidebar-milestone .avatar-container img{border-radius:3px;position:absolute;display:block;width:40px;height:40px;border:0}.sidebar-milestone .content{min-height:40px;margin:10px 10px 0 60px}.sidebar-milestone p.message{line-height:1.3em}.sidebar-milestone p.description{font-size:11px;color:#999;line-height:16px;margin-top:2px;vertical-align:top}article.post-page .post-container a{display:inline;cursor:default}#recaptcha_widget{border:1px solid #eee;font:13px Helvetica Neue,Arial,Helvetica,Geneva,sans-serif;padding:19px}#recaptcha_image{border:1px solid #fff;margin:0 auto 2px;display:block;box-sizing:border-box}#recaptcha_image img{width:298px;height:55px}input#recaptcha_response_field{outline:0;border:1px solid #ddd;line-height:20px;padding:8px;margin:5px 0 0;display:block;width:403px;font-size:14px;font-weight:700;border-radius:3px}span.recaptcha_only_if_audio,span.recaptcha_only_if_image{color:#999;font-size:12px;font-weight:700}.recaptcha_function{margin-bottom:20px;text-align:right;font-size:10px;color:#aaa}.recaptcha_function a{color:#ccc;text-decoration:none}.recaptcha_function div{display:inline}a.give-feedback{margin-top:-110px;right:-75px}.badge-sticky-button{background-color:rgba(0,0,0,.9);right:70px;bottom:0;height:2em;line-height:2em;position:fixed;padding:0 10px;z-index:150;_position:absolute;_top:expression(eval(document.documentElement.scrollTop+ (document.documentElement.clientHeight-this.offsetHeight)))}.sidebar-milestone{margin-top:20px;height:40px;opacity:0}.sidebar-milestone a{color:#000;text-decoration:none}.sidebar-milestone .avatar-container{position:absolute;overflow:hidden;width:40px;height:40px;padding:0}.sidebar-milestone .avatar-container img{border-radius:3px;position:absolute;display:block;width:40px;height:40px;border:0}.sidebar-milestone .content{min-height:40px;margin:10px 10px 0 60px}.sidebar-milestone p.message{line-height:1.3em}.sidebar-milestone p.description{font-size:11px;color:#999;line-height:16px;margin-top:2px;vertical-align:top}article.post-page .post-container a{display:inline;cursor:default}section.modal.upload .field.post-info textarea{width:320px}section.modal.upload .field.post-info .count.warn{color:#c00}.post-info .preview{overflow:hidden}section.modal.upload .other-source .wrapper.wider{width:100%}.post-info .preview video{width:96px;height:96px}section#contact-form{width:460px;margin:40px auto;font-size:13px}section#contact-form a.upload-selected{color:#000;cursor:default}section#contact-form h2{font-size:36px;margin-bottom:5px}section#contact-form .field{margin:0 0 30px}section#contact-form textarea{width:440px;height:50px;line-height:1.6em}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 16323
        },
        "cache": {},
        "timings": {
          "blocked": 0.522000016644597,
          "dns": -1,
          "connect": -1,
          "send": 0.10400009341537997,
          "wait": 697.015999816358,
          "receive": 51945.007000118494,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.227Z",
        "time": 930.388999870047,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/9gag.com/index.html",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:51 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd953-1dcdd\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 448,
            "mimeType": "text/html",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 448
        },
        "cache": {},
        "timings": {
          "blocked": 0.557999825105071,
          "dns": -1,
          "connect": -1,
          "send": 0.07100007496774208,
          "wait": 561.9459999725221,
          "receive": 367.813999997452,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.227Z",
        "time": 26588.05699995719,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aQ96Erz_460s_v1.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 11:27:27 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588c801f-920b\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "37387"
            }
          ],
          "cookies": [],
          "content": {
            "size": 37387,
            "mimeType": "image/jpeg",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 37526
        },
        "cache": {},
        "timings": {
          "blocked": 0.450999941676855,
          "dns": -1,
          "connect": -1,
          "send": 0.047000125050545016,
          "wait": 617.1800000593066,
          "receive": 25970.378999831155,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.319Z",
        "time": 53526.003000093624,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/avG2EmX_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 19:07:16 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588cebe4-13f15\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "81685"
            }
          ],
          "cookies": [],
          "content": {
            "size": 81685,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 83155
        },
        "cache": {},
        "timings": {
          "blocked": 1.59600004553795,
          "dns": -1,
          "connect": -1,
          "send": 0.09099999442696016,
          "wait": 1000.6939999293551,
          "receive": 52523.622000124305,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.320Z",
        "time": 27551.001999992877,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/ad7yWLj_460c276.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sun, 29 Jan 2017 11:46:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588dd60f-5b6d\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "23405"
            }
          ],
          "cookies": [],
          "content": {
            "size": 23405,
            "mimeType": "image/jpeg",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 24875
        },
        "cache": {},
        "timings": {
          "blocked": 1.39399990439415,
          "dns": -1,
          "connect": -1,
          "send": 0.04500010982156,
          "wait": 1016.0789999645243,
          "receive": 26533.484000014138,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.320Z",
        "time": 21362.128000007942,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aRm6zAM_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 18:31:15 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588ce373-4274\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "17012"
            }
          ],
          "cookies": [],
          "content": {
            "size": 17012,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 17151
        },
        "cache": {},
        "timings": {
          "blocked": 1.25600001774728,
          "dns": -1,
          "connect": -1,
          "send": 0.04400010220706996,
          "wait": 1163.1090000737456,
          "receive": 20197.718999814242,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.320Z",
        "time": 46420.77300022356,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aPB68Zg_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 18:47:10 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588ce72e-b166\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "45414"
            }
          ],
          "cookies": [],
          "content": {
            "size": 45414,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 46872
        },
        "cache": {},
        "timings": {
          "blocked": 1.09100015833974,
          "dns": -1,
          "connect": -1,
          "send": 0.047999899834390014,
          "wait": 1475.6539999507359,
          "receive": 44943.98000021465,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.320Z",
        "time": 39922.02199995518,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aVqjxxO_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 09:27:23 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588c63fb-8fdb\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "36827"
            }
          ],
          "cookies": [],
          "content": {
            "size": 36827,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 38297
        },
        "cache": {},
        "timings": {
          "blocked": 1.05500011704862,
          "dns": -1,
          "connect": -1,
          "send": 0.05499995313584982,
          "wait": 1163.2419999223155,
          "receive": 38757.66999996268,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.514Z",
        "time": 19865.59099983424,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/a7rvGRL_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sun, 29 Jan 2017 07:45:49 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588d9dad-3ce6\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "15590"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 15590,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 15730
        },
        "cache": {},
        "timings": {
          "blocked": 0.467999838292599,
          "dns": -1,
          "connect": -1,
          "send": 0.08200015872716898,
          "wait": 1516.1770000122501,
          "receive": 18348.86399982497,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.532Z",
        "time": 62372.17599991709,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aOzoEov_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sun, 29 Jan 2017 13:56:40 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588df498-2bd3a\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "179514"
            }
          ],
          "cookies": [],
          "content": {
            "size": 179514,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 180986
        },
        "cache": {},
        "timings": {
          "blocked": 0.831999816000462,
          "dns": -1,
          "connect": -1,
          "send": 0.09500002488493897,
          "wait": 1274.4220001623046,
          "receive": 61096.8269999139,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.532Z",
        "time": 54118.79500001669,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/a3qvpW3_460s.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sun, 29 Jan 2017 09:12:32 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588db200-f6d5\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "63189"
            }
          ],
          "cookies": [],
          "content": {
            "size": 63189,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 64652
        },
        "cache": {},
        "timings": {
          "blocked": 0.715000089257956,
          "dns": -1,
          "connect": -1,
          "send": 0.07399986498057798,
          "wait": 1712.9900001455114,
          "receive": 52405.01599991694,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.915Z",
        "time": 39383.91300011426,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481536354.227_YsUzaZ_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 09:52:48 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e7370-8ec0\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "36544"
            }
          ],
          "cookies": [],
          "content": {
            "size": 36544,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 38014
        },
        "cache": {},
        "timings": {
          "blocked": 3.20100015960634,
          "dns": -1,
          "connect": -1,
          "send": 0.09200000204145997,
          "wait": 1461.0079999547422,
          "receive": 37919.61199999787,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 38446.05999998748,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1484906556.1775_yhaSE5_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 23 Jan 2017 02:55:45 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588570b1-8af0\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "35568"
            }
          ],
          "cookies": [],
          "content": {
            "size": 35568,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 35707
        },
        "cache": {},
        "timings": {
          "blocked": 3.14099993556738,
          "dns": -1,
          "connect": -1,
          "send": 0.06600003689527023,
          "wait": 1460.5590000282973,
          "receive": 36982.29399998672,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 53112.220000009984,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1484897957.5863_rUSaGe_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 23 Jan 2017 02:55:40 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588570ac-df5d\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "57181"
            }
          ],
          "cookies": [],
          "content": {
            "size": 57181,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 57320
        },
        "cache": {},
        "timings": {
          "blocked": 3.80899989977479,
          "dns": -1,
          "connect": -1,
          "send": 0.06800005212426008,
          "wait": 1423.7979999743409,
          "receive": 51684.545000083745,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 53512.27999990806,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1480492149.9937_SuGene_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Wed, 30 Nov 2016 07:49:15 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583e847b-f01d\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "61469"
            }
          ],
          "cookies": [],
          "content": {
            "size": 61469,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 61608
        },
        "cache": {},
        "timings": {
          "blocked": 3.79400001838803,
          "dns": -1,
          "connect": -1,
          "send": 0.03699981607497005,
          "wait": 1460.141000105067,
          "receive": 52048.30799996853,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 19665.525999851525,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1449833861.7814_BetU7e_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 05:04:41 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583674e9-34fb\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "13563"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13563,
            "mimeType": "image/jpeg",
            "text": "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SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSySSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSVQySSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSL/ySSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSaf9SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSC/wDgkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkke//AP5JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJDP/8A/SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSD/AP8A3JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJv/AP8Axkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk//AP8A2SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSj//AP8AvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJIB/8A/wD/AJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJIN//AP8A/akkkkkkkkkkkkkkkkkkkkkkkkkkkkkklv8A/wD/AP8ApJJJJJJJJJJJJJJJJJJJJJJJJJJJJJIV/wD/AP8A+xJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJt/8A/wD/AP8ASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSd//wD/AP8A/SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSX/wD/AP8A/wD+kkkkkkkkkkkkkkkkkkkkkkkkkkkkkv8A/wD/AP8A/wDqSSSSSSSSSSSSSSSSSSSSSSSSSSSST7//AP8A/wD/APskkkkkkkkkkkkkkkkkkkkkkkkkkkkr/wD/AP8A/wD/APSSSSSSSSSSSSSSSSSSSSSSSSSSSSRf/wD/AP8A/wD/AOZJJJJJJJJJJJJJJJJJJJJJJJJJJJNP/wD/AP8A/wD/AJkkkkkkkkkkkkkkkkkkkkkkkkkkkkF//wD/AP8A/wD/AOySSSSSSSSS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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 13702
        },
        "cache": {},
        "timings": {
          "blocked": 3.74699989333749,
          "dns": -1,
          "connect": -1,
          "send": 0.03300001844764022,
          "wait": 1872.5430001504749,
          "receive": 17789.202999789264,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 53111.97099997662,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481538540.3927_umEzEP_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 10:29:13 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e7bf9-e690\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "59024"
            }
          ],
          "cookies": [],
          "content": {
            "size": 59024,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 59163
        },
        "cache": {},
        "timings": {
          "blocked": 3.64200002513826,
          "dns": -1,
          "connect": -1,
          "send": 0.03300001844764022,
          "wait": 1978.513999842104,
          "receive": 51129.78200009093,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.916Z",
        "time": 50864.94499980472,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541097.3956_HanUhe_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 11:11:42 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e85ee-d48b\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "54411"
            }
          ],
          "cookies": [],
          "content": {
            "size": 54411,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 54550
        },
        "cache": {},
        "timings": {
          "blocked": 3.519999794662,
          "dns": -1,
          "connect": -1,
          "send": 0.03400002606213004,
          "wait": 1657.8699999954558,
          "receive": 49203.52099998854,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 58607.06999991089,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481537858.9056_aZAvYJ_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 10:17:42 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e7946-13ec5\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "81605"
            }
          ],
          "cookies": [],
          "content": {
            "size": 81605,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 81745
        },
        "cache": {},
        "timings": {
          "blocked": 3.43000004068017,
          "dns": -1,
          "connect": -1,
          "send": 0.03200001083313975,
          "wait": 1897.9229999240467,
          "receive": 56705.68499993533,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 39694.448000052944,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1465265912.1472_aDurYD_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 05:04:38 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583674e6-8afb\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "35579"
            }
          ],
          "cookies": [],
          "content": {
            "size": 35579,
            "mimeType": "image/jpeg",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 35719
        },
        "cache": {},
        "timings": {
          "blocked": 3.33800003863871,
          "dns": -1,
          "connect": -1,
          "send": 0.03100000321864993,
          "wait": 2084.9999999627425,
          "receive": 37606.07900004835,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 50003.15100001171,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1482203076.0883_u8yQU9_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Tue, 20 Dec 2016 03:04:47 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58589fcf-c546\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "50502"
            }
          ],
          "cookies": [],
          "content": {
            "size": 50502,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 53296
        },
        "cache": {},
        "timings": {
          "blocked": 3.27500002458692,
          "dns": -1,
          "connect": -1,
          "send": 0.02599996514617997,
          "wait": 2320.636000018567,
          "receive": 47679.21400000341,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 15723.750000121072,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1449833759.8316_zUNATY_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 05:04:39 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583674e7-290b\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "10507"
            }
          ],
          "cookies": [],
          "content": {
            "size": 10507,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 10647
        },
        "cache": {},
        "timings": {
          "blocked": 3.20599996484816,
          "dns": -1,
          "connect": -1,
          "send": 0.03100000321864993,
          "wait": 2475.211000069973,
          "receive": 13245.302000083033,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 35345.06299998611,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1465779419.894_jErUja_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 05:04:39 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583674e7-70ba\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "content-length",
              "value": "28858"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 28858,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 28998
        },
        "cache": {},
        "timings": {
          "blocked": 3.13700013794005,
          "dns": -1,
          "connect": -1,
          "send": 0.03200001083313975,
          "wait": 2073.3849999960466,
          "receive": 33268.508999841295,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.917Z",
        "time": 56758.142000064254,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481525996.4198_aXYzE6_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 06:59:59 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e4aef-1175d\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "71517"
            }
          ],
          "cookies": [],
          "content": {
            "size": 71517,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 74312
        },
        "cache": {},
        "timings": {
          "blocked": 3.01000010222197,
          "dns": -1,
          "connect": -1,
          "send": 0.031000003218650374,
          "wait": 2319.9940000195093,
          "receive": 54435.10699993931,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.918Z",
        "time": 48571.539000142366,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1472001038.4195_uVUzYN_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 05:04:40 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"583674e8-bf39\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "48953"
            }
          ],
          "cookies": [],
          "content": {
            "size": 48953,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 49092
        },
        "cache": {},
        "timings": {
          "blocked": 2.9430000577122,
          "dns": -1,
          "connect": -1,
          "send": 0.03100000321864993,
          "wait": 2383.3050001412594,
          "receive": 46185.25999994017,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.918Z",
        "time": 53134.03399987146,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541202.9406_avy9Uq_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 11:13:34 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e865e-dddc\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "56796"
            }
          ],
          "cookies": [],
          "content": {
            "size": 56796,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 56935
        },
        "cache": {},
        "timings": {
          "blocked": 2.8800000436604,
          "dns": -1,
          "connect": -1,
          "send": 0.03300001844763978,
          "wait": 1871.9589998945619,
          "receive": 51259.161999914795,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.975Z",
        "time": 47102.89900004864,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1464856777.129_sAsYpE_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 24 Nov 2016 04:33:47 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58366dab-b651\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "46673"
            }
          ],
          "cookies": [],
          "content": {
            "size": 46673,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 48144
        },
        "cache": {},
        "timings": {
          "blocked": 0.715000089257956,
          "dns": -1,
          "connect": -1,
          "send": 0.07000006735324804,
          "wait": 2486.171999946239,
          "receive": 44615.94199994579,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.975Z",
        "time": 42901.81900002062,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481540748.1656_aVesEZ_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 11:06:01 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e8499-97ca\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "38858"
            }
          ],
          "cookies": [],
          "content": {
            "size": 38858,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 40315
        },
        "cache": {},
        "timings": {
          "blocked": 0.584000023081899,
          "dns": -1,
          "connect": -1,
          "send": 0.02499995753168993,
          "wait": 2834.8220000043466,
          "receive": 40066.388000035666,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:10.975Z",
        "time": 58080.068999901414,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/miscmedia-9gag-fun.9cache.com/images/thumbnail-facebook/1481541267.9381_qa8YWa_n.jpg",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Mon, 12 Dec 2016 11:14:36 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"584e869c-1304d\""
            },
            {
              "name": "content-type",
              "value": "image/jpeg"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "77901"
            }
          ],
          "cookies": [],
          "content": {
            "size": 77901,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 78041
        },
        "cache": {},
        "timings": {
          "blocked": 0.574999954551458,
          "dns": -1,
          "connect": -1,
          "send": 0.023999949917198005,
          "wait": 2419.8460001498415,
          "receive": 55659.62399984711,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:16:19.214Z",
        "time": 88057.28400009684,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/js/gag.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:51 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b9b-11492b\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1132843,
            "mimeType": "application/javascript",
            "text": "var GAG=function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return t[r].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(module,exports,__webpack_require__){eval(\"__webpack_require__(3);\\n__webpack_require__(253);\\n__webpack_require__(254);\\n__webpack_require__(872);\\n__webpack_require__(426);\\n__webpack_require__(132);\\n__webpack_require__(871);\\n__webpack_require__(406);\\n__webpack_require__(953);\\n__webpack_require__(781);\\n__webpack_require__(780);\\n__webpack_require__(778);\\nmodule.exports = __webpack_require__(863);\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// multi web6/js/gag.js\\n// module id = 0\\n// module chunks = 1\\n//# sourceURL=webpack:///multi_web6/js/gag.js?\")},,,function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"$\"] = __webpack_require__(64);\\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery/dist/jquery.js\\n// module id = 3\\n// module chunks = 0 1 2 3 5\\n//# sourceURL=webpack:///./~/jquery/dist/jquery.js?')},,,,,,,function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar LogUtils = function () {\\n    function LogUtils() {\\n        _classCallCheck(this, LogUtils);\\n    }\\n\\n    _createClass(LogUtils, null, [{\\n        key: 'log',\\n        value: function log(data) {\\n            if (true) return;\\n            console.log(data);\\n        }\\n    }, {\\n        key: 'logWithData',\\n        value: function logWithData(log, data) {\\n            if (true) return;\\n            console.log(log);\\n            console.dir(data);\\n        }\\n    }]);\\n\\n    return LogUtils;\\n}();\\n\\nmodule.exports = LogUtils;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/core/src/js/utils/LogUtils.js\\n// module id = 10\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./static/main/core/src/js/utils/LogUtils.js?\")},,function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _object = __webpack_require__(422);\\n\\nvar _object2 = _interopRequireDefault(_object);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar BaseController = function BaseController() {\\n    //this._dependencies = [];\\n    this._base = this;\\n};\\n\\nBaseController.prototype = new _object2.default();\\n\\nBaseController.prototype.getBase = function () {\\n    return this._base;\\n};\\n\\nBaseController.prototype.init = function () {}\\n// this.checkDependencies(); \\n\\n\\n/*\\nBaseController.prototype.depend = function(dep)\\n{\\n    this._dependencies.push(dep);\\n}\\n\\nBaseController.prototype.checkDependencies = function()\\n{\\n    for (var i=0; i<this._dependencies.length; i++) {\\n    }\\n}\\n*/\\n;BaseController.prototype.onLoad = function () {};\\n\\nBaseController.prototype.onResize = function () {};\\n\\nBaseController.prototype.onScroll = function () {};\\n\\nBaseController.prototype.onDomReady = function () {};\\n\\nmodule.exports = BaseController;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/base.js\\n// module id = 12\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/base.js?\")},,,,,,function(module,exports){eval(\"'use strict';\\n\\nvar Configs = {\\n\\n    _configs: {},\\n    _uuid: '',\\n\\n    init: function init() {\\n        this._uuid = this.generateUuid();\\n    },\\n\\n    load: function load(configs) {\\n        this._configs = configs ? configs : {};\\n    },\\n\\n    get: function get(key) {\\n        var keys = key.split('.');\\n        var cfg = this._configs;\\n        var value = '';\\n\\n        while (cfg && keys.length > 0) {\\n            cfg = cfg[keys.shift()];\\n            value = cfg;\\n        }\\n        return value;\\n    },\\n\\n    Facebook: {\\n\\n        init: function init() {},\\n\\n        getAppId: function getAppId() {\\n            return Configs.get('configs.facebook.app_id');\\n        }\\n    },\\n\\n    getUuid: function getUuid() {\\n        return this._uuid;\\n    },\\n\\n    generateUuid: function generateUuid() {\\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\n            var r = Math.random() * 16 | 0,\\n                v = c === 'x' ? r : r & 0x3 | 0x8;\\n            return v.toString(16);\\n        });\\n    }\\n};\\n\\nmodule.exports = Configs;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/configs.js\\n// module id = 18\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/configs.js?\")},function(module,exports){eval(\"/**\\n * Checks if `value` is classified as an `Array` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\\n * @example\\n *\\n * _.isArray([1, 2, 3]);\\n * // => true\\n *\\n * _.isArray(document.body.children);\\n * // => false\\n *\\n * _.isArray('abc');\\n * // => false\\n *\\n * _.isArray(_.noop);\\n * // => false\\n */\\nvar isArray = Array.isArray;\\n\\nmodule.exports = isArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isArray.js\\n// module id = 19\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isArray.js?\")},,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Configs) {'use strict';\\n\\nvar Page = {\\n    _domain: '9gag.com',\\n    _backUrl: '',\\n    _pageKey: '',\\n\\n    init: function init() {\\n        this._domain = Configs.get('page.domain');\\n        this._backUrl = Configs.get('page.back_url');\\n        this._pageKey = Configs.get('page.page_key'); // use as track key\\n    },\\n\\n    getProtocol: function getProtocol() {\\n        return 'https:' == document.location.protocol ? 'https' : 'http';\\n    },\\n\\n    getDomain: function getDomain() {\\n        return this._domain;\\n    },\\n\\n    getCookieOptions: function getCookieOptions() {\\n        return { path: \\\"/\\\", expires: 365 * 20 };\\n    },\\n\\n    getPageKey: function getPageKey() {\\n        return this._pageKey;\\n    },\\n\\n    load: function load(uri) {\\n        window.location = uri;\\n    },\\n\\n    preloadImage: function preloadImage(imageUrl) {\\n        var img = new Image();\\n        img.src = imageUrl;\\n        var tmpDiv = document.getElementById('tmp-img');\\n        if (tmpDiv) {\\n            tmpDiv.appendChild(img);\\n        }\\n    },\\n\\n    getBackUrl: function getBackUrl() {\\n        return this._backUrl;\\n    },\\n\\n    isPostPage: function isPostPage() {\\n        return this._pageKey == 'Post';\\n    },\\n    isProfilePage: function isProfilePage() {\\n        return this._pageKey.indexOf('Profile') == 0;\\n    },\\n    isUploadPage: function isUploadPage() {\\n        return this._pageKey == 'Submit';\\n    },\\n    isContactPage: function isContactPage() {\\n        return this._pageKey == 'Contact';\\n    },\\n    isWorldPage: function isWorldPage() {\\n        return this._pageKey == 'World';\\n    },\\n    isAppsPage: function isAppsPage() {\\n        return this._pageKey == 'Apps';\\n    },\\n    isNsfwPostPage: function isNsfwPostPage() {\\n        return this.isPostPage() && Configs.get('page.is_nsfw_post');\\n    },\\n    isFreshPostPage: function isFreshPostPage() {\\n        return this.isPostPage() && Configs.get('page.is_fresh_post');\\n    },\\n    isHouseAdPostPage: function isHouseAdPostPage() {\\n        return this.isPostPage() && Configs.get('page.is_house_ad_post');\\n    },\\n    isFreshOrSectionFreshPage: function isFreshOrSectionFreshPage() {\\n        return this.getPageKey().toLowerCase().indexOf('fresh') != -1;\\n    }\\n};\\n\\nmodule.exports = Page;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/page.js\\n// module id = 23\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/page.js?\")},,,function(module,exports){eval('\"use strict\";\\n\\nvar ModuleFactory = {};\\n\\nmodule.exports = ModuleFactory;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/module-factory.js\\n// module id = 26\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/module-factory.js?')},function(module,exports,__webpack_require__){eval(\"var freeGlobal = __webpack_require__(147);\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n\\n/** Used as a reference to the global object. */\\nvar root = freeGlobal || freeSelf || Function('return this')();\\n\\nmodule.exports = root;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_root.js\\n// module id = 27\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_root.js?\")},,,function(module,exports,__webpack_require__){eval(\"var baseIsNative = __webpack_require__(275),\\n    getValue = __webpack_require__(301);\\n\\n/**\\n * Gets the native function at `key` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {string} key The key of the method to get.\\n * @returns {*} Returns the function if it's native, else `undefined`.\\n */\\nfunction getNative(object, key) {\\n  var value = getValue(object, key);\\n  return baseIsNative(value) ? value : undefined;\\n}\\n\\nmodule.exports = getNative;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getNative.js\\n// module id = 30\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getNative.js?\")},,,,,,,,function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar LogUtils = {\\n    log: function log(data) {\\n        if (true) return;\\n        console.log(data);\\n    },\\n\\n    logWithData: function logWithData(log, data) {\\n        if (true) return;\\n        console.log(log);\\n        console.dir(data);\\n    }\\n};\\n\\nmodule.exports = LogUtils;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/utils/LogUtils.js\\n// module id = 38\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/utils/LogUtils.js?\")},,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Piwik) {'use strict';\\n\\nvar _GA_real = __webpack_require__(861);\\n\\nvar _GA_real2 = _interopRequireDefault(_GA_real);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar GA = {\\n    track: function track(category, action, label, value) {\\n        var customVariables = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\\n\\n        _GA_real2.default.track(category, action, label);\\n        Piwik.trackEvent(category, action, label, value, customVariables);\\n    }\\n}; /**\\n    * Wrapper function to send events to both GA and Piwik\\n    */\\n\\n\\nmodule.exports = GA;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(116)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/GA.js\\n// module id = 40\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/GA.js?\")},function(module,exports){eval(\"/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\nmodule.exports = isObjectLike;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isObjectLike.js\\n// module id = 41\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isObjectLike.js?\")},,,,,,,,function(module,exports){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Base = function () {\\n    function Base() {\\n        _classCallCheck(this, Base);\\n    }\\n\\n    _createClass(Base, [{\\n        key: 'getAdContainerId',\\n        value: function getAdContainerId(adPlacement, position) {\\n            var adPlacementName = adPlacement.name;\\n            return position == 0 ? 'jsid-ad-container-' + adPlacementName : 'jsid-ad-container-' + adPlacementName + '-' + position;\\n        }\\n    }, {\\n        key: 'getAdContainerDimension',\\n        value: function getAdContainerDimension(adPlacement) {\\n            var width = 300;\\n            var height = 250;\\n            if (adPlacement.rule.width) {\\n                width = parseInt(adPlacement.rule.width);\\n            }\\n\\n            if (adPlacement.rule.height) {\\n                height = parseInt(adPlacement.rule.height);\\n            }\\n\\n            // to be deprecated after we set width & height in rule\\n            if (adPlacement.width) {\\n                width = parseInt(adPlacement.width);\\n            }\\n\\n            if (adPlacement.height) {\\n                height = parseInt(adPlacement.height);\\n            }\\n\\n            return {\\n                width: width,\\n                height: height\\n            };\\n        }\\n    }, {\\n        key: 'isJsonString',\\n        value: function isJsonString(str) {\\n            try {\\n                JSON.parse(str);\\n            } catch (e) {\\n                return false;\\n            }\\n            return true;\\n        }\\n    }]);\\n\\n    return Base;\\n}();\\n\\nmodule.exports = Base;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/Base.js\\n// module id = 49\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/Base.js?\")},,function(module,exports,__webpack_require__){eval(\"var root = __webpack_require__(27);\\n\\n/** Built-in value references. */\\nvar Symbol = root.Symbol;\\n\\nmodule.exports = Symbol;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Symbol.js\\n// module id = 51\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Symbol.js?\")},function(module,exports,__webpack_require__){eval(\"var Symbol = __webpack_require__(51),\\n    getRawTag = __webpack_require__(298),\\n    objectToString = __webpack_require__(326);\\n\\n/** `Object#toString` result references. */\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n\\n/** Built-in value references. */\\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\\n\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n  return (symToStringTag && symToStringTag in Object(value))\\n    ? getRawTag(value)\\n    : objectToString(value);\\n}\\n\\nmodule.exports = baseGetTag;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseGetTag.js\\n// module id = 52\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseGetTag.js?\")},,,,,,,,,,,,function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"jQuery\"] = __webpack_require__(65);\\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/expose-loader?jQuery!./~/jquery/dist/jquery.js\\n// module id = 64\\n// module chunks = 0 1 2 3 5\\n//# sourceURL=webpack:///./~/jquery/dist/jquery.js?./~/expose-loader?jQuery')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * jQuery JavaScript Library v2.2.4\\n * http://jquery.com/\\n *\\n * Includes Sizzle.js\\n * http://sizzlejs.com/\\n *\\n * Copyright jQuery Foundation and other contributors\\n * Released under the MIT license\\n * http://jquery.org/license\\n *\\n * Date: 2016-05-20T17:23Z\\n */\\n\\n(function( global, factory ) {\\n\\n\\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\\n\\t\\t// For CommonJS and CommonJS-like environments where a proper `window`\\n\\t\\t// is present, execute the factory and get jQuery.\\n\\t\\t// For environments that do not have a `window` with a `document`\\n\\t\\t// (such as Node.js), expose a factory as module.exports.\\n\\t\\t// This accentuates the need for the creation of a real `window`.\\n\\t\\t// e.g. var jQuery = require(\"jquery\")(window);\\n\\t\\t// See ticket #14549 for more info.\\n\\t\\tmodule.exports = global.document ?\\n\\t\\t\\tfactory( global, true ) :\\n\\t\\t\\tfunction( w ) {\\n\\t\\t\\t\\tif ( !w.document ) {\\n\\t\\t\\t\\t\\tthrow new Error( \"jQuery requires a window with a document\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn factory( w );\\n\\t\\t\\t};\\n\\t} else {\\n\\t\\tfactory( global );\\n\\t}\\n\\n// Pass this if window is not defined yet\\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\\n\\n// Support: Firefox 18+\\n// Can\\'t be in strict mode, several libs including ASP.NET trace\\n// the stack via arguments.caller.callee and Firefox dies if\\n// you try to trace through \"use strict\" call chains. (#13335)\\n//\"use strict\";\\nvar arr = [];\\n\\nvar document = window.document;\\n\\nvar slice = arr.slice;\\n\\nvar concat = arr.concat;\\n\\nvar push = arr.push;\\n\\nvar indexOf = arr.indexOf;\\n\\nvar class2type = {};\\n\\nvar toString = class2type.toString;\\n\\nvar hasOwn = class2type.hasOwnProperty;\\n\\nvar support = {};\\n\\n\\n\\nvar\\n\\tversion = \"2.2.4\",\\n\\n\\t// Define a local copy of jQuery\\n\\tjQuery = function( selector, context ) {\\n\\n\\t\\t// The jQuery object is actually just the init constructor \\'enhanced\\'\\n\\t\\t// Need init if jQuery is called (just allow error to be thrown if not included)\\n\\t\\treturn new jQuery.fn.init( selector, context );\\n\\t},\\n\\n\\t// Support: Android<4.1\\n\\t// Make sure we trim BOM and NBSP\\n\\trtrim = /^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g,\\n\\n\\t// Matches dashed string for camelizing\\n\\trmsPrefix = /^-ms-/,\\n\\trdashAlpha = /-([\\\\da-z])/gi,\\n\\n\\t// Used by jQuery.camelCase as callback to replace()\\n\\tfcamelCase = function( all, letter ) {\\n\\t\\treturn letter.toUpperCase();\\n\\t};\\n\\njQuery.fn = jQuery.prototype = {\\n\\n\\t// The current version of jQuery being used\\n\\tjquery: version,\\n\\n\\tconstructor: jQuery,\\n\\n\\t// Start with an empty selector\\n\\tselector: \"\",\\n\\n\\t// The default length of a jQuery object is 0\\n\\tlength: 0,\\n\\n\\ttoArray: function() {\\n\\t\\treturn slice.call( this );\\n\\t},\\n\\n\\t// Get the Nth element in the matched element set OR\\n\\t// Get the whole matched element set as a clean array\\n\\tget: function( num ) {\\n\\t\\treturn num != null ?\\n\\n\\t\\t\\t// Return just the one element from the set\\n\\t\\t\\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\\n\\n\\t\\t\\t// Return all the elements in a clean array\\n\\t\\t\\tslice.call( this );\\n\\t},\\n\\n\\t// Take an array of elements and push it onto the stack\\n\\t// (returning the new matched element set)\\n\\tpushStack: function( elems ) {\\n\\n\\t\\t// Build a new jQuery matched element set\\n\\t\\tvar ret = jQuery.merge( this.constructor(), elems );\\n\\n\\t\\t// Add the old object onto the stack (as a reference)\\n\\t\\tret.prevObject = this;\\n\\t\\tret.context = this.context;\\n\\n\\t\\t// Return the newly-formed element set\\n\\t\\treturn ret;\\n\\t},\\n\\n\\t// Execute a callback for every element in the matched set.\\n\\teach: function( callback ) {\\n\\t\\treturn jQuery.each( this, callback );\\n\\t},\\n\\n\\tmap: function( callback ) {\\n\\t\\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\\n\\t\\t\\treturn callback.call( elem, i, elem );\\n\\t\\t} ) );\\n\\t},\\n\\n\\tslice: function() {\\n\\t\\treturn this.pushStack( slice.apply( this, arguments ) );\\n\\t},\\n\\n\\tfirst: function() {\\n\\t\\treturn this.eq( 0 );\\n\\t},\\n\\n\\tlast: function() {\\n\\t\\treturn this.eq( -1 );\\n\\t},\\n\\n\\teq: function( i ) {\\n\\t\\tvar len = this.length,\\n\\t\\t\\tj = +i + ( i < 0 ? len : 0 );\\n\\t\\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\\n\\t},\\n\\n\\tend: function() {\\n\\t\\treturn this.prevObject || this.constructor();\\n\\t},\\n\\n\\t// For internal use only.\\n\\t// Behaves like an Array\\'s method, not like a jQuery method.\\n\\tpush: push,\\n\\tsort: arr.sort,\\n\\tsplice: arr.splice\\n};\\n\\njQuery.extend = jQuery.fn.extend = function() {\\n\\tvar options, name, src, copy, copyIsArray, clone,\\n\\t\\ttarget = arguments[ 0 ] || {},\\n\\t\\ti = 1,\\n\\t\\tlength = arguments.length,\\n\\t\\tdeep = false;\\n\\n\\t// Handle a deep copy situation\\n\\tif ( typeof target === \"boolean\" ) {\\n\\t\\tdeep = target;\\n\\n\\t\\t// Skip the boolean and the target\\n\\t\\ttarget = arguments[ i ] || {};\\n\\t\\ti++;\\n\\t}\\n\\n\\t// Handle case when target is a string or something (possible in deep copy)\\n\\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\\n\\t\\ttarget = {};\\n\\t}\\n\\n\\t// Extend jQuery itself if only one argument is passed\\n\\tif ( i === length ) {\\n\\t\\ttarget = this;\\n\\t\\ti--;\\n\\t}\\n\\n\\tfor ( ; i < length; i++ ) {\\n\\n\\t\\t// Only deal with non-null/undefined values\\n\\t\\tif ( ( options = arguments[ i ] ) != null ) {\\n\\n\\t\\t\\t// Extend the base object\\n\\t\\t\\tfor ( name in options ) {\\n\\t\\t\\t\\tsrc = target[ name ];\\n\\t\\t\\t\\tcopy = options[ name ];\\n\\n\\t\\t\\t\\t// Prevent never-ending loop\\n\\t\\t\\t\\tif ( target === copy ) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Recurse if we\\'re merging plain objects or arrays\\n\\t\\t\\t\\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\\n\\t\\t\\t\\t\\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\\n\\n\\t\\t\\t\\t\\tif ( copyIsArray ) {\\n\\t\\t\\t\\t\\t\\tcopyIsArray = false;\\n\\t\\t\\t\\t\\t\\tclone = src && jQuery.isArray( src ) ? src : [];\\n\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tclone = src && jQuery.isPlainObject( src ) ? src : {};\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Never move original objects, clone them\\n\\t\\t\\t\\t\\ttarget[ name ] = jQuery.extend( deep, clone, copy );\\n\\n\\t\\t\\t\\t// Don\\'t bring in undefined values\\n\\t\\t\\t\\t} else if ( copy !== undefined ) {\\n\\t\\t\\t\\t\\ttarget[ name ] = copy;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Return the modified object\\n\\treturn target;\\n};\\n\\njQuery.extend( {\\n\\n\\t// Unique for each copy of jQuery on the page\\n\\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\\\D/g, \"\" ),\\n\\n\\t// Assume jQuery is ready without the ready module\\n\\tisReady: true,\\n\\n\\terror: function( msg ) {\\n\\t\\tthrow new Error( msg );\\n\\t},\\n\\n\\tnoop: function() {},\\n\\n\\tisFunction: function( obj ) {\\n\\t\\treturn jQuery.type( obj ) === \"function\";\\n\\t},\\n\\n\\tisArray: Array.isArray,\\n\\n\\tisWindow: function( obj ) {\\n\\t\\treturn obj != null && obj === obj.window;\\n\\t},\\n\\n\\tisNumeric: function( obj ) {\\n\\n\\t\\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\\n\\t\\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\\n\\t\\t// subtraction forces infinities to NaN\\n\\t\\t// adding 1 corrects loss of precision from parseFloat (#15100)\\n\\t\\tvar realStringObj = obj && obj.toString();\\n\\t\\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\\n\\t},\\n\\n\\tisPlainObject: function( obj ) {\\n\\t\\tvar key;\\n\\n\\t\\t// Not plain objects:\\n\\t\\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\\n\\t\\t// - DOM nodes\\n\\t\\t// - window\\n\\t\\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Not own constructor property must be Object\\n\\t\\tif ( obj.constructor &&\\n\\t\\t\\t\\t!hasOwn.call( obj, \"constructor\" ) &&\\n\\t\\t\\t\\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Own properties are enumerated firstly, so to speed up,\\n\\t\\t// if last one is own, then all properties are own\\n\\t\\tfor ( key in obj ) {}\\n\\n\\t\\treturn key === undefined || hasOwn.call( obj, key );\\n\\t},\\n\\n\\tisEmptyObject: function( obj ) {\\n\\t\\tvar name;\\n\\t\\tfor ( name in obj ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn true;\\n\\t},\\n\\n\\ttype: function( obj ) {\\n\\t\\tif ( obj == null ) {\\n\\t\\t\\treturn obj + \"\";\\n\\t\\t}\\n\\n\\t\\t// Support: Android<4.0, iOS<6 (functionish RegExp)\\n\\t\\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\\n\\t\\t\\tclass2type[ toString.call( obj ) ] || \"object\" :\\n\\t\\t\\ttypeof obj;\\n\\t},\\n\\n\\t// Evaluates a script in a global context\\n\\tglobalEval: function( code ) {\\n\\t\\tvar script,\\n\\t\\t\\tindirect = eval;\\n\\n\\t\\tcode = jQuery.trim( code );\\n\\n\\t\\tif ( code ) {\\n\\n\\t\\t\\t// If the code includes a valid, prologue position\\n\\t\\t\\t// strict mode pragma, execute code by injecting a\\n\\t\\t\\t// script tag into the document.\\n\\t\\t\\tif ( code.indexOf( \"use strict\" ) === 1 ) {\\n\\t\\t\\t\\tscript = document.createElement( \"script\" );\\n\\t\\t\\t\\tscript.text = code;\\n\\t\\t\\t\\tdocument.head.appendChild( script ).parentNode.removeChild( script );\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Otherwise, avoid the DOM node creation, insertion\\n\\t\\t\\t\\t// and removal by using an indirect global eval\\n\\n\\t\\t\\t\\tindirect( code );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\t// Convert dashed to camelCase; used by the css and data modules\\n\\t// Support: IE9-11+\\n\\t// Microsoft forgot to hump their vendor prefix (#9572)\\n\\tcamelCase: function( string ) {\\n\\t\\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\\n\\t},\\n\\n\\tnodeName: function( elem, name ) {\\n\\t\\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\\n\\t},\\n\\n\\teach: function( obj, callback ) {\\n\\t\\tvar length, i = 0;\\n\\n\\t\\tif ( isArrayLike( obj ) ) {\\n\\t\\t\\tlength = obj.length;\\n\\t\\t\\tfor ( ; i < length; i++ ) {\\n\\t\\t\\t\\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tfor ( i in obj ) {\\n\\t\\t\\t\\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn obj;\\n\\t},\\n\\n\\t// Support: Android<4.1\\n\\ttrim: function( text ) {\\n\\t\\treturn text == null ?\\n\\t\\t\\t\"\" :\\n\\t\\t\\t( text + \"\" ).replace( rtrim, \"\" );\\n\\t},\\n\\n\\t// results is for internal usage only\\n\\tmakeArray: function( arr, results ) {\\n\\t\\tvar ret = results || [];\\n\\n\\t\\tif ( arr != null ) {\\n\\t\\t\\tif ( isArrayLike( Object( arr ) ) ) {\\n\\t\\t\\t\\tjQuery.merge( ret,\\n\\t\\t\\t\\t\\ttypeof arr === \"string\" ?\\n\\t\\t\\t\\t\\t[ arr ] : arr\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpush.call( ret, arr );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t},\\n\\n\\tinArray: function( elem, arr, i ) {\\n\\t\\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\\n\\t},\\n\\n\\tmerge: function( first, second ) {\\n\\t\\tvar len = +second.length,\\n\\t\\t\\tj = 0,\\n\\t\\t\\ti = first.length;\\n\\n\\t\\tfor ( ; j < len; j++ ) {\\n\\t\\t\\tfirst[ i++ ] = second[ j ];\\n\\t\\t}\\n\\n\\t\\tfirst.length = i;\\n\\n\\t\\treturn first;\\n\\t},\\n\\n\\tgrep: function( elems, callback, invert ) {\\n\\t\\tvar callbackInverse,\\n\\t\\t\\tmatches = [],\\n\\t\\t\\ti = 0,\\n\\t\\t\\tlength = elems.length,\\n\\t\\t\\tcallbackExpect = !invert;\\n\\n\\t\\t// Go through the array, only saving the items\\n\\t\\t// that pass the validator function\\n\\t\\tfor ( ; i < length; i++ ) {\\n\\t\\t\\tcallbackInverse = !callback( elems[ i ], i );\\n\\t\\t\\tif ( callbackInverse !== callbackExpect ) {\\n\\t\\t\\t\\tmatches.push( elems[ i ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn matches;\\n\\t},\\n\\n\\t// arg is for internal usage only\\n\\tmap: function( elems, callback, arg ) {\\n\\t\\tvar length, value,\\n\\t\\t\\ti = 0,\\n\\t\\t\\tret = [];\\n\\n\\t\\t// Go through the array, translating each of the items to their new values\\n\\t\\tif ( isArrayLike( elems ) ) {\\n\\t\\t\\tlength = elems.length;\\n\\t\\t\\tfor ( ; i < length; i++ ) {\\n\\t\\t\\t\\tvalue = callback( elems[ i ], i, arg );\\n\\n\\t\\t\\t\\tif ( value != null ) {\\n\\t\\t\\t\\t\\tret.push( value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t// Go through every key on the object,\\n\\t\\t} else {\\n\\t\\t\\tfor ( i in elems ) {\\n\\t\\t\\t\\tvalue = callback( elems[ i ], i, arg );\\n\\n\\t\\t\\t\\tif ( value != null ) {\\n\\t\\t\\t\\t\\tret.push( value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Flatten any nested arrays\\n\\t\\treturn concat.apply( [], ret );\\n\\t},\\n\\n\\t// A global GUID counter for objects\\n\\tguid: 1,\\n\\n\\t// Bind a function to a context, optionally partially applying any\\n\\t// arguments.\\n\\tproxy: function( fn, context ) {\\n\\t\\tvar tmp, args, proxy;\\n\\n\\t\\tif ( typeof context === \"string\" ) {\\n\\t\\t\\ttmp = fn[ context ];\\n\\t\\t\\tcontext = fn;\\n\\t\\t\\tfn = tmp;\\n\\t\\t}\\n\\n\\t\\t// Quick check to determine if target is callable, in the spec\\n\\t\\t// this throws a TypeError, but we will just return undefined.\\n\\t\\tif ( !jQuery.isFunction( fn ) ) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\t// Simulated bind\\n\\t\\targs = slice.call( arguments, 2 );\\n\\t\\tproxy = function() {\\n\\t\\t\\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\\n\\t\\t};\\n\\n\\t\\t// Set the guid of unique handler to the same of original handler, so it can be removed\\n\\t\\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\\n\\n\\t\\treturn proxy;\\n\\t},\\n\\n\\tnow: Date.now,\\n\\n\\t// jQuery.support is not used in Core but other projects attach their\\n\\t// properties to it so it needs to exist.\\n\\tsupport: support\\n} );\\n\\n// JSHint would error on this code due to the Symbol not being defined in ES5.\\n// Defining this global in .jshintrc would create a danger of using the global\\n// unguarded in another place, it seems safer to just disable JSHint for these\\n// three lines.\\n/* jshint ignore: start */\\nif ( typeof Symbol === \"function\" ) {\\n\\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\\n}\\n/* jshint ignore: end */\\n\\n// Populate the class2type map\\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\\nfunction( i, name ) {\\n\\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\\n} );\\n\\nfunction isArrayLike( obj ) {\\n\\n\\t// Support: iOS 8.2 (not reproducible in simulator)\\n\\t// `in` check used to prevent JIT error (gh-2145)\\n\\t// hasOwn isn\\'t used here due to false negatives\\n\\t// regarding Nodelist length in IE\\n\\tvar length = !!obj && \"length\" in obj && obj.length,\\n\\t\\ttype = jQuery.type( obj );\\n\\n\\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn type === \"array\" || length === 0 ||\\n\\t\\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\\n}\\nvar Sizzle =\\n/*!\\n * Sizzle CSS Selector Engine v2.2.1\\n * http://sizzlejs.com/\\n *\\n * Copyright jQuery Foundation and other contributors\\n * Released under the MIT license\\n * http://jquery.org/license\\n *\\n * Date: 2015-10-17\\n */\\n(function( window ) {\\n\\nvar i,\\n\\tsupport,\\n\\tExpr,\\n\\tgetText,\\n\\tisXML,\\n\\ttokenize,\\n\\tcompile,\\n\\tselect,\\n\\toutermostContext,\\n\\tsortInput,\\n\\thasDuplicate,\\n\\n\\t// Local document vars\\n\\tsetDocument,\\n\\tdocument,\\n\\tdocElem,\\n\\tdocumentIsHTML,\\n\\trbuggyQSA,\\n\\trbuggyMatches,\\n\\tmatches,\\n\\tcontains,\\n\\n\\t// Instance-specific data\\n\\texpando = \"sizzle\" + 1 * new Date(),\\n\\tpreferredDoc = window.document,\\n\\tdirruns = 0,\\n\\tdone = 0,\\n\\tclassCache = createCache(),\\n\\ttokenCache = createCache(),\\n\\tcompilerCache = createCache(),\\n\\tsortOrder = function( a, b ) {\\n\\t\\tif ( a === b ) {\\n\\t\\t\\thasDuplicate = true;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t},\\n\\n\\t// General-purpose constants\\n\\tMAX_NEGATIVE = 1 << 31,\\n\\n\\t// Instance methods\\n\\thasOwn = ({}).hasOwnProperty,\\n\\tarr = [],\\n\\tpop = arr.pop,\\n\\tpush_native = arr.push,\\n\\tpush = arr.push,\\n\\tslice = arr.slice,\\n\\t// Use a stripped-down indexOf as it\\'s faster than native\\n\\t// http://jsperf.com/thor-indexof-vs-for/5\\n\\tindexOf = function( list, elem ) {\\n\\t\\tvar i = 0,\\n\\t\\t\\tlen = list.length;\\n\\t\\tfor ( ; i < len; i++ ) {\\n\\t\\t\\tif ( list[i] === elem ) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn -1;\\n\\t},\\n\\n\\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\\n\\n\\t// Regular expressions\\n\\n\\t// http://www.w3.org/TR/css3-selectors/#whitespace\\n\\twhitespace = \"[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f]\",\\n\\n\\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\\n\\tidentifier = \"(?:\\\\\\\\\\\\\\\\.|[\\\\\\\\w-]|[^\\\\\\\\x00-\\\\\\\\xa0])+\",\\n\\n\\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\\n\\tattributes = \"\\\\\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\\n\\t\\t// Operator (capture 2)\\n\\t\\t\"*([*^$|!~]?=)\" + whitespace +\\n\\t\\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\\n\\t\\t\"*(?:\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\"|(\" + identifier + \"))|)\" + whitespace +\\n\\t\\t\"*\\\\\\\\]\",\\n\\n\\tpseudos = \":(\" + identifier + \")(?:\\\\\\\\((\" +\\n\\t\\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\\n\\t\\t// 1. quoted (capture 3; capture 4 or capture 5)\\n\\t\\t\"(\\'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\'])*)\\'|\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\")|\" +\\n\\t\\t// 2. simple (capture 6)\\n\\t\\t\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()[\\\\\\\\]]|\" + attributes + \")*)|\" +\\n\\t\\t// 3. anything else (capture 2)\\n\\t\\t\".*\" +\\n\\t\\t\")\\\\\\\\)|)\",\\n\\n\\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\\n\\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\\n\\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\\\\\\\\\])(?:\\\\\\\\\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\\n\\n\\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\\n\\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\\n\\n\\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\\\\\]\\'\\\\\"]*?)\" + whitespace + \"*\\\\\\\\]\", \"g\" ),\\n\\n\\trpseudo = new RegExp( pseudos ),\\n\\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\\n\\n\\tmatchExpr = {\\n\\t\\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\\n\\t\\t\"CLASS\": new RegExp( \"^\\\\\\\\.(\" + identifier + \")\" ),\\n\\t\\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\\n\\t\\t\"ATTR\": new RegExp( \"^\" + attributes ),\\n\\t\\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\\n\\t\\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\\\\\(\" + whitespace +\\n\\t\\t\\t\"*(even|odd|(([+-]|)(\\\\\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\\n\\t\\t\\t\"*(\\\\\\\\d+)|))\" + whitespace + \"*\\\\\\\\)|)\", \"i\" ),\\n\\t\\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\\n\\t\\t// For use in libraries implementing .is()\\n\\t\\t// We use this for POS matching in `select`\\n\\t\\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\\\\\(\" +\\n\\t\\t\\twhitespace + \"*((?:-\\\\\\\\d)?\\\\\\\\d*)\" + whitespace + \"*\\\\\\\\)|)(?=[^-]|$)\", \"i\" )\\n\\t},\\n\\n\\trinputs = /^(?:input|select|textarea|button)$/i,\\n\\trheader = /^h\\\\d$/i,\\n\\n\\trnative = /^[^{]+\\\\{\\\\s*\\\\[native \\\\w/,\\n\\n\\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\\n\\trquickExpr = /^(?:#([\\\\w-]+)|(\\\\w+)|\\\\.([\\\\w-]+))$/,\\n\\n\\trsibling = /[+~]/,\\n\\trescape = /\\'|\\\\\\\\/g,\\n\\n\\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\\n\\trunescape = new RegExp( \"\\\\\\\\\\\\\\\\([\\\\\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\\n\\tfunescape = function( _, escaped, escapedWhitespace ) {\\n\\t\\tvar high = \"0x\" + escaped - 0x10000;\\n\\t\\t// NaN means non-codepoint\\n\\t\\t// Support: Firefox<24\\n\\t\\t// Workaround erroneous numeric interpretation of +\"0x\"\\n\\t\\treturn high !== high || escapedWhitespace ?\\n\\t\\t\\tescaped :\\n\\t\\t\\thigh < 0 ?\\n\\t\\t\\t\\t// BMP codepoint\\n\\t\\t\\t\\tString.fromCharCode( high + 0x10000 ) :\\n\\t\\t\\t\\t// Supplemental Plane codepoint (surrogate pair)\\n\\t\\t\\t\\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\\n\\t},\\n\\n\\t// Used for iframes\\n\\t// See setDocument()\\n\\t// Removing the function wrapper causes a \"Permission Denied\"\\n\\t// error in IE\\n\\tunloadHandler = function() {\\n\\t\\tsetDocument();\\n\\t};\\n\\n// Optimize for push.apply( _, NodeList )\\ntry {\\n\\tpush.apply(\\n\\t\\t(arr = slice.call( preferredDoc.childNodes )),\\n\\t\\tpreferredDoc.childNodes\\n\\t);\\n\\t// Support: Android<4.0\\n\\t// Detect silently failing push.apply\\n\\tarr[ preferredDoc.childNodes.length ].nodeType;\\n} catch ( e ) {\\n\\tpush = { apply: arr.length ?\\n\\n\\t\\t// Leverage slice if possible\\n\\t\\tfunction( target, els ) {\\n\\t\\t\\tpush_native.apply( target, slice.call(els) );\\n\\t\\t} :\\n\\n\\t\\t// Support: IE<9\\n\\t\\t// Otherwise append directly\\n\\t\\tfunction( target, els ) {\\n\\t\\t\\tvar j = target.length,\\n\\t\\t\\t\\ti = 0;\\n\\t\\t\\t// Can\\'t trust NodeList.length\\n\\t\\t\\twhile ( (target[j++] = els[i++]) ) {}\\n\\t\\t\\ttarget.length = j - 1;\\n\\t\\t}\\n\\t};\\n}\\n\\nfunction Sizzle( selector, context, results, seed ) {\\n\\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\\n\\t\\tnewContext = context && context.ownerDocument,\\n\\n\\t\\t// nodeType defaults to 9, since context defaults to document\\n\\t\\tnodeType = context ? context.nodeType : 9;\\n\\n\\tresults = results || [];\\n\\n\\t// Return early from calls with invalid selector or context\\n\\tif ( typeof selector !== \"string\" || !selector ||\\n\\t\\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\\n\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// Try to shortcut find operations (as opposed to filters) in HTML documents\\n\\tif ( !seed ) {\\n\\n\\t\\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\\n\\t\\t\\tsetDocument( context );\\n\\t\\t}\\n\\t\\tcontext = context || document;\\n\\n\\t\\tif ( documentIsHTML ) {\\n\\n\\t\\t\\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\\n\\t\\t\\t// (excepting DocumentFragment context, where the methods don\\'t exist)\\n\\t\\t\\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\\n\\n\\t\\t\\t\\t// ID selector\\n\\t\\t\\t\\tif ( (m = match[1]) ) {\\n\\n\\t\\t\\t\\t\\t// Document context\\n\\t\\t\\t\\t\\tif ( nodeType === 9 ) {\\n\\t\\t\\t\\t\\t\\tif ( (elem = context.getElementById( m )) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: IE, Opera, Webkit\\n\\t\\t\\t\\t\\t\\t\\t// TODO: identify versions\\n\\t\\t\\t\\t\\t\\t\\t// getElementById can match elements by name instead of ID\\n\\t\\t\\t\\t\\t\\t\\tif ( elem.id === m ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresults.push( elem );\\n\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Element context\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t// Support: IE, Opera, Webkit\\n\\t\\t\\t\\t\\t\\t// TODO: identify versions\\n\\t\\t\\t\\t\\t\\t// getElementById can match elements by name instead of ID\\n\\t\\t\\t\\t\\t\\tif ( newContext && (elem = newContext.getElementById( m )) &&\\n\\t\\t\\t\\t\\t\\t\\tcontains( context, elem ) &&\\n\\t\\t\\t\\t\\t\\t\\telem.id === m ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tresults.push( elem );\\n\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Type selector\\n\\t\\t\\t\\t} else if ( match[2] ) {\\n\\t\\t\\t\\t\\tpush.apply( results, context.getElementsByTagName( selector ) );\\n\\t\\t\\t\\t\\treturn results;\\n\\n\\t\\t\\t\\t// Class selector\\n\\t\\t\\t\\t} else if ( (m = match[3]) && support.getElementsByClassName &&\\n\\t\\t\\t\\t\\tcontext.getElementsByClassName ) {\\n\\n\\t\\t\\t\\t\\tpush.apply( results, context.getElementsByClassName( m ) );\\n\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Take advantage of querySelectorAll\\n\\t\\t\\tif ( support.qsa &&\\n\\t\\t\\t\\t!compilerCache[ selector + \" \" ] &&\\n\\t\\t\\t\\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\\n\\n\\t\\t\\t\\tif ( nodeType !== 1 ) {\\n\\t\\t\\t\\t\\tnewContext = context;\\n\\t\\t\\t\\t\\tnewSelector = selector;\\n\\n\\t\\t\\t\\t// qSA looks outside Element context, which is not what we want\\n\\t\\t\\t\\t// Thanks to Andrew Dupont for this workaround technique\\n\\t\\t\\t\\t// Support: IE <=8\\n\\t\\t\\t\\t// Exclude object elements\\n\\t\\t\\t\\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\\n\\n\\t\\t\\t\\t\\t// Capture the context ID, setting it first if necessary\\n\\t\\t\\t\\t\\tif ( (nid = context.getAttribute( \"id\" )) ) {\\n\\t\\t\\t\\t\\t\\tnid = nid.replace( rescape, \"\\\\\\\\$&\" );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tcontext.setAttribute( \"id\", (nid = expando) );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Prefix every selector in the list\\n\\t\\t\\t\\t\\tgroups = tokenize( selector );\\n\\t\\t\\t\\t\\ti = groups.length;\\n\\t\\t\\t\\t\\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id=\\'\" + nid + \"\\']\";\\n\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\t\\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tnewSelector = groups.join( \",\" );\\n\\n\\t\\t\\t\\t\\t// Expand context for sibling selectors\\n\\t\\t\\t\\t\\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\\n\\t\\t\\t\\t\\t\\tcontext;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( newSelector ) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tpush.apply( results,\\n\\t\\t\\t\\t\\t\\t\\tnewContext.querySelectorAll( newSelector )\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t} catch ( qsaError ) {\\n\\t\\t\\t\\t\\t} finally {\\n\\t\\t\\t\\t\\t\\tif ( nid === expando ) {\\n\\t\\t\\t\\t\\t\\t\\tcontext.removeAttribute( \"id\" );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// All others\\n\\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\\n}\\n\\n/**\\n * Create key-value caches of limited size\\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\\n *\\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\\n *\\tdeleting the oldest entry\\n */\\nfunction createCache() {\\n\\tvar keys = [];\\n\\n\\tfunction cache( key, value ) {\\n\\t\\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\\n\\t\\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\\n\\t\\t\\t// Only keep the most recent entries\\n\\t\\t\\tdelete cache[ keys.shift() ];\\n\\t\\t}\\n\\t\\treturn (cache[ key + \" \" ] = value);\\n\\t}\\n\\treturn cache;\\n}\\n\\n/**\\n * Mark a function for special use by Sizzle\\n * @param {Function} fn The function to mark\\n */\\nfunction markFunction( fn ) {\\n\\tfn[ expando ] = true;\\n\\treturn fn;\\n}\\n\\n/**\\n * Support testing using an element\\n * @param {Function} fn Passed the created div and expects a boolean result\\n */\\nfunction assert( fn ) {\\n\\tvar div = document.createElement(\"div\");\\n\\n\\ttry {\\n\\t\\treturn !!fn( div );\\n\\t} catch (e) {\\n\\t\\treturn false;\\n\\t} finally {\\n\\t\\t// Remove from its parent by default\\n\\t\\tif ( div.parentNode ) {\\n\\t\\t\\tdiv.parentNode.removeChild( div );\\n\\t\\t}\\n\\t\\t// release memory in IE\\n\\t\\tdiv = null;\\n\\t}\\n}\\n\\n/**\\n * Adds the same handler for all of the specified attrs\\n * @param {String} attrs Pipe-separated list of attributes\\n * @param {Function} handler The method that will be applied\\n */\\nfunction addHandle( attrs, handler ) {\\n\\tvar arr = attrs.split(\"|\"),\\n\\t\\ti = arr.length;\\n\\n\\twhile ( i-- ) {\\n\\t\\tExpr.attrHandle[ arr[i] ] = handler;\\n\\t}\\n}\\n\\n/**\\n * Checks document order of two siblings\\n * @param {Element} a\\n * @param {Element} b\\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\\n */\\nfunction siblingCheck( a, b ) {\\n\\tvar cur = b && a,\\n\\t\\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\\n\\t\\t\\t( ~b.sourceIndex || MAX_NEGATIVE ) -\\n\\t\\t\\t( ~a.sourceIndex || MAX_NEGATIVE );\\n\\n\\t// Use IE sourceIndex if available on both nodes\\n\\tif ( diff ) {\\n\\t\\treturn diff;\\n\\t}\\n\\n\\t// Check if b follows a\\n\\tif ( cur ) {\\n\\t\\twhile ( (cur = cur.nextSibling) ) {\\n\\t\\t\\tif ( cur === b ) {\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn a ? 1 : -1;\\n}\\n\\n/**\\n * Returns a function to use in pseudos for input types\\n * @param {String} type\\n */\\nfunction createInputPseudo( type ) {\\n\\treturn function( elem ) {\\n\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\treturn name === \"input\" && elem.type === type;\\n\\t};\\n}\\n\\n/**\\n * Returns a function to use in pseudos for buttons\\n * @param {String} type\\n */\\nfunction createButtonPseudo( type ) {\\n\\treturn function( elem ) {\\n\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\treturn (name === \"input\" || name === \"button\") && elem.type === type;\\n\\t};\\n}\\n\\n/**\\n * Returns a function to use in pseudos for positionals\\n * @param {Function} fn\\n */\\nfunction createPositionalPseudo( fn ) {\\n\\treturn markFunction(function( argument ) {\\n\\t\\targument = +argument;\\n\\t\\treturn markFunction(function( seed, matches ) {\\n\\t\\t\\tvar j,\\n\\t\\t\\t\\tmatchIndexes = fn( [], seed.length, argument ),\\n\\t\\t\\t\\ti = matchIndexes.length;\\n\\n\\t\\t\\t// Match elements found at the specified indexes\\n\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\tif ( seed[ (j = matchIndexes[i]) ] ) {\\n\\t\\t\\t\\t\\tseed[j] = !(matches[j] = seed[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/**\\n * Checks a node for validity as a Sizzle context\\n * @param {Element|Object=} context\\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\\n */\\nfunction testContext( context ) {\\n\\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\\n}\\n\\n// Expose support vars for convenience\\nsupport = Sizzle.support = {};\\n\\n/**\\n * Detects XML nodes\\n * @param {Element|Object} elem An element or a document\\n * @returns {Boolean} True iff elem is a non-HTML XML node\\n */\\nisXML = Sizzle.isXML = function( elem ) {\\n\\t// documentElement is verified for cases where it doesn\\'t yet exist\\n\\t// (such as loading iframes in IE - #4833)\\n\\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\\n\\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\\n};\\n\\n/**\\n * Sets document-related variables once based on the current document\\n * @param {Element|Object} [doc] An element or document object to use to set the document\\n * @returns {Object} Returns the current document\\n */\\nsetDocument = Sizzle.setDocument = function( node ) {\\n\\tvar hasCompare, parent,\\n\\t\\tdoc = node ? node.ownerDocument || node : preferredDoc;\\n\\n\\t// Return early if doc is invalid or already selected\\n\\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\\n\\t\\treturn document;\\n\\t}\\n\\n\\t// Update global variables\\n\\tdocument = doc;\\n\\tdocElem = document.documentElement;\\n\\tdocumentIsHTML = !isXML( document );\\n\\n\\t// Support: IE 9-11, Edge\\n\\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\\n\\tif ( (parent = document.defaultView) && parent.top !== parent ) {\\n\\t\\t// Support: IE 11\\n\\t\\tif ( parent.addEventListener ) {\\n\\t\\t\\tparent.addEventListener( \"unload\", unloadHandler, false );\\n\\n\\t\\t// Support: IE 9 - 10 only\\n\\t\\t} else if ( parent.attachEvent ) {\\n\\t\\t\\tparent.attachEvent( \"onunload\", unloadHandler );\\n\\t\\t}\\n\\t}\\n\\n\\t/* Attributes\\n\\t---------------------------------------------------------------------- */\\n\\n\\t// Support: IE<8\\n\\t// Verify that getAttribute really returns attributes and not properties\\n\\t// (excepting IE8 booleans)\\n\\tsupport.attributes = assert(function( div ) {\\n\\t\\tdiv.className = \"i\";\\n\\t\\treturn !div.getAttribute(\"className\");\\n\\t});\\n\\n\\t/* getElement(s)By*\\n\\t---------------------------------------------------------------------- */\\n\\n\\t// Check if getElementsByTagName(\"*\") returns only elements\\n\\tsupport.getElementsByTagName = assert(function( div ) {\\n\\t\\tdiv.appendChild( document.createComment(\"\") );\\n\\t\\treturn !div.getElementsByTagName(\"*\").length;\\n\\t});\\n\\n\\t// Support: IE<9\\n\\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\\n\\n\\t// Support: IE<10\\n\\t// Check if getElementById returns elements by name\\n\\t// The broken getElementById methods don\\'t pick up programatically-set names,\\n\\t// so use a roundabout getElementsByName test\\n\\tsupport.getById = assert(function( div ) {\\n\\t\\tdocElem.appendChild( div ).id = expando;\\n\\t\\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\\n\\t});\\n\\n\\t// ID find and filter\\n\\tif ( support.getById ) {\\n\\t\\tExpr.find[\"ID\"] = function( id, context ) {\\n\\t\\t\\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\\n\\t\\t\\t\\tvar m = context.getElementById( id );\\n\\t\\t\\t\\treturn m ? [ m ] : [];\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tExpr.filter[\"ID\"] = function( id ) {\\n\\t\\t\\tvar attrId = id.replace( runescape, funescape );\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\treturn elem.getAttribute(\"id\") === attrId;\\n\\t\\t\\t};\\n\\t\\t};\\n\\t} else {\\n\\t\\t// Support: IE6/7\\n\\t\\t// getElementById is not reliable as a find shortcut\\n\\t\\tdelete Expr.find[\"ID\"];\\n\\n\\t\\tExpr.filter[\"ID\"] =  function( id ) {\\n\\t\\t\\tvar attrId = id.replace( runescape, funescape );\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\\n\\t\\t\\t\\t\\telem.getAttributeNode(\"id\");\\n\\t\\t\\t\\treturn node && node.value === attrId;\\n\\t\\t\\t};\\n\\t\\t};\\n\\t}\\n\\n\\t// Tag\\n\\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\\n\\t\\tfunction( tag, context ) {\\n\\t\\t\\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\\n\\t\\t\\t\\treturn context.getElementsByTagName( tag );\\n\\n\\t\\t\\t// DocumentFragment nodes don\\'t have gEBTN\\n\\t\\t\\t} else if ( support.qsa ) {\\n\\t\\t\\t\\treturn context.querySelectorAll( tag );\\n\\t\\t\\t}\\n\\t\\t} :\\n\\n\\t\\tfunction( tag, context ) {\\n\\t\\t\\tvar elem,\\n\\t\\t\\t\\ttmp = [],\\n\\t\\t\\t\\ti = 0,\\n\\t\\t\\t\\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\\n\\t\\t\\t\\tresults = context.getElementsByTagName( tag );\\n\\n\\t\\t\\t// Filter out possible comments\\n\\t\\t\\tif ( tag === \"*\" ) {\\n\\t\\t\\t\\twhile ( (elem = results[i++]) ) {\\n\\t\\t\\t\\t\\tif ( elem.nodeType === 1 ) {\\n\\t\\t\\t\\t\\t\\ttmp.push( elem );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn tmp;\\n\\t\\t\\t}\\n\\t\\t\\treturn results;\\n\\t\\t};\\n\\n\\t// Class\\n\\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\\n\\t\\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\\n\\t\\t\\treturn context.getElementsByClassName( className );\\n\\t\\t}\\n\\t};\\n\\n\\t/* QSA/matchesSelector\\n\\t---------------------------------------------------------------------- */\\n\\n\\t// QSA and matchesSelector support\\n\\n\\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\\n\\trbuggyMatches = [];\\n\\n\\t// qSa(:focus) reports false when true (Chrome 21)\\n\\t// We allow this because of a bug in IE8/9 that throws an error\\n\\t// whenever `document.activeElement` is accessed on an iframe\\n\\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\\n\\t// See http://bugs.jquery.com/ticket/13378\\n\\trbuggyQSA = [];\\n\\n\\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\\n\\t\\t// Build QSA regex\\n\\t\\t// Regex strategy adopted from Diego Perini\\n\\t\\tassert(function( div ) {\\n\\t\\t\\t// Select is set to empty string on purpose\\n\\t\\t\\t// This is to test IE\\'s treatment of not explicitly\\n\\t\\t\\t// setting a boolean content attribute,\\n\\t\\t\\t// since its presence should be enough\\n\\t\\t\\t// http://bugs.jquery.com/ticket/12359\\n\\t\\t\\tdocElem.appendChild( div ).innerHTML = \"<a id=\\'\" + expando + \"\\'></a>\" +\\n\\t\\t\\t\\t\"<select id=\\'\" + expando + \"-\\\\r\\\\\\\\\\' msallowcapture=\\'\\'>\" +\\n\\t\\t\\t\\t\"<option selected=\\'\\'></option></select>\";\\n\\n\\t\\t\\t// Support: IE8, Opera 11-12.16\\n\\t\\t\\t// Nothing should be selected when empty strings follow ^= or $= or *=\\n\\t\\t\\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\\n\\t\\t\\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\\n\\t\\t\\tif ( div.querySelectorAll(\"[msallowcapture^=\\'\\']\").length ) {\\n\\t\\t\\t\\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:\\'\\'|\\\\\"\\\\\")\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Support: IE8\\n\\t\\t\\t// Boolean attributes and \"value\" are not treated correctly\\n\\t\\t\\tif ( !div.querySelectorAll(\"[selected]\").length ) {\\n\\t\\t\\t\\trbuggyQSA.push( \"\\\\\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\\n\\t\\t\\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\\n\\t\\t\\t\\trbuggyQSA.push(\"~=\");\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Webkit/Opera - :checked should return selected option elements\\n\\t\\t\\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n\\t\\t\\t// IE8 throws error here and will not see later tests\\n\\t\\t\\tif ( !div.querySelectorAll(\":checked\").length ) {\\n\\t\\t\\t\\trbuggyQSA.push(\":checked\");\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Support: Safari 8+, iOS 8+\\n\\t\\t\\t// https://bugs.webkit.org/show_bug.cgi?id=136851\\n\\t\\t\\t// In-page `selector#id sibing-combinator selector` fails\\n\\t\\t\\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\\n\\t\\t\\t\\trbuggyQSA.push(\".#.+[+~]\");\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tassert(function( div ) {\\n\\t\\t\\t// Support: Windows 8 Native Apps\\n\\t\\t\\t// The type and name attributes are restricted during .innerHTML assignment\\n\\t\\t\\tvar input = document.createElement(\"input\");\\n\\t\\t\\tinput.setAttribute( \"type\", \"hidden\" );\\n\\t\\t\\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\\n\\n\\t\\t\\t// Support: IE8\\n\\t\\t\\t// Enforce case-sensitivity of name attribute\\n\\t\\t\\tif ( div.querySelectorAll(\"[name=d]\").length ) {\\n\\t\\t\\t\\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\\n\\t\\t\\t// IE8 throws error here and will not see later tests\\n\\t\\t\\tif ( !div.querySelectorAll(\":enabled\").length ) {\\n\\t\\t\\t\\trbuggyQSA.push( \":enabled\", \":disabled\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Opera 10-11 does not throw on post-comma invalid pseudos\\n\\t\\t\\tdiv.querySelectorAll(\"*,:x\");\\n\\t\\t\\trbuggyQSA.push(\",.*:\");\\n\\t\\t});\\n\\t}\\n\\n\\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\\n\\t\\tdocElem.webkitMatchesSelector ||\\n\\t\\tdocElem.mozMatchesSelector ||\\n\\t\\tdocElem.oMatchesSelector ||\\n\\t\\tdocElem.msMatchesSelector) )) ) {\\n\\n\\t\\tassert(function( div ) {\\n\\t\\t\\t// Check to see if it\\'s possible to do matchesSelector\\n\\t\\t\\t// on a disconnected node (IE 9)\\n\\t\\t\\tsupport.disconnectedMatch = matches.call( div, \"div\" );\\n\\n\\t\\t\\t// This should fail with an exception\\n\\t\\t\\t// Gecko does not error, returns false instead\\n\\t\\t\\tmatches.call( div, \"[s!=\\'\\']:x\" );\\n\\t\\t\\trbuggyMatches.push( \"!=\", pseudos );\\n\\t\\t});\\n\\t}\\n\\n\\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\\n\\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\\n\\n\\t/* Contains\\n\\t---------------------------------------------------------------------- */\\n\\thasCompare = rnative.test( docElem.compareDocumentPosition );\\n\\n\\t// Element contains another\\n\\t// Purposefully self-exclusive\\n\\t// As in, an element does not contain itself\\n\\tcontains = hasCompare || rnative.test( docElem.contains ) ?\\n\\t\\tfunction( a, b ) {\\n\\t\\t\\tvar adown = a.nodeType === 9 ? a.documentElement : a,\\n\\t\\t\\t\\tbup = b && b.parentNode;\\n\\t\\t\\treturn a === bup || !!( bup && bup.nodeType === 1 && (\\n\\t\\t\\t\\tadown.contains ?\\n\\t\\t\\t\\t\\tadown.contains( bup ) :\\n\\t\\t\\t\\t\\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\\n\\t\\t\\t));\\n\\t\\t} :\\n\\t\\tfunction( a, b ) {\\n\\t\\t\\tif ( b ) {\\n\\t\\t\\t\\twhile ( (b = b.parentNode) ) {\\n\\t\\t\\t\\t\\tif ( b === a ) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t};\\n\\n\\t/* Sorting\\n\\t---------------------------------------------------------------------- */\\n\\n\\t// Document order sorting\\n\\tsortOrder = hasCompare ?\\n\\tfunction( a, b ) {\\n\\n\\t\\t// Flag for duplicate removal\\n\\t\\tif ( a === b ) {\\n\\t\\t\\thasDuplicate = true;\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// Sort on method existence if only one input has compareDocumentPosition\\n\\t\\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\\n\\t\\tif ( compare ) {\\n\\t\\t\\treturn compare;\\n\\t\\t}\\n\\n\\t\\t// Calculate position if both inputs belong to the same document\\n\\t\\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\\n\\t\\t\\ta.compareDocumentPosition( b ) :\\n\\n\\t\\t\\t// Otherwise we know they are disconnected\\n\\t\\t\\t1;\\n\\n\\t\\t// Disconnected nodes\\n\\t\\tif ( compare & 1 ||\\n\\t\\t\\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\\n\\n\\t\\t\\t// Choose the first element that is related to our preferred document\\n\\t\\t\\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t}\\n\\t\\t\\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\\n\\t\\t\\t\\treturn 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Maintain original order\\n\\t\\t\\treturn sortInput ?\\n\\t\\t\\t\\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\\n\\t\\t\\t\\t0;\\n\\t\\t}\\n\\n\\t\\treturn compare & 4 ? -1 : 1;\\n\\t} :\\n\\tfunction( a, b ) {\\n\\t\\t// Exit early if the nodes are identical\\n\\t\\tif ( a === b ) {\\n\\t\\t\\thasDuplicate = true;\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tvar cur,\\n\\t\\t\\ti = 0,\\n\\t\\t\\taup = a.parentNode,\\n\\t\\t\\tbup = b.parentNode,\\n\\t\\t\\tap = [ a ],\\n\\t\\t\\tbp = [ b ];\\n\\n\\t\\t// Parentless nodes are either documents or disconnected\\n\\t\\tif ( !aup || !bup ) {\\n\\t\\t\\treturn a === document ? -1 :\\n\\t\\t\\t\\tb === document ? 1 :\\n\\t\\t\\t\\taup ? -1 :\\n\\t\\t\\t\\tbup ? 1 :\\n\\t\\t\\t\\tsortInput ?\\n\\t\\t\\t\\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\\n\\t\\t\\t\\t0;\\n\\n\\t\\t// If the nodes are siblings, we can do a quick check\\n\\t\\t} else if ( aup === bup ) {\\n\\t\\t\\treturn siblingCheck( a, b );\\n\\t\\t}\\n\\n\\t\\t// Otherwise we need full lists of their ancestors for comparison\\n\\t\\tcur = a;\\n\\t\\twhile ( (cur = cur.parentNode) ) {\\n\\t\\t\\tap.unshift( cur );\\n\\t\\t}\\n\\t\\tcur = b;\\n\\t\\twhile ( (cur = cur.parentNode) ) {\\n\\t\\t\\tbp.unshift( cur );\\n\\t\\t}\\n\\n\\t\\t// Walk down the tree looking for a discrepancy\\n\\t\\twhile ( ap[i] === bp[i] ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\treturn i ?\\n\\t\\t\\t// Do a sibling check if the nodes have a common ancestor\\n\\t\\t\\tsiblingCheck( ap[i], bp[i] ) :\\n\\n\\t\\t\\t// Otherwise nodes in our document sort first\\n\\t\\t\\tap[i] === preferredDoc ? -1 :\\n\\t\\t\\tbp[i] === preferredDoc ? 1 :\\n\\t\\t\\t0;\\n\\t};\\n\\n\\treturn document;\\n};\\n\\nSizzle.matches = function( expr, elements ) {\\n\\treturn Sizzle( expr, null, null, elements );\\n};\\n\\nSizzle.matchesSelector = function( elem, expr ) {\\n\\t// Set document vars if needed\\n\\tif ( ( elem.ownerDocument || elem ) !== document ) {\\n\\t\\tsetDocument( elem );\\n\\t}\\n\\n\\t// Make sure that attribute selectors are quoted\\n\\texpr = expr.replace( rattributeQuotes, \"=\\'$1\\']\" );\\n\\n\\tif ( support.matchesSelector && documentIsHTML &&\\n\\t\\t!compilerCache[ expr + \" \" ] &&\\n\\t\\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\\n\\t\\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\\n\\n\\t\\ttry {\\n\\t\\t\\tvar ret = matches.call( elem, expr );\\n\\n\\t\\t\\t// IE 9\\'s matchesSelector returns false on disconnected nodes\\n\\t\\t\\tif ( ret || support.disconnectedMatch ||\\n\\t\\t\\t\\t\\t// As well, disconnected nodes are said to be in a document\\n\\t\\t\\t\\t\\t// fragment in IE 9\\n\\t\\t\\t\\t\\telem.document && elem.document.nodeType !== 11 ) {\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\t\\t} catch (e) {}\\n\\t}\\n\\n\\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\\n};\\n\\nSizzle.contains = function( context, elem ) {\\n\\t// Set document vars if needed\\n\\tif ( ( context.ownerDocument || context ) !== document ) {\\n\\t\\tsetDocument( context );\\n\\t}\\n\\treturn contains( context, elem );\\n};\\n\\nSizzle.attr = function( elem, name ) {\\n\\t// Set document vars if needed\\n\\tif ( ( elem.ownerDocument || elem ) !== document ) {\\n\\t\\tsetDocument( elem );\\n\\t}\\n\\n\\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\\n\\t\\t// Don\\'t get fooled by Object.prototype properties (jQuery #13807)\\n\\t\\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\\n\\t\\t\\tfn( elem, name, !documentIsHTML ) :\\n\\t\\t\\tundefined;\\n\\n\\treturn val !== undefined ?\\n\\t\\tval :\\n\\t\\tsupport.attributes || !documentIsHTML ?\\n\\t\\t\\telem.getAttribute( name ) :\\n\\t\\t\\t(val = elem.getAttributeNode(name)) && val.specified ?\\n\\t\\t\\t\\tval.value :\\n\\t\\t\\t\\tnull;\\n};\\n\\nSizzle.error = function( msg ) {\\n\\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\\n};\\n\\n/**\\n * Document sorting and removing duplicates\\n * @param {ArrayLike} results\\n */\\nSizzle.uniqueSort = function( results ) {\\n\\tvar elem,\\n\\t\\tduplicates = [],\\n\\t\\tj = 0,\\n\\t\\ti = 0;\\n\\n\\t// Unless we *know* we can detect duplicates, assume their presence\\n\\thasDuplicate = !support.detectDuplicates;\\n\\tsortInput = !support.sortStable && results.slice( 0 );\\n\\tresults.sort( sortOrder );\\n\\n\\tif ( hasDuplicate ) {\\n\\t\\twhile ( (elem = results[i++]) ) {\\n\\t\\t\\tif ( elem === results[ i ] ) {\\n\\t\\t\\t\\tj = duplicates.push( i );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile ( j-- ) {\\n\\t\\t\\tresults.splice( duplicates[ j ], 1 );\\n\\t\\t}\\n\\t}\\n\\n\\t// Clear input after sorting to release objects\\n\\t// See https://github.com/jquery/sizzle/pull/225\\n\\tsortInput = null;\\n\\n\\treturn results;\\n};\\n\\n/**\\n * Utility function for retrieving the text value of an array of DOM nodes\\n * @param {Array|Element} elem\\n */\\ngetText = Sizzle.getText = function( elem ) {\\n\\tvar node,\\n\\t\\tret = \"\",\\n\\t\\ti = 0,\\n\\t\\tnodeType = elem.nodeType;\\n\\n\\tif ( !nodeType ) {\\n\\t\\t// If no nodeType, this is expected to be an array\\n\\t\\twhile ( (node = elem[i++]) ) {\\n\\t\\t\\t// Do not traverse comment nodes\\n\\t\\t\\tret += getText( node );\\n\\t\\t}\\n\\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\\n\\t\\t// Use textContent for elements\\n\\t\\t// innerText usage removed for consistency of new lines (jQuery #11153)\\n\\t\\tif ( typeof elem.textContent === \"string\" ) {\\n\\t\\t\\treturn elem.textContent;\\n\\t\\t} else {\\n\\t\\t\\t// Traverse its children\\n\\t\\t\\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\\n\\t\\t\\t\\tret += getText( elem );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else if ( nodeType === 3 || nodeType === 4 ) {\\n\\t\\treturn elem.nodeValue;\\n\\t}\\n\\t// Do not include comment or processing instruction nodes\\n\\n\\treturn ret;\\n};\\n\\nExpr = Sizzle.selectors = {\\n\\n\\t// Can be adjusted by the user\\n\\tcacheLength: 50,\\n\\n\\tcreatePseudo: markFunction,\\n\\n\\tmatch: matchExpr,\\n\\n\\tattrHandle: {},\\n\\n\\tfind: {},\\n\\n\\trelative: {\\n\\t\\t\">\": { dir: \"parentNode\", first: true },\\n\\t\\t\" \": { dir: \"parentNode\" },\\n\\t\\t\"+\": { dir: \"previousSibling\", first: true },\\n\\t\\t\"~\": { dir: \"previousSibling\" }\\n\\t},\\n\\n\\tpreFilter: {\\n\\t\\t\"ATTR\": function( match ) {\\n\\t\\t\\tmatch[1] = match[1].replace( runescape, funescape );\\n\\n\\t\\t\\t// Move the given value to match[3] whether quoted or unquoted\\n\\t\\t\\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\\n\\n\\t\\t\\tif ( match[2] === \"~=\" ) {\\n\\t\\t\\t\\tmatch[3] = \" \" + match[3] + \" \";\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn match.slice( 0, 4 );\\n\\t\\t},\\n\\n\\t\\t\"CHILD\": function( match ) {\\n\\t\\t\\t/* matches from matchExpr[\"CHILD\"]\\n\\t\\t\\t\\t1 type (only|nth|...)\\n\\t\\t\\t\\t2 what (child|of-type)\\n\\t\\t\\t\\t3 argument (even|odd|\\\\d*|\\\\d*n([+-]\\\\d+)?|...)\\n\\t\\t\\t\\t4 xn-component of xn+y argument ([+-]?\\\\d*n|)\\n\\t\\t\\t\\t5 sign of xn-component\\n\\t\\t\\t\\t6 x of xn-component\\n\\t\\t\\t\\t7 sign of y-component\\n\\t\\t\\t\\t8 y of y-component\\n\\t\\t\\t*/\\n\\t\\t\\tmatch[1] = match[1].toLowerCase();\\n\\n\\t\\t\\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\\n\\t\\t\\t\\t// nth-* requires argument\\n\\t\\t\\t\\tif ( !match[3] ) {\\n\\t\\t\\t\\t\\tSizzle.error( match[0] );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// numeric x and y parameters for Expr.filter.CHILD\\n\\t\\t\\t\\t// remember that false/true cast respectively to 0/1\\n\\t\\t\\t\\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\\n\\t\\t\\t\\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\\n\\n\\t\\t\\t// other types prohibit arguments\\n\\t\\t\\t} else if ( match[3] ) {\\n\\t\\t\\t\\tSizzle.error( match[0] );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn match;\\n\\t\\t},\\n\\n\\t\\t\"PSEUDO\": function( match ) {\\n\\t\\t\\tvar excess,\\n\\t\\t\\t\\tunquoted = !match[6] && match[2];\\n\\n\\t\\t\\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Accept quoted arguments as-is\\n\\t\\t\\tif ( match[3] ) {\\n\\t\\t\\t\\tmatch[2] = match[4] || match[5] || \"\";\\n\\n\\t\\t\\t// Strip excess characters from unquoted arguments\\n\\t\\t\\t} else if ( unquoted && rpseudo.test( unquoted ) &&\\n\\t\\t\\t\\t// Get excess from tokenize (recursively)\\n\\t\\t\\t\\t(excess = tokenize( unquoted, true )) &&\\n\\t\\t\\t\\t// advance to the next closing parenthesis\\n\\t\\t\\t\\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\\n\\n\\t\\t\\t\\t// excess is a negative index\\n\\t\\t\\t\\tmatch[0] = match[0].slice( 0, excess );\\n\\t\\t\\t\\tmatch[2] = unquoted.slice( 0, excess );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return only captures needed by the pseudo filter method (type and argument)\\n\\t\\t\\treturn match.slice( 0, 3 );\\n\\t\\t}\\n\\t},\\n\\n\\tfilter: {\\n\\n\\t\\t\"TAG\": function( nodeNameSelector ) {\\n\\t\\t\\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\\n\\t\\t\\treturn nodeNameSelector === \"*\" ?\\n\\t\\t\\t\\tfunction() { return true; } :\\n\\t\\t\\t\\tfunction( elem ) {\\n\\t\\t\\t\\t\\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\\n\\t\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\t\"CLASS\": function( className ) {\\n\\t\\t\\tvar pattern = classCache[ className + \" \" ];\\n\\n\\t\\t\\treturn pattern ||\\n\\t\\t\\t\\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\\n\\t\\t\\t\\tclassCache( className, function( elem ) {\\n\\t\\t\\t\\t\\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\\n\\t\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\t\"ATTR\": function( name, operator, check ) {\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\tvar result = Sizzle.attr( elem, name );\\n\\n\\t\\t\\t\\tif ( result == null ) {\\n\\t\\t\\t\\t\\treturn operator === \"!=\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( !operator ) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tresult += \"\";\\n\\n\\t\\t\\t\\treturn operator === \"=\" ? result === check :\\n\\t\\t\\t\\t\\toperator === \"!=\" ? result !== check :\\n\\t\\t\\t\\t\\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\\n\\t\\t\\t\\t\\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\\n\\t\\t\\t\\t\\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\\n\\t\\t\\t\\t\\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\\n\\t\\t\\t\\t\\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\\n\\t\\t\\t\\t\\tfalse;\\n\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\t\"CHILD\": function( type, what, argument, first, last ) {\\n\\t\\t\\tvar simple = type.slice( 0, 3 ) !== \"nth\",\\n\\t\\t\\t\\tforward = type.slice( -4 ) !== \"last\",\\n\\t\\t\\t\\tofType = what === \"of-type\";\\n\\n\\t\\t\\treturn first === 1 && last === 0 ?\\n\\n\\t\\t\\t\\t// Shortcut for :nth-*(n)\\n\\t\\t\\t\\tfunction( elem ) {\\n\\t\\t\\t\\t\\treturn !!elem.parentNode;\\n\\t\\t\\t\\t} :\\n\\n\\t\\t\\t\\tfunction( elem, context, xml ) {\\n\\t\\t\\t\\t\\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\\n\\t\\t\\t\\t\\t\\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\\n\\t\\t\\t\\t\\t\\tparent = elem.parentNode,\\n\\t\\t\\t\\t\\t\\tname = ofType && elem.nodeName.toLowerCase(),\\n\\t\\t\\t\\t\\t\\tuseCache = !xml && !ofType,\\n\\t\\t\\t\\t\\t\\tdiff = false;\\n\\n\\t\\t\\t\\t\\tif ( parent ) {\\n\\n\\t\\t\\t\\t\\t\\t// :(first|last|only)-(child|of-type)\\n\\t\\t\\t\\t\\t\\tif ( simple ) {\\n\\t\\t\\t\\t\\t\\t\\twhile ( dir ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tnode = elem;\\n\\t\\t\\t\\t\\t\\t\\t\\twhile ( (node = node[ dir ]) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( ofType ?\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.nodeName.toLowerCase() === name :\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.nodeType === 1 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t// Reverse direction for :only-* (if we haven\\'t yet done so)\\n\\t\\t\\t\\t\\t\\t\\t\\tstart = dir = type === \"only\" && !start && \"nextSibling\";\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tstart = [ forward ? parent.firstChild : parent.lastChild ];\\n\\n\\t\\t\\t\\t\\t\\t// non-xml :nth-child(...) stores cache data on `parent`\\n\\t\\t\\t\\t\\t\\tif ( forward && useCache ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Seek `elem` from a previously-cached index\\n\\n\\t\\t\\t\\t\\t\\t\\t// ...in a gzip-friendly way\\n\\t\\t\\t\\t\\t\\t\\tnode = parent;\\n\\t\\t\\t\\t\\t\\t\\touterCache = node[ expando ] || (node[ expando ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[ node.uniqueID ] ||\\n\\t\\t\\t\\t\\t\\t\\t\\t(outerCache[ node.uniqueID ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\tcache = uniqueCache[ type ] || [];\\n\\t\\t\\t\\t\\t\\t\\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\\n\\t\\t\\t\\t\\t\\t\\tdiff = nodeIndex && cache[ 2 ];\\n\\t\\t\\t\\t\\t\\t\\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\\n\\n\\t\\t\\t\\t\\t\\t\\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Fallback to seeking `elem` from the start\\n\\t\\t\\t\\t\\t\\t\\t\\t(diff = nodeIndex = 0) || start.pop()) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// When found, cache indexes on `parent` and break\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( node.nodeType === 1 && ++diff && node === elem ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t// Use previously-cached element index if available\\n\\t\\t\\t\\t\\t\\t\\tif ( useCache ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// ...in a gzip-friendly way\\n\\t\\t\\t\\t\\t\\t\\t\\tnode = elem;\\n\\t\\t\\t\\t\\t\\t\\t\\touterCache = node[ expando ] || (node[ expando ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[ node.uniqueID ] ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(outerCache[ node.uniqueID ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tcache = uniqueCache[ type ] || [];\\n\\t\\t\\t\\t\\t\\t\\t\\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\\n\\t\\t\\t\\t\\t\\t\\t\\tdiff = nodeIndex;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// xml :nth-child(...)\\n\\t\\t\\t\\t\\t\\t\\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\\n\\t\\t\\t\\t\\t\\t\\tif ( diff === false ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// Use the same loop as above to seek `elem` from the start\\n\\t\\t\\t\\t\\t\\t\\t\\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(diff = nodeIndex = 0) || start.pop()) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( ( ofType ?\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.nodeName.toLowerCase() === name :\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.nodeType === 1 ) &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t++diff ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Cache the index of each encountered element\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( useCache ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\touterCache = node[ expando ] || (node[ expando ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[ node.uniqueID ] ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(outerCache[ node.uniqueID ] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache[ type ] = [ dirruns, diff ];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( node === elem ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Incorporate the offset, then check against cycle size\\n\\t\\t\\t\\t\\t\\tdiff -= last;\\n\\t\\t\\t\\t\\t\\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\t\"PSEUDO\": function( pseudo, argument ) {\\n\\t\\t\\t// pseudo-class names are case-insensitive\\n\\t\\t\\t// http://www.w3.org/TR/selectors/#pseudo-classes\\n\\t\\t\\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\\n\\t\\t\\t// Remember that setFilters inherits from pseudos\\n\\t\\t\\tvar args,\\n\\t\\t\\t\\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\\n\\t\\t\\t\\t\\tSizzle.error( \"unsupported pseudo: \" + pseudo );\\n\\n\\t\\t\\t// The user may use createPseudo to indicate that\\n\\t\\t\\t// arguments are needed to create the filter function\\n\\t\\t\\t// just as Sizzle does\\n\\t\\t\\tif ( fn[ expando ] ) {\\n\\t\\t\\t\\treturn fn( argument );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// But maintain support for old signatures\\n\\t\\t\\tif ( fn.length > 1 ) {\\n\\t\\t\\t\\targs = [ pseudo, pseudo, \"\", argument ];\\n\\t\\t\\t\\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\\n\\t\\t\\t\\t\\tmarkFunction(function( seed, matches ) {\\n\\t\\t\\t\\t\\t\\tvar idx,\\n\\t\\t\\t\\t\\t\\t\\tmatched = fn( seed, argument ),\\n\\t\\t\\t\\t\\t\\t\\ti = matched.length;\\n\\t\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\t\\t\\tidx = indexOf( seed, matched[i] );\\n\\t\\t\\t\\t\\t\\t\\tseed[ idx ] = !( matches[ idx ] = matched[i] );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}) :\\n\\t\\t\\t\\t\\tfunction( elem ) {\\n\\t\\t\\t\\t\\t\\treturn fn( elem, 0, args );\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn fn;\\n\\t\\t}\\n\\t},\\n\\n\\tpseudos: {\\n\\t\\t// Potentially complex pseudos\\n\\t\\t\"not\": markFunction(function( selector ) {\\n\\t\\t\\t// Trim the selector passed to compile\\n\\t\\t\\t// to avoid treating leading and trailing\\n\\t\\t\\t// spaces as combinators\\n\\t\\t\\tvar input = [],\\n\\t\\t\\t\\tresults = [],\\n\\t\\t\\t\\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\\n\\n\\t\\t\\treturn matcher[ expando ] ?\\n\\t\\t\\t\\tmarkFunction(function( seed, matches, context, xml ) {\\n\\t\\t\\t\\t\\tvar elem,\\n\\t\\t\\t\\t\\t\\tunmatched = matcher( seed, null, xml, [] ),\\n\\t\\t\\t\\t\\t\\ti = seed.length;\\n\\n\\t\\t\\t\\t\\t// Match elements unmatched by `matcher`\\n\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\t\\tif ( (elem = unmatched[i]) ) {\\n\\t\\t\\t\\t\\t\\t\\tseed[i] = !(matches[i] = elem);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}) :\\n\\t\\t\\t\\tfunction( elem, context, xml ) {\\n\\t\\t\\t\\t\\tinput[0] = elem;\\n\\t\\t\\t\\t\\tmatcher( input, null, xml, results );\\n\\t\\t\\t\\t\\t// Don\\'t keep the element (issue #299)\\n\\t\\t\\t\\t\\tinput[0] = null;\\n\\t\\t\\t\\t\\treturn !results.pop();\\n\\t\\t\\t\\t};\\n\\t\\t}),\\n\\n\\t\\t\"has\": markFunction(function( selector ) {\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\treturn Sizzle( selector, elem ).length > 0;\\n\\t\\t\\t};\\n\\t\\t}),\\n\\n\\t\\t\"contains\": markFunction(function( text ) {\\n\\t\\t\\ttext = text.replace( runescape, funescape );\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\\n\\t\\t\\t};\\n\\t\\t}),\\n\\n\\t\\t// \"Whether an element is represented by a :lang() selector\\n\\t\\t// is based solely on the element\\'s language value\\n\\t\\t// being equal to the identifier C,\\n\\t\\t// or beginning with the identifier C immediately followed by \"-\".\\n\\t\\t// The matching of C against the element\\'s language value is performed case-insensitively.\\n\\t\\t// The identifier C does not have to be a valid language name.\"\\n\\t\\t// http://www.w3.org/TR/selectors/#lang-pseudo\\n\\t\\t\"lang\": markFunction( function( lang ) {\\n\\t\\t\\t// lang value must be a valid identifier\\n\\t\\t\\tif ( !ridentifier.test(lang || \"\") ) {\\n\\t\\t\\t\\tSizzle.error( \"unsupported lang: \" + lang );\\n\\t\\t\\t}\\n\\t\\t\\tlang = lang.replace( runescape, funescape ).toLowerCase();\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\tvar elemLang;\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\tif ( (elemLang = documentIsHTML ?\\n\\t\\t\\t\\t\\t\\telem.lang :\\n\\t\\t\\t\\t\\t\\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\\n\\n\\t\\t\\t\\t\\t\\telemLang = elemLang.toLowerCase();\\n\\t\\t\\t\\t\\t\\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t};\\n\\t\\t}),\\n\\n\\t\\t// Miscellaneous\\n\\t\\t\"target\": function( elem ) {\\n\\t\\t\\tvar hash = window.location && window.location.hash;\\n\\t\\t\\treturn hash && hash.slice( 1 ) === elem.id;\\n\\t\\t},\\n\\n\\t\\t\"root\": function( elem ) {\\n\\t\\t\\treturn elem === docElem;\\n\\t\\t},\\n\\n\\t\\t\"focus\": function( elem ) {\\n\\t\\t\\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\\n\\t\\t},\\n\\n\\t\\t// Boolean properties\\n\\t\\t\"enabled\": function( elem ) {\\n\\t\\t\\treturn elem.disabled === false;\\n\\t\\t},\\n\\n\\t\\t\"disabled\": function( elem ) {\\n\\t\\t\\treturn elem.disabled === true;\\n\\t\\t},\\n\\n\\t\\t\"checked\": function( elem ) {\\n\\t\\t\\t// In CSS3, :checked should return both checked and selected elements\\n\\t\\t\\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n\\t\\t\\tvar nodeName = elem.nodeName.toLowerCase();\\n\\t\\t\\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\\n\\t\\t},\\n\\n\\t\\t\"selected\": function( elem ) {\\n\\t\\t\\t// Accessing this property makes selected-by-default\\n\\t\\t\\t// options in Safari work properly\\n\\t\\t\\tif ( elem.parentNode ) {\\n\\t\\t\\t\\telem.parentNode.selectedIndex;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn elem.selected === true;\\n\\t\\t},\\n\\n\\t\\t// Contents\\n\\t\\t\"empty\": function( elem ) {\\n\\t\\t\\t// http://www.w3.org/TR/selectors/#empty-pseudo\\n\\t\\t\\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\\n\\t\\t\\t//   but not by others (comment: 8; processing instruction: 7; etc.)\\n\\t\\t\\t// nodeType < 6 works because attributes (2) do not appear as children\\n\\t\\t\\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\\n\\t\\t\\t\\tif ( elem.nodeType < 6 ) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t},\\n\\n\\t\\t\"parent\": function( elem ) {\\n\\t\\t\\treturn !Expr.pseudos[\"empty\"]( elem );\\n\\t\\t},\\n\\n\\t\\t// Element/input types\\n\\t\\t\"header\": function( elem ) {\\n\\t\\t\\treturn rheader.test( elem.nodeName );\\n\\t\\t},\\n\\n\\t\\t\"input\": function( elem ) {\\n\\t\\t\\treturn rinputs.test( elem.nodeName );\\n\\t\\t},\\n\\n\\t\\t\"button\": function( elem ) {\\n\\t\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\t\\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\\n\\t\\t},\\n\\n\\t\\t\"text\": function( elem ) {\\n\\t\\t\\tvar attr;\\n\\t\\t\\treturn elem.nodeName.toLowerCase() === \"input\" &&\\n\\t\\t\\t\\telem.type === \"text\" &&\\n\\n\\t\\t\\t\\t// Support: IE<8\\n\\t\\t\\t\\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\\n\\t\\t\\t\\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\\n\\t\\t},\\n\\n\\t\\t// Position-in-collection\\n\\t\\t\"first\": createPositionalPseudo(function() {\\n\\t\\t\\treturn [ 0 ];\\n\\t\\t}),\\n\\n\\t\\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\\n\\t\\t\\treturn [ length - 1 ];\\n\\t\\t}),\\n\\n\\t\\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\\n\\t\\t\\treturn [ argument < 0 ? argument + length : argument ];\\n\\t\\t}),\\n\\n\\t\\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\\n\\t\\t\\tvar i = 0;\\n\\t\\t\\tfor ( ; i < length; i += 2 ) {\\n\\t\\t\\t\\tmatchIndexes.push( i );\\n\\t\\t\\t}\\n\\t\\t\\treturn matchIndexes;\\n\\t\\t}),\\n\\n\\t\\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\\n\\t\\t\\tvar i = 1;\\n\\t\\t\\tfor ( ; i < length; i += 2 ) {\\n\\t\\t\\t\\tmatchIndexes.push( i );\\n\\t\\t\\t}\\n\\t\\t\\treturn matchIndexes;\\n\\t\\t}),\\n\\n\\t\\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\\n\\t\\t\\tvar i = argument < 0 ? argument + length : argument;\\n\\t\\t\\tfor ( ; --i >= 0; ) {\\n\\t\\t\\t\\tmatchIndexes.push( i );\\n\\t\\t\\t}\\n\\t\\t\\treturn matchIndexes;\\n\\t\\t}),\\n\\n\\t\\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\\n\\t\\t\\tvar i = argument < 0 ? argument + length : argument;\\n\\t\\t\\tfor ( ; ++i < length; ) {\\n\\t\\t\\t\\tmatchIndexes.push( i );\\n\\t\\t\\t}\\n\\t\\t\\treturn matchIndexes;\\n\\t\\t})\\n\\t}\\n};\\n\\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\\n\\n// Add button/input type pseudos\\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\\n\\tExpr.pseudos[ i ] = createInputPseudo( i );\\n}\\nfor ( i in { submit: true, reset: true } ) {\\n\\tExpr.pseudos[ i ] = createButtonPseudo( i );\\n}\\n\\n// Easy API for creating new setFilters\\nfunction setFilters() {}\\nsetFilters.prototype = Expr.filters = Expr.pseudos;\\nExpr.setFilters = new setFilters();\\n\\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\\n\\tvar matched, match, tokens, type,\\n\\t\\tsoFar, groups, preFilters,\\n\\t\\tcached = tokenCache[ selector + \" \" ];\\n\\n\\tif ( cached ) {\\n\\t\\treturn parseOnly ? 0 : cached.slice( 0 );\\n\\t}\\n\\n\\tsoFar = selector;\\n\\tgroups = [];\\n\\tpreFilters = Expr.preFilter;\\n\\n\\twhile ( soFar ) {\\n\\n\\t\\t// Comma and first run\\n\\t\\tif ( !matched || (match = rcomma.exec( soFar )) ) {\\n\\t\\t\\tif ( match ) {\\n\\t\\t\\t\\t// Don\\'t consume trailing commas as valid\\n\\t\\t\\t\\tsoFar = soFar.slice( match[0].length ) || soFar;\\n\\t\\t\\t}\\n\\t\\t\\tgroups.push( (tokens = []) );\\n\\t\\t}\\n\\n\\t\\tmatched = false;\\n\\n\\t\\t// Combinators\\n\\t\\tif ( (match = rcombinators.exec( soFar )) ) {\\n\\t\\t\\tmatched = match.shift();\\n\\t\\t\\ttokens.push({\\n\\t\\t\\t\\tvalue: matched,\\n\\t\\t\\t\\t// Cast descendant combinators to space\\n\\t\\t\\t\\ttype: match[0].replace( rtrim, \" \" )\\n\\t\\t\\t});\\n\\t\\t\\tsoFar = soFar.slice( matched.length );\\n\\t\\t}\\n\\n\\t\\t// Filters\\n\\t\\tfor ( type in Expr.filter ) {\\n\\t\\t\\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\\n\\t\\t\\t\\t(match = preFilters[ type ]( match ))) ) {\\n\\t\\t\\t\\tmatched = match.shift();\\n\\t\\t\\t\\ttokens.push({\\n\\t\\t\\t\\t\\tvalue: matched,\\n\\t\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\t\\tmatches: match\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tsoFar = soFar.slice( matched.length );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( !matched ) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\t// Return the length of the invalid excess\\n\\t// if we\\'re just parsing\\n\\t// Otherwise, throw an error or return tokens\\n\\treturn parseOnly ?\\n\\t\\tsoFar.length :\\n\\t\\tsoFar ?\\n\\t\\t\\tSizzle.error( selector ) :\\n\\t\\t\\t// Cache the tokens\\n\\t\\t\\ttokenCache( selector, groups ).slice( 0 );\\n};\\n\\nfunction toSelector( tokens ) {\\n\\tvar i = 0,\\n\\t\\tlen = tokens.length,\\n\\t\\tselector = \"\";\\n\\tfor ( ; i < len; i++ ) {\\n\\t\\tselector += tokens[i].value;\\n\\t}\\n\\treturn selector;\\n}\\n\\nfunction addCombinator( matcher, combinator, base ) {\\n\\tvar dir = combinator.dir,\\n\\t\\tcheckNonElements = base && dir === \"parentNode\",\\n\\t\\tdoneName = done++;\\n\\n\\treturn combinator.first ?\\n\\t\\t// Check against closest ancestor/preceding element\\n\\t\\tfunction( elem, context, xml ) {\\n\\t\\t\\twhile ( (elem = elem[ dir ]) ) {\\n\\t\\t\\t\\tif ( elem.nodeType === 1 || checkNonElements ) {\\n\\t\\t\\t\\t\\treturn matcher( elem, context, xml );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} :\\n\\n\\t\\t// Check against all ancestor/preceding elements\\n\\t\\tfunction( elem, context, xml ) {\\n\\t\\t\\tvar oldCache, uniqueCache, outerCache,\\n\\t\\t\\t\\tnewCache = [ dirruns, doneName ];\\n\\n\\t\\t\\t// We can\\'t set arbitrary data on XML nodes, so they don\\'t benefit from combinator caching\\n\\t\\t\\tif ( xml ) {\\n\\t\\t\\t\\twhile ( (elem = elem[ dir ]) ) {\\n\\t\\t\\t\\t\\tif ( elem.nodeType === 1 || checkNonElements ) {\\n\\t\\t\\t\\t\\t\\tif ( matcher( elem, context, xml ) ) {\\n\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twhile ( (elem = elem[ dir ]) ) {\\n\\t\\t\\t\\t\\tif ( elem.nodeType === 1 || checkNonElements ) {\\n\\t\\t\\t\\t\\t\\touterCache = elem[ expando ] || (elem[ expando ] = {});\\n\\n\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\\n\\n\\t\\t\\t\\t\\t\\tif ( (oldCache = uniqueCache[ dir ]) &&\\n\\t\\t\\t\\t\\t\\t\\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Assign to newCache so results back-propagate to previous elements\\n\\t\\t\\t\\t\\t\\t\\treturn (newCache[ 2 ] = oldCache[ 2 ]);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t// Reuse newcache so results back-propagate to previous elements\\n\\t\\t\\t\\t\\t\\t\\tuniqueCache[ dir ] = newCache;\\n\\n\\t\\t\\t\\t\\t\\t\\t// A match means we\\'re done; a fail means we have to keep checking\\n\\t\\t\\t\\t\\t\\t\\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n}\\n\\nfunction elementMatcher( matchers ) {\\n\\treturn matchers.length > 1 ?\\n\\t\\tfunction( elem, context, xml ) {\\n\\t\\t\\tvar i = matchers.length;\\n\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\tif ( !matchers[i]( elem, context, xml ) ) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t} :\\n\\t\\tmatchers[0];\\n}\\n\\nfunction multipleContexts( selector, contexts, results ) {\\n\\tvar i = 0,\\n\\t\\tlen = contexts.length;\\n\\tfor ( ; i < len; i++ ) {\\n\\t\\tSizzle( selector, contexts[i], results );\\n\\t}\\n\\treturn results;\\n}\\n\\nfunction condense( unmatched, map, filter, context, xml ) {\\n\\tvar elem,\\n\\t\\tnewUnmatched = [],\\n\\t\\ti = 0,\\n\\t\\tlen = unmatched.length,\\n\\t\\tmapped = map != null;\\n\\n\\tfor ( ; i < len; i++ ) {\\n\\t\\tif ( (elem = unmatched[i]) ) {\\n\\t\\t\\tif ( !filter || filter( elem, context, xml ) ) {\\n\\t\\t\\t\\tnewUnmatched.push( elem );\\n\\t\\t\\t\\tif ( mapped ) {\\n\\t\\t\\t\\t\\tmap.push( i );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn newUnmatched;\\n}\\n\\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\\n\\tif ( postFilter && !postFilter[ expando ] ) {\\n\\t\\tpostFilter = setMatcher( postFilter );\\n\\t}\\n\\tif ( postFinder && !postFinder[ expando ] ) {\\n\\t\\tpostFinder = setMatcher( postFinder, postSelector );\\n\\t}\\n\\treturn markFunction(function( seed, results, context, xml ) {\\n\\t\\tvar temp, i, elem,\\n\\t\\t\\tpreMap = [],\\n\\t\\t\\tpostMap = [],\\n\\t\\t\\tpreexisting = results.length,\\n\\n\\t\\t\\t// Get initial elements from seed or context\\n\\t\\t\\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\\n\\n\\t\\t\\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\\n\\t\\t\\tmatcherIn = preFilter && ( seed || !selector ) ?\\n\\t\\t\\t\\tcondense( elems, preMap, preFilter, context, xml ) :\\n\\t\\t\\t\\telems,\\n\\n\\t\\t\\tmatcherOut = matcher ?\\n\\t\\t\\t\\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\\n\\t\\t\\t\\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\\n\\n\\t\\t\\t\\t\\t// ...intermediate processing is necessary\\n\\t\\t\\t\\t\\t[] :\\n\\n\\t\\t\\t\\t\\t// ...otherwise use results directly\\n\\t\\t\\t\\t\\tresults :\\n\\t\\t\\t\\tmatcherIn;\\n\\n\\t\\t// Find primary matches\\n\\t\\tif ( matcher ) {\\n\\t\\t\\tmatcher( matcherIn, matcherOut, context, xml );\\n\\t\\t}\\n\\n\\t\\t// Apply postFilter\\n\\t\\tif ( postFilter ) {\\n\\t\\t\\ttemp = condense( matcherOut, postMap );\\n\\t\\t\\tpostFilter( temp, [], context, xml );\\n\\n\\t\\t\\t// Un-match failing elements by moving them back to matcherIn\\n\\t\\t\\ti = temp.length;\\n\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\tif ( (elem = temp[i]) ) {\\n\\t\\t\\t\\t\\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( seed ) {\\n\\t\\t\\tif ( postFinder || preFilter ) {\\n\\t\\t\\t\\tif ( postFinder ) {\\n\\t\\t\\t\\t\\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\\n\\t\\t\\t\\t\\ttemp = [];\\n\\t\\t\\t\\t\\ti = matcherOut.length;\\n\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\t\\tif ( (elem = matcherOut[i]) ) {\\n\\t\\t\\t\\t\\t\\t\\t// Restore matcherIn since elem is not yet a final match\\n\\t\\t\\t\\t\\t\\t\\ttemp.push( (matcherIn[i] = elem) );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tpostFinder( null, (matcherOut = []), temp, xml );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Move matched elements from seed to results to keep them synchronized\\n\\t\\t\\t\\ti = matcherOut.length;\\n\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\tif ( (elem = matcherOut[i]) &&\\n\\t\\t\\t\\t\\t\\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\\n\\n\\t\\t\\t\\t\\t\\tseed[temp] = !(results[temp] = elem);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t// Add elements to results, through postFinder if defined\\n\\t\\t} else {\\n\\t\\t\\tmatcherOut = condense(\\n\\t\\t\\t\\tmatcherOut === results ?\\n\\t\\t\\t\\t\\tmatcherOut.splice( preexisting, matcherOut.length ) :\\n\\t\\t\\t\\t\\tmatcherOut\\n\\t\\t\\t);\\n\\t\\t\\tif ( postFinder ) {\\n\\t\\t\\t\\tpostFinder( null, results, matcherOut, xml );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpush.apply( results, matcherOut );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction matcherFromTokens( tokens ) {\\n\\tvar checkContext, matcher, j,\\n\\t\\tlen = tokens.length,\\n\\t\\tleadingRelative = Expr.relative[ tokens[0].type ],\\n\\t\\timplicitRelative = leadingRelative || Expr.relative[\" \"],\\n\\t\\ti = leadingRelative ? 1 : 0,\\n\\n\\t\\t// The foundational matcher ensures that elements are reachable from top-level context(s)\\n\\t\\tmatchContext = addCombinator( function( elem ) {\\n\\t\\t\\treturn elem === checkContext;\\n\\t\\t}, implicitRelative, true ),\\n\\t\\tmatchAnyContext = addCombinator( function( elem ) {\\n\\t\\t\\treturn indexOf( checkContext, elem ) > -1;\\n\\t\\t}, implicitRelative, true ),\\n\\t\\tmatchers = [ function( elem, context, xml ) {\\n\\t\\t\\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\\n\\t\\t\\t\\t(checkContext = context).nodeType ?\\n\\t\\t\\t\\t\\tmatchContext( elem, context, xml ) :\\n\\t\\t\\t\\t\\tmatchAnyContext( elem, context, xml ) );\\n\\t\\t\\t// Avoid hanging onto element (issue #299)\\n\\t\\t\\tcheckContext = null;\\n\\t\\t\\treturn ret;\\n\\t\\t} ];\\n\\n\\tfor ( ; i < len; i++ ) {\\n\\t\\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\\n\\t\\t\\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\\n\\t\\t} else {\\n\\t\\t\\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\\n\\n\\t\\t\\t// Return special upon seeing a positional matcher\\n\\t\\t\\tif ( matcher[ expando ] ) {\\n\\t\\t\\t\\t// Find the next relative operator (if any) for proper handling\\n\\t\\t\\t\\tj = ++i;\\n\\t\\t\\t\\tfor ( ; j < len; j++ ) {\\n\\t\\t\\t\\t\\tif ( Expr.relative[ tokens[j].type ] ) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn setMatcher(\\n\\t\\t\\t\\t\\ti > 1 && elementMatcher( matchers ),\\n\\t\\t\\t\\t\\ti > 1 && toSelector(\\n\\t\\t\\t\\t\\t\\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\\n\\t\\t\\t\\t\\t\\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\\n\\t\\t\\t\\t\\t).replace( rtrim, \"$1\" ),\\n\\t\\t\\t\\t\\tmatcher,\\n\\t\\t\\t\\t\\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\\n\\t\\t\\t\\t\\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\\n\\t\\t\\t\\t\\tj < len && toSelector( tokens )\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tmatchers.push( matcher );\\n\\t\\t}\\n\\t}\\n\\n\\treturn elementMatcher( matchers );\\n}\\n\\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\\n\\tvar bySet = setMatchers.length > 0,\\n\\t\\tbyElement = elementMatchers.length > 0,\\n\\t\\tsuperMatcher = function( seed, context, xml, results, outermost ) {\\n\\t\\t\\tvar elem, j, matcher,\\n\\t\\t\\t\\tmatchedCount = 0,\\n\\t\\t\\t\\ti = \"0\",\\n\\t\\t\\t\\tunmatched = seed && [],\\n\\t\\t\\t\\tsetMatched = [],\\n\\t\\t\\t\\tcontextBackup = outermostContext,\\n\\t\\t\\t\\t// We must always have either seed elements or outermost context\\n\\t\\t\\t\\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\\n\\t\\t\\t\\t// Use integer dirruns iff this is the outermost matcher\\n\\t\\t\\t\\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\\n\\t\\t\\t\\tlen = elems.length;\\n\\n\\t\\t\\tif ( outermost ) {\\n\\t\\t\\t\\toutermostContext = context === document || context || outermost;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add elements passing elementMatchers directly to results\\n\\t\\t\\t// Support: IE<9, Safari\\n\\t\\t\\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\\n\\t\\t\\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\\n\\t\\t\\t\\tif ( byElement && elem ) {\\n\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\tif ( !context && elem.ownerDocument !== document ) {\\n\\t\\t\\t\\t\\t\\tsetDocument( elem );\\n\\t\\t\\t\\t\\t\\txml = !documentIsHTML;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\twhile ( (matcher = elementMatchers[j++]) ) {\\n\\t\\t\\t\\t\\t\\tif ( matcher( elem, context || document, xml) ) {\\n\\t\\t\\t\\t\\t\\t\\tresults.push( elem );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif ( outermost ) {\\n\\t\\t\\t\\t\\t\\tdirruns = dirrunsUnique;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Track unmatched elements for set filters\\n\\t\\t\\t\\tif ( bySet ) {\\n\\t\\t\\t\\t\\t// They will have gone through all possible matchers\\n\\t\\t\\t\\t\\tif ( (elem = !matcher && elem) ) {\\n\\t\\t\\t\\t\\t\\tmatchedCount--;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Lengthen the array for every element, matched or not\\n\\t\\t\\t\\t\\tif ( seed ) {\\n\\t\\t\\t\\t\\t\\tunmatched.push( elem );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\\n\\t\\t\\t// makes the latter nonnegative.\\n\\t\\t\\tmatchedCount += i;\\n\\n\\t\\t\\t// Apply set filters to unmatched elements\\n\\t\\t\\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\\n\\t\\t\\t// equals `i`), unless we didn\\'t visit _any_ elements in the above loop because we have\\n\\t\\t\\t// no element matchers and no seed.\\n\\t\\t\\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\\n\\t\\t\\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\\n\\t\\t\\t// numerically zero.\\n\\t\\t\\tif ( bySet && i !== matchedCount ) {\\n\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\twhile ( (matcher = setMatchers[j++]) ) {\\n\\t\\t\\t\\t\\tmatcher( unmatched, setMatched, context, xml );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( seed ) {\\n\\t\\t\\t\\t\\t// Reintegrate element matches to eliminate the need for sorting\\n\\t\\t\\t\\t\\tif ( matchedCount > 0 ) {\\n\\t\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\t\\t\\tif ( !(unmatched[i] || setMatched[i]) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tsetMatched[i] = pop.call( results );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Discard index placeholder values to get only actual matches\\n\\t\\t\\t\\t\\tsetMatched = condense( setMatched );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add matches to results\\n\\t\\t\\t\\tpush.apply( results, setMatched );\\n\\n\\t\\t\\t\\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\\n\\t\\t\\t\\tif ( outermost && !seed && setMatched.length > 0 &&\\n\\t\\t\\t\\t\\t( matchedCount + setMatchers.length ) > 1 ) {\\n\\n\\t\\t\\t\\t\\tSizzle.uniqueSort( results );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Override manipulation of globals by nested matchers\\n\\t\\t\\tif ( outermost ) {\\n\\t\\t\\t\\tdirruns = dirrunsUnique;\\n\\t\\t\\t\\toutermostContext = contextBackup;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn unmatched;\\n\\t\\t};\\n\\n\\treturn bySet ?\\n\\t\\tmarkFunction( superMatcher ) :\\n\\t\\tsuperMatcher;\\n}\\n\\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\\n\\tvar i,\\n\\t\\tsetMatchers = [],\\n\\t\\telementMatchers = [],\\n\\t\\tcached = compilerCache[ selector + \" \" ];\\n\\n\\tif ( !cached ) {\\n\\t\\t// Generate a function of recursive functions that can be used to check each element\\n\\t\\tif ( !match ) {\\n\\t\\t\\tmatch = tokenize( selector );\\n\\t\\t}\\n\\t\\ti = match.length;\\n\\t\\twhile ( i-- ) {\\n\\t\\t\\tcached = matcherFromTokens( match[i] );\\n\\t\\t\\tif ( cached[ expando ] ) {\\n\\t\\t\\t\\tsetMatchers.push( cached );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\telementMatchers.push( cached );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Cache the compiled function\\n\\t\\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\\n\\n\\t\\t// Save selector and tokenization\\n\\t\\tcached.selector = selector;\\n\\t}\\n\\treturn cached;\\n};\\n\\n/**\\n * A low-level selection function that works with Sizzle\\'s compiled\\n *  selector functions\\n * @param {String|Function} selector A selector or a pre-compiled\\n *  selector function built with Sizzle.compile\\n * @param {Element} context\\n * @param {Array} [results]\\n * @param {Array} [seed] A set of elements to match against\\n */\\nselect = Sizzle.select = function( selector, context, results, seed ) {\\n\\tvar i, tokens, token, type, find,\\n\\t\\tcompiled = typeof selector === \"function\" && selector,\\n\\t\\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\\n\\n\\tresults = results || [];\\n\\n\\t// Try to minimize operations if there is only one selector in the list and no seed\\n\\t// (the latter of which guarantees us context)\\n\\tif ( match.length === 1 ) {\\n\\n\\t\\t// Reduce context if the leading compound selector is an ID\\n\\t\\ttokens = match[0] = match[0].slice( 0 );\\n\\t\\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\\n\\t\\t\\t\\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\\n\\t\\t\\t\\tExpr.relative[ tokens[1].type ] ) {\\n\\n\\t\\t\\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\\n\\t\\t\\tif ( !context ) {\\n\\t\\t\\t\\treturn results;\\n\\n\\t\\t\\t// Precompiled matchers will still verify ancestry, so step up a level\\n\\t\\t\\t} else if ( compiled ) {\\n\\t\\t\\t\\tcontext = context.parentNode;\\n\\t\\t\\t}\\n\\n\\t\\t\\tselector = selector.slice( tokens.shift().value.length );\\n\\t\\t}\\n\\n\\t\\t// Fetch a seed set for right-to-left matching\\n\\t\\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\\n\\t\\twhile ( i-- ) {\\n\\t\\t\\ttoken = tokens[i];\\n\\n\\t\\t\\t// Abort if we hit a combinator\\n\\t\\t\\tif ( Expr.relative[ (type = token.type) ] ) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif ( (find = Expr.find[ type ]) ) {\\n\\t\\t\\t\\t// Search, expanding context for leading sibling combinators\\n\\t\\t\\t\\tif ( (seed = find(\\n\\t\\t\\t\\t\\ttoken.matches[0].replace( runescape, funescape ),\\n\\t\\t\\t\\t\\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\\n\\t\\t\\t\\t)) ) {\\n\\n\\t\\t\\t\\t\\t// If seed is empty or no tokens remain, we can return early\\n\\t\\t\\t\\t\\ttokens.splice( i, 1 );\\n\\t\\t\\t\\t\\tselector = seed.length && toSelector( tokens );\\n\\t\\t\\t\\t\\tif ( !selector ) {\\n\\t\\t\\t\\t\\t\\tpush.apply( results, seed );\\n\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Compile and execute a filtering function if one is not provided\\n\\t// Provide `match` to avoid retokenization if we modified the selector above\\n\\t( compiled || compile( selector, match ) )(\\n\\t\\tseed,\\n\\t\\tcontext,\\n\\t\\t!documentIsHTML,\\n\\t\\tresults,\\n\\t\\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\\n\\t);\\n\\treturn results;\\n};\\n\\n// One-time assignments\\n\\n// Sort stability\\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\\n\\n// Support: Chrome 14-35+\\n// Always assume duplicates if they aren\\'t passed to the comparison function\\nsupport.detectDuplicates = !!hasDuplicate;\\n\\n// Initialize against the default document\\nsetDocument();\\n\\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\\n// Detached nodes confoundingly follow *each other*\\nsupport.sortDetached = assert(function( div1 ) {\\n\\t// Should return 1, but returns 4 (following)\\n\\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\\n});\\n\\n// Support: IE<8\\n// Prevent attribute/property \"interpolation\"\\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\\nif ( !assert(function( div ) {\\n\\tdiv.innerHTML = \"<a href=\\'#\\'></a>\";\\n\\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\\n}) ) {\\n\\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\\n\\t\\tif ( !isXML ) {\\n\\t\\t\\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\\n\\t\\t}\\n\\t});\\n}\\n\\n// Support: IE<9\\n// Use defaultValue in place of getAttribute(\"value\")\\nif ( !support.attributes || !assert(function( div ) {\\n\\tdiv.innerHTML = \"<input/>\";\\n\\tdiv.firstChild.setAttribute( \"value\", \"\" );\\n\\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\\n}) ) {\\n\\taddHandle( \"value\", function( elem, name, isXML ) {\\n\\t\\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\\n\\t\\t\\treturn elem.defaultValue;\\n\\t\\t}\\n\\t});\\n}\\n\\n// Support: IE<9\\n// Use getAttributeNode to fetch booleans when getAttribute lies\\nif ( !assert(function( div ) {\\n\\treturn div.getAttribute(\"disabled\") == null;\\n}) ) {\\n\\taddHandle( booleans, function( elem, name, isXML ) {\\n\\t\\tvar val;\\n\\t\\tif ( !isXML ) {\\n\\t\\t\\treturn elem[ name ] === true ? name.toLowerCase() :\\n\\t\\t\\t\\t\\t(val = elem.getAttributeNode( name )) && val.specified ?\\n\\t\\t\\t\\t\\tval.value :\\n\\t\\t\\t\\tnull;\\n\\t\\t}\\n\\t});\\n}\\n\\nreturn Sizzle;\\n\\n})( window );\\n\\n\\n\\njQuery.find = Sizzle;\\njQuery.expr = Sizzle.selectors;\\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\\njQuery.text = Sizzle.getText;\\njQuery.isXMLDoc = Sizzle.isXML;\\njQuery.contains = Sizzle.contains;\\n\\n\\n\\nvar dir = function( elem, dir, until ) {\\n\\tvar matched = [],\\n\\t\\ttruncate = until !== undefined;\\n\\n\\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\\n\\t\\tif ( elem.nodeType === 1 ) {\\n\\t\\t\\tif ( truncate && jQuery( elem ).is( until ) ) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tmatched.push( elem );\\n\\t\\t}\\n\\t}\\n\\treturn matched;\\n};\\n\\n\\nvar siblings = function( n, elem ) {\\n\\tvar matched = [];\\n\\n\\tfor ( ; n; n = n.nextSibling ) {\\n\\t\\tif ( n.nodeType === 1 && n !== elem ) {\\n\\t\\t\\tmatched.push( n );\\n\\t\\t}\\n\\t}\\n\\n\\treturn matched;\\n};\\n\\n\\nvar rneedsContext = jQuery.expr.match.needsContext;\\n\\nvar rsingleTag = ( /^<([\\\\w-]+)\\\\s*\\\\/?>(?:<\\\\/\\\\1>|)$/ );\\n\\n\\n\\nvar risSimple = /^.[^:#\\\\[\\\\.,]*$/;\\n\\n// Implement the identical functionality for filter and not\\nfunction winnow( elements, qualifier, not ) {\\n\\tif ( jQuery.isFunction( qualifier ) ) {\\n\\t\\treturn jQuery.grep( elements, function( elem, i ) {\\n\\t\\t\\t/* jshint -W018 */\\n\\t\\t\\treturn !!qualifier.call( elem, i, elem ) !== not;\\n\\t\\t} );\\n\\n\\t}\\n\\n\\tif ( qualifier.nodeType ) {\\n\\t\\treturn jQuery.grep( elements, function( elem ) {\\n\\t\\t\\treturn ( elem === qualifier ) !== not;\\n\\t\\t} );\\n\\n\\t}\\n\\n\\tif ( typeof qualifier === \"string\" ) {\\n\\t\\tif ( risSimple.test( qualifier ) ) {\\n\\t\\t\\treturn jQuery.filter( qualifier, elements, not );\\n\\t\\t}\\n\\n\\t\\tqualifier = jQuery.filter( qualifier, elements );\\n\\t}\\n\\n\\treturn jQuery.grep( elements, function( elem ) {\\n\\t\\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\\n\\t} );\\n}\\n\\njQuery.filter = function( expr, elems, not ) {\\n\\tvar elem = elems[ 0 ];\\n\\n\\tif ( not ) {\\n\\t\\texpr = \":not(\" + expr + \")\";\\n\\t}\\n\\n\\treturn elems.length === 1 && elem.nodeType === 1 ?\\n\\t\\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\\n\\t\\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\\n\\t\\t\\treturn elem.nodeType === 1;\\n\\t\\t} ) );\\n};\\n\\njQuery.fn.extend( {\\n\\tfind: function( selector ) {\\n\\t\\tvar i,\\n\\t\\t\\tlen = this.length,\\n\\t\\t\\tret = [],\\n\\t\\t\\tself = this;\\n\\n\\t\\tif ( typeof selector !== \"string\" ) {\\n\\t\\t\\treturn this.pushStack( jQuery( selector ).filter( function() {\\n\\t\\t\\t\\tfor ( i = 0; i < len; i++ ) {\\n\\t\\t\\t\\t\\tif ( jQuery.contains( self[ i ], this ) ) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} ) );\\n\\t\\t}\\n\\n\\t\\tfor ( i = 0; i < len; i++ ) {\\n\\t\\t\\tjQuery.find( selector, self[ i ], ret );\\n\\t\\t}\\n\\n\\t\\t// Needed because $( selector, context ) becomes $( context ).find( selector )\\n\\t\\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\\n\\t\\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\\n\\t\\treturn ret;\\n\\t},\\n\\tfilter: function( selector ) {\\n\\t\\treturn this.pushStack( winnow( this, selector || [], false ) );\\n\\t},\\n\\tnot: function( selector ) {\\n\\t\\treturn this.pushStack( winnow( this, selector || [], true ) );\\n\\t},\\n\\tis: function( selector ) {\\n\\t\\treturn !!winnow(\\n\\t\\t\\tthis,\\n\\n\\t\\t\\t// If this is a positional/relative selector, check membership in the returned set\\n\\t\\t\\t// so $(\"p:first\").is(\"p:last\") won\\'t return true for a doc with two \"p\".\\n\\t\\t\\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\\n\\t\\t\\t\\tjQuery( selector ) :\\n\\t\\t\\t\\tselector || [],\\n\\t\\t\\tfalse\\n\\t\\t).length;\\n\\t}\\n} );\\n\\n\\n// Initialize a jQuery object\\n\\n\\n// A central reference to the root jQuery(document)\\nvar rootjQuery,\\n\\n\\t// A simple way to check for HTML strings\\n\\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\\n\\t// Strict HTML recognition (#11290: must start with <)\\n\\trquickExpr = /^(?:\\\\s*(<[\\\\w\\\\W]+>)[^>]*|#([\\\\w-]*))$/,\\n\\n\\tinit = jQuery.fn.init = function( selector, context, root ) {\\n\\t\\tvar match, elem;\\n\\n\\t\\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\\n\\t\\tif ( !selector ) {\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\t// Method init() accepts an alternate rootjQuery\\n\\t\\t// so migrate can support jQuery.sub (gh-2101)\\n\\t\\troot = root || rootjQuery;\\n\\n\\t\\t// Handle HTML strings\\n\\t\\tif ( typeof selector === \"string\" ) {\\n\\t\\t\\tif ( selector[ 0 ] === \"<\" &&\\n\\t\\t\\t\\tselector[ selector.length - 1 ] === \">\" &&\\n\\t\\t\\t\\tselector.length >= 3 ) {\\n\\n\\t\\t\\t\\t// Assume that strings that start and end with <> are HTML and skip the regex check\\n\\t\\t\\t\\tmatch = [ null, selector, null ];\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmatch = rquickExpr.exec( selector );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Match html or make sure no context is specified for #id\\n\\t\\t\\tif ( match && ( match[ 1 ] || !context ) ) {\\n\\n\\t\\t\\t\\t// HANDLE: $(html) -> $(array)\\n\\t\\t\\t\\tif ( match[ 1 ] ) {\\n\\t\\t\\t\\t\\tcontext = context instanceof jQuery ? context[ 0 ] : context;\\n\\n\\t\\t\\t\\t\\t// Option to run scripts is true for back-compat\\n\\t\\t\\t\\t\\t// Intentionally let the error be thrown if parseHTML is not present\\n\\t\\t\\t\\t\\tjQuery.merge( this, jQuery.parseHTML(\\n\\t\\t\\t\\t\\t\\tmatch[ 1 ],\\n\\t\\t\\t\\t\\t\\tcontext && context.nodeType ? context.ownerDocument || context : document,\\n\\t\\t\\t\\t\\t\\ttrue\\n\\t\\t\\t\\t\\t) );\\n\\n\\t\\t\\t\\t\\t// HANDLE: $(html, props)\\n\\t\\t\\t\\t\\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\\n\\t\\t\\t\\t\\t\\tfor ( match in context ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Properties of context are called as methods if possible\\n\\t\\t\\t\\t\\t\\t\\tif ( jQuery.isFunction( this[ match ] ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[ match ]( context[ match ] );\\n\\n\\t\\t\\t\\t\\t\\t\\t// ...and otherwise set as attributes\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.attr( match, context[ match ] );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t\\t// HANDLE: $(#id)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telem = document.getElementById( match[ 2 ] );\\n\\n\\t\\t\\t\\t\\t// Support: Blackberry 4.6\\n\\t\\t\\t\\t\\t// gEBID returns nodes no longer in the document (#6963)\\n\\t\\t\\t\\t\\tif ( elem && elem.parentNode ) {\\n\\n\\t\\t\\t\\t\\t\\t// Inject the element directly into the jQuery object\\n\\t\\t\\t\\t\\t\\tthis.length = 1;\\n\\t\\t\\t\\t\\t\\tthis[ 0 ] = elem;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tthis.context = document;\\n\\t\\t\\t\\t\\tthis.selector = selector;\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t// HANDLE: $(expr, $(...))\\n\\t\\t\\t} else if ( !context || context.jquery ) {\\n\\t\\t\\t\\treturn ( context || root ).find( selector );\\n\\n\\t\\t\\t// HANDLE: $(expr, context)\\n\\t\\t\\t// (which is just equivalent to: $(context).find(expr)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this.constructor( context ).find( selector );\\n\\t\\t\\t}\\n\\n\\t\\t// HANDLE: $(DOMElement)\\n\\t\\t} else if ( selector.nodeType ) {\\n\\t\\t\\tthis.context = this[ 0 ] = selector;\\n\\t\\t\\tthis.length = 1;\\n\\t\\t\\treturn this;\\n\\n\\t\\t// HANDLE: $(function)\\n\\t\\t// Shortcut for document ready\\n\\t\\t} else if ( jQuery.isFunction( selector ) ) {\\n\\t\\t\\treturn root.ready !== undefined ?\\n\\t\\t\\t\\troot.ready( selector ) :\\n\\n\\t\\t\\t\\t// Execute immediately if ready is not present\\n\\t\\t\\t\\tselector( jQuery );\\n\\t\\t}\\n\\n\\t\\tif ( selector.selector !== undefined ) {\\n\\t\\t\\tthis.selector = selector.selector;\\n\\t\\t\\tthis.context = selector.context;\\n\\t\\t}\\n\\n\\t\\treturn jQuery.makeArray( selector, this );\\n\\t};\\n\\n// Give the init function the jQuery prototype for later instantiation\\ninit.prototype = jQuery.fn;\\n\\n// Initialize central reference\\nrootjQuery = jQuery( document );\\n\\n\\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\\n\\n\\t// Methods guaranteed to produce a unique set when starting from a unique set\\n\\tguaranteedUnique = {\\n\\t\\tchildren: true,\\n\\t\\tcontents: true,\\n\\t\\tnext: true,\\n\\t\\tprev: true\\n\\t};\\n\\njQuery.fn.extend( {\\n\\thas: function( target ) {\\n\\t\\tvar targets = jQuery( target, this ),\\n\\t\\t\\tl = targets.length;\\n\\n\\t\\treturn this.filter( function() {\\n\\t\\t\\tvar i = 0;\\n\\t\\t\\tfor ( ; i < l; i++ ) {\\n\\t\\t\\t\\tif ( jQuery.contains( this, targets[ i ] ) ) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\tclosest: function( selectors, context ) {\\n\\t\\tvar cur,\\n\\t\\t\\ti = 0,\\n\\t\\t\\tl = this.length,\\n\\t\\t\\tmatched = [],\\n\\t\\t\\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\\n\\t\\t\\t\\tjQuery( selectors, context || this.context ) :\\n\\t\\t\\t\\t0;\\n\\n\\t\\tfor ( ; i < l; i++ ) {\\n\\t\\t\\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\\n\\n\\t\\t\\t\\t// Always skip document fragments\\n\\t\\t\\t\\tif ( cur.nodeType < 11 && ( pos ?\\n\\t\\t\\t\\t\\tpos.index( cur ) > -1 :\\n\\n\\t\\t\\t\\t\\t// Don\\'t pass non-elements to Sizzle\\n\\t\\t\\t\\t\\tcur.nodeType === 1 &&\\n\\t\\t\\t\\t\\t\\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\\n\\n\\t\\t\\t\\t\\tmatched.push( cur );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\\n\\t},\\n\\n\\t// Determine the position of an element within the set\\n\\tindex: function( elem ) {\\n\\n\\t\\t// No argument, return index in parent\\n\\t\\tif ( !elem ) {\\n\\t\\t\\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\\n\\t\\t}\\n\\n\\t\\t// Index in selector\\n\\t\\tif ( typeof elem === \"string\" ) {\\n\\t\\t\\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\\n\\t\\t}\\n\\n\\t\\t// Locate the position of the desired element\\n\\t\\treturn indexOf.call( this,\\n\\n\\t\\t\\t// If it receives a jQuery object, the first element is used\\n\\t\\t\\telem.jquery ? elem[ 0 ] : elem\\n\\t\\t);\\n\\t},\\n\\n\\tadd: function( selector, context ) {\\n\\t\\treturn this.pushStack(\\n\\t\\t\\tjQuery.uniqueSort(\\n\\t\\t\\t\\tjQuery.merge( this.get(), jQuery( selector, context ) )\\n\\t\\t\\t)\\n\\t\\t);\\n\\t},\\n\\n\\taddBack: function( selector ) {\\n\\t\\treturn this.add( selector == null ?\\n\\t\\t\\tthis.prevObject : this.prevObject.filter( selector )\\n\\t\\t);\\n\\t}\\n} );\\n\\nfunction sibling( cur, dir ) {\\n\\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\\n\\treturn cur;\\n}\\n\\njQuery.each( {\\n\\tparent: function( elem ) {\\n\\t\\tvar parent = elem.parentNode;\\n\\t\\treturn parent && parent.nodeType !== 11 ? parent : null;\\n\\t},\\n\\tparents: function( elem ) {\\n\\t\\treturn dir( elem, \"parentNode\" );\\n\\t},\\n\\tparentsUntil: function( elem, i, until ) {\\n\\t\\treturn dir( elem, \"parentNode\", until );\\n\\t},\\n\\tnext: function( elem ) {\\n\\t\\treturn sibling( elem, \"nextSibling\" );\\n\\t},\\n\\tprev: function( elem ) {\\n\\t\\treturn sibling( elem, \"previousSibling\" );\\n\\t},\\n\\tnextAll: function( elem ) {\\n\\t\\treturn dir( elem, \"nextSibling\" );\\n\\t},\\n\\tprevAll: function( elem ) {\\n\\t\\treturn dir( elem, \"previousSibling\" );\\n\\t},\\n\\tnextUntil: function( elem, i, until ) {\\n\\t\\treturn dir( elem, \"nextSibling\", until );\\n\\t},\\n\\tprevUntil: function( elem, i, until ) {\\n\\t\\treturn dir( elem, \"previousSibling\", until );\\n\\t},\\n\\tsiblings: function( elem ) {\\n\\t\\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\\n\\t},\\n\\tchildren: function( elem ) {\\n\\t\\treturn siblings( elem.firstChild );\\n\\t},\\n\\tcontents: function( elem ) {\\n\\t\\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\\n\\t}\\n}, function( name, fn ) {\\n\\tjQuery.fn[ name ] = function( until, selector ) {\\n\\t\\tvar matched = jQuery.map( this, fn, until );\\n\\n\\t\\tif ( name.slice( -5 ) !== \"Until\" ) {\\n\\t\\t\\tselector = until;\\n\\t\\t}\\n\\n\\t\\tif ( selector && typeof selector === \"string\" ) {\\n\\t\\t\\tmatched = jQuery.filter( selector, matched );\\n\\t\\t}\\n\\n\\t\\tif ( this.length > 1 ) {\\n\\n\\t\\t\\t// Remove duplicates\\n\\t\\t\\tif ( !guaranteedUnique[ name ] ) {\\n\\t\\t\\t\\tjQuery.uniqueSort( matched );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Reverse order for parents* and prev-derivatives\\n\\t\\t\\tif ( rparentsprev.test( name ) ) {\\n\\t\\t\\t\\tmatched.reverse();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this.pushStack( matched );\\n\\t};\\n} );\\nvar rnotwhite = ( /\\\\S+/g );\\n\\n\\n\\n// Convert String-formatted options into Object-formatted ones\\nfunction createOptions( options ) {\\n\\tvar object = {};\\n\\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\\n\\t\\tobject[ flag ] = true;\\n\\t} );\\n\\treturn object;\\n}\\n\\n/*\\n * Create a callback list using the following parameters:\\n *\\n *\\toptions: an optional list of space-separated options that will change how\\n *\\t\\t\\tthe callback list behaves or a more traditional option object\\n *\\n * By default a callback list will act like an event callback list and can be\\n * \"fired\" multiple times.\\n *\\n * Possible options:\\n *\\n *\\tonce:\\t\\t\\twill ensure the callback list can only be fired once (like a Deferred)\\n *\\n *\\tmemory:\\t\\t\\twill keep track of previous values and will call any callback added\\n *\\t\\t\\t\\t\\tafter the list has been fired right away with the latest \"memorized\"\\n *\\t\\t\\t\\t\\tvalues (like a Deferred)\\n *\\n *\\tunique:\\t\\t\\twill ensure a callback can only be added once (no duplicate in the list)\\n *\\n *\\tstopOnFalse:\\tinterrupt callings when a callback returns false\\n *\\n */\\njQuery.Callbacks = function( options ) {\\n\\n\\t// Convert options from String-formatted to Object-formatted if needed\\n\\t// (we check in cache first)\\n\\toptions = typeof options === \"string\" ?\\n\\t\\tcreateOptions( options ) :\\n\\t\\tjQuery.extend( {}, options );\\n\\n\\tvar // Flag to know if list is currently firing\\n\\t\\tfiring,\\n\\n\\t\\t// Last fire value for non-forgettable lists\\n\\t\\tmemory,\\n\\n\\t\\t// Flag to know if list was already fired\\n\\t\\tfired,\\n\\n\\t\\t// Flag to prevent firing\\n\\t\\tlocked,\\n\\n\\t\\t// Actual callback list\\n\\t\\tlist = [],\\n\\n\\t\\t// Queue of execution data for repeatable lists\\n\\t\\tqueue = [],\\n\\n\\t\\t// Index of currently firing callback (modified by add/remove as needed)\\n\\t\\tfiringIndex = -1,\\n\\n\\t\\t// Fire callbacks\\n\\t\\tfire = function() {\\n\\n\\t\\t\\t// Enforce single-firing\\n\\t\\t\\tlocked = options.once;\\n\\n\\t\\t\\t// Execute callbacks for all pending executions,\\n\\t\\t\\t// respecting firingIndex overrides and runtime changes\\n\\t\\t\\tfired = firing = true;\\n\\t\\t\\tfor ( ; queue.length; firingIndex = -1 ) {\\n\\t\\t\\t\\tmemory = queue.shift();\\n\\t\\t\\t\\twhile ( ++firingIndex < list.length ) {\\n\\n\\t\\t\\t\\t\\t// Run callback and check for early termination\\n\\t\\t\\t\\t\\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\\n\\t\\t\\t\\t\\t\\toptions.stopOnFalse ) {\\n\\n\\t\\t\\t\\t\\t\\t// Jump to end and forget the data so .add doesn\\'t re-fire\\n\\t\\t\\t\\t\\t\\tfiringIndex = list.length;\\n\\t\\t\\t\\t\\t\\tmemory = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Forget the data if we\\'re done with it\\n\\t\\t\\tif ( !options.memory ) {\\n\\t\\t\\t\\tmemory = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfiring = false;\\n\\n\\t\\t\\t// Clean up if we\\'re done firing for good\\n\\t\\t\\tif ( locked ) {\\n\\n\\t\\t\\t\\t// Keep an empty list if we have data for future add calls\\n\\t\\t\\t\\tif ( memory ) {\\n\\t\\t\\t\\t\\tlist = [];\\n\\n\\t\\t\\t\\t// Otherwise, this object is spent\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlist = \"\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\t// Actual Callbacks object\\n\\t\\tself = {\\n\\n\\t\\t\\t// Add a callback or a collection of callbacks to the list\\n\\t\\t\\tadd: function() {\\n\\t\\t\\t\\tif ( list ) {\\n\\n\\t\\t\\t\\t\\t// If we have memory from a past run, we should fire after adding\\n\\t\\t\\t\\t\\tif ( memory && !firing ) {\\n\\t\\t\\t\\t\\t\\tfiringIndex = list.length - 1;\\n\\t\\t\\t\\t\\t\\tqueue.push( memory );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t( function add( args ) {\\n\\t\\t\\t\\t\\t\\tjQuery.each( args, function( _, arg ) {\\n\\t\\t\\t\\t\\t\\t\\tif ( jQuery.isFunction( arg ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( !options.unique || !self.has( arg ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlist.push( arg );\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Inspect recursively\\n\\t\\t\\t\\t\\t\\t\\t\\tadd( arg );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t} )( arguments );\\n\\n\\t\\t\\t\\t\\tif ( memory && !firing ) {\\n\\t\\t\\t\\t\\t\\tfire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Remove a callback from the list\\n\\t\\t\\tremove: function() {\\n\\t\\t\\t\\tjQuery.each( arguments, function( _, arg ) {\\n\\t\\t\\t\\t\\tvar index;\\n\\t\\t\\t\\t\\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\\n\\t\\t\\t\\t\\t\\tlist.splice( index, 1 );\\n\\n\\t\\t\\t\\t\\t\\t// Handle firing indexes\\n\\t\\t\\t\\t\\t\\tif ( index <= firingIndex ) {\\n\\t\\t\\t\\t\\t\\t\\tfiringIndex--;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Check if a given callback is in the list.\\n\\t\\t\\t// If no argument is given, return whether or not list has callbacks attached.\\n\\t\\t\\thas: function( fn ) {\\n\\t\\t\\t\\treturn fn ?\\n\\t\\t\\t\\t\\tjQuery.inArray( fn, list ) > -1 :\\n\\t\\t\\t\\t\\tlist.length > 0;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Remove all callbacks from the list\\n\\t\\t\\tempty: function() {\\n\\t\\t\\t\\tif ( list ) {\\n\\t\\t\\t\\t\\tlist = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Disable .fire and .add\\n\\t\\t\\t// Abort any current/pending executions\\n\\t\\t\\t// Clear all callbacks and values\\n\\t\\t\\tdisable: function() {\\n\\t\\t\\t\\tlocked = queue = [];\\n\\t\\t\\t\\tlist = memory = \"\";\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\t\\t\\tdisabled: function() {\\n\\t\\t\\t\\treturn !list;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Disable .fire\\n\\t\\t\\t// Also disable .add unless we have memory (since it would have no effect)\\n\\t\\t\\t// Abort any pending executions\\n\\t\\t\\tlock: function() {\\n\\t\\t\\t\\tlocked = queue = [];\\n\\t\\t\\t\\tif ( !memory ) {\\n\\t\\t\\t\\t\\tlist = memory = \"\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\t\\t\\tlocked: function() {\\n\\t\\t\\t\\treturn !!locked;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Call all callbacks with the given context and arguments\\n\\t\\t\\tfireWith: function( context, args ) {\\n\\t\\t\\t\\tif ( !locked ) {\\n\\t\\t\\t\\t\\targs = args || [];\\n\\t\\t\\t\\t\\targs = [ context, args.slice ? args.slice() : args ];\\n\\t\\t\\t\\t\\tqueue.push( args );\\n\\t\\t\\t\\t\\tif ( !firing ) {\\n\\t\\t\\t\\t\\t\\tfire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Call all the callbacks with the given arguments\\n\\t\\t\\tfire: function() {\\n\\t\\t\\t\\tself.fireWith( this, arguments );\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// To know if the callbacks have already been called at least once\\n\\t\\t\\tfired: function() {\\n\\t\\t\\t\\treturn !!fired;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\treturn self;\\n};\\n\\n\\njQuery.extend( {\\n\\n\\tDeferred: function( func ) {\\n\\t\\tvar tuples = [\\n\\n\\t\\t\\t\\t// action, add listener, listener list, final state\\n\\t\\t\\t\\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\\n\\t\\t\\t\\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\\n\\t\\t\\t\\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\\n\\t\\t\\t],\\n\\t\\t\\tstate = \"pending\",\\n\\t\\t\\tpromise = {\\n\\t\\t\\t\\tstate: function() {\\n\\t\\t\\t\\t\\treturn state;\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\talways: function() {\\n\\t\\t\\t\\t\\tdeferred.done( arguments ).fail( arguments );\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\\n\\t\\t\\t\\t\\tvar fns = arguments;\\n\\t\\t\\t\\t\\treturn jQuery.Deferred( function( newDefer ) {\\n\\t\\t\\t\\t\\t\\tjQuery.each( tuples, function( i, tuple ) {\\n\\t\\t\\t\\t\\t\\t\\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\\n\\n\\t\\t\\t\\t\\t\\t\\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\\n\\t\\t\\t\\t\\t\\t\\tdeferred[ tuple[ 1 ] ]( function() {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar returned = fn && fn.apply( this, arguments );\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( returned && jQuery.isFunction( returned.promise ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturned.promise()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.progress( newDefer.notify )\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.done( newDefer.resolve )\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.fail( newDefer.reject );\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnewDefer[ tuple[ 0 ] + \"With\" ](\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis === promise ? newDefer.promise() : this,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfn ? [ returned ] : arguments\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\tfns = null;\\n\\t\\t\\t\\t\\t} ).promise();\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Get a promise for this deferred\\n\\t\\t\\t\\t// If obj is provided, the promise aspect is added to the object\\n\\t\\t\\t\\tpromise: function( obj ) {\\n\\t\\t\\t\\t\\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tdeferred = {};\\n\\n\\t\\t// Keep pipe for back-compat\\n\\t\\tpromise.pipe = promise.then;\\n\\n\\t\\t// Add list-specific methods\\n\\t\\tjQuery.each( tuples, function( i, tuple ) {\\n\\t\\t\\tvar list = tuple[ 2 ],\\n\\t\\t\\t\\tstateString = tuple[ 3 ];\\n\\n\\t\\t\\t// promise[ done | fail | progress ] = list.add\\n\\t\\t\\tpromise[ tuple[ 1 ] ] = list.add;\\n\\n\\t\\t\\t// Handle state\\n\\t\\t\\tif ( stateString ) {\\n\\t\\t\\t\\tlist.add( function() {\\n\\n\\t\\t\\t\\t\\t// state = [ resolved | rejected ]\\n\\t\\t\\t\\t\\tstate = stateString;\\n\\n\\t\\t\\t\\t// [ reject_list | resolve_list ].disable; progress_list.lock\\n\\t\\t\\t\\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// deferred[ resolve | reject | notify ]\\n\\t\\t\\tdeferred[ tuple[ 0 ] ] = function() {\\n\\t\\t\\t\\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t};\\n\\t\\t\\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\\n\\t\\t} );\\n\\n\\t\\t// Make the deferred a promise\\n\\t\\tpromise.promise( deferred );\\n\\n\\t\\t// Call given func if any\\n\\t\\tif ( func ) {\\n\\t\\t\\tfunc.call( deferred, deferred );\\n\\t\\t}\\n\\n\\t\\t// All done!\\n\\t\\treturn deferred;\\n\\t},\\n\\n\\t// Deferred helper\\n\\twhen: function( subordinate /* , ..., subordinateN */ ) {\\n\\t\\tvar i = 0,\\n\\t\\t\\tresolveValues = slice.call( arguments ),\\n\\t\\t\\tlength = resolveValues.length,\\n\\n\\t\\t\\t// the count of uncompleted subordinates\\n\\t\\t\\tremaining = length !== 1 ||\\n\\t\\t\\t\\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\\n\\n\\t\\t\\t// the master Deferred.\\n\\t\\t\\t// If resolveValues consist of only a single Deferred, just use that.\\n\\t\\t\\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\\n\\n\\t\\t\\t// Update function for both resolve and progress values\\n\\t\\t\\tupdateFunc = function( i, contexts, values ) {\\n\\t\\t\\t\\treturn function( value ) {\\n\\t\\t\\t\\t\\tcontexts[ i ] = this;\\n\\t\\t\\t\\t\\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\\n\\t\\t\\t\\t\\tif ( values === progressValues ) {\\n\\t\\t\\t\\t\\t\\tdeferred.notifyWith( contexts, values );\\n\\t\\t\\t\\t\\t} else if ( !( --remaining ) ) {\\n\\t\\t\\t\\t\\t\\tdeferred.resolveWith( contexts, values );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t},\\n\\n\\t\\t\\tprogressValues, progressContexts, resolveContexts;\\n\\n\\t\\t// Add listeners to Deferred subordinates; treat others as resolved\\n\\t\\tif ( length > 1 ) {\\n\\t\\t\\tprogressValues = new Array( length );\\n\\t\\t\\tprogressContexts = new Array( length );\\n\\t\\t\\tresolveContexts = new Array( length );\\n\\t\\t\\tfor ( ; i < length; i++ ) {\\n\\t\\t\\t\\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\\n\\t\\t\\t\\t\\tresolveValues[ i ].promise()\\n\\t\\t\\t\\t\\t\\t.progress( updateFunc( i, progressContexts, progressValues ) )\\n\\t\\t\\t\\t\\t\\t.done( updateFunc( i, resolveContexts, resolveValues ) )\\n\\t\\t\\t\\t\\t\\t.fail( deferred.reject );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t--remaining;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// If we\\'re not waiting on anything, resolve the master\\n\\t\\tif ( !remaining ) {\\n\\t\\t\\tdeferred.resolveWith( resolveContexts, resolveValues );\\n\\t\\t}\\n\\n\\t\\treturn deferred.promise();\\n\\t}\\n} );\\n\\n\\n// The deferred used on DOM ready\\nvar readyList;\\n\\njQuery.fn.ready = function( fn ) {\\n\\n\\t// Add the callback\\n\\tjQuery.ready.promise().done( fn );\\n\\n\\treturn this;\\n};\\n\\njQuery.extend( {\\n\\n\\t// Is the DOM ready to be used? Set to true once it occurs.\\n\\tisReady: false,\\n\\n\\t// A counter to track how many items to wait for before\\n\\t// the ready event fires. See #6781\\n\\treadyWait: 1,\\n\\n\\t// Hold (or release) the ready event\\n\\tholdReady: function( hold ) {\\n\\t\\tif ( hold ) {\\n\\t\\t\\tjQuery.readyWait++;\\n\\t\\t} else {\\n\\t\\t\\tjQuery.ready( true );\\n\\t\\t}\\n\\t},\\n\\n\\t// Handle when the DOM is ready\\n\\tready: function( wait ) {\\n\\n\\t\\t// Abort if there are pending holds or we\\'re already ready\\n\\t\\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Remember that the DOM is ready\\n\\t\\tjQuery.isReady = true;\\n\\n\\t\\t// If a normal DOM Ready event fired, decrement, and wait if need be\\n\\t\\tif ( wait !== true && --jQuery.readyWait > 0 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// If there are functions bound, to execute\\n\\t\\treadyList.resolveWith( document, [ jQuery ] );\\n\\n\\t\\t// Trigger any bound ready events\\n\\t\\tif ( jQuery.fn.triggerHandler ) {\\n\\t\\t\\tjQuery( document ).triggerHandler( \"ready\" );\\n\\t\\t\\tjQuery( document ).off( \"ready\" );\\n\\t\\t}\\n\\t}\\n} );\\n\\n/**\\n * The ready event handler and self cleanup method\\n */\\nfunction completed() {\\n\\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\\n\\twindow.removeEventListener( \"load\", completed );\\n\\tjQuery.ready();\\n}\\n\\njQuery.ready.promise = function( obj ) {\\n\\tif ( !readyList ) {\\n\\n\\t\\treadyList = jQuery.Deferred();\\n\\n\\t\\t// Catch cases where $(document).ready() is called\\n\\t\\t// after the browser event has already occurred.\\n\\t\\t// Support: IE9-10 only\\n\\t\\t// Older IE sometimes signals \"interactive\" too soon\\n\\t\\tif ( document.readyState === \"complete\" ||\\n\\t\\t\\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\\n\\n\\t\\t\\t// Handle it asynchronously to allow scripts the opportunity to delay ready\\n\\t\\t\\twindow.setTimeout( jQuery.ready );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// Use the handy event callback\\n\\t\\t\\tdocument.addEventListener( \"DOMContentLoaded\", completed );\\n\\n\\t\\t\\t// A fallback to window.onload, that will always work\\n\\t\\t\\twindow.addEventListener( \"load\", completed );\\n\\t\\t}\\n\\t}\\n\\treturn readyList.promise( obj );\\n};\\n\\n// Kick off the DOM ready check even if the user does not\\njQuery.ready.promise();\\n\\n\\n\\n\\n// Multifunctional method to get and set values of a collection\\n// The value/s can optionally be executed if it\\'s a function\\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\\n\\tvar i = 0,\\n\\t\\tlen = elems.length,\\n\\t\\tbulk = key == null;\\n\\n\\t// Sets many values\\n\\tif ( jQuery.type( key ) === \"object\" ) {\\n\\t\\tchainable = true;\\n\\t\\tfor ( i in key ) {\\n\\t\\t\\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\\n\\t\\t}\\n\\n\\t// Sets one value\\n\\t} else if ( value !== undefined ) {\\n\\t\\tchainable = true;\\n\\n\\t\\tif ( !jQuery.isFunction( value ) ) {\\n\\t\\t\\traw = true;\\n\\t\\t}\\n\\n\\t\\tif ( bulk ) {\\n\\n\\t\\t\\t// Bulk operations run against the entire set\\n\\t\\t\\tif ( raw ) {\\n\\t\\t\\t\\tfn.call( elems, value );\\n\\t\\t\\t\\tfn = null;\\n\\n\\t\\t\\t// ...except when executing function values\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbulk = fn;\\n\\t\\t\\t\\tfn = function( elem, key, value ) {\\n\\t\\t\\t\\t\\treturn bulk.call( jQuery( elem ), value );\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( fn ) {\\n\\t\\t\\tfor ( ; i < len; i++ ) {\\n\\t\\t\\t\\tfn(\\n\\t\\t\\t\\t\\telems[ i ], key, raw ?\\n\\t\\t\\t\\t\\tvalue :\\n\\t\\t\\t\\t\\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn chainable ?\\n\\t\\telems :\\n\\n\\t\\t// Gets\\n\\t\\tbulk ?\\n\\t\\t\\tfn.call( elems ) :\\n\\t\\t\\tlen ? fn( elems[ 0 ], key ) : emptyGet;\\n};\\nvar acceptData = function( owner ) {\\n\\n\\t// Accepts only:\\n\\t//  - Node\\n\\t//    - Node.ELEMENT_NODE\\n\\t//    - Node.DOCUMENT_NODE\\n\\t//  - Object\\n\\t//    - Any\\n\\t/* jshint -W018 */\\n\\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\\n};\\n\\n\\n\\n\\nfunction Data() {\\n\\tthis.expando = jQuery.expando + Data.uid++;\\n}\\n\\nData.uid = 1;\\n\\nData.prototype = {\\n\\n\\tregister: function( owner, initial ) {\\n\\t\\tvar value = initial || {};\\n\\n\\t\\t// If it is a node unlikely to be stringify-ed or looped over\\n\\t\\t// use plain assignment\\n\\t\\tif ( owner.nodeType ) {\\n\\t\\t\\towner[ this.expando ] = value;\\n\\n\\t\\t// Otherwise secure it in a non-enumerable, non-writable property\\n\\t\\t// configurability must be true to allow the property to be\\n\\t\\t// deleted with the delete operator\\n\\t\\t} else {\\n\\t\\t\\tObject.defineProperty( owner, this.expando, {\\n\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\twritable: true,\\n\\t\\t\\t\\tconfigurable: true\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\treturn owner[ this.expando ];\\n\\t},\\n\\tcache: function( owner ) {\\n\\n\\t\\t// We can accept data for non-element nodes in modern browsers,\\n\\t\\t// but we should not, see #8335.\\n\\t\\t// Always return an empty object.\\n\\t\\tif ( !acceptData( owner ) ) {\\n\\t\\t\\treturn {};\\n\\t\\t}\\n\\n\\t\\t// Check if the owner object already has a cache\\n\\t\\tvar value = owner[ this.expando ];\\n\\n\\t\\t// If not, create one\\n\\t\\tif ( !value ) {\\n\\t\\t\\tvalue = {};\\n\\n\\t\\t\\t// We can accept data for non-element nodes in modern browsers,\\n\\t\\t\\t// but we should not, see #8335.\\n\\t\\t\\t// Always return an empty object.\\n\\t\\t\\tif ( acceptData( owner ) ) {\\n\\n\\t\\t\\t\\t// If it is a node unlikely to be stringify-ed or looped over\\n\\t\\t\\t\\t// use plain assignment\\n\\t\\t\\t\\tif ( owner.nodeType ) {\\n\\t\\t\\t\\t\\towner[ this.expando ] = value;\\n\\n\\t\\t\\t\\t// Otherwise secure it in a non-enumerable property\\n\\t\\t\\t\\t// configurable must be true to allow the property to be\\n\\t\\t\\t\\t// deleted when data is removed\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tObject.defineProperty( owner, this.expando, {\\n\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\tconfigurable: true\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn value;\\n\\t},\\n\\tset: function( owner, data, value ) {\\n\\t\\tvar prop,\\n\\t\\t\\tcache = this.cache( owner );\\n\\n\\t\\t// Handle: [ owner, key, value ] args\\n\\t\\tif ( typeof data === \"string\" ) {\\n\\t\\t\\tcache[ data ] = value;\\n\\n\\t\\t// Handle: [ owner, { properties } ] args\\n\\t\\t} else {\\n\\n\\t\\t\\t// Copy the properties one-by-one to the cache object\\n\\t\\t\\tfor ( prop in data ) {\\n\\t\\t\\t\\tcache[ prop ] = data[ prop ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn cache;\\n\\t},\\n\\tget: function( owner, key ) {\\n\\t\\treturn key === undefined ?\\n\\t\\t\\tthis.cache( owner ) :\\n\\t\\t\\towner[ this.expando ] && owner[ this.expando ][ key ];\\n\\t},\\n\\taccess: function( owner, key, value ) {\\n\\t\\tvar stored;\\n\\n\\t\\t// In cases where either:\\n\\t\\t//\\n\\t\\t//   1. No key was specified\\n\\t\\t//   2. A string key was specified, but no value provided\\n\\t\\t//\\n\\t\\t// Take the \"read\" path and allow the get method to determine\\n\\t\\t// which value to return, respectively either:\\n\\t\\t//\\n\\t\\t//   1. The entire cache object\\n\\t\\t//   2. The data stored at the key\\n\\t\\t//\\n\\t\\tif ( key === undefined ||\\n\\t\\t\\t\\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\\n\\n\\t\\t\\tstored = this.get( owner, key );\\n\\n\\t\\t\\treturn stored !== undefined ?\\n\\t\\t\\t\\tstored : this.get( owner, jQuery.camelCase( key ) );\\n\\t\\t}\\n\\n\\t\\t// When the key is not a string, or both a key and value\\n\\t\\t// are specified, set or extend (existing objects) with either:\\n\\t\\t//\\n\\t\\t//   1. An object of properties\\n\\t\\t//   2. A key and value\\n\\t\\t//\\n\\t\\tthis.set( owner, key, value );\\n\\n\\t\\t// Since the \"set\" path can have two possible entry points\\n\\t\\t// return the expected data based on which path was taken[*]\\n\\t\\treturn value !== undefined ? value : key;\\n\\t},\\n\\tremove: function( owner, key ) {\\n\\t\\tvar i, name, camel,\\n\\t\\t\\tcache = owner[ this.expando ];\\n\\n\\t\\tif ( cache === undefined ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( key === undefined ) {\\n\\t\\t\\tthis.register( owner );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// Support array or space separated string of keys\\n\\t\\t\\tif ( jQuery.isArray( key ) ) {\\n\\n\\t\\t\\t\\t// If \"name\" is an array of keys...\\n\\t\\t\\t\\t// When data is initially created, via (\"key\", \"val\") signature,\\n\\t\\t\\t\\t// keys will be converted to camelCase.\\n\\t\\t\\t\\t// Since there is no way to tell _how_ a key was added, remove\\n\\t\\t\\t\\t// both plain key and camelCase key. #12786\\n\\t\\t\\t\\t// This will only penalize the array argument path.\\n\\t\\t\\t\\tname = key.concat( key.map( jQuery.camelCase ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcamel = jQuery.camelCase( key );\\n\\n\\t\\t\\t\\t// Try the string as a key before any manipulation\\n\\t\\t\\t\\tif ( key in cache ) {\\n\\t\\t\\t\\t\\tname = [ key, camel ];\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// If a key with the spaces exists, use it.\\n\\t\\t\\t\\t\\t// Otherwise, create an array by matching non-whitespace\\n\\t\\t\\t\\t\\tname = camel;\\n\\t\\t\\t\\t\\tname = name in cache ?\\n\\t\\t\\t\\t\\t\\t[ name ] : ( name.match( rnotwhite ) || [] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\ti = name.length;\\n\\n\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\tdelete cache[ name[ i ] ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove the expando if there\\'s no more data\\n\\t\\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\\n\\n\\t\\t\\t// Support: Chrome <= 35-45+\\n\\t\\t\\t// Webkit & Blink performance suffers when deleting properties\\n\\t\\t\\t// from DOM nodes, so set to undefined instead\\n\\t\\t\\t// https://code.google.com/p/chromium/issues/detail?id=378607\\n\\t\\t\\tif ( owner.nodeType ) {\\n\\t\\t\\t\\towner[ this.expando ] = undefined;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdelete owner[ this.expando ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\thasData: function( owner ) {\\n\\t\\tvar cache = owner[ this.expando ];\\n\\t\\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\\n\\t}\\n};\\nvar dataPriv = new Data();\\n\\nvar dataUser = new Data();\\n\\n\\n\\n//\\tImplementation Summary\\n//\\n//\\t1. Enforce API surface and semantic compatibility with 1.9.x branch\\n//\\t2. Improve the module\\'s maintainability by reducing the storage\\n//\\t\\tpaths to a single mechanism.\\n//\\t3. Use the same single mechanism to support \"private\" and \"user\" data.\\n//\\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\\n//\\t5. Avoid exposing implementation details on user objects (eg. expando properties)\\n//\\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\\n\\nvar rbrace = /^(?:\\\\{[\\\\w\\\\W]*\\\\}|\\\\[[\\\\w\\\\W]*\\\\])$/,\\n\\trmultiDash = /[A-Z]/g;\\n\\nfunction dataAttr( elem, key, data ) {\\n\\tvar name;\\n\\n\\t// If nothing was found internally, try to fetch any\\n\\t// data from the HTML5 data-* attribute\\n\\tif ( data === undefined && elem.nodeType === 1 ) {\\n\\t\\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\\n\\t\\tdata = elem.getAttribute( name );\\n\\n\\t\\tif ( typeof data === \"string\" ) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tdata = data === \"true\" ? true :\\n\\t\\t\\t\\t\\tdata === \"false\" ? false :\\n\\t\\t\\t\\t\\tdata === \"null\" ? null :\\n\\n\\t\\t\\t\\t\\t// Only convert to a number if it doesn\\'t change the string\\n\\t\\t\\t\\t\\t+data + \"\" === data ? +data :\\n\\t\\t\\t\\t\\trbrace.test( data ) ? jQuery.parseJSON( data ) :\\n\\t\\t\\t\\t\\tdata;\\n\\t\\t\\t} catch ( e ) {}\\n\\n\\t\\t\\t// Make sure we set the data so it isn\\'t changed later\\n\\t\\t\\tdataUser.set( elem, key, data );\\n\\t\\t} else {\\n\\t\\t\\tdata = undefined;\\n\\t\\t}\\n\\t}\\n\\treturn data;\\n}\\n\\njQuery.extend( {\\n\\thasData: function( elem ) {\\n\\t\\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\\n\\t},\\n\\n\\tdata: function( elem, name, data ) {\\n\\t\\treturn dataUser.access( elem, name, data );\\n\\t},\\n\\n\\tremoveData: function( elem, name ) {\\n\\t\\tdataUser.remove( elem, name );\\n\\t},\\n\\n\\t// TODO: Now that all calls to _data and _removeData have been replaced\\n\\t// with direct calls to dataPriv methods, these can be deprecated.\\n\\t_data: function( elem, name, data ) {\\n\\t\\treturn dataPriv.access( elem, name, data );\\n\\t},\\n\\n\\t_removeData: function( elem, name ) {\\n\\t\\tdataPriv.remove( elem, name );\\n\\t}\\n} );\\n\\njQuery.fn.extend( {\\n\\tdata: function( key, value ) {\\n\\t\\tvar i, name, data,\\n\\t\\t\\telem = this[ 0 ],\\n\\t\\t\\tattrs = elem && elem.attributes;\\n\\n\\t\\t// Gets all values\\n\\t\\tif ( key === undefined ) {\\n\\t\\t\\tif ( this.length ) {\\n\\t\\t\\t\\tdata = dataUser.get( elem );\\n\\n\\t\\t\\t\\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\\n\\t\\t\\t\\t\\ti = attrs.length;\\n\\t\\t\\t\\t\\twhile ( i-- ) {\\n\\n\\t\\t\\t\\t\\t\\t// Support: IE11+\\n\\t\\t\\t\\t\\t\\t// The attrs elements can be null (#14894)\\n\\t\\t\\t\\t\\t\\tif ( attrs[ i ] ) {\\n\\t\\t\\t\\t\\t\\t\\tname = attrs[ i ].name;\\n\\t\\t\\t\\t\\t\\t\\tif ( name.indexOf( \"data-\" ) === 0 ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tname = jQuery.camelCase( name.slice( 5 ) );\\n\\t\\t\\t\\t\\t\\t\\t\\tdataAttr( elem, name, data[ name ] );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdataPriv.set( elem, \"hasDataAttrs\", true );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn data;\\n\\t\\t}\\n\\n\\t\\t// Sets multiple values\\n\\t\\tif ( typeof key === \"object\" ) {\\n\\t\\t\\treturn this.each( function() {\\n\\t\\t\\t\\tdataUser.set( this, key );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn access( this, function( value ) {\\n\\t\\t\\tvar data, camelKey;\\n\\n\\t\\t\\t// The calling jQuery object (element matches) is not empty\\n\\t\\t\\t// (and therefore has an element appears at this[ 0 ]) and the\\n\\t\\t\\t// `value` parameter was not undefined. An empty jQuery object\\n\\t\\t\\t// will result in `undefined` for elem = this[ 0 ] which will\\n\\t\\t\\t// throw an exception if an attempt to read a data cache is made.\\n\\t\\t\\tif ( elem && value === undefined ) {\\n\\n\\t\\t\\t\\t// Attempt to get data from the cache\\n\\t\\t\\t\\t// with the key as-is\\n\\t\\t\\t\\tdata = dataUser.get( elem, key ) ||\\n\\n\\t\\t\\t\\t\\t// Try to find dashed key if it exists (gh-2779)\\n\\t\\t\\t\\t\\t// This is for 2.2.x only\\n\\t\\t\\t\\t\\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\\n\\n\\t\\t\\t\\tif ( data !== undefined ) {\\n\\t\\t\\t\\t\\treturn data;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcamelKey = jQuery.camelCase( key );\\n\\n\\t\\t\\t\\t// Attempt to get data from the cache\\n\\t\\t\\t\\t// with the key camelized\\n\\t\\t\\t\\tdata = dataUser.get( elem, camelKey );\\n\\t\\t\\t\\tif ( data !== undefined ) {\\n\\t\\t\\t\\t\\treturn data;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Attempt to \"discover\" the data in\\n\\t\\t\\t\\t// HTML5 custom data-* attrs\\n\\t\\t\\t\\tdata = dataAttr( elem, camelKey, undefined );\\n\\t\\t\\t\\tif ( data !== undefined ) {\\n\\t\\t\\t\\t\\treturn data;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// We tried really hard, but the data doesn\\'t exist.\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set the data...\\n\\t\\t\\tcamelKey = jQuery.camelCase( key );\\n\\t\\t\\tthis.each( function() {\\n\\n\\t\\t\\t\\t// First, attempt to store a copy or reference of any\\n\\t\\t\\t\\t// data that might\\'ve been store with a camelCased key.\\n\\t\\t\\t\\tvar data = dataUser.get( this, camelKey );\\n\\n\\t\\t\\t\\t// For HTML5 data-* attribute interop, we have to\\n\\t\\t\\t\\t// store property names with dashes in a camelCase form.\\n\\t\\t\\t\\t// This might not apply to all properties...*\\n\\t\\t\\t\\tdataUser.set( this, camelKey, value );\\n\\n\\t\\t\\t\\t// *... In the case of properties that might _actually_\\n\\t\\t\\t\\t// have dashes, we need to also store a copy of that\\n\\t\\t\\t\\t// unchanged property.\\n\\t\\t\\t\\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\\n\\t\\t\\t\\t\\tdataUser.set( this, key, value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}, null, value, arguments.length > 1, null, true );\\n\\t},\\n\\n\\tremoveData: function( key ) {\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tdataUser.remove( this, key );\\n\\t\\t} );\\n\\t}\\n} );\\n\\n\\njQuery.extend( {\\n\\tqueue: function( elem, type, data ) {\\n\\t\\tvar queue;\\n\\n\\t\\tif ( elem ) {\\n\\t\\t\\ttype = ( type || \"fx\" ) + \"queue\";\\n\\t\\t\\tqueue = dataPriv.get( elem, type );\\n\\n\\t\\t\\t// Speed up dequeue by getting out quickly if this is just a lookup\\n\\t\\t\\tif ( data ) {\\n\\t\\t\\t\\tif ( !queue || jQuery.isArray( data ) ) {\\n\\t\\t\\t\\t\\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tqueue.push( data );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn queue || [];\\n\\t\\t}\\n\\t},\\n\\n\\tdequeue: function( elem, type ) {\\n\\t\\ttype = type || \"fx\";\\n\\n\\t\\tvar queue = jQuery.queue( elem, type ),\\n\\t\\t\\tstartLength = queue.length,\\n\\t\\t\\tfn = queue.shift(),\\n\\t\\t\\thooks = jQuery._queueHooks( elem, type ),\\n\\t\\t\\tnext = function() {\\n\\t\\t\\t\\tjQuery.dequeue( elem, type );\\n\\t\\t\\t};\\n\\n\\t\\t// If the fx queue is dequeued, always remove the progress sentinel\\n\\t\\tif ( fn === \"inprogress\" ) {\\n\\t\\t\\tfn = queue.shift();\\n\\t\\t\\tstartLength--;\\n\\t\\t}\\n\\n\\t\\tif ( fn ) {\\n\\n\\t\\t\\t// Add a progress sentinel to prevent the fx queue from being\\n\\t\\t\\t// automatically dequeued\\n\\t\\t\\tif ( type === \"fx\" ) {\\n\\t\\t\\t\\tqueue.unshift( \"inprogress\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Clear up the last queue stop function\\n\\t\\t\\tdelete hooks.stop;\\n\\t\\t\\tfn.call( elem, next, hooks );\\n\\t\\t}\\n\\n\\t\\tif ( !startLength && hooks ) {\\n\\t\\t\\thooks.empty.fire();\\n\\t\\t}\\n\\t},\\n\\n\\t// Not public - generate a queueHooks object, or return the current one\\n\\t_queueHooks: function( elem, type ) {\\n\\t\\tvar key = type + \"queueHooks\";\\n\\t\\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\\n\\t\\t\\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\\n\\t\\t\\t\\tdataPriv.remove( elem, [ type + \"queue\", key ] );\\n\\t\\t\\t} )\\n\\t\\t} );\\n\\t}\\n} );\\n\\njQuery.fn.extend( {\\n\\tqueue: function( type, data ) {\\n\\t\\tvar setter = 2;\\n\\n\\t\\tif ( typeof type !== \"string\" ) {\\n\\t\\t\\tdata = type;\\n\\t\\t\\ttype = \"fx\";\\n\\t\\t\\tsetter--;\\n\\t\\t}\\n\\n\\t\\tif ( arguments.length < setter ) {\\n\\t\\t\\treturn jQuery.queue( this[ 0 ], type );\\n\\t\\t}\\n\\n\\t\\treturn data === undefined ?\\n\\t\\t\\tthis :\\n\\t\\t\\tthis.each( function() {\\n\\t\\t\\t\\tvar queue = jQuery.queue( this, type, data );\\n\\n\\t\\t\\t\\t// Ensure a hooks for this queue\\n\\t\\t\\t\\tjQuery._queueHooks( this, type );\\n\\n\\t\\t\\t\\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\\n\\t\\t\\t\\t\\tjQuery.dequeue( this, type );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t},\\n\\tdequeue: function( type ) {\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tjQuery.dequeue( this, type );\\n\\t\\t} );\\n\\t},\\n\\tclearQueue: function( type ) {\\n\\t\\treturn this.queue( type || \"fx\", [] );\\n\\t},\\n\\n\\t// Get a promise resolved when queues of a certain type\\n\\t// are emptied (fx is the type by default)\\n\\tpromise: function( type, obj ) {\\n\\t\\tvar tmp,\\n\\t\\t\\tcount = 1,\\n\\t\\t\\tdefer = jQuery.Deferred(),\\n\\t\\t\\telements = this,\\n\\t\\t\\ti = this.length,\\n\\t\\t\\tresolve = function() {\\n\\t\\t\\t\\tif ( !( --count ) ) {\\n\\t\\t\\t\\t\\tdefer.resolveWith( elements, [ elements ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\tif ( typeof type !== \"string\" ) {\\n\\t\\t\\tobj = type;\\n\\t\\t\\ttype = undefined;\\n\\t\\t}\\n\\t\\ttype = type || \"fx\";\\n\\n\\t\\twhile ( i-- ) {\\n\\t\\t\\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\\n\\t\\t\\tif ( tmp && tmp.empty ) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\ttmp.empty.add( resolve );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tresolve();\\n\\t\\treturn defer.promise( obj );\\n\\t}\\n} );\\nvar pnum = ( /[+-]?(?:\\\\d*\\\\.|)\\\\d+(?:[eE][+-]?\\\\d+|)/ ).source;\\n\\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\\n\\n\\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\\n\\nvar isHidden = function( elem, el ) {\\n\\n\\t\\t// isHidden might be called from jQuery#filter function;\\n\\t\\t// in that case, element will be second argument\\n\\t\\telem = el || elem;\\n\\t\\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\\n\\t\\t\\t!jQuery.contains( elem.ownerDocument, elem );\\n\\t};\\n\\n\\n\\nfunction adjustCSS( elem, prop, valueParts, tween ) {\\n\\tvar adjusted,\\n\\t\\tscale = 1,\\n\\t\\tmaxIterations = 20,\\n\\t\\tcurrentValue = tween ?\\n\\t\\t\\tfunction() { return tween.cur(); } :\\n\\t\\t\\tfunction() { return jQuery.css( elem, prop, \"\" ); },\\n\\t\\tinitial = currentValue(),\\n\\t\\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\\n\\n\\t\\t// Starting value computation is required for potential unit mismatches\\n\\t\\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\\n\\t\\t\\trcssNum.exec( jQuery.css( elem, prop ) );\\n\\n\\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\\n\\n\\t\\t// Trust units reported by jQuery.css\\n\\t\\tunit = unit || initialInUnit[ 3 ];\\n\\n\\t\\t// Make sure we update the tween properties later on\\n\\t\\tvalueParts = valueParts || [];\\n\\n\\t\\t// Iteratively approximate from a nonzero starting point\\n\\t\\tinitialInUnit = +initial || 1;\\n\\n\\t\\tdo {\\n\\n\\t\\t\\t// If previous iteration zeroed out, double until we get *something*.\\n\\t\\t\\t// Use string for doubling so we don\\'t accidentally see scale as unchanged below\\n\\t\\t\\tscale = scale || \".5\";\\n\\n\\t\\t\\t// Adjust and apply\\n\\t\\t\\tinitialInUnit = initialInUnit / scale;\\n\\t\\t\\tjQuery.style( elem, prop, initialInUnit + unit );\\n\\n\\t\\t// Update scale, tolerating zero or NaN from tween.cur()\\n\\t\\t// Break the loop if scale is unchanged or perfect, or if we\\'ve just had enough.\\n\\t\\t} while (\\n\\t\\t\\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\\n\\t\\t);\\n\\t}\\n\\n\\tif ( valueParts ) {\\n\\t\\tinitialInUnit = +initialInUnit || +initial || 0;\\n\\n\\t\\t// Apply relative offset (+=/-=) if specified\\n\\t\\tadjusted = valueParts[ 1 ] ?\\n\\t\\t\\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\\n\\t\\t\\t+valueParts[ 2 ];\\n\\t\\tif ( tween ) {\\n\\t\\t\\ttween.unit = unit;\\n\\t\\t\\ttween.start = initialInUnit;\\n\\t\\t\\ttween.end = adjusted;\\n\\t\\t}\\n\\t}\\n\\treturn adjusted;\\n}\\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\\n\\nvar rtagName = ( /<([\\\\w:-]+)/ );\\n\\nvar rscriptType = ( /^$|\\\\/(?:java|ecma)script/i );\\n\\n\\n\\n// We have to close these tags to support XHTML (#13200)\\nvar wrapMap = {\\n\\n\\t// Support: IE9\\n\\toption: [ 1, \"<select multiple=\\'multiple\\'>\", \"</select>\" ],\\n\\n\\t// XHTML parsers do not magically insert elements in the\\n\\t// same way that tag soup parsers do. So we cannot shorten\\n\\t// this by omitting <tbody> or other required elements.\\n\\tthead: [ 1, \"<table>\", \"</table>\" ],\\n\\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\\n\\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\\n\\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\\n\\n\\t_default: [ 0, \"\", \"\" ]\\n};\\n\\n// Support: IE9\\nwrapMap.optgroup = wrapMap.option;\\n\\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\\nwrapMap.th = wrapMap.td;\\n\\n\\nfunction getAll( context, tag ) {\\n\\n\\t// Support: IE9-11+\\n\\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\\n\\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\\n\\t\\t\\tcontext.getElementsByTagName( tag || \"*\" ) :\\n\\t\\t\\ttypeof context.querySelectorAll !== \"undefined\" ?\\n\\t\\t\\t\\tcontext.querySelectorAll( tag || \"*\" ) :\\n\\t\\t\\t[];\\n\\n\\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\\n\\t\\tjQuery.merge( [ context ], ret ) :\\n\\t\\tret;\\n}\\n\\n\\n// Mark scripts as having already been evaluated\\nfunction setGlobalEval( elems, refElements ) {\\n\\tvar i = 0,\\n\\t\\tl = elems.length;\\n\\n\\tfor ( ; i < l; i++ ) {\\n\\t\\tdataPriv.set(\\n\\t\\t\\telems[ i ],\\n\\t\\t\\t\"globalEval\",\\n\\t\\t\\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\\n\\t\\t);\\n\\t}\\n}\\n\\n\\nvar rhtml = /<|&#?\\\\w+;/;\\n\\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\\n\\tvar elem, tmp, tag, wrap, contains, j,\\n\\t\\tfragment = context.createDocumentFragment(),\\n\\t\\tnodes = [],\\n\\t\\ti = 0,\\n\\t\\tl = elems.length;\\n\\n\\tfor ( ; i < l; i++ ) {\\n\\t\\telem = elems[ i ];\\n\\n\\t\\tif ( elem || elem === 0 ) {\\n\\n\\t\\t\\t// Add nodes directly\\n\\t\\t\\tif ( jQuery.type( elem ) === \"object\" ) {\\n\\n\\t\\t\\t\\t// Support: Android<4.1, PhantomJS<2\\n\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\\n\\n\\t\\t\\t// Convert non-html into a text node\\n\\t\\t\\t} else if ( !rhtml.test( elem ) ) {\\n\\t\\t\\t\\tnodes.push( context.createTextNode( elem ) );\\n\\n\\t\\t\\t// Convert html into DOM nodes\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\\n\\n\\t\\t\\t\\t// Deserialize a standard representation\\n\\t\\t\\t\\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\\n\\t\\t\\t\\twrap = wrapMap[ tag ] || wrapMap._default;\\n\\t\\t\\t\\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\\n\\n\\t\\t\\t\\t// Descend through wrappers to the right content\\n\\t\\t\\t\\tj = wrap[ 0 ];\\n\\t\\t\\t\\twhile ( j-- ) {\\n\\t\\t\\t\\t\\ttmp = tmp.lastChild;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Support: Android<4.1, PhantomJS<2\\n\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\tjQuery.merge( nodes, tmp.childNodes );\\n\\n\\t\\t\\t\\t// Remember the top-level container\\n\\t\\t\\t\\ttmp = fragment.firstChild;\\n\\n\\t\\t\\t\\t// Ensure the created nodes are orphaned (#12392)\\n\\t\\t\\t\\ttmp.textContent = \"\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Remove wrapper from fragment\\n\\tfragment.textContent = \"\";\\n\\n\\ti = 0;\\n\\twhile ( ( elem = nodes[ i++ ] ) ) {\\n\\n\\t\\t// Skip elements already in the context collection (trac-4087)\\n\\t\\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\\n\\t\\t\\tif ( ignored ) {\\n\\t\\t\\t\\tignored.push( elem );\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tcontains = jQuery.contains( elem.ownerDocument, elem );\\n\\n\\t\\t// Append to fragment\\n\\t\\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\\n\\n\\t\\t// Preserve script evaluation history\\n\\t\\tif ( contains ) {\\n\\t\\t\\tsetGlobalEval( tmp );\\n\\t\\t}\\n\\n\\t\\t// Capture executables\\n\\t\\tif ( scripts ) {\\n\\t\\t\\tj = 0;\\n\\t\\t\\twhile ( ( elem = tmp[ j++ ] ) ) {\\n\\t\\t\\t\\tif ( rscriptType.test( elem.type || \"\" ) ) {\\n\\t\\t\\t\\t\\tscripts.push( elem );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn fragment;\\n}\\n\\n\\n( function() {\\n\\tvar fragment = document.createDocumentFragment(),\\n\\t\\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\\n\\t\\tinput = document.createElement( \"input\" );\\n\\n\\t// Support: Android 4.0-4.3, Safari<=5.1\\n\\t// Check state lost if the name is set (#11217)\\n\\t// Support: Windows Web Apps (WWA)\\n\\t// `name` and `type` must use .setAttribute for WWA (#14901)\\n\\tinput.setAttribute( \"type\", \"radio\" );\\n\\tinput.setAttribute( \"checked\", \"checked\" );\\n\\tinput.setAttribute( \"name\", \"t\" );\\n\\n\\tdiv.appendChild( input );\\n\\n\\t// Support: Safari<=5.1, Android<4.2\\n\\t// Older WebKit doesn\\'t clone checked state correctly in fragments\\n\\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\\n\\n\\t// Support: IE<=11+\\n\\t// Make sure textarea (and checkbox) defaultValue is properly cloned\\n\\tdiv.innerHTML = \"<textarea>x</textarea>\";\\n\\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\\n} )();\\n\\n\\nvar\\n\\trkeyEvent = /^key/,\\n\\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\\n\\trtypenamespace = /^([^.]*)(?:\\\\.(.+)|)/;\\n\\nfunction returnTrue() {\\n\\treturn true;\\n}\\n\\nfunction returnFalse() {\\n\\treturn false;\\n}\\n\\n// Support: IE9\\n// See #13393 for more info\\nfunction safeActiveElement() {\\n\\ttry {\\n\\t\\treturn document.activeElement;\\n\\t} catch ( err ) { }\\n}\\n\\nfunction on( elem, types, selector, data, fn, one ) {\\n\\tvar origFn, type;\\n\\n\\t// Types can be a map of types/handlers\\n\\tif ( typeof types === \"object\" ) {\\n\\n\\t\\t// ( types-Object, selector, data )\\n\\t\\tif ( typeof selector !== \"string\" ) {\\n\\n\\t\\t\\t// ( types-Object, data )\\n\\t\\t\\tdata = data || selector;\\n\\t\\t\\tselector = undefined;\\n\\t\\t}\\n\\t\\tfor ( type in types ) {\\n\\t\\t\\ton( elem, type, selector, data, types[ type ], one );\\n\\t\\t}\\n\\t\\treturn elem;\\n\\t}\\n\\n\\tif ( data == null && fn == null ) {\\n\\n\\t\\t// ( types, fn )\\n\\t\\tfn = selector;\\n\\t\\tdata = selector = undefined;\\n\\t} else if ( fn == null ) {\\n\\t\\tif ( typeof selector === \"string\" ) {\\n\\n\\t\\t\\t// ( types, selector, fn )\\n\\t\\t\\tfn = data;\\n\\t\\t\\tdata = undefined;\\n\\t\\t} else {\\n\\n\\t\\t\\t// ( types, data, fn )\\n\\t\\t\\tfn = data;\\n\\t\\t\\tdata = selector;\\n\\t\\t\\tselector = undefined;\\n\\t\\t}\\n\\t}\\n\\tif ( fn === false ) {\\n\\t\\tfn = returnFalse;\\n\\t} else if ( !fn ) {\\n\\t\\treturn elem;\\n\\t}\\n\\n\\tif ( one === 1 ) {\\n\\t\\torigFn = fn;\\n\\t\\tfn = function( event ) {\\n\\n\\t\\t\\t// Can use an empty set, since event contains the info\\n\\t\\t\\tjQuery().off( event );\\n\\t\\t\\treturn origFn.apply( this, arguments );\\n\\t\\t};\\n\\n\\t\\t// Use same guid so caller can remove using origFn\\n\\t\\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\\n\\t}\\n\\treturn elem.each( function() {\\n\\t\\tjQuery.event.add( this, types, fn, data, selector );\\n\\t} );\\n}\\n\\n/*\\n * Helper functions for managing events -- not part of the public interface.\\n * Props to Dean Edwards\\' addEvent library for many of the ideas.\\n */\\njQuery.event = {\\n\\n\\tglobal: {},\\n\\n\\tadd: function( elem, types, handler, data, selector ) {\\n\\n\\t\\tvar handleObjIn, eventHandle, tmp,\\n\\t\\t\\tevents, t, handleObj,\\n\\t\\t\\tspecial, handlers, type, namespaces, origType,\\n\\t\\t\\telemData = dataPriv.get( elem );\\n\\n\\t\\t// Don\\'t attach events to noData or text/comment nodes (but allow plain objects)\\n\\t\\tif ( !elemData ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Caller can pass in an object of custom data in lieu of the handler\\n\\t\\tif ( handler.handler ) {\\n\\t\\t\\thandleObjIn = handler;\\n\\t\\t\\thandler = handleObjIn.handler;\\n\\t\\t\\tselector = handleObjIn.selector;\\n\\t\\t}\\n\\n\\t\\t// Make sure that the handler has a unique ID, used to find/remove it later\\n\\t\\tif ( !handler.guid ) {\\n\\t\\t\\thandler.guid = jQuery.guid++;\\n\\t\\t}\\n\\n\\t\\t// Init the element\\'s event structure and main handler, if this is the first\\n\\t\\tif ( !( events = elemData.events ) ) {\\n\\t\\t\\tevents = elemData.events = {};\\n\\t\\t}\\n\\t\\tif ( !( eventHandle = elemData.handle ) ) {\\n\\t\\t\\teventHandle = elemData.handle = function( e ) {\\n\\n\\t\\t\\t\\t// Discard the second event of a jQuery.event.trigger() and\\n\\t\\t\\t\\t// when an event is called after a page has unloaded\\n\\t\\t\\t\\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\\n\\t\\t\\t\\t\\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\t// Handle multiple events separated by a space\\n\\t\\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\\n\\t\\tt = types.length;\\n\\t\\twhile ( t-- ) {\\n\\t\\t\\ttmp = rtypenamespace.exec( types[ t ] ) || [];\\n\\t\\t\\ttype = origType = tmp[ 1 ];\\n\\t\\t\\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\\n\\n\\t\\t\\t// There *must* be a type, no attaching namespace-only handlers\\n\\t\\t\\tif ( !type ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If event changes its type, use the special event handlers for the changed type\\n\\t\\t\\tspecial = jQuery.event.special[ type ] || {};\\n\\n\\t\\t\\t// If selector defined, determine special event api type, otherwise given type\\n\\t\\t\\ttype = ( selector ? special.delegateType : special.bindType ) || type;\\n\\n\\t\\t\\t// Update special based on newly reset type\\n\\t\\t\\tspecial = jQuery.event.special[ type ] || {};\\n\\n\\t\\t\\t// handleObj is passed to all event handlers\\n\\t\\t\\thandleObj = jQuery.extend( {\\n\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\torigType: origType,\\n\\t\\t\\t\\tdata: data,\\n\\t\\t\\t\\thandler: handler,\\n\\t\\t\\t\\tguid: handler.guid,\\n\\t\\t\\t\\tselector: selector,\\n\\t\\t\\t\\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\\n\\t\\t\\t\\tnamespace: namespaces.join( \".\" )\\n\\t\\t\\t}, handleObjIn );\\n\\n\\t\\t\\t// Init the event handler queue if we\\'re the first\\n\\t\\t\\tif ( !( handlers = events[ type ] ) ) {\\n\\t\\t\\t\\thandlers = events[ type ] = [];\\n\\t\\t\\t\\thandlers.delegateCount = 0;\\n\\n\\t\\t\\t\\t// Only use addEventListener if the special events handler returns false\\n\\t\\t\\t\\tif ( !special.setup ||\\n\\t\\t\\t\\t\\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\\n\\n\\t\\t\\t\\t\\tif ( elem.addEventListener ) {\\n\\t\\t\\t\\t\\t\\telem.addEventListener( type, eventHandle );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( special.add ) {\\n\\t\\t\\t\\tspecial.add.call( elem, handleObj );\\n\\n\\t\\t\\t\\tif ( !handleObj.handler.guid ) {\\n\\t\\t\\t\\t\\thandleObj.handler.guid = handler.guid;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add to the element\\'s handler list, delegates in front\\n\\t\\t\\tif ( selector ) {\\n\\t\\t\\t\\thandlers.splice( handlers.delegateCount++, 0, handleObj );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thandlers.push( handleObj );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Keep track of which events have ever been used, for event optimization\\n\\t\\t\\tjQuery.event.global[ type ] = true;\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// Detach an event or set of events from an element\\n\\tremove: function( elem, types, handler, selector, mappedTypes ) {\\n\\n\\t\\tvar j, origCount, tmp,\\n\\t\\t\\tevents, t, handleObj,\\n\\t\\t\\tspecial, handlers, type, namespaces, origType,\\n\\t\\t\\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\\n\\n\\t\\tif ( !elemData || !( events = elemData.events ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Once for each type.namespace in types; type may be omitted\\n\\t\\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\\n\\t\\tt = types.length;\\n\\t\\twhile ( t-- ) {\\n\\t\\t\\ttmp = rtypenamespace.exec( types[ t ] ) || [];\\n\\t\\t\\ttype = origType = tmp[ 1 ];\\n\\t\\t\\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\\n\\n\\t\\t\\t// Unbind all events (on this namespace, if provided) for the element\\n\\t\\t\\tif ( !type ) {\\n\\t\\t\\t\\tfor ( type in events ) {\\n\\t\\t\\t\\t\\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tspecial = jQuery.event.special[ type ] || {};\\n\\t\\t\\ttype = ( selector ? special.delegateType : special.bindType ) || type;\\n\\t\\t\\thandlers = events[ type ] || [];\\n\\t\\t\\ttmp = tmp[ 2 ] &&\\n\\t\\t\\t\\tnew RegExp( \"(^|\\\\\\\\.)\" + namespaces.join( \"\\\\\\\\.(?:.*\\\\\\\\.|)\" ) + \"(\\\\\\\\.|$)\" );\\n\\n\\t\\t\\t// Remove matching events\\n\\t\\t\\torigCount = j = handlers.length;\\n\\t\\t\\twhile ( j-- ) {\\n\\t\\t\\t\\thandleObj = handlers[ j ];\\n\\n\\t\\t\\t\\tif ( ( mappedTypes || origType === handleObj.origType ) &&\\n\\t\\t\\t\\t\\t( !handler || handler.guid === handleObj.guid ) &&\\n\\t\\t\\t\\t\\t( !tmp || tmp.test( handleObj.namespace ) ) &&\\n\\t\\t\\t\\t\\t( !selector || selector === handleObj.selector ||\\n\\t\\t\\t\\t\\t\\tselector === \"**\" && handleObj.selector ) ) {\\n\\t\\t\\t\\t\\thandlers.splice( j, 1 );\\n\\n\\t\\t\\t\\t\\tif ( handleObj.selector ) {\\n\\t\\t\\t\\t\\t\\thandlers.delegateCount--;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif ( special.remove ) {\\n\\t\\t\\t\\t\\t\\tspecial.remove.call( elem, handleObj );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remove generic event handler if we removed something and no more handlers exist\\n\\t\\t\\t// (avoids potential for endless recursion during removal of special event handlers)\\n\\t\\t\\tif ( origCount && !handlers.length ) {\\n\\t\\t\\t\\tif ( !special.teardown ||\\n\\t\\t\\t\\t\\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\\n\\n\\t\\t\\t\\t\\tjQuery.removeEvent( elem, type, elemData.handle );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdelete events[ type ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove data and the expando if it\\'s no longer used\\n\\t\\tif ( jQuery.isEmptyObject( events ) ) {\\n\\t\\t\\tdataPriv.remove( elem, \"handle events\" );\\n\\t\\t}\\n\\t},\\n\\n\\tdispatch: function( event ) {\\n\\n\\t\\t// Make a writable jQuery.Event from the native event object\\n\\t\\tevent = jQuery.event.fix( event );\\n\\n\\t\\tvar i, j, ret, matched, handleObj,\\n\\t\\t\\thandlerQueue = [],\\n\\t\\t\\targs = slice.call( arguments ),\\n\\t\\t\\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\\n\\t\\t\\tspecial = jQuery.event.special[ event.type ] || {};\\n\\n\\t\\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\\n\\t\\targs[ 0 ] = event;\\n\\t\\tevent.delegateTarget = this;\\n\\n\\t\\t// Call the preDispatch hook for the mapped type, and let it bail if desired\\n\\t\\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Determine handlers\\n\\t\\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\\n\\n\\t\\t// Run delegates first; they may want to stop propagation beneath us\\n\\t\\ti = 0;\\n\\t\\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\\n\\t\\t\\tevent.currentTarget = matched.elem;\\n\\n\\t\\t\\tj = 0;\\n\\t\\t\\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\\n\\t\\t\\t\\t!event.isImmediatePropagationStopped() ) {\\n\\n\\t\\t\\t\\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\\n\\t\\t\\t\\t// a subset or equal to those in the bound event (both can have no namespace).\\n\\t\\t\\t\\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\\n\\n\\t\\t\\t\\t\\tevent.handleObj = handleObj;\\n\\t\\t\\t\\t\\tevent.data = handleObj.data;\\n\\n\\t\\t\\t\\t\\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\\n\\t\\t\\t\\t\\t\\thandleObj.handler ).apply( matched.elem, args );\\n\\n\\t\\t\\t\\t\\tif ( ret !== undefined ) {\\n\\t\\t\\t\\t\\t\\tif ( ( event.result = ret ) === false ) {\\n\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Call the postDispatch hook for the mapped type\\n\\t\\tif ( special.postDispatch ) {\\n\\t\\t\\tspecial.postDispatch.call( this, event );\\n\\t\\t}\\n\\n\\t\\treturn event.result;\\n\\t},\\n\\n\\thandlers: function( event, handlers ) {\\n\\t\\tvar i, matches, sel, handleObj,\\n\\t\\t\\thandlerQueue = [],\\n\\t\\t\\tdelegateCount = handlers.delegateCount,\\n\\t\\t\\tcur = event.target;\\n\\n\\t\\t// Support (at least): Chrome, IE9\\n\\t\\t// Find delegate handlers\\n\\t\\t// Black-hole SVG <use> instance trees (#13180)\\n\\t\\t//\\n\\t\\t// Support: Firefox<=42+\\n\\t\\t// Avoid non-left-click in FF but don\\'t block IE radio events (#3861, gh-2343)\\n\\t\\tif ( delegateCount && cur.nodeType &&\\n\\t\\t\\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\\n\\n\\t\\t\\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\\n\\n\\t\\t\\t\\t// Don\\'t check non-elements (#13208)\\n\\t\\t\\t\\t// Don\\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\\n\\t\\t\\t\\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\\n\\t\\t\\t\\t\\tmatches = [];\\n\\t\\t\\t\\t\\tfor ( i = 0; i < delegateCount; i++ ) {\\n\\t\\t\\t\\t\\t\\thandleObj = handlers[ i ];\\n\\n\\t\\t\\t\\t\\t\\t// Don\\'t conflict with Object.prototype properties (#13203)\\n\\t\\t\\t\\t\\t\\tsel = handleObj.selector + \" \";\\n\\n\\t\\t\\t\\t\\t\\tif ( matches[ sel ] === undefined ) {\\n\\t\\t\\t\\t\\t\\t\\tmatches[ sel ] = handleObj.needsContext ?\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery( sel, this ).index( cur ) > -1 :\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery.find( sel, this, null, [ cur ] ).length;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif ( matches[ sel ] ) {\\n\\t\\t\\t\\t\\t\\t\\tmatches.push( handleObj );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif ( matches.length ) {\\n\\t\\t\\t\\t\\t\\thandlerQueue.push( { elem: cur, handlers: matches } );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Add the remaining (directly-bound) handlers\\n\\t\\tif ( delegateCount < handlers.length ) {\\n\\t\\t\\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\\n\\t\\t}\\n\\n\\t\\treturn handlerQueue;\\n\\t},\\n\\n\\t// Includes some event props shared by KeyEvent and MouseEvent\\n\\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\\n\\t\\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\\n\\n\\tfixHooks: {},\\n\\n\\tkeyHooks: {\\n\\t\\tprops: \"char charCode key keyCode\".split( \" \" ),\\n\\t\\tfilter: function( event, original ) {\\n\\n\\t\\t\\t// Add which for key events\\n\\t\\t\\tif ( event.which == null ) {\\n\\t\\t\\t\\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn event;\\n\\t\\t}\\n\\t},\\n\\n\\tmouseHooks: {\\n\\t\\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\\n\\t\\t\\t\"screenX screenY toElement\" ).split( \" \" ),\\n\\t\\tfilter: function( event, original ) {\\n\\t\\t\\tvar eventDoc, doc, body,\\n\\t\\t\\t\\tbutton = original.button;\\n\\n\\t\\t\\t// Calculate pageX/Y if missing and clientX/Y available\\n\\t\\t\\tif ( event.pageX == null && original.clientX != null ) {\\n\\t\\t\\t\\teventDoc = event.target.ownerDocument || document;\\n\\t\\t\\t\\tdoc = eventDoc.documentElement;\\n\\t\\t\\t\\tbody = eventDoc.body;\\n\\n\\t\\t\\t\\tevent.pageX = original.clientX +\\n\\t\\t\\t\\t\\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\\n\\t\\t\\t\\t\\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\\n\\t\\t\\t\\tevent.pageY = original.clientY +\\n\\t\\t\\t\\t\\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\\n\\t\\t\\t\\t\\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add which for click: 1 === left; 2 === middle; 3 === right\\n\\t\\t\\t// Note: button is not normalized, so don\\'t use it\\n\\t\\t\\tif ( !event.which && button !== undefined ) {\\n\\t\\t\\t\\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn event;\\n\\t\\t}\\n\\t},\\n\\n\\tfix: function( event ) {\\n\\t\\tif ( event[ jQuery.expando ] ) {\\n\\t\\t\\treturn event;\\n\\t\\t}\\n\\n\\t\\t// Create a writable copy of the event object and normalize some properties\\n\\t\\tvar i, prop, copy,\\n\\t\\t\\ttype = event.type,\\n\\t\\t\\toriginalEvent = event,\\n\\t\\t\\tfixHook = this.fixHooks[ type ];\\n\\n\\t\\tif ( !fixHook ) {\\n\\t\\t\\tthis.fixHooks[ type ] = fixHook =\\n\\t\\t\\t\\trmouseEvent.test( type ) ? this.mouseHooks :\\n\\t\\t\\t\\trkeyEvent.test( type ) ? this.keyHooks :\\n\\t\\t\\t\\t{};\\n\\t\\t}\\n\\t\\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\\n\\n\\t\\tevent = new jQuery.Event( originalEvent );\\n\\n\\t\\ti = copy.length;\\n\\t\\twhile ( i-- ) {\\n\\t\\t\\tprop = copy[ i ];\\n\\t\\t\\tevent[ prop ] = originalEvent[ prop ];\\n\\t\\t}\\n\\n\\t\\t// Support: Cordova 2.5 (WebKit) (#13255)\\n\\t\\t// All events should have a target; Cordova deviceready doesn\\'t\\n\\t\\tif ( !event.target ) {\\n\\t\\t\\tevent.target = document;\\n\\t\\t}\\n\\n\\t\\t// Support: Safari 6.0+, Chrome<28\\n\\t\\t// Target should not be a text node (#504, #13143)\\n\\t\\tif ( event.target.nodeType === 3 ) {\\n\\t\\t\\tevent.target = event.target.parentNode;\\n\\t\\t}\\n\\n\\t\\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\\n\\t},\\n\\n\\tspecial: {\\n\\t\\tload: {\\n\\n\\t\\t\\t// Prevent triggered image.load events from bubbling to window.load\\n\\t\\t\\tnoBubble: true\\n\\t\\t},\\n\\t\\tfocus: {\\n\\n\\t\\t\\t// Fire native event if possible so blur/focus sequence is correct\\n\\t\\t\\ttrigger: function() {\\n\\t\\t\\t\\tif ( this !== safeActiveElement() && this.focus ) {\\n\\t\\t\\t\\t\\tthis.focus();\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tdelegateType: \"focusin\"\\n\\t\\t},\\n\\t\\tblur: {\\n\\t\\t\\ttrigger: function() {\\n\\t\\t\\t\\tif ( this === safeActiveElement() && this.blur ) {\\n\\t\\t\\t\\t\\tthis.blur();\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tdelegateType: \"focusout\"\\n\\t\\t},\\n\\t\\tclick: {\\n\\n\\t\\t\\t// For checkbox, fire native event so checked state will be right\\n\\t\\t\\ttrigger: function() {\\n\\t\\t\\t\\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\\n\\t\\t\\t\\t\\tthis.click();\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\t// For cross-browser consistency, don\\'t fire native .click() on links\\n\\t\\t\\t_default: function( event ) {\\n\\t\\t\\t\\treturn jQuery.nodeName( event.target, \"a\" );\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tbeforeunload: {\\n\\t\\t\\tpostDispatch: function( event ) {\\n\\n\\t\\t\\t\\t// Support: Firefox 20+\\n\\t\\t\\t\\t// Firefox doesn\\'t alert if the returnValue field is not set.\\n\\t\\t\\t\\tif ( event.result !== undefined && event.originalEvent ) {\\n\\t\\t\\t\\t\\tevent.originalEvent.returnValue = event.result;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\njQuery.removeEvent = function( elem, type, handle ) {\\n\\n\\t// This \"if\" is needed for plain objects\\n\\tif ( elem.removeEventListener ) {\\n\\t\\telem.removeEventListener( type, handle );\\n\\t}\\n};\\n\\njQuery.Event = function( src, props ) {\\n\\n\\t// Allow instantiation without the \\'new\\' keyword\\n\\tif ( !( this instanceof jQuery.Event ) ) {\\n\\t\\treturn new jQuery.Event( src, props );\\n\\t}\\n\\n\\t// Event object\\n\\tif ( src && src.type ) {\\n\\t\\tthis.originalEvent = src;\\n\\t\\tthis.type = src.type;\\n\\n\\t\\t// Events bubbling up the document may have been marked as prevented\\n\\t\\t// by a handler lower down the tree; reflect the correct value.\\n\\t\\tthis.isDefaultPrevented = src.defaultPrevented ||\\n\\t\\t\\t\\tsrc.defaultPrevented === undefined &&\\n\\n\\t\\t\\t\\t// Support: Android<4.0\\n\\t\\t\\t\\tsrc.returnValue === false ?\\n\\t\\t\\treturnTrue :\\n\\t\\t\\treturnFalse;\\n\\n\\t// Event type\\n\\t} else {\\n\\t\\tthis.type = src;\\n\\t}\\n\\n\\t// Put explicitly provided properties onto the event object\\n\\tif ( props ) {\\n\\t\\tjQuery.extend( this, props );\\n\\t}\\n\\n\\t// Create a timestamp if incoming event doesn\\'t have one\\n\\tthis.timeStamp = src && src.timeStamp || jQuery.now();\\n\\n\\t// Mark it as fixed\\n\\tthis[ jQuery.expando ] = true;\\n};\\n\\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\\njQuery.Event.prototype = {\\n\\tconstructor: jQuery.Event,\\n\\tisDefaultPrevented: returnFalse,\\n\\tisPropagationStopped: returnFalse,\\n\\tisImmediatePropagationStopped: returnFalse,\\n\\tisSimulated: false,\\n\\n\\tpreventDefault: function() {\\n\\t\\tvar e = this.originalEvent;\\n\\n\\t\\tthis.isDefaultPrevented = returnTrue;\\n\\n\\t\\tif ( e && !this.isSimulated ) {\\n\\t\\t\\te.preventDefault();\\n\\t\\t}\\n\\t},\\n\\tstopPropagation: function() {\\n\\t\\tvar e = this.originalEvent;\\n\\n\\t\\tthis.isPropagationStopped = returnTrue;\\n\\n\\t\\tif ( e && !this.isSimulated ) {\\n\\t\\t\\te.stopPropagation();\\n\\t\\t}\\n\\t},\\n\\tstopImmediatePropagation: function() {\\n\\t\\tvar e = this.originalEvent;\\n\\n\\t\\tthis.isImmediatePropagationStopped = returnTrue;\\n\\n\\t\\tif ( e && !this.isSimulated ) {\\n\\t\\t\\te.stopImmediatePropagation();\\n\\t\\t}\\n\\n\\t\\tthis.stopPropagation();\\n\\t}\\n};\\n\\n// Create mouseenter/leave events using mouseover/out and event-time checks\\n// so that event delegation works in jQuery.\\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\\n//\\n// Support: Safari 7 only\\n// Safari sends mouseenter too often; see:\\n// https://code.google.com/p/chromium/issues/detail?id=470258\\n// for the description of the bug (it existed in older Chrome versions as well).\\njQuery.each( {\\n\\tmouseenter: \"mouseover\",\\n\\tmouseleave: \"mouseout\",\\n\\tpointerenter: \"pointerover\",\\n\\tpointerleave: \"pointerout\"\\n}, function( orig, fix ) {\\n\\tjQuery.event.special[ orig ] = {\\n\\t\\tdelegateType: fix,\\n\\t\\tbindType: fix,\\n\\n\\t\\thandle: function( event ) {\\n\\t\\t\\tvar ret,\\n\\t\\t\\t\\ttarget = this,\\n\\t\\t\\t\\trelated = event.relatedTarget,\\n\\t\\t\\t\\thandleObj = event.handleObj;\\n\\n\\t\\t\\t// For mouseenter/leave call the handler if related is outside the target.\\n\\t\\t\\t// NB: No relatedTarget if the mouse left/entered the browser window\\n\\t\\t\\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\\n\\t\\t\\t\\tevent.type = handleObj.origType;\\n\\t\\t\\t\\tret = handleObj.handler.apply( this, arguments );\\n\\t\\t\\t\\tevent.type = fix;\\n\\t\\t\\t}\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\t};\\n} );\\n\\njQuery.fn.extend( {\\n\\ton: function( types, selector, data, fn ) {\\n\\t\\treturn on( this, types, selector, data, fn );\\n\\t},\\n\\tone: function( types, selector, data, fn ) {\\n\\t\\treturn on( this, types, selector, data, fn, 1 );\\n\\t},\\n\\toff: function( types, selector, fn ) {\\n\\t\\tvar handleObj, type;\\n\\t\\tif ( types && types.preventDefault && types.handleObj ) {\\n\\n\\t\\t\\t// ( event )  dispatched jQuery.Event\\n\\t\\t\\thandleObj = types.handleObj;\\n\\t\\t\\tjQuery( types.delegateTarget ).off(\\n\\t\\t\\t\\thandleObj.namespace ?\\n\\t\\t\\t\\t\\thandleObj.origType + \".\" + handleObj.namespace :\\n\\t\\t\\t\\t\\thandleObj.origType,\\n\\t\\t\\t\\thandleObj.selector,\\n\\t\\t\\t\\thandleObj.handler\\n\\t\\t\\t);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\t\\tif ( typeof types === \"object\" ) {\\n\\n\\t\\t\\t// ( types-object [, selector] )\\n\\t\\t\\tfor ( type in types ) {\\n\\t\\t\\t\\tthis.off( type, selector, types[ type ] );\\n\\t\\t\\t}\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\t\\tif ( selector === false || typeof selector === \"function\" ) {\\n\\n\\t\\t\\t// ( types [, fn] )\\n\\t\\t\\tfn = selector;\\n\\t\\t\\tselector = undefined;\\n\\t\\t}\\n\\t\\tif ( fn === false ) {\\n\\t\\t\\tfn = returnFalse;\\n\\t\\t}\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tjQuery.event.remove( this, types, fn, selector );\\n\\t\\t} );\\n\\t}\\n} );\\n\\n\\nvar\\n\\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\\\w:-]+)[^>]*)\\\\/>/gi,\\n\\n\\t// Support: IE 10-11, Edge 10240+\\n\\t// In IE/Edge using regex groups here causes severe slowdowns.\\n\\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\\n\\trnoInnerhtml = /<script|<style|<link/i,\\n\\n\\t// checked=\"checked\" or checked\\n\\trchecked = /checked\\\\s*(?:[^=]|=\\\\s*.checked.)/i,\\n\\trscriptTypeMasked = /^true\\\\/(.*)/,\\n\\trcleanScript = /^\\\\s*<!(?:\\\\[CDATA\\\\[|--)|(?:\\\\]\\\\]|--)>\\\\s*$/g;\\n\\n// Manipulating tables requires a tbody\\nfunction manipulationTarget( elem, content ) {\\n\\treturn jQuery.nodeName( elem, \"table\" ) &&\\n\\t\\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\\n\\n\\t\\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\\n\\t\\t\\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\\n\\t\\telem;\\n}\\n\\n// Replace/restore the type attribute of script elements for safe DOM manipulation\\nfunction disableScript( elem ) {\\n\\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\\n\\treturn elem;\\n}\\nfunction restoreScript( elem ) {\\n\\tvar match = rscriptTypeMasked.exec( elem.type );\\n\\n\\tif ( match ) {\\n\\t\\telem.type = match[ 1 ];\\n\\t} else {\\n\\t\\telem.removeAttribute( \"type\" );\\n\\t}\\n\\n\\treturn elem;\\n}\\n\\nfunction cloneCopyEvent( src, dest ) {\\n\\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\\n\\n\\tif ( dest.nodeType !== 1 ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// 1. Copy private data: events, handlers, etc.\\n\\tif ( dataPriv.hasData( src ) ) {\\n\\t\\tpdataOld = dataPriv.access( src );\\n\\t\\tpdataCur = dataPriv.set( dest, pdataOld );\\n\\t\\tevents = pdataOld.events;\\n\\n\\t\\tif ( events ) {\\n\\t\\t\\tdelete pdataCur.handle;\\n\\t\\t\\tpdataCur.events = {};\\n\\n\\t\\t\\tfor ( type in events ) {\\n\\t\\t\\t\\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\\n\\t\\t\\t\\t\\tjQuery.event.add( dest, type, events[ type ][ i ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// 2. Copy user data\\n\\tif ( dataUser.hasData( src ) ) {\\n\\t\\tudataOld = dataUser.access( src );\\n\\t\\tudataCur = jQuery.extend( {}, udataOld );\\n\\n\\t\\tdataUser.set( dest, udataCur );\\n\\t}\\n}\\n\\n// Fix IE bugs, see support tests\\nfunction fixInput( src, dest ) {\\n\\tvar nodeName = dest.nodeName.toLowerCase();\\n\\n\\t// Fails to persist the checked state of a cloned checkbox or radio button.\\n\\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\\n\\t\\tdest.checked = src.checked;\\n\\n\\t// Fails to return the selected option to the default selected state when cloning options\\n\\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\\n\\t\\tdest.defaultValue = src.defaultValue;\\n\\t}\\n}\\n\\nfunction domManip( collection, args, callback, ignored ) {\\n\\n\\t// Flatten any nested arrays\\n\\targs = concat.apply( [], args );\\n\\n\\tvar fragment, first, scripts, hasScripts, node, doc,\\n\\t\\ti = 0,\\n\\t\\tl = collection.length,\\n\\t\\tiNoClone = l - 1,\\n\\t\\tvalue = args[ 0 ],\\n\\t\\tisFunction = jQuery.isFunction( value );\\n\\n\\t// We can\\'t cloneNode fragments that contain checked, in WebKit\\n\\tif ( isFunction ||\\n\\t\\t\\t( l > 1 && typeof value === \"string\" &&\\n\\t\\t\\t\\t!support.checkClone && rchecked.test( value ) ) ) {\\n\\t\\treturn collection.each( function( index ) {\\n\\t\\t\\tvar self = collection.eq( index );\\n\\t\\t\\tif ( isFunction ) {\\n\\t\\t\\t\\targs[ 0 ] = value.call( this, index, self.html() );\\n\\t\\t\\t}\\n\\t\\t\\tdomManip( self, args, callback, ignored );\\n\\t\\t} );\\n\\t}\\n\\n\\tif ( l ) {\\n\\t\\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\\n\\t\\tfirst = fragment.firstChild;\\n\\n\\t\\tif ( fragment.childNodes.length === 1 ) {\\n\\t\\t\\tfragment = first;\\n\\t\\t}\\n\\n\\t\\t// Require either new content or an interest in ignored elements to invoke the callback\\n\\t\\tif ( first || ignored ) {\\n\\t\\t\\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\\n\\t\\t\\thasScripts = scripts.length;\\n\\n\\t\\t\\t// Use the original fragment for the last item\\n\\t\\t\\t// instead of the first because it can end up\\n\\t\\t\\t// being emptied incorrectly in certain situations (#8070).\\n\\t\\t\\tfor ( ; i < l; i++ ) {\\n\\t\\t\\t\\tnode = fragment;\\n\\n\\t\\t\\t\\tif ( i !== iNoClone ) {\\n\\t\\t\\t\\t\\tnode = jQuery.clone( node, true, true );\\n\\n\\t\\t\\t\\t\\t// Keep references to cloned scripts for later restoration\\n\\t\\t\\t\\t\\tif ( hasScripts ) {\\n\\n\\t\\t\\t\\t\\t\\t// Support: Android<4.1, PhantomJS<2\\n\\t\\t\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\t\\t\\tjQuery.merge( scripts, getAll( node, \"script\" ) );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcallback.call( collection[ i ], node, i );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasScripts ) {\\n\\t\\t\\t\\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\\n\\n\\t\\t\\t\\t// Reenable scripts\\n\\t\\t\\t\\tjQuery.map( scripts, restoreScript );\\n\\n\\t\\t\\t\\t// Evaluate executable scripts on first document insertion\\n\\t\\t\\t\\tfor ( i = 0; i < hasScripts; i++ ) {\\n\\t\\t\\t\\t\\tnode = scripts[ i ];\\n\\t\\t\\t\\t\\tif ( rscriptType.test( node.type || \"\" ) &&\\n\\t\\t\\t\\t\\t\\t!dataPriv.access( node, \"globalEval\" ) &&\\n\\t\\t\\t\\t\\t\\tjQuery.contains( doc, node ) ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( node.src ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Optional AJAX dependency, but won\\'t run scripts if not present\\n\\t\\t\\t\\t\\t\\t\\tif ( jQuery._evalUrl ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery._evalUrl( node.src );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn collection;\\n}\\n\\nfunction remove( elem, selector, keepData ) {\\n\\tvar node,\\n\\t\\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\\n\\t\\ti = 0;\\n\\n\\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\\n\\t\\tif ( !keepData && node.nodeType === 1 ) {\\n\\t\\t\\tjQuery.cleanData( getAll( node ) );\\n\\t\\t}\\n\\n\\t\\tif ( node.parentNode ) {\\n\\t\\t\\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\\n\\t\\t\\t\\tsetGlobalEval( getAll( node, \"script\" ) );\\n\\t\\t\\t}\\n\\t\\t\\tnode.parentNode.removeChild( node );\\n\\t\\t}\\n\\t}\\n\\n\\treturn elem;\\n}\\n\\njQuery.extend( {\\n\\thtmlPrefilter: function( html ) {\\n\\t\\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\\n\\t},\\n\\n\\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\\n\\t\\tvar i, l, srcElements, destElements,\\n\\t\\t\\tclone = elem.cloneNode( true ),\\n\\t\\t\\tinPage = jQuery.contains( elem.ownerDocument, elem );\\n\\n\\t\\t// Fix IE cloning issues\\n\\t\\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\\n\\t\\t\\t\\t!jQuery.isXMLDoc( elem ) ) {\\n\\n\\t\\t\\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\\n\\t\\t\\tdestElements = getAll( clone );\\n\\t\\t\\tsrcElements = getAll( elem );\\n\\n\\t\\t\\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\\n\\t\\t\\t\\tfixInput( srcElements[ i ], destElements[ i ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Copy the events from the original to the clone\\n\\t\\tif ( dataAndEvents ) {\\n\\t\\t\\tif ( deepDataAndEvents ) {\\n\\t\\t\\t\\tsrcElements = srcElements || getAll( elem );\\n\\t\\t\\t\\tdestElements = destElements || getAll( clone );\\n\\n\\t\\t\\t\\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\\n\\t\\t\\t\\t\\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcloneCopyEvent( elem, clone );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Preserve script evaluation history\\n\\t\\tdestElements = getAll( clone, \"script\" );\\n\\t\\tif ( destElements.length > 0 ) {\\n\\t\\t\\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\\n\\t\\t}\\n\\n\\t\\t// Return the cloned set\\n\\t\\treturn clone;\\n\\t},\\n\\n\\tcleanData: function( elems ) {\\n\\t\\tvar data, elem, type,\\n\\t\\t\\tspecial = jQuery.event.special,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\\n\\t\\t\\tif ( acceptData( elem ) ) {\\n\\t\\t\\t\\tif ( ( data = elem[ dataPriv.expando ] ) ) {\\n\\t\\t\\t\\t\\tif ( data.events ) {\\n\\t\\t\\t\\t\\t\\tfor ( type in data.events ) {\\n\\t\\t\\t\\t\\t\\t\\tif ( special[ type ] ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery.event.remove( elem, type );\\n\\n\\t\\t\\t\\t\\t\\t\\t// This is a shortcut to avoid jQuery.event.remove\\'s overhead\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery.removeEvent( elem, type, data.handle );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: Chrome <= 35-45+\\n\\t\\t\\t\\t\\t// Assign undefined instead of using delete, see Data#remove\\n\\t\\t\\t\\t\\telem[ dataPriv.expando ] = undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( elem[ dataUser.expando ] ) {\\n\\n\\t\\t\\t\\t\\t// Support: Chrome <= 35-45+\\n\\t\\t\\t\\t\\t// Assign undefined instead of using delete, see Data#remove\\n\\t\\t\\t\\t\\telem[ dataUser.expando ] = undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n} );\\n\\njQuery.fn.extend( {\\n\\n\\t// Keep domManip exposed until 3.0 (gh-2225)\\n\\tdomManip: domManip,\\n\\n\\tdetach: function( selector ) {\\n\\t\\treturn remove( this, selector, true );\\n\\t},\\n\\n\\tremove: function( selector ) {\\n\\t\\treturn remove( this, selector );\\n\\t},\\n\\n\\ttext: function( value ) {\\n\\t\\treturn access( this, function( value ) {\\n\\t\\t\\treturn value === undefined ?\\n\\t\\t\\t\\tjQuery.text( this ) :\\n\\t\\t\\t\\tthis.empty().each( function() {\\n\\t\\t\\t\\t\\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\\n\\t\\t\\t\\t\\t\\tthis.textContent = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t}, null, value, arguments.length );\\n\\t},\\n\\n\\tappend: function() {\\n\\t\\treturn domManip( this, arguments, function( elem ) {\\n\\t\\t\\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\\n\\t\\t\\t\\tvar target = manipulationTarget( this, elem );\\n\\t\\t\\t\\ttarget.appendChild( elem );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\tprepend: function() {\\n\\t\\treturn domManip( this, arguments, function( elem ) {\\n\\t\\t\\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\\n\\t\\t\\t\\tvar target = manipulationTarget( this, elem );\\n\\t\\t\\t\\ttarget.insertBefore( elem, target.firstChild );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\tbefore: function() {\\n\\t\\treturn domManip( this, arguments, function( elem ) {\\n\\t\\t\\tif ( this.parentNode ) {\\n\\t\\t\\t\\tthis.parentNode.insertBefore( elem, this );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\tafter: function() {\\n\\t\\treturn domManip( this, arguments, function( elem ) {\\n\\t\\t\\tif ( this.parentNode ) {\\n\\t\\t\\t\\tthis.parentNode.insertBefore( elem, this.nextSibling );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\tempty: function() {\\n\\t\\tvar elem,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\\n\\t\\t\\tif ( elem.nodeType === 1 ) {\\n\\n\\t\\t\\t\\t// Prevent memory leaks\\n\\t\\t\\t\\tjQuery.cleanData( getAll( elem, false ) );\\n\\n\\t\\t\\t\\t// Remove any remaining nodes\\n\\t\\t\\t\\telem.textContent = \"\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\n\\tclone: function( dataAndEvents, deepDataAndEvents ) {\\n\\t\\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\\n\\t\\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\\n\\n\\t\\treturn this.map( function() {\\n\\t\\t\\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\\n\\t\\t} );\\n\\t},\\n\\n\\thtml: function( value ) {\\n\\t\\treturn access( this, function( value ) {\\n\\t\\t\\tvar elem = this[ 0 ] || {},\\n\\t\\t\\t\\ti = 0,\\n\\t\\t\\t\\tl = this.length;\\n\\n\\t\\t\\tif ( value === undefined && elem.nodeType === 1 ) {\\n\\t\\t\\t\\treturn elem.innerHTML;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// See if we can take a shortcut and just use innerHTML\\n\\t\\t\\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\\n\\t\\t\\t\\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\\n\\n\\t\\t\\t\\tvalue = jQuery.htmlPrefilter( value );\\n\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tfor ( ; i < l; i++ ) {\\n\\t\\t\\t\\t\\t\\telem = this[ i ] || {};\\n\\n\\t\\t\\t\\t\\t\\t// Remove element nodes and prevent memory leaks\\n\\t\\t\\t\\t\\t\\tif ( elem.nodeType === 1 ) {\\n\\t\\t\\t\\t\\t\\t\\tjQuery.cleanData( getAll( elem, false ) );\\n\\t\\t\\t\\t\\t\\t\\telem.innerHTML = value;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\telem = 0;\\n\\n\\t\\t\\t\\t// If using innerHTML throws an exception, use the fallback method\\n\\t\\t\\t\\t} catch ( e ) {}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( elem ) {\\n\\t\\t\\t\\tthis.empty().append( value );\\n\\t\\t\\t}\\n\\t\\t}, null, value, arguments.length );\\n\\t},\\n\\n\\treplaceWith: function() {\\n\\t\\tvar ignored = [];\\n\\n\\t\\t// Make the changes, replacing each non-ignored context element with the new content\\n\\t\\treturn domManip( this, arguments, function( elem ) {\\n\\t\\t\\tvar parent = this.parentNode;\\n\\n\\t\\t\\tif ( jQuery.inArray( this, ignored ) < 0 ) {\\n\\t\\t\\t\\tjQuery.cleanData( getAll( this ) );\\n\\t\\t\\t\\tif ( parent ) {\\n\\t\\t\\t\\t\\tparent.replaceChild( elem, this );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t// Force callback invocation\\n\\t\\t}, ignored );\\n\\t}\\n} );\\n\\njQuery.each( {\\n\\tappendTo: \"append\",\\n\\tprependTo: \"prepend\",\\n\\tinsertBefore: \"before\",\\n\\tinsertAfter: \"after\",\\n\\treplaceAll: \"replaceWith\"\\n}, function( name, original ) {\\n\\tjQuery.fn[ name ] = function( selector ) {\\n\\t\\tvar elems,\\n\\t\\t\\tret = [],\\n\\t\\t\\tinsert = jQuery( selector ),\\n\\t\\t\\tlast = insert.length - 1,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tfor ( ; i <= last; i++ ) {\\n\\t\\t\\telems = i === last ? this : this.clone( true );\\n\\t\\t\\tjQuery( insert[ i ] )[ original ]( elems );\\n\\n\\t\\t\\t// Support: QtWebKit\\n\\t\\t\\t// .get() because push.apply(_, arraylike) throws\\n\\t\\t\\tpush.apply( ret, elems.get() );\\n\\t\\t}\\n\\n\\t\\treturn this.pushStack( ret );\\n\\t};\\n} );\\n\\n\\nvar iframe,\\n\\telemdisplay = {\\n\\n\\t\\t// Support: Firefox\\n\\t\\t// We have to pre-define these values for FF (#10227)\\n\\t\\tHTML: \"block\",\\n\\t\\tBODY: \"block\"\\n\\t};\\n\\n/**\\n * Retrieve the actual display of a element\\n * @param {String} name nodeName of the element\\n * @param {Object} doc Document object\\n */\\n\\n// Called only from within defaultDisplay\\nfunction actualDisplay( name, doc ) {\\n\\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\\n\\n\\t\\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\\n\\n\\t// We don\\'t have any data stored on the element,\\n\\t// so use \"detach\" method as fast way to get rid of the element\\n\\telem.detach();\\n\\n\\treturn display;\\n}\\n\\n/**\\n * Try to determine the default display value of an element\\n * @param {String} nodeName\\n */\\nfunction defaultDisplay( nodeName ) {\\n\\tvar doc = document,\\n\\t\\tdisplay = elemdisplay[ nodeName ];\\n\\n\\tif ( !display ) {\\n\\t\\tdisplay = actualDisplay( nodeName, doc );\\n\\n\\t\\t// If the simple way fails, read from inside an iframe\\n\\t\\tif ( display === \"none\" || !display ) {\\n\\n\\t\\t\\t// Use the already-created iframe if possible\\n\\t\\t\\tiframe = ( iframe || jQuery( \"<iframe frameborder=\\'0\\' width=\\'0\\' height=\\'0\\'/>\" ) )\\n\\t\\t\\t\\t.appendTo( doc.documentElement );\\n\\n\\t\\t\\t// Always write a new HTML skeleton so Webkit and Firefox don\\'t choke on reuse\\n\\t\\t\\tdoc = iframe[ 0 ].contentDocument;\\n\\n\\t\\t\\t// Support: IE\\n\\t\\t\\tdoc.write();\\n\\t\\t\\tdoc.close();\\n\\n\\t\\t\\tdisplay = actualDisplay( nodeName, doc );\\n\\t\\t\\tiframe.detach();\\n\\t\\t}\\n\\n\\t\\t// Store the correct default display\\n\\t\\telemdisplay[ nodeName ] = display;\\n\\t}\\n\\n\\treturn display;\\n}\\nvar rmargin = ( /^margin/ );\\n\\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\\n\\nvar getStyles = function( elem ) {\\n\\n\\t\\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\\n\\t\\t// IE throws on elements created in popups\\n\\t\\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\\n\\t\\tvar view = elem.ownerDocument.defaultView;\\n\\n\\t\\tif ( !view || !view.opener ) {\\n\\t\\t\\tview = window;\\n\\t\\t}\\n\\n\\t\\treturn view.getComputedStyle( elem );\\n\\t};\\n\\nvar swap = function( elem, options, callback, args ) {\\n\\tvar ret, name,\\n\\t\\told = {};\\n\\n\\t// Remember the old values, and insert the new ones\\n\\tfor ( name in options ) {\\n\\t\\told[ name ] = elem.style[ name ];\\n\\t\\telem.style[ name ] = options[ name ];\\n\\t}\\n\\n\\tret = callback.apply( elem, args || [] );\\n\\n\\t// Revert the old values\\n\\tfor ( name in options ) {\\n\\t\\telem.style[ name ] = old[ name ];\\n\\t}\\n\\n\\treturn ret;\\n};\\n\\n\\nvar documentElement = document.documentElement;\\n\\n\\n\\n( function() {\\n\\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\\n\\t\\tcontainer = document.createElement( \"div\" ),\\n\\t\\tdiv = document.createElement( \"div\" );\\n\\n\\t// Finish early in limited (non-browser) environments\\n\\tif ( !div.style ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Support: IE9-11+\\n\\t// Style of cloned element affects source element cloned (#8908)\\n\\tdiv.style.backgroundClip = \"content-box\";\\n\\tdiv.cloneNode( true ).style.backgroundClip = \"\";\\n\\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\\n\\n\\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\\n\\t\\t\"padding:0;margin-top:1px;position:absolute\";\\n\\tcontainer.appendChild( div );\\n\\n\\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\\n\\t// so they\\'re executed at the same time to save the second computation.\\n\\tfunction computeStyleTests() {\\n\\t\\tdiv.style.cssText =\\n\\n\\t\\t\\t// Support: Firefox<29, Android 2.3\\n\\t\\t\\t// Vendor-prefix box-sizing\\n\\t\\t\\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\\n\\t\\t\\t\"position:relative;display:block;\" +\\n\\t\\t\\t\"margin:auto;border:1px;padding:1px;\" +\\n\\t\\t\\t\"top:1%;width:50%\";\\n\\t\\tdiv.innerHTML = \"\";\\n\\t\\tdocumentElement.appendChild( container );\\n\\n\\t\\tvar divStyle = window.getComputedStyle( div );\\n\\t\\tpixelPositionVal = divStyle.top !== \"1%\";\\n\\t\\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\\n\\t\\tboxSizingReliableVal = divStyle.width === \"4px\";\\n\\n\\t\\t// Support: Android 4.0 - 4.3 only\\n\\t\\t// Some styles come back with percentage values, even though they shouldn\\'t\\n\\t\\tdiv.style.marginRight = \"50%\";\\n\\t\\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\\n\\n\\t\\tdocumentElement.removeChild( container );\\n\\t}\\n\\n\\tjQuery.extend( support, {\\n\\t\\tpixelPosition: function() {\\n\\n\\t\\t\\t// This test is executed only once but we still do memoizing\\n\\t\\t\\t// since we can use the boxSizingReliable pre-computing.\\n\\t\\t\\t// No need to check if the test was already performed, though.\\n\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\treturn pixelPositionVal;\\n\\t\\t},\\n\\t\\tboxSizingReliable: function() {\\n\\t\\t\\tif ( boxSizingReliableVal == null ) {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t}\\n\\t\\t\\treturn boxSizingReliableVal;\\n\\t\\t},\\n\\t\\tpixelMarginRight: function() {\\n\\n\\t\\t\\t// Support: Android 4.0-4.3\\n\\t\\t\\t// We\\'re checking for boxSizingReliableVal here instead of pixelMarginRightVal\\n\\t\\t\\t// since that compresses better and they\\'re computed together anyway.\\n\\t\\t\\tif ( boxSizingReliableVal == null ) {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t}\\n\\t\\t\\treturn pixelMarginRightVal;\\n\\t\\t},\\n\\t\\treliableMarginLeft: function() {\\n\\n\\t\\t\\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\\n\\t\\t\\tif ( boxSizingReliableVal == null ) {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t}\\n\\t\\t\\treturn reliableMarginLeftVal;\\n\\t\\t},\\n\\t\\treliableMarginRight: function() {\\n\\n\\t\\t\\t// Support: Android 2.3\\n\\t\\t\\t// Check if div with explicit width and no margin-right incorrectly\\n\\t\\t\\t// gets computed margin-right based on width of container. (#3333)\\n\\t\\t\\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\\n\\t\\t\\t// This support function is only executed once so no memoizing is needed.\\n\\t\\t\\tvar ret,\\n\\t\\t\\t\\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\\n\\n\\t\\t\\t// Reset CSS: box-sizing; display; margin; border; padding\\n\\t\\t\\tmarginDiv.style.cssText = div.style.cssText =\\n\\n\\t\\t\\t\\t// Support: Android 2.3\\n\\t\\t\\t\\t// Vendor-prefix box-sizing\\n\\t\\t\\t\\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\\n\\t\\t\\t\\t\"display:block;margin:0;border:0;padding:0\";\\n\\t\\t\\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\\n\\t\\t\\tdiv.style.width = \"1px\";\\n\\t\\t\\tdocumentElement.appendChild( container );\\n\\n\\t\\t\\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\\n\\n\\t\\t\\tdocumentElement.removeChild( container );\\n\\t\\t\\tdiv.removeChild( marginDiv );\\n\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\t} );\\n} )();\\n\\n\\nfunction curCSS( elem, name, computed ) {\\n\\tvar width, minWidth, maxWidth, ret,\\n\\t\\tstyle = elem.style;\\n\\n\\tcomputed = computed || getStyles( elem );\\n\\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\\n\\n\\t// Support: Opera 12.1x only\\n\\t// Fall back to style even without computed\\n\\t// computed is undefined for elems on document fragments\\n\\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\\n\\t\\tret = jQuery.style( elem, name );\\n\\t}\\n\\n\\t// Support: IE9\\n\\t// getPropertyValue is only needed for .css(\\'filter\\') (#12537)\\n\\tif ( computed ) {\\n\\n\\t\\t// A tribute to the \"awesome hack by Dean Edwards\"\\n\\t\\t// Android Browser returns percentage for some values,\\n\\t\\t// but width seems to be reliably pixels.\\n\\t\\t// This is against the CSSOM draft spec:\\n\\t\\t// http://dev.w3.org/csswg/cssom/#resolved-values\\n\\t\\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\\n\\n\\t\\t\\t// Remember the original values\\n\\t\\t\\twidth = style.width;\\n\\t\\t\\tminWidth = style.minWidth;\\n\\t\\t\\tmaxWidth = style.maxWidth;\\n\\n\\t\\t\\t// Put in the new values to get a computed value out\\n\\t\\t\\tstyle.minWidth = style.maxWidth = style.width = ret;\\n\\t\\t\\tret = computed.width;\\n\\n\\t\\t\\t// Revert the changed values\\n\\t\\t\\tstyle.width = width;\\n\\t\\t\\tstyle.minWidth = minWidth;\\n\\t\\t\\tstyle.maxWidth = maxWidth;\\n\\t\\t}\\n\\t}\\n\\n\\treturn ret !== undefined ?\\n\\n\\t\\t// Support: IE9-11+\\n\\t\\t// IE returns zIndex value as an integer.\\n\\t\\tret + \"\" :\\n\\t\\tret;\\n}\\n\\n\\nfunction addGetHookIf( conditionFn, hookFn ) {\\n\\n\\t// Define the hook, we\\'ll check on the first run if it\\'s really needed.\\n\\treturn {\\n\\t\\tget: function() {\\n\\t\\t\\tif ( conditionFn() ) {\\n\\n\\t\\t\\t\\t// Hook not needed (or it\\'s not possible to use it due\\n\\t\\t\\t\\t// to missing dependency), remove it.\\n\\t\\t\\t\\tdelete this.get;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Hook needed; redefine it so that the support test is not executed again.\\n\\t\\t\\treturn ( this.get = hookFn ).apply( this, arguments );\\n\\t\\t}\\n\\t};\\n}\\n\\n\\nvar\\n\\n\\t// Swappable if display is none or starts with table\\n\\t// except \"table\", \"table-cell\", or \"table-caption\"\\n\\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\\n\\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\\n\\n\\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\\n\\tcssNormalTransform = {\\n\\t\\tletterSpacing: \"0\",\\n\\t\\tfontWeight: \"400\"\\n\\t},\\n\\n\\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\\n\\temptyStyle = document.createElement( \"div\" ).style;\\n\\n// Return a css property mapped to a potentially vendor prefixed property\\nfunction vendorPropName( name ) {\\n\\n\\t// Shortcut for names that are not vendor prefixed\\n\\tif ( name in emptyStyle ) {\\n\\t\\treturn name;\\n\\t}\\n\\n\\t// Check for vendor prefixed names\\n\\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\\n\\t\\ti = cssPrefixes.length;\\n\\n\\twhile ( i-- ) {\\n\\t\\tname = cssPrefixes[ i ] + capName;\\n\\t\\tif ( name in emptyStyle ) {\\n\\t\\t\\treturn name;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction setPositiveNumber( elem, value, subtract ) {\\n\\n\\t// Any relative (+/-) values have already been\\n\\t// normalized at this point\\n\\tvar matches = rcssNum.exec( value );\\n\\treturn matches ?\\n\\n\\t\\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\\n\\t\\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\\n\\t\\tvalue;\\n}\\n\\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\\n\\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\\n\\n\\t\\t// If we already have the right measurement, avoid augmentation\\n\\t\\t4 :\\n\\n\\t\\t// Otherwise initialize for horizontal or vertical properties\\n\\t\\tname === \"width\" ? 1 : 0,\\n\\n\\t\\tval = 0;\\n\\n\\tfor ( ; i < 4; i += 2 ) {\\n\\n\\t\\t// Both box models exclude margin, so add it if we want it\\n\\t\\tif ( extra === \"margin\" ) {\\n\\t\\t\\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\\n\\t\\t}\\n\\n\\t\\tif ( isBorderBox ) {\\n\\n\\t\\t\\t// border-box includes padding, so remove it if we want content\\n\\t\\t\\tif ( extra === \"content\" ) {\\n\\t\\t\\t\\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// At this point, extra isn\\'t border nor margin, so remove border\\n\\t\\t\\tif ( extra !== \"margin\" ) {\\n\\t\\t\\t\\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\n\\t\\t\\t// At this point, extra isn\\'t content, so add padding\\n\\t\\t\\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\\n\\n\\t\\t\\t// At this point, extra isn\\'t content nor padding, so add border\\n\\t\\t\\tif ( extra !== \"padding\" ) {\\n\\t\\t\\t\\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nfunction getWidthOrHeight( elem, name, extra ) {\\n\\n\\t// Start with offset property, which is equivalent to the border-box value\\n\\tvar valueIsBorderBox = true,\\n\\t\\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\\n\\t\\tstyles = getStyles( elem ),\\n\\t\\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\\n\\n\\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\\n\\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\\n\\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\\n\\tif ( val <= 0 || val == null ) {\\n\\n\\t\\t// Fall back to computed then uncomputed css if necessary\\n\\t\\tval = curCSS( elem, name, styles );\\n\\t\\tif ( val < 0 || val == null ) {\\n\\t\\t\\tval = elem.style[ name ];\\n\\t\\t}\\n\\n\\t\\t// Computed unit is not pixels. Stop here and return.\\n\\t\\tif ( rnumnonpx.test( val ) ) {\\n\\t\\t\\treturn val;\\n\\t\\t}\\n\\n\\t\\t// Check for style in case a browser which returns unreliable values\\n\\t\\t// for getComputedStyle silently falls back to the reliable elem.style\\n\\t\\tvalueIsBorderBox = isBorderBox &&\\n\\t\\t\\t( support.boxSizingReliable() || val === elem.style[ name ] );\\n\\n\\t\\t// Normalize \"\", auto, and prepare for extra\\n\\t\\tval = parseFloat( val ) || 0;\\n\\t}\\n\\n\\t// Use the active box-sizing model to add/subtract irrelevant styles\\n\\treturn ( val +\\n\\t\\taugmentWidthOrHeight(\\n\\t\\t\\telem,\\n\\t\\t\\tname,\\n\\t\\t\\textra || ( isBorderBox ? \"border\" : \"content\" ),\\n\\t\\t\\tvalueIsBorderBox,\\n\\t\\t\\tstyles\\n\\t\\t)\\n\\t) + \"px\";\\n}\\n\\nfunction showHide( elements, show ) {\\n\\tvar display, elem, hidden,\\n\\t\\tvalues = [],\\n\\t\\tindex = 0,\\n\\t\\tlength = elements.length;\\n\\n\\tfor ( ; index < length; index++ ) {\\n\\t\\telem = elements[ index ];\\n\\t\\tif ( !elem.style ) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\\n\\t\\tdisplay = elem.style.display;\\n\\t\\tif ( show ) {\\n\\n\\t\\t\\t// Reset the inline display of this element to learn if it is\\n\\t\\t\\t// being hidden by cascaded rules or not\\n\\t\\t\\tif ( !values[ index ] && display === \"none\" ) {\\n\\t\\t\\t\\telem.style.display = \"\";\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set elements which have been overridden with display: none\\n\\t\\t\\t// in a stylesheet to whatever the default browser style is\\n\\t\\t\\t// for such an element\\n\\t\\t\\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\\n\\t\\t\\t\\tvalues[ index ] = dataPriv.access(\\n\\t\\t\\t\\t\\telem,\\n\\t\\t\\t\\t\\t\"olddisplay\",\\n\\t\\t\\t\\t\\tdefaultDisplay( elem.nodeName )\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\thidden = isHidden( elem );\\n\\n\\t\\t\\tif ( display !== \"none\" || !hidden ) {\\n\\t\\t\\t\\tdataPriv.set(\\n\\t\\t\\t\\t\\telem,\\n\\t\\t\\t\\t\\t\"olddisplay\",\\n\\t\\t\\t\\t\\thidden ? display : jQuery.css( elem, \"display\" )\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Set the display of most of the elements in a second loop\\n\\t// to avoid the constant reflow\\n\\tfor ( index = 0; index < length; index++ ) {\\n\\t\\telem = elements[ index ];\\n\\t\\tif ( !elem.style ) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\\n\\t\\t\\telem.style.display = show ? values[ index ] || \"\" : \"none\";\\n\\t\\t}\\n\\t}\\n\\n\\treturn elements;\\n}\\n\\njQuery.extend( {\\n\\n\\t// Add in style property hooks for overriding the default\\n\\t// behavior of getting and setting a style property\\n\\tcssHooks: {\\n\\t\\topacity: {\\n\\t\\t\\tget: function( elem, computed ) {\\n\\t\\t\\t\\tif ( computed ) {\\n\\n\\t\\t\\t\\t\\t// We should always get a number back from opacity\\n\\t\\t\\t\\t\\tvar ret = curCSS( elem, \"opacity\" );\\n\\t\\t\\t\\t\\treturn ret === \"\" ? \"1\" : ret;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\t// Don\\'t automatically add \"px\" to these possibly-unitless properties\\n\\tcssNumber: {\\n\\t\\t\"animationIterationCount\": true,\\n\\t\\t\"columnCount\": true,\\n\\t\\t\"fillOpacity\": true,\\n\\t\\t\"flexGrow\": true,\\n\\t\\t\"flexShrink\": true,\\n\\t\\t\"fontWeight\": true,\\n\\t\\t\"lineHeight\": true,\\n\\t\\t\"opacity\": true,\\n\\t\\t\"order\": true,\\n\\t\\t\"orphans\": true,\\n\\t\\t\"widows\": true,\\n\\t\\t\"zIndex\": true,\\n\\t\\t\"zoom\": true\\n\\t},\\n\\n\\t// Add in properties whose names you wish to fix before\\n\\t// setting or getting the value\\n\\tcssProps: {\\n\\t\\t\"float\": \"cssFloat\"\\n\\t},\\n\\n\\t// Get and set the style property on a DOM Node\\n\\tstyle: function( elem, name, value, extra ) {\\n\\n\\t\\t// Don\\'t set styles on text and comment nodes\\n\\t\\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Make sure that we\\'re working with the right name\\n\\t\\tvar ret, type, hooks,\\n\\t\\t\\torigName = jQuery.camelCase( name ),\\n\\t\\t\\tstyle = elem.style;\\n\\n\\t\\tname = jQuery.cssProps[ origName ] ||\\n\\t\\t\\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\\n\\n\\t\\t// Gets hook for the prefixed version, then unprefixed version\\n\\t\\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\\n\\n\\t\\t// Check if we\\'re setting a value\\n\\t\\tif ( value !== undefined ) {\\n\\t\\t\\ttype = typeof value;\\n\\n\\t\\t\\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\\n\\t\\t\\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\\n\\t\\t\\t\\tvalue = adjustCSS( elem, name, ret );\\n\\n\\t\\t\\t\\t// Fixes bug #9237\\n\\t\\t\\t\\ttype = \"number\";\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure that null and NaN values aren\\'t set (#7116)\\n\\t\\t\\tif ( value == null || value !== value ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If a number was passed in, add the unit (except for certain CSS properties)\\n\\t\\t\\tif ( type === \"number\" ) {\\n\\t\\t\\t\\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Support: IE9-11+\\n\\t\\t\\t// background-* props affect original clone\\'s values\\n\\t\\t\\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\\n\\t\\t\\t\\tstyle[ name ] = \"inherit\";\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If a hook was provided, use that value, otherwise just set the specified value\\n\\t\\t\\tif ( !hooks || !( \"set\" in hooks ) ||\\n\\t\\t\\t\\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\\n\\n\\t\\t\\t\\tstyle[ name ] = value;\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// If a hook was provided get the non-computed value from there\\n\\t\\t\\tif ( hooks && \"get\" in hooks &&\\n\\t\\t\\t\\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\\n\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Otherwise just get the value from the style object\\n\\t\\t\\treturn style[ name ];\\n\\t\\t}\\n\\t},\\n\\n\\tcss: function( elem, name, extra, styles ) {\\n\\t\\tvar val, num, hooks,\\n\\t\\t\\torigName = jQuery.camelCase( name );\\n\\n\\t\\t// Make sure that we\\'re working with the right name\\n\\t\\tname = jQuery.cssProps[ origName ] ||\\n\\t\\t\\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\\n\\n\\t\\t// Try prefixed name followed by the unprefixed name\\n\\t\\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\\n\\n\\t\\t// If a hook was provided get the computed value from there\\n\\t\\tif ( hooks && \"get\" in hooks ) {\\n\\t\\t\\tval = hooks.get( elem, true, extra );\\n\\t\\t}\\n\\n\\t\\t// Otherwise, if a way to get the computed value exists, use that\\n\\t\\tif ( val === undefined ) {\\n\\t\\t\\tval = curCSS( elem, name, styles );\\n\\t\\t}\\n\\n\\t\\t// Convert \"normal\" to computed value\\n\\t\\tif ( val === \"normal\" && name in cssNormalTransform ) {\\n\\t\\t\\tval = cssNormalTransform[ name ];\\n\\t\\t}\\n\\n\\t\\t// Make numeric if forced or a qualifier was provided and val looks numeric\\n\\t\\tif ( extra === \"\" || extra ) {\\n\\t\\t\\tnum = parseFloat( val );\\n\\t\\t\\treturn extra === true || isFinite( num ) ? num || 0 : val;\\n\\t\\t}\\n\\t\\treturn val;\\n\\t}\\n} );\\n\\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\\n\\tjQuery.cssHooks[ name ] = {\\n\\t\\tget: function( elem, computed, extra ) {\\n\\t\\t\\tif ( computed ) {\\n\\n\\t\\t\\t\\t// Certain elements can have dimension info if we invisibly show them\\n\\t\\t\\t\\t// but it must have a current display style that would benefit\\n\\t\\t\\t\\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\\n\\t\\t\\t\\t\\telem.offsetWidth === 0 ?\\n\\t\\t\\t\\t\\t\\tswap( elem, cssShow, function() {\\n\\t\\t\\t\\t\\t\\t\\treturn getWidthOrHeight( elem, name, extra );\\n\\t\\t\\t\\t\\t\\t} ) :\\n\\t\\t\\t\\t\\t\\tgetWidthOrHeight( elem, name, extra );\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tset: function( elem, value, extra ) {\\n\\t\\t\\tvar matches,\\n\\t\\t\\t\\tstyles = extra && getStyles( elem ),\\n\\t\\t\\t\\tsubtract = extra && augmentWidthOrHeight(\\n\\t\\t\\t\\t\\telem,\\n\\t\\t\\t\\t\\tname,\\n\\t\\t\\t\\t\\textra,\\n\\t\\t\\t\\t\\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\\n\\t\\t\\t\\t\\tstyles\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Convert to pixels if value adjustment is needed\\n\\t\\t\\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\\n\\t\\t\\t\\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\\n\\n\\t\\t\\t\\telem.style[ name ] = value;\\n\\t\\t\\t\\tvalue = jQuery.css( elem, name );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn setPositiveNumber( elem, value, subtract );\\n\\t\\t}\\n\\t};\\n} );\\n\\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\\n\\tfunction( elem, computed ) {\\n\\t\\tif ( computed ) {\\n\\t\\t\\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\\n\\t\\t\\t\\telem.getBoundingClientRect().left -\\n\\t\\t\\t\\t\\tswap( elem, { marginLeft: 0 }, function() {\\n\\t\\t\\t\\t\\t\\treturn elem.getBoundingClientRect().left;\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t) + \"px\";\\n\\t\\t}\\n\\t}\\n);\\n\\n// Support: Android 2.3\\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\\n\\tfunction( elem, computed ) {\\n\\t\\tif ( computed ) {\\n\\t\\t\\treturn swap( elem, { \"display\": \"inline-block\" },\\n\\t\\t\\t\\tcurCSS, [ elem, \"marginRight\" ] );\\n\\t\\t}\\n\\t}\\n);\\n\\n// These hooks are used by animate to expand properties\\njQuery.each( {\\n\\tmargin: \"\",\\n\\tpadding: \"\",\\n\\tborder: \"Width\"\\n}, function( prefix, suffix ) {\\n\\tjQuery.cssHooks[ prefix + suffix ] = {\\n\\t\\texpand: function( value ) {\\n\\t\\t\\tvar i = 0,\\n\\t\\t\\t\\texpanded = {},\\n\\n\\t\\t\\t\\t// Assumes a single number if not a string\\n\\t\\t\\t\\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\\n\\n\\t\\t\\tfor ( ; i < 4; i++ ) {\\n\\t\\t\\t\\texpanded[ prefix + cssExpand[ i ] + suffix ] =\\n\\t\\t\\t\\t\\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn expanded;\\n\\t\\t}\\n\\t};\\n\\n\\tif ( !rmargin.test( prefix ) ) {\\n\\t\\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\\n\\t}\\n} );\\n\\njQuery.fn.extend( {\\n\\tcss: function( name, value ) {\\n\\t\\treturn access( this, function( elem, name, value ) {\\n\\t\\t\\tvar styles, len,\\n\\t\\t\\t\\tmap = {},\\n\\t\\t\\t\\ti = 0;\\n\\n\\t\\t\\tif ( jQuery.isArray( name ) ) {\\n\\t\\t\\t\\tstyles = getStyles( elem );\\n\\t\\t\\t\\tlen = name.length;\\n\\n\\t\\t\\t\\tfor ( ; i < len; i++ ) {\\n\\t\\t\\t\\t\\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn map;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn value !== undefined ?\\n\\t\\t\\t\\tjQuery.style( elem, name, value ) :\\n\\t\\t\\t\\tjQuery.css( elem, name );\\n\\t\\t}, name, value, arguments.length > 1 );\\n\\t},\\n\\tshow: function() {\\n\\t\\treturn showHide( this, true );\\n\\t},\\n\\thide: function() {\\n\\t\\treturn showHide( this );\\n\\t},\\n\\ttoggle: function( state ) {\\n\\t\\tif ( typeof state === \"boolean\" ) {\\n\\t\\t\\treturn state ? this.show() : this.hide();\\n\\t\\t}\\n\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tif ( isHidden( this ) ) {\\n\\t\\t\\t\\tjQuery( this ).show();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tjQuery( this ).hide();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n} );\\n\\n\\nfunction Tween( elem, options, prop, end, easing ) {\\n\\treturn new Tween.prototype.init( elem, options, prop, end, easing );\\n}\\njQuery.Tween = Tween;\\n\\nTween.prototype = {\\n\\tconstructor: Tween,\\n\\tinit: function( elem, options, prop, end, easing, unit ) {\\n\\t\\tthis.elem = elem;\\n\\t\\tthis.prop = prop;\\n\\t\\tthis.easing = easing || jQuery.easing._default;\\n\\t\\tthis.options = options;\\n\\t\\tthis.start = this.now = this.cur();\\n\\t\\tthis.end = end;\\n\\t\\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\\n\\t},\\n\\tcur: function() {\\n\\t\\tvar hooks = Tween.propHooks[ this.prop ];\\n\\n\\t\\treturn hooks && hooks.get ?\\n\\t\\t\\thooks.get( this ) :\\n\\t\\t\\tTween.propHooks._default.get( this );\\n\\t},\\n\\trun: function( percent ) {\\n\\t\\tvar eased,\\n\\t\\t\\thooks = Tween.propHooks[ this.prop ];\\n\\n\\t\\tif ( this.options.duration ) {\\n\\t\\t\\tthis.pos = eased = jQuery.easing[ this.easing ](\\n\\t\\t\\t\\tpercent, this.options.duration * percent, 0, 1, this.options.duration\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tthis.pos = eased = percent;\\n\\t\\t}\\n\\t\\tthis.now = ( this.end - this.start ) * eased + this.start;\\n\\n\\t\\tif ( this.options.step ) {\\n\\t\\t\\tthis.options.step.call( this.elem, this.now, this );\\n\\t\\t}\\n\\n\\t\\tif ( hooks && hooks.set ) {\\n\\t\\t\\thooks.set( this );\\n\\t\\t} else {\\n\\t\\t\\tTween.propHooks._default.set( this );\\n\\t\\t}\\n\\t\\treturn this;\\n\\t}\\n};\\n\\nTween.prototype.init.prototype = Tween.prototype;\\n\\nTween.propHooks = {\\n\\t_default: {\\n\\t\\tget: function( tween ) {\\n\\t\\t\\tvar result;\\n\\n\\t\\t\\t// Use a property on the element directly when it is not a DOM element,\\n\\t\\t\\t// or when there is no matching style property that exists.\\n\\t\\t\\tif ( tween.elem.nodeType !== 1 ||\\n\\t\\t\\t\\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\\n\\t\\t\\t\\treturn tween.elem[ tween.prop ];\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Passing an empty string as a 3rd parameter to .css will automatically\\n\\t\\t\\t// attempt a parseFloat and fallback to a string if the parse fails.\\n\\t\\t\\t// Simple values such as \"10px\" are parsed to Float;\\n\\t\\t\\t// complex values such as \"rotate(1rad)\" are returned as-is.\\n\\t\\t\\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\\n\\n\\t\\t\\t// Empty strings, null, undefined and \"auto\" are converted to 0.\\n\\t\\t\\treturn !result || result === \"auto\" ? 0 : result;\\n\\t\\t},\\n\\t\\tset: function( tween ) {\\n\\n\\t\\t\\t// Use step hook for back compat.\\n\\t\\t\\t// Use cssHook if its there.\\n\\t\\t\\t// Use .style if available and use plain properties where available.\\n\\t\\t\\tif ( jQuery.fx.step[ tween.prop ] ) {\\n\\t\\t\\t\\tjQuery.fx.step[ tween.prop ]( tween );\\n\\t\\t\\t} else if ( tween.elem.nodeType === 1 &&\\n\\t\\t\\t\\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\\n\\t\\t\\t\\t\\tjQuery.cssHooks[ tween.prop ] ) ) {\\n\\t\\t\\t\\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttween.elem[ tween.prop ] = tween.now;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\n// Support: IE9\\n// Panic based approach to setting things on disconnected nodes\\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\\n\\tset: function( tween ) {\\n\\t\\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\\n\\t\\t\\ttween.elem[ tween.prop ] = tween.now;\\n\\t\\t}\\n\\t}\\n};\\n\\njQuery.easing = {\\n\\tlinear: function( p ) {\\n\\t\\treturn p;\\n\\t},\\n\\tswing: function( p ) {\\n\\t\\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\\n\\t},\\n\\t_default: \"swing\"\\n};\\n\\njQuery.fx = Tween.prototype.init;\\n\\n// Back Compat <1.8 extension point\\njQuery.fx.step = {};\\n\\n\\n\\n\\nvar\\n\\tfxNow, timerId,\\n\\trfxtypes = /^(?:toggle|show|hide)$/,\\n\\trrun = /queueHooks$/;\\n\\n// Animations created synchronously will run synchronously\\nfunction createFxNow() {\\n\\twindow.setTimeout( function() {\\n\\t\\tfxNow = undefined;\\n\\t} );\\n\\treturn ( fxNow = jQuery.now() );\\n}\\n\\n// Generate parameters to create a standard animation\\nfunction genFx( type, includeWidth ) {\\n\\tvar which,\\n\\t\\ti = 0,\\n\\t\\tattrs = { height: type };\\n\\n\\t// If we include width, step value is 1 to do all cssExpand values,\\n\\t// otherwise step value is 2 to skip over Left and Right\\n\\tincludeWidth = includeWidth ? 1 : 0;\\n\\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\\n\\t\\twhich = cssExpand[ i ];\\n\\t\\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\\n\\t}\\n\\n\\tif ( includeWidth ) {\\n\\t\\tattrs.opacity = attrs.width = type;\\n\\t}\\n\\n\\treturn attrs;\\n}\\n\\nfunction createTween( value, prop, animation ) {\\n\\tvar tween,\\n\\t\\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\\n\\t\\tindex = 0,\\n\\t\\tlength = collection.length;\\n\\tfor ( ; index < length; index++ ) {\\n\\t\\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\\n\\n\\t\\t\\t// We\\'re done with this property\\n\\t\\t\\treturn tween;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction defaultPrefilter( elem, props, opts ) {\\n\\t/* jshint validthis: true */\\n\\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\\n\\t\\tanim = this,\\n\\t\\torig = {},\\n\\t\\tstyle = elem.style,\\n\\t\\thidden = elem.nodeType && isHidden( elem ),\\n\\t\\tdataShow = dataPriv.get( elem, \"fxshow\" );\\n\\n\\t// Handle queue: false promises\\n\\tif ( !opts.queue ) {\\n\\t\\thooks = jQuery._queueHooks( elem, \"fx\" );\\n\\t\\tif ( hooks.unqueued == null ) {\\n\\t\\t\\thooks.unqueued = 0;\\n\\t\\t\\toldfire = hooks.empty.fire;\\n\\t\\t\\thooks.empty.fire = function() {\\n\\t\\t\\t\\tif ( !hooks.unqueued ) {\\n\\t\\t\\t\\t\\toldfire();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t}\\n\\t\\thooks.unqueued++;\\n\\n\\t\\tanim.always( function() {\\n\\n\\t\\t\\t// Ensure the complete handler is called before this completes\\n\\t\\t\\tanim.always( function() {\\n\\t\\t\\t\\thooks.unqueued--;\\n\\t\\t\\t\\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\\n\\t\\t\\t\\t\\thooks.empty.fire();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\t}\\n\\n\\t// Height/width overflow pass\\n\\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\\n\\n\\t\\t// Make sure that nothing sneaks out\\n\\t\\t// Record all 3 overflow attributes because IE9-10 do not\\n\\t\\t// change the overflow attribute when overflowX and\\n\\t\\t// overflowY are set to the same value\\n\\t\\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\\n\\n\\t\\t// Set display property to inline-block for height/width\\n\\t\\t// animations on inline elements that are having width/height animated\\n\\t\\tdisplay = jQuery.css( elem, \"display\" );\\n\\n\\t\\t// Test default display if display is currently \"none\"\\n\\t\\tcheckDisplay = display === \"none\" ?\\n\\t\\t\\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\\n\\n\\t\\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\\n\\t\\t\\tstyle.display = \"inline-block\";\\n\\t\\t}\\n\\t}\\n\\n\\tif ( opts.overflow ) {\\n\\t\\tstyle.overflow = \"hidden\";\\n\\t\\tanim.always( function() {\\n\\t\\t\\tstyle.overflow = opts.overflow[ 0 ];\\n\\t\\t\\tstyle.overflowX = opts.overflow[ 1 ];\\n\\t\\t\\tstyle.overflowY = opts.overflow[ 2 ];\\n\\t\\t} );\\n\\t}\\n\\n\\t// show/hide pass\\n\\tfor ( prop in props ) {\\n\\t\\tvalue = props[ prop ];\\n\\t\\tif ( rfxtypes.exec( value ) ) {\\n\\t\\t\\tdelete props[ prop ];\\n\\t\\t\\ttoggle = toggle || value === \"toggle\";\\n\\t\\t\\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\\n\\n\\t\\t\\t\\t// If there is dataShow left over from a stopped hide or show\\n\\t\\t\\t\\t// and we are going to proceed with show, we should pretend to be hidden\\n\\t\\t\\t\\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\\n\\t\\t\\t\\t\\thidden = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\\n\\n\\t\\t// Any non-fx value stops us from restoring the original display value\\n\\t\\t} else {\\n\\t\\t\\tdisplay = undefined;\\n\\t\\t}\\n\\t}\\n\\n\\tif ( !jQuery.isEmptyObject( orig ) ) {\\n\\t\\tif ( dataShow ) {\\n\\t\\t\\tif ( \"hidden\" in dataShow ) {\\n\\t\\t\\t\\thidden = dataShow.hidden;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\\n\\t\\t}\\n\\n\\t\\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\\n\\t\\tif ( toggle ) {\\n\\t\\t\\tdataShow.hidden = !hidden;\\n\\t\\t}\\n\\t\\tif ( hidden ) {\\n\\t\\t\\tjQuery( elem ).show();\\n\\t\\t} else {\\n\\t\\t\\tanim.done( function() {\\n\\t\\t\\t\\tjQuery( elem ).hide();\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tanim.done( function() {\\n\\t\\t\\tvar prop;\\n\\n\\t\\t\\tdataPriv.remove( elem, \"fxshow\" );\\n\\t\\t\\tfor ( prop in orig ) {\\n\\t\\t\\t\\tjQuery.style( elem, prop, orig[ prop ] );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfor ( prop in orig ) {\\n\\t\\t\\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\\n\\n\\t\\t\\tif ( !( prop in dataShow ) ) {\\n\\t\\t\\t\\tdataShow[ prop ] = tween.start;\\n\\t\\t\\t\\tif ( hidden ) {\\n\\t\\t\\t\\t\\ttween.end = tween.start;\\n\\t\\t\\t\\t\\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t// If this is a noop like .hide().hide(), restore an overwritten display value\\n\\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\\n\\t\\tstyle.display = display;\\n\\t}\\n}\\n\\nfunction propFilter( props, specialEasing ) {\\n\\tvar index, name, easing, value, hooks;\\n\\n\\t// camelCase, specialEasing and expand cssHook pass\\n\\tfor ( index in props ) {\\n\\t\\tname = jQuery.camelCase( index );\\n\\t\\teasing = specialEasing[ name ];\\n\\t\\tvalue = props[ index ];\\n\\t\\tif ( jQuery.isArray( value ) ) {\\n\\t\\t\\teasing = value[ 1 ];\\n\\t\\t\\tvalue = props[ index ] = value[ 0 ];\\n\\t\\t}\\n\\n\\t\\tif ( index !== name ) {\\n\\t\\t\\tprops[ name ] = value;\\n\\t\\t\\tdelete props[ index ];\\n\\t\\t}\\n\\n\\t\\thooks = jQuery.cssHooks[ name ];\\n\\t\\tif ( hooks && \"expand\" in hooks ) {\\n\\t\\t\\tvalue = hooks.expand( value );\\n\\t\\t\\tdelete props[ name ];\\n\\n\\t\\t\\t// Not quite $.extend, this won\\'t overwrite existing keys.\\n\\t\\t\\t// Reusing \\'index\\' because we have the correct \"name\"\\n\\t\\t\\tfor ( index in value ) {\\n\\t\\t\\t\\tif ( !( index in props ) ) {\\n\\t\\t\\t\\t\\tprops[ index ] = value[ index ];\\n\\t\\t\\t\\t\\tspecialEasing[ index ] = easing;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tspecialEasing[ name ] = easing;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction Animation( elem, properties, options ) {\\n\\tvar result,\\n\\t\\tstopped,\\n\\t\\tindex = 0,\\n\\t\\tlength = Animation.prefilters.length,\\n\\t\\tdeferred = jQuery.Deferred().always( function() {\\n\\n\\t\\t\\t// Don\\'t match elem in the :animated selector\\n\\t\\t\\tdelete tick.elem;\\n\\t\\t} ),\\n\\t\\ttick = function() {\\n\\t\\t\\tif ( stopped ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tvar currentTime = fxNow || createFxNow(),\\n\\t\\t\\t\\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\\n\\n\\t\\t\\t\\t// Support: Android 2.3\\n\\t\\t\\t\\t// Archaic crash bug won\\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\\n\\t\\t\\t\\ttemp = remaining / animation.duration || 0,\\n\\t\\t\\t\\tpercent = 1 - temp,\\n\\t\\t\\t\\tindex = 0,\\n\\t\\t\\t\\tlength = animation.tweens.length;\\n\\n\\t\\t\\tfor ( ; index < length ; index++ ) {\\n\\t\\t\\t\\tanimation.tweens[ index ].run( percent );\\n\\t\\t\\t}\\n\\n\\t\\t\\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\\n\\n\\t\\t\\tif ( percent < 1 && length ) {\\n\\t\\t\\t\\treturn remaining;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdeferred.resolveWith( elem, [ animation ] );\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tanimation = deferred.promise( {\\n\\t\\t\\telem: elem,\\n\\t\\t\\tprops: jQuery.extend( {}, properties ),\\n\\t\\t\\topts: jQuery.extend( true, {\\n\\t\\t\\t\\tspecialEasing: {},\\n\\t\\t\\t\\teasing: jQuery.easing._default\\n\\t\\t\\t}, options ),\\n\\t\\t\\toriginalProperties: properties,\\n\\t\\t\\toriginalOptions: options,\\n\\t\\t\\tstartTime: fxNow || createFxNow(),\\n\\t\\t\\tduration: options.duration,\\n\\t\\t\\ttweens: [],\\n\\t\\t\\tcreateTween: function( prop, end ) {\\n\\t\\t\\t\\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\\n\\t\\t\\t\\t\\t\\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\\n\\t\\t\\t\\tanimation.tweens.push( tween );\\n\\t\\t\\t\\treturn tween;\\n\\t\\t\\t},\\n\\t\\t\\tstop: function( gotoEnd ) {\\n\\t\\t\\t\\tvar index = 0,\\n\\n\\t\\t\\t\\t\\t// If we are going to the end, we want to run all the tweens\\n\\t\\t\\t\\t\\t// otherwise we skip this part\\n\\t\\t\\t\\t\\tlength = gotoEnd ? animation.tweens.length : 0;\\n\\t\\t\\t\\tif ( stopped ) {\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstopped = true;\\n\\t\\t\\t\\tfor ( ; index < length ; index++ ) {\\n\\t\\t\\t\\t\\tanimation.tweens[ index ].run( 1 );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Resolve when we played the last frame; otherwise, reject\\n\\t\\t\\t\\tif ( gotoEnd ) {\\n\\t\\t\\t\\t\\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\\n\\t\\t\\t\\t\\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t} ),\\n\\t\\tprops = animation.props;\\n\\n\\tpropFilter( props, animation.opts.specialEasing );\\n\\n\\tfor ( ; index < length ; index++ ) {\\n\\t\\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\\n\\t\\tif ( result ) {\\n\\t\\t\\tif ( jQuery.isFunction( result.stop ) ) {\\n\\t\\t\\t\\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\\n\\t\\t\\t\\t\\tjQuery.proxy( result.stop, result );\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\n\\tjQuery.map( props, createTween, animation );\\n\\n\\tif ( jQuery.isFunction( animation.opts.start ) ) {\\n\\t\\tanimation.opts.start.call( elem, animation );\\n\\t}\\n\\n\\tjQuery.fx.timer(\\n\\t\\tjQuery.extend( tick, {\\n\\t\\t\\telem: elem,\\n\\t\\t\\tanim: animation,\\n\\t\\t\\tqueue: animation.opts.queue\\n\\t\\t} )\\n\\t);\\n\\n\\t// attach callbacks from options\\n\\treturn animation.progress( animation.opts.progress )\\n\\t\\t.done( animation.opts.done, animation.opts.complete )\\n\\t\\t.fail( animation.opts.fail )\\n\\t\\t.always( animation.opts.always );\\n}\\n\\njQuery.Animation = jQuery.extend( Animation, {\\n\\ttweeners: {\\n\\t\\t\"*\": [ function( prop, value ) {\\n\\t\\t\\tvar tween = this.createTween( prop, value );\\n\\t\\t\\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\\n\\t\\t\\treturn tween;\\n\\t\\t} ]\\n\\t},\\n\\n\\ttweener: function( props, callback ) {\\n\\t\\tif ( jQuery.isFunction( props ) ) {\\n\\t\\t\\tcallback = props;\\n\\t\\t\\tprops = [ \"*\" ];\\n\\t\\t} else {\\n\\t\\t\\tprops = props.match( rnotwhite );\\n\\t\\t}\\n\\n\\t\\tvar prop,\\n\\t\\t\\tindex = 0,\\n\\t\\t\\tlength = props.length;\\n\\n\\t\\tfor ( ; index < length ; index++ ) {\\n\\t\\t\\tprop = props[ index ];\\n\\t\\t\\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\\n\\t\\t\\tAnimation.tweeners[ prop ].unshift( callback );\\n\\t\\t}\\n\\t},\\n\\n\\tprefilters: [ defaultPrefilter ],\\n\\n\\tprefilter: function( callback, prepend ) {\\n\\t\\tif ( prepend ) {\\n\\t\\t\\tAnimation.prefilters.unshift( callback );\\n\\t\\t} else {\\n\\t\\t\\tAnimation.prefilters.push( callback );\\n\\t\\t}\\n\\t}\\n} );\\n\\njQuery.speed = function( speed, easing, fn ) {\\n\\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\\n\\t\\tcomplete: fn || !fn && easing ||\\n\\t\\t\\tjQuery.isFunction( speed ) && speed,\\n\\t\\tduration: speed,\\n\\t\\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\\n\\t};\\n\\n\\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\\n\\t\\topt.duration : opt.duration in jQuery.fx.speeds ?\\n\\t\\t\\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\\n\\n\\t// Normalize opt.queue - true/undefined/null -> \"fx\"\\n\\tif ( opt.queue == null || opt.queue === true ) {\\n\\t\\topt.queue = \"fx\";\\n\\t}\\n\\n\\t// Queueing\\n\\topt.old = opt.complete;\\n\\n\\topt.complete = function() {\\n\\t\\tif ( jQuery.isFunction( opt.old ) ) {\\n\\t\\t\\topt.old.call( this );\\n\\t\\t}\\n\\n\\t\\tif ( opt.queue ) {\\n\\t\\t\\tjQuery.dequeue( this, opt.queue );\\n\\t\\t}\\n\\t};\\n\\n\\treturn opt;\\n};\\n\\njQuery.fn.extend( {\\n\\tfadeTo: function( speed, to, easing, callback ) {\\n\\n\\t\\t// Show any hidden elements after setting opacity to 0\\n\\t\\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\\n\\n\\t\\t\\t// Animate to the value specified\\n\\t\\t\\t.end().animate( { opacity: to }, speed, easing, callback );\\n\\t},\\n\\tanimate: function( prop, speed, easing, callback ) {\\n\\t\\tvar empty = jQuery.isEmptyObject( prop ),\\n\\t\\t\\toptall = jQuery.speed( speed, easing, callback ),\\n\\t\\t\\tdoAnimation = function() {\\n\\n\\t\\t\\t\\t// Operate on a copy of prop so per-property easing won\\'t be lost\\n\\t\\t\\t\\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\\n\\n\\t\\t\\t\\t// Empty animations, or finishing resolves immediately\\n\\t\\t\\t\\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\\n\\t\\t\\t\\t\\tanim.stop( true );\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\tdoAnimation.finish = doAnimation;\\n\\n\\t\\treturn empty || optall.queue === false ?\\n\\t\\t\\tthis.each( doAnimation ) :\\n\\t\\t\\tthis.queue( optall.queue, doAnimation );\\n\\t},\\n\\tstop: function( type, clearQueue, gotoEnd ) {\\n\\t\\tvar stopQueue = function( hooks ) {\\n\\t\\t\\tvar stop = hooks.stop;\\n\\t\\t\\tdelete hooks.stop;\\n\\t\\t\\tstop( gotoEnd );\\n\\t\\t};\\n\\n\\t\\tif ( typeof type !== \"string\" ) {\\n\\t\\t\\tgotoEnd = clearQueue;\\n\\t\\t\\tclearQueue = type;\\n\\t\\t\\ttype = undefined;\\n\\t\\t}\\n\\t\\tif ( clearQueue && type !== false ) {\\n\\t\\t\\tthis.queue( type || \"fx\", [] );\\n\\t\\t}\\n\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tvar dequeue = true,\\n\\t\\t\\t\\tindex = type != null && type + \"queueHooks\",\\n\\t\\t\\t\\ttimers = jQuery.timers,\\n\\t\\t\\t\\tdata = dataPriv.get( this );\\n\\n\\t\\t\\tif ( index ) {\\n\\t\\t\\t\\tif ( data[ index ] && data[ index ].stop ) {\\n\\t\\t\\t\\t\\tstopQueue( data[ index ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor ( index in data ) {\\n\\t\\t\\t\\t\\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\\n\\t\\t\\t\\t\\t\\tstopQueue( data[ index ] );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( index = timers.length; index--; ) {\\n\\t\\t\\t\\tif ( timers[ index ].elem === this &&\\n\\t\\t\\t\\t\\t( type == null || timers[ index ].queue === type ) ) {\\n\\n\\t\\t\\t\\t\\ttimers[ index ].anim.stop( gotoEnd );\\n\\t\\t\\t\\t\\tdequeue = false;\\n\\t\\t\\t\\t\\ttimers.splice( index, 1 );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Start the next in the queue if the last step wasn\\'t forced.\\n\\t\\t\\t// Timers currently will call their complete callbacks, which\\n\\t\\t\\t// will dequeue but only if they were gotoEnd.\\n\\t\\t\\tif ( dequeue || !gotoEnd ) {\\n\\t\\t\\t\\tjQuery.dequeue( this, type );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\tfinish: function( type ) {\\n\\t\\tif ( type !== false ) {\\n\\t\\t\\ttype = type || \"fx\";\\n\\t\\t}\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tvar index,\\n\\t\\t\\t\\tdata = dataPriv.get( this ),\\n\\t\\t\\t\\tqueue = data[ type + \"queue\" ],\\n\\t\\t\\t\\thooks = data[ type + \"queueHooks\" ],\\n\\t\\t\\t\\ttimers = jQuery.timers,\\n\\t\\t\\t\\tlength = queue ? queue.length : 0;\\n\\n\\t\\t\\t// Enable finishing flag on private data\\n\\t\\t\\tdata.finish = true;\\n\\n\\t\\t\\t// Empty the queue first\\n\\t\\t\\tjQuery.queue( this, type, [] );\\n\\n\\t\\t\\tif ( hooks && hooks.stop ) {\\n\\t\\t\\t\\thooks.stop.call( this, true );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Look for any active animations, and finish them\\n\\t\\t\\tfor ( index = timers.length; index--; ) {\\n\\t\\t\\t\\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\\n\\t\\t\\t\\t\\ttimers[ index ].anim.stop( true );\\n\\t\\t\\t\\t\\ttimers.splice( index, 1 );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Look for any animations in the old queue and finish them\\n\\t\\t\\tfor ( index = 0; index < length; index++ ) {\\n\\t\\t\\t\\tif ( queue[ index ] && queue[ index ].finish ) {\\n\\t\\t\\t\\t\\tqueue[ index ].finish.call( this );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Turn off finishing flag\\n\\t\\t\\tdelete data.finish;\\n\\t\\t} );\\n\\t}\\n} );\\n\\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\\n\\tvar cssFn = jQuery.fn[ name ];\\n\\tjQuery.fn[ name ] = function( speed, easing, callback ) {\\n\\t\\treturn speed == null || typeof speed === \"boolean\" ?\\n\\t\\t\\tcssFn.apply( this, arguments ) :\\n\\t\\t\\tthis.animate( genFx( name, true ), speed, easing, callback );\\n\\t};\\n} );\\n\\n// Generate shortcuts for custom animations\\njQuery.each( {\\n\\tslideDown: genFx( \"show\" ),\\n\\tslideUp: genFx( \"hide\" ),\\n\\tslideToggle: genFx( \"toggle\" ),\\n\\tfadeIn: { opacity: \"show\" },\\n\\tfadeOut: { opacity: \"hide\" },\\n\\tfadeToggle: { opacity: \"toggle\" }\\n}, function( name, props ) {\\n\\tjQuery.fn[ name ] = function( speed, easing, callback ) {\\n\\t\\treturn this.animate( props, speed, easing, callback );\\n\\t};\\n} );\\n\\njQuery.timers = [];\\njQuery.fx.tick = function() {\\n\\tvar timer,\\n\\t\\ti = 0,\\n\\t\\ttimers = jQuery.timers;\\n\\n\\tfxNow = jQuery.now();\\n\\n\\tfor ( ; i < timers.length; i++ ) {\\n\\t\\ttimer = timers[ i ];\\n\\n\\t\\t// Checks the timer has not already been removed\\n\\t\\tif ( !timer() && timers[ i ] === timer ) {\\n\\t\\t\\ttimers.splice( i--, 1 );\\n\\t\\t}\\n\\t}\\n\\n\\tif ( !timers.length ) {\\n\\t\\tjQuery.fx.stop();\\n\\t}\\n\\tfxNow = undefined;\\n};\\n\\njQuery.fx.timer = function( timer ) {\\n\\tjQuery.timers.push( timer );\\n\\tif ( timer() ) {\\n\\t\\tjQuery.fx.start();\\n\\t} else {\\n\\t\\tjQuery.timers.pop();\\n\\t}\\n};\\n\\njQuery.fx.interval = 13;\\njQuery.fx.start = function() {\\n\\tif ( !timerId ) {\\n\\t\\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\\n\\t}\\n};\\n\\njQuery.fx.stop = function() {\\n\\twindow.clearInterval( timerId );\\n\\n\\ttimerId = null;\\n};\\n\\njQuery.fx.speeds = {\\n\\tslow: 600,\\n\\tfast: 200,\\n\\n\\t// Default speed\\n\\t_default: 400\\n};\\n\\n\\n// Based off of the plugin by Clint Helfers, with permission.\\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\\njQuery.fn.delay = function( time, type ) {\\n\\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\\n\\ttype = type || \"fx\";\\n\\n\\treturn this.queue( type, function( next, hooks ) {\\n\\t\\tvar timeout = window.setTimeout( next, time );\\n\\t\\thooks.stop = function() {\\n\\t\\t\\twindow.clearTimeout( timeout );\\n\\t\\t};\\n\\t} );\\n};\\n\\n\\n( function() {\\n\\tvar input = document.createElement( \"input\" ),\\n\\t\\tselect = document.createElement( \"select\" ),\\n\\t\\topt = select.appendChild( document.createElement( \"option\" ) );\\n\\n\\tinput.type = \"checkbox\";\\n\\n\\t// Support: iOS<=5.1, Android<=4.2+\\n\\t// Default value for a checkbox should be \"on\"\\n\\tsupport.checkOn = input.value !== \"\";\\n\\n\\t// Support: IE<=11+\\n\\t// Must access selectedIndex to make default options select\\n\\tsupport.optSelected = opt.selected;\\n\\n\\t// Support: Android<=2.3\\n\\t// Options inside disabled selects are incorrectly marked as disabled\\n\\tselect.disabled = true;\\n\\tsupport.optDisabled = !opt.disabled;\\n\\n\\t// Support: IE<=11+\\n\\t// An input loses its value after becoming a radio\\n\\tinput = document.createElement( \"input\" );\\n\\tinput.value = \"t\";\\n\\tinput.type = \"radio\";\\n\\tsupport.radioValue = input.value === \"t\";\\n} )();\\n\\n\\nvar boolHook,\\n\\tattrHandle = jQuery.expr.attrHandle;\\n\\njQuery.fn.extend( {\\n\\tattr: function( name, value ) {\\n\\t\\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\\n\\t},\\n\\n\\tremoveAttr: function( name ) {\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tjQuery.removeAttr( this, name );\\n\\t\\t} );\\n\\t}\\n} );\\n\\njQuery.extend( {\\n\\tattr: function( elem, name, value ) {\\n\\t\\tvar ret, hooks,\\n\\t\\t\\tnType = elem.nodeType;\\n\\n\\t\\t// Don\\'t get/set attributes on text, comment and attribute nodes\\n\\t\\tif ( nType === 3 || nType === 8 || nType === 2 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Fallback to prop when attributes are not supported\\n\\t\\tif ( typeof elem.getAttribute === \"undefined\" ) {\\n\\t\\t\\treturn jQuery.prop( elem, name, value );\\n\\t\\t}\\n\\n\\t\\t// All attributes are lowercase\\n\\t\\t// Grab necessary hook if one is defined\\n\\t\\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\\n\\t\\t\\tname = name.toLowerCase();\\n\\t\\t\\thooks = jQuery.attrHooks[ name ] ||\\n\\t\\t\\t\\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\\n\\t\\t}\\n\\n\\t\\tif ( value !== undefined ) {\\n\\t\\t\\tif ( value === null ) {\\n\\t\\t\\t\\tjQuery.removeAttr( elem, name );\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hooks && \"set\" in hooks &&\\n\\t\\t\\t\\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\telem.setAttribute( name, value + \"\" );\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\n\\t\\tret = jQuery.find.attr( elem, name );\\n\\n\\t\\t// Non-existent attributes return null, we normalize to undefined\\n\\t\\treturn ret == null ? undefined : ret;\\n\\t},\\n\\n\\tattrHooks: {\\n\\t\\ttype: {\\n\\t\\t\\tset: function( elem, value ) {\\n\\t\\t\\t\\tif ( !support.radioValue && value === \"radio\" &&\\n\\t\\t\\t\\t\\tjQuery.nodeName( elem, \"input\" ) ) {\\n\\t\\t\\t\\t\\tvar val = elem.value;\\n\\t\\t\\t\\t\\telem.setAttribute( \"type\", value );\\n\\t\\t\\t\\t\\tif ( val ) {\\n\\t\\t\\t\\t\\t\\telem.value = val;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\tremoveAttr: function( elem, value ) {\\n\\t\\tvar name, propName,\\n\\t\\t\\ti = 0,\\n\\t\\t\\tattrNames = value && value.match( rnotwhite );\\n\\n\\t\\tif ( attrNames && elem.nodeType === 1 ) {\\n\\t\\t\\twhile ( ( name = attrNames[ i++ ] ) ) {\\n\\t\\t\\t\\tpropName = jQuery.propFix[ name ] || name;\\n\\n\\t\\t\\t\\t// Boolean attributes get special treatment (#10870)\\n\\t\\t\\t\\tif ( jQuery.expr.match.bool.test( name ) ) {\\n\\n\\t\\t\\t\\t\\t// Set corresponding property to false\\n\\t\\t\\t\\t\\telem[ propName ] = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\telem.removeAttribute( name );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n} );\\n\\n// Hooks for boolean attributes\\nboolHook = {\\n\\tset: function( elem, value, name ) {\\n\\t\\tif ( value === false ) {\\n\\n\\t\\t\\t// Remove boolean attributes when set to false\\n\\t\\t\\tjQuery.removeAttr( elem, name );\\n\\t\\t} else {\\n\\t\\t\\telem.setAttribute( name, name );\\n\\t\\t}\\n\\t\\treturn name;\\n\\t}\\n};\\njQuery.each( jQuery.expr.match.bool.source.match( /\\\\w+/g ), function( i, name ) {\\n\\tvar getter = attrHandle[ name ] || jQuery.find.attr;\\n\\n\\tattrHandle[ name ] = function( elem, name, isXML ) {\\n\\t\\tvar ret, handle;\\n\\t\\tif ( !isXML ) {\\n\\n\\t\\t\\t// Avoid an infinite loop by temporarily removing this function from the getter\\n\\t\\t\\thandle = attrHandle[ name ];\\n\\t\\t\\tattrHandle[ name ] = ret;\\n\\t\\t\\tret = getter( elem, name, isXML ) != null ?\\n\\t\\t\\t\\tname.toLowerCase() :\\n\\t\\t\\t\\tnull;\\n\\t\\t\\tattrHandle[ name ] = handle;\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t};\\n} );\\n\\n\\n\\n\\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\\n\\trclickable = /^(?:a|area)$/i;\\n\\njQuery.fn.extend( {\\n\\tprop: function( name, value ) {\\n\\t\\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\\n\\t},\\n\\n\\tremoveProp: function( name ) {\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tdelete this[ jQuery.propFix[ name ] || name ];\\n\\t\\t} );\\n\\t}\\n} );\\n\\njQuery.extend( {\\n\\tprop: function( elem, name, value ) {\\n\\t\\tvar ret, hooks,\\n\\t\\t\\tnType = elem.nodeType;\\n\\n\\t\\t// Don\\'t get/set properties on text, comment and attribute nodes\\n\\t\\tif ( nType === 3 || nType === 8 || nType === 2 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\\n\\n\\t\\t\\t// Fix name and attach hooks\\n\\t\\t\\tname = jQuery.propFix[ name ] || name;\\n\\t\\t\\thooks = jQuery.propHooks[ name ];\\n\\t\\t}\\n\\n\\t\\tif ( value !== undefined ) {\\n\\t\\t\\tif ( hooks && \"set\" in hooks &&\\n\\t\\t\\t\\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn ( elem[ name ] = value );\\n\\t\\t}\\n\\n\\t\\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\n\\t\\treturn elem[ name ];\\n\\t},\\n\\n\\tpropHooks: {\\n\\t\\ttabIndex: {\\n\\t\\t\\tget: function( elem ) {\\n\\n\\t\\t\\t\\t// elem.tabIndex doesn\\'t always return the\\n\\t\\t\\t\\t// correct value when it hasn\\'t been explicitly set\\n\\t\\t\\t\\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\\n\\t\\t\\t\\t// Use proper attribute retrieval(#12072)\\n\\t\\t\\t\\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\\n\\n\\t\\t\\t\\treturn tabindex ?\\n\\t\\t\\t\\t\\tparseInt( tabindex, 10 ) :\\n\\t\\t\\t\\t\\trfocusable.test( elem.nodeName ) ||\\n\\t\\t\\t\\t\\t\\trclickable.test( elem.nodeName ) && elem.href ?\\n\\t\\t\\t\\t\\t\\t\\t0 :\\n\\t\\t\\t\\t\\t\\t\\t-1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\tpropFix: {\\n\\t\\t\"for\": \"htmlFor\",\\n\\t\\t\"class\": \"className\"\\n\\t}\\n} );\\n\\n// Support: IE <=11 only\\n// Accessing the selectedIndex property\\n// forces the browser to respect setting selected\\n// on the option\\n// The getter ensures a default option is selected\\n// when in an optgroup\\nif ( !support.optSelected ) {\\n\\tjQuery.propHooks.selected = {\\n\\t\\tget: function( elem ) {\\n\\t\\t\\tvar parent = elem.parentNode;\\n\\t\\t\\tif ( parent && parent.parentNode ) {\\n\\t\\t\\t\\tparent.parentNode.selectedIndex;\\n\\t\\t\\t}\\n\\t\\t\\treturn null;\\n\\t\\t},\\n\\t\\tset: function( elem ) {\\n\\t\\t\\tvar parent = elem.parentNode;\\n\\t\\t\\tif ( parent ) {\\n\\t\\t\\t\\tparent.selectedIndex;\\n\\n\\t\\t\\t\\tif ( parent.parentNode ) {\\n\\t\\t\\t\\t\\tparent.parentNode.selectedIndex;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\njQuery.each( [\\n\\t\"tabIndex\",\\n\\t\"readOnly\",\\n\\t\"maxLength\",\\n\\t\"cellSpacing\",\\n\\t\"cellPadding\",\\n\\t\"rowSpan\",\\n\\t\"colSpan\",\\n\\t\"useMap\",\\n\\t\"frameBorder\",\\n\\t\"contentEditable\"\\n], function() {\\n\\tjQuery.propFix[ this.toLowerCase() ] = this;\\n} );\\n\\n\\n\\n\\nvar rclass = /[\\\\t\\\\r\\\\n\\\\f]/g;\\n\\nfunction getClass( elem ) {\\n\\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\\n}\\n\\njQuery.fn.extend( {\\n\\taddClass: function( value ) {\\n\\t\\tvar classes, elem, cur, curValue, clazz, j, finalValue,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tif ( jQuery.isFunction( value ) ) {\\n\\t\\t\\treturn this.each( function( j ) {\\n\\t\\t\\t\\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tif ( typeof value === \"string\" && value ) {\\n\\t\\t\\tclasses = value.match( rnotwhite ) || [];\\n\\n\\t\\t\\twhile ( ( elem = this[ i++ ] ) ) {\\n\\t\\t\\t\\tcurValue = getClass( elem );\\n\\t\\t\\t\\tcur = elem.nodeType === 1 &&\\n\\t\\t\\t\\t\\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\\n\\n\\t\\t\\t\\tif ( cur ) {\\n\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\twhile ( ( clazz = classes[ j++ ] ) ) {\\n\\t\\t\\t\\t\\t\\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\\n\\t\\t\\t\\t\\t\\t\\tcur += clazz + \" \";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Only assign if different to avoid unneeded rendering.\\n\\t\\t\\t\\t\\tfinalValue = jQuery.trim( cur );\\n\\t\\t\\t\\t\\tif ( curValue !== finalValue ) {\\n\\t\\t\\t\\t\\t\\telem.setAttribute( \"class\", finalValue );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\n\\tremoveClass: function( value ) {\\n\\t\\tvar classes, elem, cur, curValue, clazz, j, finalValue,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tif ( jQuery.isFunction( value ) ) {\\n\\t\\t\\treturn this.each( function( j ) {\\n\\t\\t\\t\\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tif ( !arguments.length ) {\\n\\t\\t\\treturn this.attr( \"class\", \"\" );\\n\\t\\t}\\n\\n\\t\\tif ( typeof value === \"string\" && value ) {\\n\\t\\t\\tclasses = value.match( rnotwhite ) || [];\\n\\n\\t\\t\\twhile ( ( elem = this[ i++ ] ) ) {\\n\\t\\t\\t\\tcurValue = getClass( elem );\\n\\n\\t\\t\\t\\t// This expression is here for better compressibility (see addClass)\\n\\t\\t\\t\\tcur = elem.nodeType === 1 &&\\n\\t\\t\\t\\t\\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\\n\\n\\t\\t\\t\\tif ( cur ) {\\n\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\twhile ( ( clazz = classes[ j++ ] ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// Remove *all* instances\\n\\t\\t\\t\\t\\t\\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\\n\\t\\t\\t\\t\\t\\t\\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Only assign if different to avoid unneeded rendering.\\n\\t\\t\\t\\t\\tfinalValue = jQuery.trim( cur );\\n\\t\\t\\t\\t\\tif ( curValue !== finalValue ) {\\n\\t\\t\\t\\t\\t\\telem.setAttribute( \"class\", finalValue );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\n\\ttoggleClass: function( value, stateVal ) {\\n\\t\\tvar type = typeof value;\\n\\n\\t\\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\\n\\t\\t\\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\\n\\t\\t}\\n\\n\\t\\tif ( jQuery.isFunction( value ) ) {\\n\\t\\t\\treturn this.each( function( i ) {\\n\\t\\t\\t\\tjQuery( this ).toggleClass(\\n\\t\\t\\t\\t\\tvalue.call( this, i, getClass( this ), stateVal ),\\n\\t\\t\\t\\t\\tstateVal\\n\\t\\t\\t\\t);\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tvar className, i, self, classNames;\\n\\n\\t\\t\\tif ( type === \"string\" ) {\\n\\n\\t\\t\\t\\t// Toggle individual class names\\n\\t\\t\\t\\ti = 0;\\n\\t\\t\\t\\tself = jQuery( this );\\n\\t\\t\\t\\tclassNames = value.match( rnotwhite ) || [];\\n\\n\\t\\t\\t\\twhile ( ( className = classNames[ i++ ] ) ) {\\n\\n\\t\\t\\t\\t\\t// Check each className given, space separated list\\n\\t\\t\\t\\t\\tif ( self.hasClass( className ) ) {\\n\\t\\t\\t\\t\\t\\tself.removeClass( className );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tself.addClass( className );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t// Toggle whole class name\\n\\t\\t\\t} else if ( value === undefined || type === \"boolean\" ) {\\n\\t\\t\\t\\tclassName = getClass( this );\\n\\t\\t\\t\\tif ( className ) {\\n\\n\\t\\t\\t\\t\\t// Store className if set\\n\\t\\t\\t\\t\\tdataPriv.set( this, \"__className__\", className );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If the element has a class name or if we\\'re passed `false`,\\n\\t\\t\\t\\t// then remove the whole classname (if there was one, the above saved it).\\n\\t\\t\\t\\t// Otherwise bring back whatever was previously saved (if anything),\\n\\t\\t\\t\\t// falling back to the empty string if nothing was stored.\\n\\t\\t\\t\\tif ( this.setAttribute ) {\\n\\t\\t\\t\\t\\tthis.setAttribute( \"class\",\\n\\t\\t\\t\\t\\t\\tclassName || value === false ?\\n\\t\\t\\t\\t\\t\\t\"\" :\\n\\t\\t\\t\\t\\t\\tdataPriv.get( this, \"__className__\" ) || \"\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\thasClass: function( selector ) {\\n\\t\\tvar className, elem,\\n\\t\\t\\ti = 0;\\n\\n\\t\\tclassName = \" \" + selector + \" \";\\n\\t\\twhile ( ( elem = this[ i++ ] ) ) {\\n\\t\\t\\tif ( elem.nodeType === 1 &&\\n\\t\\t\\t\\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\\n\\t\\t\\t\\t\\t.indexOf( className ) > -1\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n} );\\n\\n\\n\\n\\nvar rreturn = /\\\\r/g,\\n\\trspaces = /[\\\\x20\\\\t\\\\r\\\\n\\\\f]+/g;\\n\\njQuery.fn.extend( {\\n\\tval: function( value ) {\\n\\t\\tvar hooks, ret, isFunction,\\n\\t\\t\\telem = this[ 0 ];\\n\\n\\t\\tif ( !arguments.length ) {\\n\\t\\t\\tif ( elem ) {\\n\\t\\t\\t\\thooks = jQuery.valHooks[ elem.type ] ||\\n\\t\\t\\t\\t\\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\\n\\n\\t\\t\\t\\tif ( hooks &&\\n\\t\\t\\t\\t\\t\"get\" in hooks &&\\n\\t\\t\\t\\t\\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tret = elem.value;\\n\\n\\t\\t\\t\\treturn typeof ret === \"string\" ?\\n\\n\\t\\t\\t\\t\\t// Handle most common string cases\\n\\t\\t\\t\\t\\tret.replace( rreturn, \"\" ) :\\n\\n\\t\\t\\t\\t\\t// Handle cases where value is null/undef or number\\n\\t\\t\\t\\t\\tret == null ? \"\" : ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tisFunction = jQuery.isFunction( value );\\n\\n\\t\\treturn this.each( function( i ) {\\n\\t\\t\\tvar val;\\n\\n\\t\\t\\tif ( this.nodeType !== 1 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( isFunction ) {\\n\\t\\t\\t\\tval = value.call( this, i, jQuery( this ).val() );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tval = value;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Treat null/undefined as \"\"; convert numbers to string\\n\\t\\t\\tif ( val == null ) {\\n\\t\\t\\t\\tval = \"\";\\n\\n\\t\\t\\t} else if ( typeof val === \"number\" ) {\\n\\t\\t\\t\\tval += \"\";\\n\\n\\t\\t\\t} else if ( jQuery.isArray( val ) ) {\\n\\t\\t\\t\\tval = jQuery.map( val, function( value ) {\\n\\t\\t\\t\\t\\treturn value == null ? \"\" : value + \"\";\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\\n\\n\\t\\t\\t// If set returns undefined, fall back to normal setting\\n\\t\\t\\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\\n\\t\\t\\t\\tthis.value = val;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n} );\\n\\njQuery.extend( {\\n\\tvalHooks: {\\n\\t\\toption: {\\n\\t\\t\\tget: function( elem ) {\\n\\n\\t\\t\\t\\tvar val = jQuery.find.attr( elem, \"value\" );\\n\\t\\t\\t\\treturn val != null ?\\n\\t\\t\\t\\t\\tval :\\n\\n\\t\\t\\t\\t\\t// Support: IE10-11+\\n\\t\\t\\t\\t\\t// option.text throws exceptions (#14686, #14858)\\n\\t\\t\\t\\t\\t// Strip and collapse whitespace\\n\\t\\t\\t\\t\\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\\n\\t\\t\\t\\t\\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tselect: {\\n\\t\\t\\tget: function( elem ) {\\n\\t\\t\\t\\tvar value, option,\\n\\t\\t\\t\\t\\toptions = elem.options,\\n\\t\\t\\t\\t\\tindex = elem.selectedIndex,\\n\\t\\t\\t\\t\\tone = elem.type === \"select-one\" || index < 0,\\n\\t\\t\\t\\t\\tvalues = one ? null : [],\\n\\t\\t\\t\\t\\tmax = one ? index + 1 : options.length,\\n\\t\\t\\t\\t\\ti = index < 0 ?\\n\\t\\t\\t\\t\\t\\tmax :\\n\\t\\t\\t\\t\\t\\tone ? index : 0;\\n\\n\\t\\t\\t\\t// Loop through all the selected options\\n\\t\\t\\t\\tfor ( ; i < max; i++ ) {\\n\\t\\t\\t\\t\\toption = options[ i ];\\n\\n\\t\\t\\t\\t\\t// IE8-9 doesn\\'t update selected after form reset (#2551)\\n\\t\\t\\t\\t\\tif ( ( option.selected || i === index ) &&\\n\\n\\t\\t\\t\\t\\t\\t\\t// Don\\'t return options that are disabled or in a disabled optgroup\\n\\t\\t\\t\\t\\t\\t\\t( support.optDisabled ?\\n\\t\\t\\t\\t\\t\\t\\t\\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\\n\\t\\t\\t\\t\\t\\t\\t( !option.parentNode.disabled ||\\n\\t\\t\\t\\t\\t\\t\\t\\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// Get the specific value for the option\\n\\t\\t\\t\\t\\t\\tvalue = jQuery( option ).val();\\n\\n\\t\\t\\t\\t\\t\\t// We don\\'t need an array for one selects\\n\\t\\t\\t\\t\\t\\tif ( one ) {\\n\\t\\t\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Multi-Selects return an array\\n\\t\\t\\t\\t\\t\\tvalues.push( value );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn values;\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function( elem, value ) {\\n\\t\\t\\t\\tvar optionSet, option,\\n\\t\\t\\t\\t\\toptions = elem.options,\\n\\t\\t\\t\\t\\tvalues = jQuery.makeArray( value ),\\n\\t\\t\\t\\t\\ti = options.length;\\n\\n\\t\\t\\t\\twhile ( i-- ) {\\n\\t\\t\\t\\t\\toption = options[ i ];\\n\\t\\t\\t\\t\\tif ( option.selected =\\n\\t\\t\\t\\t\\t\\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\toptionSet = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Force browsers to behave consistently when non-matching value is set\\n\\t\\t\\t\\tif ( !optionSet ) {\\n\\t\\t\\t\\t\\telem.selectedIndex = -1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn values;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n} );\\n\\n// Radios and checkboxes getter/setter\\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\\n\\tjQuery.valHooks[ this ] = {\\n\\t\\tset: function( elem, value ) {\\n\\t\\t\\tif ( jQuery.isArray( value ) ) {\\n\\t\\t\\t\\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tif ( !support.checkOn ) {\\n\\t\\tjQuery.valHooks[ this ].get = function( elem ) {\\n\\t\\t\\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\\n\\t\\t};\\n\\t}\\n} );\\n\\n\\n\\n\\n// Return jQuery for attributes-only inclusion\\n\\n\\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\\n\\njQuery.extend( jQuery.event, {\\n\\n\\ttrigger: function( event, data, elem, onlyHandlers ) {\\n\\n\\t\\tvar i, cur, tmp, bubbleType, ontype, handle, special,\\n\\t\\t\\teventPath = [ elem || document ],\\n\\t\\t\\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\\n\\t\\t\\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\\n\\n\\t\\tcur = tmp = elem = elem || document;\\n\\n\\t\\t// Don\\'t do events on text and comment nodes\\n\\t\\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// focus/blur morphs to focusin/out; ensure we\\'re not firing them right now\\n\\t\\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( type.indexOf( \".\" ) > -1 ) {\\n\\n\\t\\t\\t// Namespaced trigger; create a regexp to match event type in handle()\\n\\t\\t\\tnamespaces = type.split( \".\" );\\n\\t\\t\\ttype = namespaces.shift();\\n\\t\\t\\tnamespaces.sort();\\n\\t\\t}\\n\\t\\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\\n\\n\\t\\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\\n\\t\\tevent = event[ jQuery.expando ] ?\\n\\t\\t\\tevent :\\n\\t\\t\\tnew jQuery.Event( type, typeof event === \"object\" && event );\\n\\n\\t\\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\\n\\t\\tevent.isTrigger = onlyHandlers ? 2 : 3;\\n\\t\\tevent.namespace = namespaces.join( \".\" );\\n\\t\\tevent.rnamespace = event.namespace ?\\n\\t\\t\\tnew RegExp( \"(^|\\\\\\\\.)\" + namespaces.join( \"\\\\\\\\.(?:.*\\\\\\\\.|)\" ) + \"(\\\\\\\\.|$)\" ) :\\n\\t\\t\\tnull;\\n\\n\\t\\t// Clean up the event in case it is being reused\\n\\t\\tevent.result = undefined;\\n\\t\\tif ( !event.target ) {\\n\\t\\t\\tevent.target = elem;\\n\\t\\t}\\n\\n\\t\\t// Clone any incoming data and prepend the event, creating the handler arg list\\n\\t\\tdata = data == null ?\\n\\t\\t\\t[ event ] :\\n\\t\\t\\tjQuery.makeArray( data, [ event ] );\\n\\n\\t\\t// Allow special events to draw outside the lines\\n\\t\\tspecial = jQuery.event.special[ type ] || {};\\n\\t\\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Determine event propagation path in advance, per W3C events spec (#9951)\\n\\t\\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\\n\\t\\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\\n\\n\\t\\t\\tbubbleType = special.delegateType || type;\\n\\t\\t\\tif ( !rfocusMorph.test( bubbleType + type ) ) {\\n\\t\\t\\t\\tcur = cur.parentNode;\\n\\t\\t\\t}\\n\\t\\t\\tfor ( ; cur; cur = cur.parentNode ) {\\n\\t\\t\\t\\teventPath.push( cur );\\n\\t\\t\\t\\ttmp = cur;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\\n\\t\\t\\tif ( tmp === ( elem.ownerDocument || document ) ) {\\n\\t\\t\\t\\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Fire handlers on the event path\\n\\t\\ti = 0;\\n\\t\\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\\n\\n\\t\\t\\tevent.type = i > 1 ?\\n\\t\\t\\t\\tbubbleType :\\n\\t\\t\\t\\tspecial.bindType || type;\\n\\n\\t\\t\\t// jQuery handler\\n\\t\\t\\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\\n\\t\\t\\t\\tdataPriv.get( cur, \"handle\" );\\n\\t\\t\\tif ( handle ) {\\n\\t\\t\\t\\thandle.apply( cur, data );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Native handler\\n\\t\\t\\thandle = ontype && cur[ ontype ];\\n\\t\\t\\tif ( handle && handle.apply && acceptData( cur ) ) {\\n\\t\\t\\t\\tevent.result = handle.apply( cur, data );\\n\\t\\t\\t\\tif ( event.result === false ) {\\n\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tevent.type = type;\\n\\n\\t\\t// If nobody prevented the default action, do it now\\n\\t\\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\\n\\n\\t\\t\\tif ( ( !special._default ||\\n\\t\\t\\t\\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\\n\\t\\t\\t\\tacceptData( elem ) ) {\\n\\n\\t\\t\\t\\t// Call a native DOM method on the target with the same name name as the event.\\n\\t\\t\\t\\t// Don\\'t do default actions on window, that\\'s where global variables be (#6170)\\n\\t\\t\\t\\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\\n\\n\\t\\t\\t\\t\\t// Don\\'t re-trigger an onFOO event when we call its FOO() method\\n\\t\\t\\t\\t\\ttmp = elem[ ontype ];\\n\\n\\t\\t\\t\\t\\tif ( tmp ) {\\n\\t\\t\\t\\t\\t\\telem[ ontype ] = null;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Prevent re-triggering of the same event, since we already bubbled it above\\n\\t\\t\\t\\t\\tjQuery.event.triggered = type;\\n\\t\\t\\t\\t\\telem[ type ]();\\n\\t\\t\\t\\t\\tjQuery.event.triggered = undefined;\\n\\n\\t\\t\\t\\t\\tif ( tmp ) {\\n\\t\\t\\t\\t\\t\\telem[ ontype ] = tmp;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn event.result;\\n\\t},\\n\\n\\t// Piggyback on a donor event to simulate a different one\\n\\t// Used only for `focus(in | out)` events\\n\\tsimulate: function( type, elem, event ) {\\n\\t\\tvar e = jQuery.extend(\\n\\t\\t\\tnew jQuery.Event(),\\n\\t\\t\\tevent,\\n\\t\\t\\t{\\n\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\tisSimulated: true\\n\\t\\t\\t}\\n\\t\\t);\\n\\n\\t\\tjQuery.event.trigger( e, null, elem );\\n\\t}\\n\\n} );\\n\\njQuery.fn.extend( {\\n\\n\\ttrigger: function( type, data ) {\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tjQuery.event.trigger( type, data, this );\\n\\t\\t} );\\n\\t},\\n\\ttriggerHandler: function( type, data ) {\\n\\t\\tvar elem = this[ 0 ];\\n\\t\\tif ( elem ) {\\n\\t\\t\\treturn jQuery.event.trigger( type, data, elem, true );\\n\\t\\t}\\n\\t}\\n} );\\n\\n\\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\\n\\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\\n\\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\\n\\tfunction( i, name ) {\\n\\n\\t// Handle event binding\\n\\tjQuery.fn[ name ] = function( data, fn ) {\\n\\t\\treturn arguments.length > 0 ?\\n\\t\\t\\tthis.on( name, null, data, fn ) :\\n\\t\\t\\tthis.trigger( name );\\n\\t};\\n} );\\n\\njQuery.fn.extend( {\\n\\thover: function( fnOver, fnOut ) {\\n\\t\\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\\n\\t}\\n} );\\n\\n\\n\\n\\nsupport.focusin = \"onfocusin\" in window;\\n\\n\\n// Support: Firefox\\n// Firefox doesn\\'t have focus(in | out) events\\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\\n//\\n// Support: Chrome, Safari\\n// focus(in | out) events fire after focus & blur events,\\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\\nif ( !support.focusin ) {\\n\\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\\n\\n\\t\\t// Attach a single capturing handler on the document while someone wants focusin/focusout\\n\\t\\tvar handler = function( event ) {\\n\\t\\t\\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\\n\\t\\t};\\n\\n\\t\\tjQuery.event.special[ fix ] = {\\n\\t\\t\\tsetup: function() {\\n\\t\\t\\t\\tvar doc = this.ownerDocument || this,\\n\\t\\t\\t\\t\\tattaches = dataPriv.access( doc, fix );\\n\\n\\t\\t\\t\\tif ( !attaches ) {\\n\\t\\t\\t\\t\\tdoc.addEventListener( orig, handler, true );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\\n\\t\\t\\t},\\n\\t\\t\\tteardown: function() {\\n\\t\\t\\t\\tvar doc = this.ownerDocument || this,\\n\\t\\t\\t\\t\\tattaches = dataPriv.access( doc, fix ) - 1;\\n\\n\\t\\t\\t\\tif ( !attaches ) {\\n\\t\\t\\t\\t\\tdoc.removeEventListener( orig, handler, true );\\n\\t\\t\\t\\t\\tdataPriv.remove( doc, fix );\\n\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdataPriv.access( doc, fix, attaches );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t} );\\n}\\nvar location = window.location;\\n\\nvar nonce = jQuery.now();\\n\\nvar rquery = ( /\\\\?/ );\\n\\n\\n\\n// Support: Android 2.3\\n// Workaround failure to string-cast null input\\njQuery.parseJSON = function( data ) {\\n\\treturn JSON.parse( data + \"\" );\\n};\\n\\n\\n// Cross-browser xml parsing\\njQuery.parseXML = function( data ) {\\n\\tvar xml;\\n\\tif ( !data || typeof data !== \"string\" ) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\t// Support: IE9\\n\\ttry {\\n\\t\\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\\n\\t} catch ( e ) {\\n\\t\\txml = undefined;\\n\\t}\\n\\n\\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\\n\\t\\tjQuery.error( \"Invalid XML: \" + data );\\n\\t}\\n\\treturn xml;\\n};\\n\\n\\nvar\\n\\trhash = /#.*$/,\\n\\trts = /([?&])_=[^&]*/,\\n\\trheaders = /^(.*?):[ \\\\t]*([^\\\\r\\\\n]*)$/mg,\\n\\n\\t// #7653, #8125, #8152: local protocol detection\\n\\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\\n\\trnoContent = /^(?:GET|HEAD)$/,\\n\\trprotocol = /^\\\\/\\\\//,\\n\\n\\t/* Prefilters\\n\\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\\n\\t * 2) These are called:\\n\\t *    - BEFORE asking for a transport\\n\\t *    - AFTER param serialization (s.data is a string if s.processData is true)\\n\\t * 3) key is the dataType\\n\\t * 4) the catchall symbol \"*\" can be used\\n\\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\\n\\t */\\n\\tprefilters = {},\\n\\n\\t/* Transports bindings\\n\\t * 1) key is the dataType\\n\\t * 2) the catchall symbol \"*\" can be used\\n\\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\\n\\t */\\n\\ttransports = {},\\n\\n\\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\\n\\tallTypes = \"*/\".concat( \"*\" ),\\n\\n\\t// Anchor tag for parsing the document origin\\n\\toriginAnchor = document.createElement( \"a\" );\\n\\toriginAnchor.href = location.href;\\n\\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\\nfunction addToPrefiltersOrTransports( structure ) {\\n\\n\\t// dataTypeExpression is optional and defaults to \"*\"\\n\\treturn function( dataTypeExpression, func ) {\\n\\n\\t\\tif ( typeof dataTypeExpression !== \"string\" ) {\\n\\t\\t\\tfunc = dataTypeExpression;\\n\\t\\t\\tdataTypeExpression = \"*\";\\n\\t\\t}\\n\\n\\t\\tvar dataType,\\n\\t\\t\\ti = 0,\\n\\t\\t\\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\\n\\n\\t\\tif ( jQuery.isFunction( func ) ) {\\n\\n\\t\\t\\t// For each dataType in the dataTypeExpression\\n\\t\\t\\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\\n\\n\\t\\t\\t\\t// Prepend if requested\\n\\t\\t\\t\\tif ( dataType[ 0 ] === \"+\" ) {\\n\\t\\t\\t\\t\\tdataType = dataType.slice( 1 ) || \"*\";\\n\\t\\t\\t\\t\\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\\n\\n\\t\\t\\t\\t// Otherwise append\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n// Base inspection function for prefilters and transports\\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\\n\\n\\tvar inspected = {},\\n\\t\\tseekingTransport = ( structure === transports );\\n\\n\\tfunction inspect( dataType ) {\\n\\t\\tvar selected;\\n\\t\\tinspected[ dataType ] = true;\\n\\t\\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\\n\\t\\t\\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\\n\\t\\t\\tif ( typeof dataTypeOrTransport === \"string\" &&\\n\\t\\t\\t\\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\\n\\n\\t\\t\\t\\toptions.dataTypes.unshift( dataTypeOrTransport );\\n\\t\\t\\t\\tinspect( dataTypeOrTransport );\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} else if ( seekingTransport ) {\\n\\t\\t\\t\\treturn !( selected = dataTypeOrTransport );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\treturn selected;\\n\\t}\\n\\n\\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\\n}\\n\\n// A special extend for ajax options\\n// that takes \"flat\" options (not to be deep extended)\\n// Fixes #9887\\nfunction ajaxExtend( target, src ) {\\n\\tvar key, deep,\\n\\t\\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\\n\\n\\tfor ( key in src ) {\\n\\t\\tif ( src[ key ] !== undefined ) {\\n\\t\\t\\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\\n\\t\\t}\\n\\t}\\n\\tif ( deep ) {\\n\\t\\tjQuery.extend( true, target, deep );\\n\\t}\\n\\n\\treturn target;\\n}\\n\\n/* Handles responses to an ajax request:\\n * - finds the right dataType (mediates between content-type and expected dataType)\\n * - returns the corresponding response\\n */\\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\\n\\n\\tvar ct, type, finalDataType, firstDataType,\\n\\t\\tcontents = s.contents,\\n\\t\\tdataTypes = s.dataTypes;\\n\\n\\t// Remove auto dataType and get content-type in the process\\n\\twhile ( dataTypes[ 0 ] === \"*\" ) {\\n\\t\\tdataTypes.shift();\\n\\t\\tif ( ct === undefined ) {\\n\\t\\t\\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\\n\\t\\t}\\n\\t}\\n\\n\\t// Check if we\\'re dealing with a known content-type\\n\\tif ( ct ) {\\n\\t\\tfor ( type in contents ) {\\n\\t\\t\\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\\n\\t\\t\\t\\tdataTypes.unshift( type );\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Check to see if we have a response for the expected dataType\\n\\tif ( dataTypes[ 0 ] in responses ) {\\n\\t\\tfinalDataType = dataTypes[ 0 ];\\n\\t} else {\\n\\n\\t\\t// Try convertible dataTypes\\n\\t\\tfor ( type in responses ) {\\n\\t\\t\\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\\n\\t\\t\\t\\tfinalDataType = type;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif ( !firstDataType ) {\\n\\t\\t\\t\\tfirstDataType = type;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Or just use first one\\n\\t\\tfinalDataType = finalDataType || firstDataType;\\n\\t}\\n\\n\\t// If we found a dataType\\n\\t// We add the dataType to the list if needed\\n\\t// and return the corresponding response\\n\\tif ( finalDataType ) {\\n\\t\\tif ( finalDataType !== dataTypes[ 0 ] ) {\\n\\t\\t\\tdataTypes.unshift( finalDataType );\\n\\t\\t}\\n\\t\\treturn responses[ finalDataType ];\\n\\t}\\n}\\n\\n/* Chain conversions given the request and the original response\\n * Also sets the responseXXX fields on the jqXHR instance\\n */\\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\\n\\tvar conv2, current, conv, tmp, prev,\\n\\t\\tconverters = {},\\n\\n\\t\\t// Work with a copy of dataTypes in case we need to modify it for conversion\\n\\t\\tdataTypes = s.dataTypes.slice();\\n\\n\\t// Create converters map with lowercased keys\\n\\tif ( dataTypes[ 1 ] ) {\\n\\t\\tfor ( conv in s.converters ) {\\n\\t\\t\\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\\n\\t\\t}\\n\\t}\\n\\n\\tcurrent = dataTypes.shift();\\n\\n\\t// Convert to each sequential dataType\\n\\twhile ( current ) {\\n\\n\\t\\tif ( s.responseFields[ current ] ) {\\n\\t\\t\\tjqXHR[ s.responseFields[ current ] ] = response;\\n\\t\\t}\\n\\n\\t\\t// Apply the dataFilter if provided\\n\\t\\tif ( !prev && isSuccess && s.dataFilter ) {\\n\\t\\t\\tresponse = s.dataFilter( response, s.dataType );\\n\\t\\t}\\n\\n\\t\\tprev = current;\\n\\t\\tcurrent = dataTypes.shift();\\n\\n\\t\\tif ( current ) {\\n\\n\\t\\t// There\\'s only work to do if current dataType is non-auto\\n\\t\\t\\tif ( current === \"*\" ) {\\n\\n\\t\\t\\t\\tcurrent = prev;\\n\\n\\t\\t\\t// Convert response if prev dataType is non-auto and differs from current\\n\\t\\t\\t} else if ( prev !== \"*\" && prev !== current ) {\\n\\n\\t\\t\\t\\t// Seek a direct converter\\n\\t\\t\\t\\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\\n\\n\\t\\t\\t\\t// If none found, seek a pair\\n\\t\\t\\t\\tif ( !conv ) {\\n\\t\\t\\t\\t\\tfor ( conv2 in converters ) {\\n\\n\\t\\t\\t\\t\\t\\t// If conv2 outputs current\\n\\t\\t\\t\\t\\t\\ttmp = conv2.split( \" \" );\\n\\t\\t\\t\\t\\t\\tif ( tmp[ 1 ] === current ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// If prev can be converted to accepted input\\n\\t\\t\\t\\t\\t\\t\\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\\n\\t\\t\\t\\t\\t\\t\\t\\tconverters[ \"* \" + tmp[ 0 ] ];\\n\\t\\t\\t\\t\\t\\t\\tif ( conv ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Condense equivalence converters\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( conv === true ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tconv = converters[ conv2 ];\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Otherwise, insert the intermediate dataType\\n\\t\\t\\t\\t\\t\\t\\t\\t} else if ( converters[ conv2 ] !== true ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcurrent = tmp[ 0 ];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdataTypes.unshift( tmp[ 1 ] );\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Apply converter (if not an equivalence)\\n\\t\\t\\t\\tif ( conv !== true ) {\\n\\n\\t\\t\\t\\t\\t// Unless errors are allowed to bubble, catch and return them\\n\\t\\t\\t\\t\\tif ( conv && s.throws ) {\\n\\t\\t\\t\\t\\t\\tresponse = conv( response );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\tresponse = conv( response );\\n\\t\\t\\t\\t\\t\\t} catch ( e ) {\\n\\t\\t\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t\\t\\tstate: \"parsererror\",\\n\\t\\t\\t\\t\\t\\t\\t\\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn { state: \"success\", data: response };\\n}\\n\\njQuery.extend( {\\n\\n\\t// Counter for holding the number of active queries\\n\\tactive: 0,\\n\\n\\t// Last-Modified header cache for next request\\n\\tlastModified: {},\\n\\tetag: {},\\n\\n\\tajaxSettings: {\\n\\t\\turl: location.href,\\n\\t\\ttype: \"GET\",\\n\\t\\tisLocal: rlocalProtocol.test( location.protocol ),\\n\\t\\tglobal: true,\\n\\t\\tprocessData: true,\\n\\t\\tasync: true,\\n\\t\\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\\n\\t\\t/*\\n\\t\\ttimeout: 0,\\n\\t\\tdata: null,\\n\\t\\tdataType: null,\\n\\t\\tusername: null,\\n\\t\\tpassword: null,\\n\\t\\tcache: null,\\n\\t\\tthrows: false,\\n\\t\\ttraditional: false,\\n\\t\\theaders: {},\\n\\t\\t*/\\n\\n\\t\\taccepts: {\\n\\t\\t\\t\"*\": allTypes,\\n\\t\\t\\ttext: \"text/plain\",\\n\\t\\t\\thtml: \"text/html\",\\n\\t\\t\\txml: \"application/xml, text/xml\",\\n\\t\\t\\tjson: \"application/json, text/javascript\"\\n\\t\\t},\\n\\n\\t\\tcontents: {\\n\\t\\t\\txml: /\\\\bxml\\\\b/,\\n\\t\\t\\thtml: /\\\\bhtml/,\\n\\t\\t\\tjson: /\\\\bjson\\\\b/\\n\\t\\t},\\n\\n\\t\\tresponseFields: {\\n\\t\\t\\txml: \"responseXML\",\\n\\t\\t\\ttext: \"responseText\",\\n\\t\\t\\tjson: \"responseJSON\"\\n\\t\\t},\\n\\n\\t\\t// Data converters\\n\\t\\t// Keys separate source (or catchall \"*\") and destination types with a single space\\n\\t\\tconverters: {\\n\\n\\t\\t\\t// Convert anything to text\\n\\t\\t\\t\"* text\": String,\\n\\n\\t\\t\\t// Text to html (true = no transformation)\\n\\t\\t\\t\"text html\": true,\\n\\n\\t\\t\\t// Evaluate text as a json expression\\n\\t\\t\\t\"text json\": jQuery.parseJSON,\\n\\n\\t\\t\\t// Parse text as xml\\n\\t\\t\\t\"text xml\": jQuery.parseXML\\n\\t\\t},\\n\\n\\t\\t// For options that shouldn\\'t be deep extended:\\n\\t\\t// you can add your own custom options here if\\n\\t\\t// and when you create one that shouldn\\'t be\\n\\t\\t// deep extended (see ajaxExtend)\\n\\t\\tflatOptions: {\\n\\t\\t\\turl: true,\\n\\t\\t\\tcontext: true\\n\\t\\t}\\n\\t},\\n\\n\\t// Creates a full fledged settings object into target\\n\\t// with both ajaxSettings and settings fields.\\n\\t// If target is omitted, writes into ajaxSettings.\\n\\tajaxSetup: function( target, settings ) {\\n\\t\\treturn settings ?\\n\\n\\t\\t\\t// Building a settings object\\n\\t\\t\\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\\n\\n\\t\\t\\t// Extending ajaxSettings\\n\\t\\t\\tajaxExtend( jQuery.ajaxSettings, target );\\n\\t},\\n\\n\\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\\n\\tajaxTransport: addToPrefiltersOrTransports( transports ),\\n\\n\\t// Main method\\n\\tajax: function( url, options ) {\\n\\n\\t\\t// If url is an object, simulate pre-1.5 signature\\n\\t\\tif ( typeof url === \"object\" ) {\\n\\t\\t\\toptions = url;\\n\\t\\t\\turl = undefined;\\n\\t\\t}\\n\\n\\t\\t// Force options to be an object\\n\\t\\toptions = options || {};\\n\\n\\t\\tvar transport,\\n\\n\\t\\t\\t// URL without anti-cache param\\n\\t\\t\\tcacheURL,\\n\\n\\t\\t\\t// Response headers\\n\\t\\t\\tresponseHeadersString,\\n\\t\\t\\tresponseHeaders,\\n\\n\\t\\t\\t// timeout handle\\n\\t\\t\\ttimeoutTimer,\\n\\n\\t\\t\\t// Url cleanup var\\n\\t\\t\\turlAnchor,\\n\\n\\t\\t\\t// To know if global events are to be dispatched\\n\\t\\t\\tfireGlobals,\\n\\n\\t\\t\\t// Loop variable\\n\\t\\t\\ti,\\n\\n\\t\\t\\t// Create the final options object\\n\\t\\t\\ts = jQuery.ajaxSetup( {}, options ),\\n\\n\\t\\t\\t// Callbacks context\\n\\t\\t\\tcallbackContext = s.context || s,\\n\\n\\t\\t\\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\\n\\t\\t\\tglobalEventContext = s.context &&\\n\\t\\t\\t\\t( callbackContext.nodeType || callbackContext.jquery ) ?\\n\\t\\t\\t\\t\\tjQuery( callbackContext ) :\\n\\t\\t\\t\\t\\tjQuery.event,\\n\\n\\t\\t\\t// Deferreds\\n\\t\\t\\tdeferred = jQuery.Deferred(),\\n\\t\\t\\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\\n\\n\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\tstatusCode = s.statusCode || {},\\n\\n\\t\\t\\t// Headers (they are sent all at once)\\n\\t\\t\\trequestHeaders = {},\\n\\t\\t\\trequestHeadersNames = {},\\n\\n\\t\\t\\t// The jqXHR state\\n\\t\\t\\tstate = 0,\\n\\n\\t\\t\\t// Default abort message\\n\\t\\t\\tstrAbort = \"canceled\",\\n\\n\\t\\t\\t// Fake xhr\\n\\t\\t\\tjqXHR = {\\n\\t\\t\\t\\treadyState: 0,\\n\\n\\t\\t\\t\\t// Builds headers hashtable if needed\\n\\t\\t\\t\\tgetResponseHeader: function( key ) {\\n\\t\\t\\t\\t\\tvar match;\\n\\t\\t\\t\\t\\tif ( state === 2 ) {\\n\\t\\t\\t\\t\\t\\tif ( !responseHeaders ) {\\n\\t\\t\\t\\t\\t\\t\\tresponseHeaders = {};\\n\\t\\t\\t\\t\\t\\t\\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tmatch = responseHeaders[ key.toLowerCase() ];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn match == null ? null : match;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Raw string\\n\\t\\t\\t\\tgetAllResponseHeaders: function() {\\n\\t\\t\\t\\t\\treturn state === 2 ? responseHeadersString : null;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Caches the header\\n\\t\\t\\t\\tsetRequestHeader: function( name, value ) {\\n\\t\\t\\t\\t\\tvar lname = name.toLowerCase();\\n\\t\\t\\t\\t\\tif ( !state ) {\\n\\t\\t\\t\\t\\t\\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\\n\\t\\t\\t\\t\\t\\trequestHeaders[ name ] = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Overrides response content-type header\\n\\t\\t\\t\\toverrideMimeType: function( type ) {\\n\\t\\t\\t\\t\\tif ( !state ) {\\n\\t\\t\\t\\t\\t\\ts.mimeType = type;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\t\\tstatusCode: function( map ) {\\n\\t\\t\\t\\t\\tvar code;\\n\\t\\t\\t\\t\\tif ( map ) {\\n\\t\\t\\t\\t\\t\\tif ( state < 2 ) {\\n\\t\\t\\t\\t\\t\\t\\tfor ( code in map ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Lazy-add the new callback in a way that preserves old ones\\n\\t\\t\\t\\t\\t\\t\\t\\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Execute the appropriate callbacks\\n\\t\\t\\t\\t\\t\\t\\tjqXHR.always( map[ jqXHR.status ] );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Cancel the request\\n\\t\\t\\t\\tabort: function( statusText ) {\\n\\t\\t\\t\\t\\tvar finalText = statusText || strAbort;\\n\\t\\t\\t\\t\\tif ( transport ) {\\n\\t\\t\\t\\t\\t\\ttransport.abort( finalText );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdone( 0, finalText );\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t// Attach deferreds\\n\\t\\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\\n\\t\\tjqXHR.success = jqXHR.done;\\n\\t\\tjqXHR.error = jqXHR.fail;\\n\\n\\t\\t// Remove hash character (#7531: and string promotion)\\n\\t\\t// Add protocol if not provided (prefilters might expect it)\\n\\t\\t// Handle falsy url in the settings object (#10093: consistency with old signature)\\n\\t\\t// We also use the url parameter if available\\n\\t\\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\\n\\t\\t\\t.replace( rprotocol, location.protocol + \"//\" );\\n\\n\\t\\t// Alias method option to type as per ticket #12004\\n\\t\\ts.type = options.method || options.type || s.method || s.type;\\n\\n\\t\\t// Extract dataTypes list\\n\\t\\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\\n\\n\\t\\t// A cross-domain request is in order when the origin doesn\\'t match the current origin.\\n\\t\\tif ( s.crossDomain == null ) {\\n\\t\\t\\turlAnchor = document.createElement( \"a\" );\\n\\n\\t\\t\\t// Support: IE8-11+\\n\\t\\t\\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\\n\\t\\t\\ttry {\\n\\t\\t\\t\\turlAnchor.href = s.url;\\n\\n\\t\\t\\t\\t// Support: IE8-11+\\n\\t\\t\\t\\t// Anchor\\'s host property isn\\'t correctly set when s.url is relative\\n\\t\\t\\t\\turlAnchor.href = urlAnchor.href;\\n\\t\\t\\t\\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\\n\\t\\t\\t\\t\\turlAnchor.protocol + \"//\" + urlAnchor.host;\\n\\t\\t\\t} catch ( e ) {\\n\\n\\t\\t\\t\\t// If there is an error parsing the URL, assume it is crossDomain,\\n\\t\\t\\t\\t// it can be rejected by the transport if it is invalid\\n\\t\\t\\t\\ts.crossDomain = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Convert data if not already a string\\n\\t\\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\\n\\t\\t\\ts.data = jQuery.param( s.data, s.traditional );\\n\\t\\t}\\n\\n\\t\\t// Apply prefilters\\n\\t\\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\\n\\n\\t\\t// If request was aborted inside a prefilter, stop there\\n\\t\\tif ( state === 2 ) {\\n\\t\\t\\treturn jqXHR;\\n\\t\\t}\\n\\n\\t\\t// We can fire global events as of now if asked to\\n\\t\\t// Don\\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\\n\\t\\tfireGlobals = jQuery.event && s.global;\\n\\n\\t\\t// Watch for a new set of requests\\n\\t\\tif ( fireGlobals && jQuery.active++ === 0 ) {\\n\\t\\t\\tjQuery.event.trigger( \"ajaxStart\" );\\n\\t\\t}\\n\\n\\t\\t// Uppercase the type\\n\\t\\ts.type = s.type.toUpperCase();\\n\\n\\t\\t// Determine if request has content\\n\\t\\ts.hasContent = !rnoContent.test( s.type );\\n\\n\\t\\t// Save the URL in case we\\'re toying with the If-Modified-Since\\n\\t\\t// and/or If-None-Match header later on\\n\\t\\tcacheURL = s.url;\\n\\n\\t\\t// More options handling for requests with no content\\n\\t\\tif ( !s.hasContent ) {\\n\\n\\t\\t\\t// If data is available, append data to url\\n\\t\\t\\tif ( s.data ) {\\n\\t\\t\\t\\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\\n\\n\\t\\t\\t\\t// #9682: remove data so that it\\'s not used in an eventual retry\\n\\t\\t\\t\\tdelete s.data;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add anti-cache in url if needed\\n\\t\\t\\tif ( s.cache === false ) {\\n\\t\\t\\t\\ts.url = rts.test( cacheURL ) ?\\n\\n\\t\\t\\t\\t\\t// If there is already a \\'_\\' parameter, set its value\\n\\t\\t\\t\\t\\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\\n\\n\\t\\t\\t\\t\\t// Otherwise add one to the end\\n\\t\\t\\t\\t\\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n\\t\\tif ( s.ifModified ) {\\n\\t\\t\\tif ( jQuery.lastModified[ cacheURL ] ) {\\n\\t\\t\\t\\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\\n\\t\\t\\t}\\n\\t\\t\\tif ( jQuery.etag[ cacheURL ] ) {\\n\\t\\t\\t\\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Set the correct header, if data is being sent\\n\\t\\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\\n\\t\\t\\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\\n\\t\\t}\\n\\n\\t\\t// Set the Accepts header for the server, depending on the dataType\\n\\t\\tjqXHR.setRequestHeader(\\n\\t\\t\\t\"Accept\",\\n\\t\\t\\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\\n\\t\\t\\t\\ts.accepts[ s.dataTypes[ 0 ] ] +\\n\\t\\t\\t\\t\\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\\n\\t\\t\\t\\ts.accepts[ \"*\" ]\\n\\t\\t);\\n\\n\\t\\t// Check for headers option\\n\\t\\tfor ( i in s.headers ) {\\n\\t\\t\\tjqXHR.setRequestHeader( i, s.headers[ i ] );\\n\\t\\t}\\n\\n\\t\\t// Allow custom headers/mimetypes and early abort\\n\\t\\tif ( s.beforeSend &&\\n\\t\\t\\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\\n\\n\\t\\t\\t// Abort if not done already and return\\n\\t\\t\\treturn jqXHR.abort();\\n\\t\\t}\\n\\n\\t\\t// Aborting is no longer a cancellation\\n\\t\\tstrAbort = \"abort\";\\n\\n\\t\\t// Install callbacks on deferreds\\n\\t\\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\\n\\t\\t\\tjqXHR[ i ]( s[ i ] );\\n\\t\\t}\\n\\n\\t\\t// Get transport\\n\\t\\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\\n\\n\\t\\t// If no transport, we auto-abort\\n\\t\\tif ( !transport ) {\\n\\t\\t\\tdone( -1, \"No Transport\" );\\n\\t\\t} else {\\n\\t\\t\\tjqXHR.readyState = 1;\\n\\n\\t\\t\\t// Send global event\\n\\t\\t\\tif ( fireGlobals ) {\\n\\t\\t\\t\\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If request was aborted inside ajaxSend, stop there\\n\\t\\t\\tif ( state === 2 ) {\\n\\t\\t\\t\\treturn jqXHR;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Timeout\\n\\t\\t\\tif ( s.async && s.timeout > 0 ) {\\n\\t\\t\\t\\ttimeoutTimer = window.setTimeout( function() {\\n\\t\\t\\t\\t\\tjqXHR.abort( \"timeout\" );\\n\\t\\t\\t\\t}, s.timeout );\\n\\t\\t\\t}\\n\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tstate = 1;\\n\\t\\t\\t\\ttransport.send( requestHeaders, done );\\n\\t\\t\\t} catch ( e ) {\\n\\n\\t\\t\\t\\t// Propagate exception as error if not done\\n\\t\\t\\t\\tif ( state < 2 ) {\\n\\t\\t\\t\\t\\tdone( -1, e );\\n\\n\\t\\t\\t\\t// Simply rethrow otherwise\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Callback for when everything is done\\n\\t\\tfunction done( status, nativeStatusText, responses, headers ) {\\n\\t\\t\\tvar isSuccess, success, error, response, modified,\\n\\t\\t\\t\\tstatusText = nativeStatusText;\\n\\n\\t\\t\\t// Called once\\n\\t\\t\\tif ( state === 2 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// State is \"done\" now\\n\\t\\t\\tstate = 2;\\n\\n\\t\\t\\t// Clear timeout if it exists\\n\\t\\t\\tif ( timeoutTimer ) {\\n\\t\\t\\t\\twindow.clearTimeout( timeoutTimer );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dereference transport for early garbage collection\\n\\t\\t\\t// (no matter how long the jqXHR object will be used)\\n\\t\\t\\ttransport = undefined;\\n\\n\\t\\t\\t// Cache response headers\\n\\t\\t\\tresponseHeadersString = headers || \"\";\\n\\n\\t\\t\\t// Set readyState\\n\\t\\t\\tjqXHR.readyState = status > 0 ? 4 : 0;\\n\\n\\t\\t\\t// Determine if successful\\n\\t\\t\\tisSuccess = status >= 200 && status < 300 || status === 304;\\n\\n\\t\\t\\t// Get response data\\n\\t\\t\\tif ( responses ) {\\n\\t\\t\\t\\tresponse = ajaxHandleResponses( s, jqXHR, responses );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Convert no matter what (that way responseXXX fields are always set)\\n\\t\\t\\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\\n\\n\\t\\t\\t// If successful, handle type chaining\\n\\t\\t\\tif ( isSuccess ) {\\n\\n\\t\\t\\t\\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n\\t\\t\\t\\tif ( s.ifModified ) {\\n\\t\\t\\t\\t\\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\\n\\t\\t\\t\\t\\tif ( modified ) {\\n\\t\\t\\t\\t\\t\\tjQuery.lastModified[ cacheURL ] = modified;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tmodified = jqXHR.getResponseHeader( \"etag\" );\\n\\t\\t\\t\\t\\tif ( modified ) {\\n\\t\\t\\t\\t\\t\\tjQuery.etag[ cacheURL ] = modified;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// if no content\\n\\t\\t\\t\\tif ( status === 204 || s.type === \"HEAD\" ) {\\n\\t\\t\\t\\t\\tstatusText = \"nocontent\";\\n\\n\\t\\t\\t\\t// if not modified\\n\\t\\t\\t\\t} else if ( status === 304 ) {\\n\\t\\t\\t\\t\\tstatusText = \"notmodified\";\\n\\n\\t\\t\\t\\t// If we have data, let\\'s convert it\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tstatusText = response.state;\\n\\t\\t\\t\\t\\tsuccess = response.data;\\n\\t\\t\\t\\t\\terror = response.error;\\n\\t\\t\\t\\t\\tisSuccess = !error;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Extract error from statusText and normalize for non-aborts\\n\\t\\t\\t\\terror = statusText;\\n\\t\\t\\t\\tif ( status || !statusText ) {\\n\\t\\t\\t\\t\\tstatusText = \"error\";\\n\\t\\t\\t\\t\\tif ( status < 0 ) {\\n\\t\\t\\t\\t\\t\\tstatus = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set data for the fake xhr object\\n\\t\\t\\tjqXHR.status = status;\\n\\t\\t\\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\\n\\n\\t\\t\\t// Success/Error\\n\\t\\t\\tif ( isSuccess ) {\\n\\t\\t\\t\\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\tjqXHR.statusCode( statusCode );\\n\\t\\t\\tstatusCode = undefined;\\n\\n\\t\\t\\tif ( fireGlobals ) {\\n\\t\\t\\t\\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\\n\\t\\t\\t\\t\\t[ jqXHR, s, isSuccess ? success : error ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Complete\\n\\t\\t\\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\\n\\n\\t\\t\\tif ( fireGlobals ) {\\n\\t\\t\\t\\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\\n\\n\\t\\t\\t\\t// Handle the global AJAX counter\\n\\t\\t\\t\\tif ( !( --jQuery.active ) ) {\\n\\t\\t\\t\\t\\tjQuery.event.trigger( \"ajaxStop\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn jqXHR;\\n\\t},\\n\\n\\tgetJSON: function( url, data, callback ) {\\n\\t\\treturn jQuery.get( url, data, callback, \"json\" );\\n\\t},\\n\\n\\tgetScript: function( url, callback ) {\\n\\t\\treturn jQuery.get( url, undefined, callback, \"script\" );\\n\\t}\\n} );\\n\\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\\n\\tjQuery[ method ] = function( url, data, callback, type ) {\\n\\n\\t\\t// Shift arguments if data argument was omitted\\n\\t\\tif ( jQuery.isFunction( data ) ) {\\n\\t\\t\\ttype = type || callback;\\n\\t\\t\\tcallback = data;\\n\\t\\t\\tdata = undefined;\\n\\t\\t}\\n\\n\\t\\t// The url can be an options object (which then must have .url)\\n\\t\\treturn jQuery.ajax( jQuery.extend( {\\n\\t\\t\\turl: url,\\n\\t\\t\\ttype: method,\\n\\t\\t\\tdataType: type,\\n\\t\\t\\tdata: data,\\n\\t\\t\\tsuccess: callback\\n\\t\\t}, jQuery.isPlainObject( url ) && url ) );\\n\\t};\\n} );\\n\\n\\njQuery._evalUrl = function( url ) {\\n\\treturn jQuery.ajax( {\\n\\t\\turl: url,\\n\\n\\t\\t// Make this explicit, since user can override this through ajaxSetup (#11264)\\n\\t\\ttype: \"GET\",\\n\\t\\tdataType: \"script\",\\n\\t\\tasync: false,\\n\\t\\tglobal: false,\\n\\t\\t\"throws\": true\\n\\t} );\\n};\\n\\n\\njQuery.fn.extend( {\\n\\twrapAll: function( html ) {\\n\\t\\tvar wrap;\\n\\n\\t\\tif ( jQuery.isFunction( html ) ) {\\n\\t\\t\\treturn this.each( function( i ) {\\n\\t\\t\\t\\tjQuery( this ).wrapAll( html.call( this, i ) );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tif ( this[ 0 ] ) {\\n\\n\\t\\t\\t// The elements to wrap the target around\\n\\t\\t\\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\\n\\n\\t\\t\\tif ( this[ 0 ].parentNode ) {\\n\\t\\t\\t\\twrap.insertBefore( this[ 0 ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\twrap.map( function() {\\n\\t\\t\\t\\tvar elem = this;\\n\\n\\t\\t\\t\\twhile ( elem.firstElementChild ) {\\n\\t\\t\\t\\t\\telem = elem.firstElementChild;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn elem;\\n\\t\\t\\t} ).append( this );\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\n\\twrapInner: function( html ) {\\n\\t\\tif ( jQuery.isFunction( html ) ) {\\n\\t\\t\\treturn this.each( function( i ) {\\n\\t\\t\\t\\tjQuery( this ).wrapInner( html.call( this, i ) );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn this.each( function() {\\n\\t\\t\\tvar self = jQuery( this ),\\n\\t\\t\\t\\tcontents = self.contents();\\n\\n\\t\\t\\tif ( contents.length ) {\\n\\t\\t\\t\\tcontents.wrapAll( html );\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.append( html );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t},\\n\\n\\twrap: function( html ) {\\n\\t\\tvar isFunction = jQuery.isFunction( html );\\n\\n\\t\\treturn this.each( function( i ) {\\n\\t\\t\\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\\n\\t\\t} );\\n\\t},\\n\\n\\tunwrap: function() {\\n\\t\\treturn this.parent().each( function() {\\n\\t\\t\\tif ( !jQuery.nodeName( this, \"body\" ) ) {\\n\\t\\t\\t\\tjQuery( this ).replaceWith( this.childNodes );\\n\\t\\t\\t}\\n\\t\\t} ).end();\\n\\t}\\n} );\\n\\n\\njQuery.expr.filters.hidden = function( elem ) {\\n\\treturn !jQuery.expr.filters.visible( elem );\\n};\\njQuery.expr.filters.visible = function( elem ) {\\n\\n\\t// Support: Opera <= 12.12\\n\\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\\n\\t// Use OR instead of AND as the element is not visible if either is true\\n\\t// See tickets #10406 and #13132\\n\\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\\n};\\n\\n\\n\\n\\nvar r20 = /%20/g,\\n\\trbracket = /\\\\[\\\\]$/,\\n\\trCRLF = /\\\\r?\\\\n/g,\\n\\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\\n\\trsubmittable = /^(?:input|select|textarea|keygen)/i;\\n\\nfunction buildParams( prefix, obj, traditional, add ) {\\n\\tvar name;\\n\\n\\tif ( jQuery.isArray( obj ) ) {\\n\\n\\t\\t// Serialize array item.\\n\\t\\tjQuery.each( obj, function( i, v ) {\\n\\t\\t\\tif ( traditional || rbracket.test( prefix ) ) {\\n\\n\\t\\t\\t\\t// Treat each array item as a scalar.\\n\\t\\t\\t\\tadd( prefix, v );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Item is non-scalar (array or object), encode its numeric index.\\n\\t\\t\\t\\tbuildParams(\\n\\t\\t\\t\\t\\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\\n\\t\\t\\t\\t\\tv,\\n\\t\\t\\t\\t\\ttraditional,\\n\\t\\t\\t\\t\\tadd\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\\n\\n\\t\\t// Serialize object item.\\n\\t\\tfor ( name in obj ) {\\n\\t\\t\\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\t// Serialize scalar item.\\n\\t\\tadd( prefix, obj );\\n\\t}\\n}\\n\\n// Serialize an array of form elements or a set of\\n// key/values into a query string\\njQuery.param = function( a, traditional ) {\\n\\tvar prefix,\\n\\t\\ts = [],\\n\\t\\tadd = function( key, value ) {\\n\\n\\t\\t\\t// If value is a function, invoke it and return its value\\n\\t\\t\\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\\n\\t\\t\\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\\n\\t\\t};\\n\\n\\t// Set traditional to true for jQuery <= 1.3.2 behavior.\\n\\tif ( traditional === undefined ) {\\n\\t\\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\\n\\t}\\n\\n\\t// If an array was passed in, assume that it is an array of form elements.\\n\\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\\n\\n\\t\\t// Serialize the form elements\\n\\t\\tjQuery.each( a, function() {\\n\\t\\t\\tadd( this.name, this.value );\\n\\t\\t} );\\n\\n\\t} else {\\n\\n\\t\\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\\n\\t\\t// did it), otherwise encode params recursively.\\n\\t\\tfor ( prefix in a ) {\\n\\t\\t\\tbuildParams( prefix, a[ prefix ], traditional, add );\\n\\t\\t}\\n\\t}\\n\\n\\t// Return the resulting serialization\\n\\treturn s.join( \"&\" ).replace( r20, \"+\" );\\n};\\n\\njQuery.fn.extend( {\\n\\tserialize: function() {\\n\\t\\treturn jQuery.param( this.serializeArray() );\\n\\t},\\n\\tserializeArray: function() {\\n\\t\\treturn this.map( function() {\\n\\n\\t\\t\\t// Can add propHook for \"elements\" to filter or add form elements\\n\\t\\t\\tvar elements = jQuery.prop( this, \"elements\" );\\n\\t\\t\\treturn elements ? jQuery.makeArray( elements ) : this;\\n\\t\\t} )\\n\\t\\t.filter( function() {\\n\\t\\t\\tvar type = this.type;\\n\\n\\t\\t\\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\\n\\t\\t\\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\\n\\t\\t\\t\\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\\n\\t\\t\\t\\t( this.checked || !rcheckableType.test( type ) );\\n\\t\\t} )\\n\\t\\t.map( function( i, elem ) {\\n\\t\\t\\tvar val = jQuery( this ).val();\\n\\n\\t\\t\\treturn val == null ?\\n\\t\\t\\t\\tnull :\\n\\t\\t\\t\\tjQuery.isArray( val ) ?\\n\\t\\t\\t\\t\\tjQuery.map( val, function( val ) {\\n\\t\\t\\t\\t\\t\\treturn { name: elem.name, value: val.replace( rCRLF, \"\\\\r\\\\n\" ) };\\n\\t\\t\\t\\t\\t} ) :\\n\\t\\t\\t\\t\\t{ name: elem.name, value: val.replace( rCRLF, \"\\\\r\\\\n\" ) };\\n\\t\\t} ).get();\\n\\t}\\n} );\\n\\n\\njQuery.ajaxSettings.xhr = function() {\\n\\ttry {\\n\\t\\treturn new window.XMLHttpRequest();\\n\\t} catch ( e ) {}\\n};\\n\\nvar xhrSuccessStatus = {\\n\\n\\t\\t// File protocol always yields status code 0, assume 200\\n\\t\\t0: 200,\\n\\n\\t\\t// Support: IE9\\n\\t\\t// #1450: sometimes IE returns 1223 when it should be 204\\n\\t\\t1223: 204\\n\\t},\\n\\txhrSupported = jQuery.ajaxSettings.xhr();\\n\\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\\nsupport.ajax = xhrSupported = !!xhrSupported;\\n\\njQuery.ajaxTransport( function( options ) {\\n\\tvar callback, errorCallback;\\n\\n\\t// Cross domain only allowed if supported through XMLHttpRequest\\n\\tif ( support.cors || xhrSupported && !options.crossDomain ) {\\n\\t\\treturn {\\n\\t\\t\\tsend: function( headers, complete ) {\\n\\t\\t\\t\\tvar i,\\n\\t\\t\\t\\t\\txhr = options.xhr();\\n\\n\\t\\t\\t\\txhr.open(\\n\\t\\t\\t\\t\\toptions.type,\\n\\t\\t\\t\\t\\toptions.url,\\n\\t\\t\\t\\t\\toptions.async,\\n\\t\\t\\t\\t\\toptions.username,\\n\\t\\t\\t\\t\\toptions.password\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Apply custom fields if provided\\n\\t\\t\\t\\tif ( options.xhrFields ) {\\n\\t\\t\\t\\t\\tfor ( i in options.xhrFields ) {\\n\\t\\t\\t\\t\\t\\txhr[ i ] = options.xhrFields[ i ];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Override mime type if needed\\n\\t\\t\\t\\tif ( options.mimeType && xhr.overrideMimeType ) {\\n\\t\\t\\t\\t\\txhr.overrideMimeType( options.mimeType );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// X-Requested-With header\\n\\t\\t\\t\\t// For cross-domain requests, seeing as conditions for a preflight are\\n\\t\\t\\t\\t// akin to a jigsaw puzzle, we simply never set it to be sure.\\n\\t\\t\\t\\t// (it can always be set on a per-request basis or even using ajaxSetup)\\n\\t\\t\\t\\t// For same-domain requests, won\\'t change header if already provided.\\n\\t\\t\\t\\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\\n\\t\\t\\t\\t\\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Set headers\\n\\t\\t\\t\\tfor ( i in headers ) {\\n\\t\\t\\t\\t\\txhr.setRequestHeader( i, headers[ i ] );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Callback\\n\\t\\t\\t\\tcallback = function( type ) {\\n\\t\\t\\t\\t\\treturn function() {\\n\\t\\t\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\t\\t\\tcallback = errorCallback = xhr.onload =\\n\\t\\t\\t\\t\\t\\t\\t\\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( type === \"abort\" ) {\\n\\t\\t\\t\\t\\t\\t\\t\\txhr.abort();\\n\\t\\t\\t\\t\\t\\t\\t} else if ( type === \"error\" ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE9\\n\\t\\t\\t\\t\\t\\t\\t\\t// On a manual native abort, IE9 throws\\n\\t\\t\\t\\t\\t\\t\\t\\t// errors on any property access that is not readyState\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( typeof xhr.status !== \"number\" ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete( 0, \"error\" );\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete(\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// File: protocol always yields status 0; see #8605, #14207\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.status,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.statusText\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tcomplete(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\txhrSuccessStatus[ xhr.status ] || xhr.status,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.statusText,\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// IE9 has no XHR2 but throws on binary (trac-11426)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// For XHR2 non-text, let the caller handle it (gh-2498)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t( xhr.responseType || \"text\" ) !== \"text\"  ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttypeof xhr.responseText !== \"string\" ?\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{ binary: xhr.response } :\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{ text: xhr.responseText },\\n\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.getAllResponseHeaders()\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Listen to events\\n\\t\\t\\t\\txhr.onload = callback();\\n\\t\\t\\t\\terrorCallback = xhr.onerror = callback( \"error\" );\\n\\n\\t\\t\\t\\t// Support: IE9\\n\\t\\t\\t\\t// Use onreadystatechange to replace onabort\\n\\t\\t\\t\\t// to handle uncaught aborts\\n\\t\\t\\t\\tif ( xhr.onabort !== undefined ) {\\n\\t\\t\\t\\t\\txhr.onabort = errorCallback;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\txhr.onreadystatechange = function() {\\n\\n\\t\\t\\t\\t\\t\\t// Check readyState before timeout as it changes\\n\\t\\t\\t\\t\\t\\tif ( xhr.readyState === 4 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Allow onerror to be called first,\\n\\t\\t\\t\\t\\t\\t\\t// but that will not handle a native abort\\n\\t\\t\\t\\t\\t\\t\\t// Also, save errorCallback to a variable\\n\\t\\t\\t\\t\\t\\t\\t// as xhr.onerror cannot be accessed\\n\\t\\t\\t\\t\\t\\t\\twindow.setTimeout( function() {\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\terrorCallback();\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Create the abort callback\\n\\t\\t\\t\\tcallback = callback( \"abort\" );\\n\\n\\t\\t\\t\\ttry {\\n\\n\\t\\t\\t\\t\\t// Do send the request (this may raise an exception)\\n\\t\\t\\t\\t\\txhr.send( options.hasContent && options.data || null );\\n\\t\\t\\t\\t} catch ( e ) {\\n\\n\\t\\t\\t\\t\\t// #14683: Only rethrow if this hasn\\'t been notified as an error yet\\n\\t\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tabort: function() {\\n\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\tcallback();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n} );\\n\\n\\n\\n\\n// Install script dataType\\njQuery.ajaxSetup( {\\n\\taccepts: {\\n\\t\\tscript: \"text/javascript, application/javascript, \" +\\n\\t\\t\\t\"application/ecmascript, application/x-ecmascript\"\\n\\t},\\n\\tcontents: {\\n\\t\\tscript: /\\\\b(?:java|ecma)script\\\\b/\\n\\t},\\n\\tconverters: {\\n\\t\\t\"text script\": function( text ) {\\n\\t\\t\\tjQuery.globalEval( text );\\n\\t\\t\\treturn text;\\n\\t\\t}\\n\\t}\\n} );\\n\\n// Handle cache\\'s special case and crossDomain\\njQuery.ajaxPrefilter( \"script\", function( s ) {\\n\\tif ( s.cache === undefined ) {\\n\\t\\ts.cache = false;\\n\\t}\\n\\tif ( s.crossDomain ) {\\n\\t\\ts.type = \"GET\";\\n\\t}\\n} );\\n\\n// Bind script tag hack transport\\njQuery.ajaxTransport( \"script\", function( s ) {\\n\\n\\t// This transport only deals with cross domain requests\\n\\tif ( s.crossDomain ) {\\n\\t\\tvar script, callback;\\n\\t\\treturn {\\n\\t\\t\\tsend: function( _, complete ) {\\n\\t\\t\\t\\tscript = jQuery( \"<script>\" ).prop( {\\n\\t\\t\\t\\t\\tcharset: s.scriptCharset,\\n\\t\\t\\t\\t\\tsrc: s.url\\n\\t\\t\\t\\t} ).on(\\n\\t\\t\\t\\t\\t\"load error\",\\n\\t\\t\\t\\t\\tcallback = function( evt ) {\\n\\t\\t\\t\\t\\t\\tscript.remove();\\n\\t\\t\\t\\t\\t\\tcallback = null;\\n\\t\\t\\t\\t\\t\\tif ( evt ) {\\n\\t\\t\\t\\t\\t\\t\\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Use native DOM manipulation to avoid our domManip AJAX trickery\\n\\t\\t\\t\\tdocument.head.appendChild( script[ 0 ] );\\n\\t\\t\\t},\\n\\t\\t\\tabort: function() {\\n\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\tcallback();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n} );\\n\\n\\n\\n\\nvar oldCallbacks = [],\\n\\trjsonp = /(=)\\\\?(?=&|$)|\\\\?\\\\?/;\\n\\n// Default jsonp settings\\njQuery.ajaxSetup( {\\n\\tjsonp: \"callback\",\\n\\tjsonpCallback: function() {\\n\\t\\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\\n\\t\\tthis[ callback ] = true;\\n\\t\\treturn callback;\\n\\t}\\n} );\\n\\n// Detect, normalize options and install callbacks for jsonp requests\\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\\n\\n\\tvar callbackName, overwritten, responseContainer,\\n\\t\\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\\n\\t\\t\\t\"url\" :\\n\\t\\t\\ttypeof s.data === \"string\" &&\\n\\t\\t\\t\\t( s.contentType || \"\" )\\n\\t\\t\\t\\t\\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\\n\\t\\t\\t\\trjsonp.test( s.data ) && \"data\"\\n\\t\\t);\\n\\n\\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\\n\\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\\n\\n\\t\\t// Get callback name, remembering preexisting value associated with it\\n\\t\\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\\n\\t\\t\\ts.jsonpCallback() :\\n\\t\\t\\ts.jsonpCallback;\\n\\n\\t\\t// Insert callback into url or form data\\n\\t\\tif ( jsonProp ) {\\n\\t\\t\\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\\n\\t\\t} else if ( s.jsonp !== false ) {\\n\\t\\t\\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\\n\\t\\t}\\n\\n\\t\\t// Use data converter to retrieve json after script execution\\n\\t\\ts.converters[ \"script json\" ] = function() {\\n\\t\\t\\tif ( !responseContainer ) {\\n\\t\\t\\t\\tjQuery.error( callbackName + \" was not called\" );\\n\\t\\t\\t}\\n\\t\\t\\treturn responseContainer[ 0 ];\\n\\t\\t};\\n\\n\\t\\t// Force json dataType\\n\\t\\ts.dataTypes[ 0 ] = \"json\";\\n\\n\\t\\t// Install callback\\n\\t\\toverwritten = window[ callbackName ];\\n\\t\\twindow[ callbackName ] = function() {\\n\\t\\t\\tresponseContainer = arguments;\\n\\t\\t};\\n\\n\\t\\t// Clean-up function (fires after converters)\\n\\t\\tjqXHR.always( function() {\\n\\n\\t\\t\\t// If previous value didn\\'t exist - remove it\\n\\t\\t\\tif ( overwritten === undefined ) {\\n\\t\\t\\t\\tjQuery( window ).removeProp( callbackName );\\n\\n\\t\\t\\t// Otherwise restore preexisting value\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twindow[ callbackName ] = overwritten;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Save back as free\\n\\t\\t\\tif ( s[ callbackName ] ) {\\n\\n\\t\\t\\t\\t// Make sure that re-using the options doesn\\'t screw things around\\n\\t\\t\\t\\ts.jsonpCallback = originalSettings.jsonpCallback;\\n\\n\\t\\t\\t\\t// Save the callback name for future use\\n\\t\\t\\t\\toldCallbacks.push( callbackName );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Call if it was a function and we have a response\\n\\t\\t\\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\\n\\t\\t\\t\\toverwritten( responseContainer[ 0 ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\tresponseContainer = overwritten = undefined;\\n\\t\\t} );\\n\\n\\t\\t// Delegate to script\\n\\t\\treturn \"script\";\\n\\t}\\n} );\\n\\n\\n\\n\\n// Argument \"data\" should be string of html\\n// context (optional): If specified, the fragment will be created in this context,\\n// defaults to document\\n// keepScripts (optional): If true, will include scripts passed in the html string\\njQuery.parseHTML = function( data, context, keepScripts ) {\\n\\tif ( !data || typeof data !== \"string\" ) {\\n\\t\\treturn null;\\n\\t}\\n\\tif ( typeof context === \"boolean\" ) {\\n\\t\\tkeepScripts = context;\\n\\t\\tcontext = false;\\n\\t}\\n\\tcontext = context || document;\\n\\n\\tvar parsed = rsingleTag.exec( data ),\\n\\t\\tscripts = !keepScripts && [];\\n\\n\\t// Single tag\\n\\tif ( parsed ) {\\n\\t\\treturn [ context.createElement( parsed[ 1 ] ) ];\\n\\t}\\n\\n\\tparsed = buildFragment( [ data ], context, scripts );\\n\\n\\tif ( scripts && scripts.length ) {\\n\\t\\tjQuery( scripts ).remove();\\n\\t}\\n\\n\\treturn jQuery.merge( [], parsed.childNodes );\\n};\\n\\n\\n// Keep a copy of the old load method\\nvar _load = jQuery.fn.load;\\n\\n/**\\n * Load a url into a page\\n */\\njQuery.fn.load = function( url, params, callback ) {\\n\\tif ( typeof url !== \"string\" && _load ) {\\n\\t\\treturn _load.apply( this, arguments );\\n\\t}\\n\\n\\tvar selector, type, response,\\n\\t\\tself = this,\\n\\t\\toff = url.indexOf( \" \" );\\n\\n\\tif ( off > -1 ) {\\n\\t\\tselector = jQuery.trim( url.slice( off ) );\\n\\t\\turl = url.slice( 0, off );\\n\\t}\\n\\n\\t// If it\\'s a function\\n\\tif ( jQuery.isFunction( params ) ) {\\n\\n\\t\\t// We assume that it\\'s the callback\\n\\t\\tcallback = params;\\n\\t\\tparams = undefined;\\n\\n\\t// Otherwise, build a param string\\n\\t} else if ( params && typeof params === \"object\" ) {\\n\\t\\ttype = \"POST\";\\n\\t}\\n\\n\\t// If we have elements to modify, make the request\\n\\tif ( self.length > 0 ) {\\n\\t\\tjQuery.ajax( {\\n\\t\\t\\turl: url,\\n\\n\\t\\t\\t// If \"type\" variable is undefined, then \"GET\" method will be used.\\n\\t\\t\\t// Make value of this field explicit since\\n\\t\\t\\t// user can override it through ajaxSetup method\\n\\t\\t\\ttype: type || \"GET\",\\n\\t\\t\\tdataType: \"html\",\\n\\t\\t\\tdata: params\\n\\t\\t} ).done( function( responseText ) {\\n\\n\\t\\t\\t// Save response for use in complete callback\\n\\t\\t\\tresponse = arguments;\\n\\n\\t\\t\\tself.html( selector ?\\n\\n\\t\\t\\t\\t// If a selector was specified, locate the right elements in a dummy div\\n\\t\\t\\t\\t// Exclude scripts to avoid IE \\'Permission Denied\\' errors\\n\\t\\t\\t\\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\\n\\n\\t\\t\\t\\t// Otherwise use the full result\\n\\t\\t\\t\\tresponseText );\\n\\n\\t\\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\\n\\t\\t// but they are ignored because response was set above.\\n\\t\\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\\n\\t\\t} ).always( callback && function( jqXHR, status ) {\\n\\t\\t\\tself.each( function() {\\n\\t\\t\\t\\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\t}\\n\\n\\treturn this;\\n};\\n\\n\\n\\n\\n// Attach a bunch of functions for handling common AJAX events\\njQuery.each( [\\n\\t\"ajaxStart\",\\n\\t\"ajaxStop\",\\n\\t\"ajaxComplete\",\\n\\t\"ajaxError\",\\n\\t\"ajaxSuccess\",\\n\\t\"ajaxSend\"\\n], function( i, type ) {\\n\\tjQuery.fn[ type ] = function( fn ) {\\n\\t\\treturn this.on( type, fn );\\n\\t};\\n} );\\n\\n\\n\\n\\njQuery.expr.filters.animated = function( elem ) {\\n\\treturn jQuery.grep( jQuery.timers, function( fn ) {\\n\\t\\treturn elem === fn.elem;\\n\\t} ).length;\\n};\\n\\n\\n\\n\\n/**\\n * Gets a window from an element\\n */\\nfunction getWindow( elem ) {\\n\\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\\n}\\n\\njQuery.offset = {\\n\\tsetOffset: function( elem, options, i ) {\\n\\t\\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\\n\\t\\t\\tposition = jQuery.css( elem, \"position\" ),\\n\\t\\t\\tcurElem = jQuery( elem ),\\n\\t\\t\\tprops = {};\\n\\n\\t\\t// Set position first, in-case top/left are set even on static elem\\n\\t\\tif ( position === \"static\" ) {\\n\\t\\t\\telem.style.position = \"relative\";\\n\\t\\t}\\n\\n\\t\\tcurOffset = curElem.offset();\\n\\t\\tcurCSSTop = jQuery.css( elem, \"top\" );\\n\\t\\tcurCSSLeft = jQuery.css( elem, \"left\" );\\n\\t\\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\\n\\t\\t\\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\\n\\n\\t\\t// Need to be able to calculate position if either\\n\\t\\t// top or left is auto and position is either absolute or fixed\\n\\t\\tif ( calculatePosition ) {\\n\\t\\t\\tcurPosition = curElem.position();\\n\\t\\t\\tcurTop = curPosition.top;\\n\\t\\t\\tcurLeft = curPosition.left;\\n\\n\\t\\t} else {\\n\\t\\t\\tcurTop = parseFloat( curCSSTop ) || 0;\\n\\t\\t\\tcurLeft = parseFloat( curCSSLeft ) || 0;\\n\\t\\t}\\n\\n\\t\\tif ( jQuery.isFunction( options ) ) {\\n\\n\\t\\t\\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\\n\\t\\t\\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\\n\\t\\t}\\n\\n\\t\\tif ( options.top != null ) {\\n\\t\\t\\tprops.top = ( options.top - curOffset.top ) + curTop;\\n\\t\\t}\\n\\t\\tif ( options.left != null ) {\\n\\t\\t\\tprops.left = ( options.left - curOffset.left ) + curLeft;\\n\\t\\t}\\n\\n\\t\\tif ( \"using\" in options ) {\\n\\t\\t\\toptions.using.call( elem, props );\\n\\n\\t\\t} else {\\n\\t\\t\\tcurElem.css( props );\\n\\t\\t}\\n\\t}\\n};\\n\\njQuery.fn.extend( {\\n\\toffset: function( options ) {\\n\\t\\tif ( arguments.length ) {\\n\\t\\t\\treturn options === undefined ?\\n\\t\\t\\t\\tthis :\\n\\t\\t\\t\\tthis.each( function( i ) {\\n\\t\\t\\t\\t\\tjQuery.offset.setOffset( this, options, i );\\n\\t\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tvar docElem, win,\\n\\t\\t\\telem = this[ 0 ],\\n\\t\\t\\tbox = { top: 0, left: 0 },\\n\\t\\t\\tdoc = elem && elem.ownerDocument;\\n\\n\\t\\tif ( !doc ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tdocElem = doc.documentElement;\\n\\n\\t\\t// Make sure it\\'s not a disconnected DOM node\\n\\t\\tif ( !jQuery.contains( docElem, elem ) ) {\\n\\t\\t\\treturn box;\\n\\t\\t}\\n\\n\\t\\tbox = elem.getBoundingClientRect();\\n\\t\\twin = getWindow( doc );\\n\\t\\treturn {\\n\\t\\t\\ttop: box.top + win.pageYOffset - docElem.clientTop,\\n\\t\\t\\tleft: box.left + win.pageXOffset - docElem.clientLeft\\n\\t\\t};\\n\\t},\\n\\n\\tposition: function() {\\n\\t\\tif ( !this[ 0 ] ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar offsetParent, offset,\\n\\t\\t\\telem = this[ 0 ],\\n\\t\\t\\tparentOffset = { top: 0, left: 0 };\\n\\n\\t\\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\\n\\t\\t// because it is its only offset parent\\n\\t\\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\\n\\n\\t\\t\\t// Assume getBoundingClientRect is there when computed position is fixed\\n\\t\\t\\toffset = elem.getBoundingClientRect();\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// Get *real* offsetParent\\n\\t\\t\\toffsetParent = this.offsetParent();\\n\\n\\t\\t\\t// Get correct offsets\\n\\t\\t\\toffset = this.offset();\\n\\t\\t\\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\\n\\t\\t\\t\\tparentOffset = offsetParent.offset();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add offsetParent borders\\n\\t\\t\\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\\n\\t\\t\\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\\n\\t\\t}\\n\\n\\t\\t// Subtract parent offsets and element margins\\n\\t\\treturn {\\n\\t\\t\\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\\n\\t\\t\\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\\n\\t\\t};\\n\\t},\\n\\n\\t// This method will return documentElement in the following cases:\\n\\t// 1) For the element inside the iframe without offsetParent, this method will return\\n\\t//    documentElement of the parent window\\n\\t// 2) For the hidden or detached element\\n\\t// 3) For body or html element, i.e. in case of the html node - it will return itself\\n\\t//\\n\\t// but those exceptions were never presented as a real life use-cases\\n\\t// and might be considered as more preferable results.\\n\\t//\\n\\t// This logic, however, is not guaranteed and can change at any point in the future\\n\\toffsetParent: function() {\\n\\t\\treturn this.map( function() {\\n\\t\\t\\tvar offsetParent = this.offsetParent;\\n\\n\\t\\t\\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\\n\\t\\t\\t\\toffsetParent = offsetParent.offsetParent;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn offsetParent || documentElement;\\n\\t\\t} );\\n\\t}\\n} );\\n\\n// Create scrollLeft and scrollTop methods\\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\\n\\tvar top = \"pageYOffset\" === prop;\\n\\n\\tjQuery.fn[ method ] = function( val ) {\\n\\t\\treturn access( this, function( elem, method, val ) {\\n\\t\\t\\tvar win = getWindow( elem );\\n\\n\\t\\t\\tif ( val === undefined ) {\\n\\t\\t\\t\\treturn win ? win[ prop ] : elem[ method ];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( win ) {\\n\\t\\t\\t\\twin.scrollTo(\\n\\t\\t\\t\\t\\t!top ? val : win.pageXOffset,\\n\\t\\t\\t\\t\\ttop ? val : win.pageYOffset\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\telem[ method ] = val;\\n\\t\\t\\t}\\n\\t\\t}, method, val, arguments.length );\\n\\t};\\n} );\\n\\n// Support: Safari<7-8+, Chrome<37-44+\\n// Add the top/left cssHooks using jQuery.fn.position\\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\\n// getComputedStyle returns percent when specified for top/left/bottom/right;\\n// rather than make the css module depend on the offset module, just check for it here\\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\\n\\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\\n\\t\\tfunction( elem, computed ) {\\n\\t\\t\\tif ( computed ) {\\n\\t\\t\\t\\tcomputed = curCSS( elem, prop );\\n\\n\\t\\t\\t\\t// If curCSS returns percentage, fallback to offset\\n\\t\\t\\t\\treturn rnumnonpx.test( computed ) ?\\n\\t\\t\\t\\t\\tjQuery( elem ).position()[ prop ] + \"px\" :\\n\\t\\t\\t\\t\\tcomputed;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t);\\n} );\\n\\n\\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\\n\\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\\n\\t\\tfunction( defaultExtra, funcName ) {\\n\\n\\t\\t// Margin is only for outerHeight, outerWidth\\n\\t\\tjQuery.fn[ funcName ] = function( margin, value ) {\\n\\t\\t\\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\\n\\t\\t\\t\\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\\n\\n\\t\\t\\treturn access( this, function( elem, type, value ) {\\n\\t\\t\\t\\tvar doc;\\n\\n\\t\\t\\t\\tif ( jQuery.isWindow( elem ) ) {\\n\\n\\t\\t\\t\\t\\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\\n\\t\\t\\t\\t\\t// isn\\'t a whole lot we can do. See pull request at this URL for discussion:\\n\\t\\t\\t\\t\\t// https://github.com/jquery/jquery/pull/764\\n\\t\\t\\t\\t\\treturn elem.document.documentElement[ \"client\" + name ];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Get document width or height\\n\\t\\t\\t\\tif ( elem.nodeType === 9 ) {\\n\\t\\t\\t\\t\\tdoc = elem.documentElement;\\n\\n\\t\\t\\t\\t\\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\\n\\t\\t\\t\\t\\t// whichever is greatest\\n\\t\\t\\t\\t\\treturn Math.max(\\n\\t\\t\\t\\t\\t\\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\\n\\t\\t\\t\\t\\t\\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\\n\\t\\t\\t\\t\\t\\tdoc[ \"client\" + name ]\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn value === undefined ?\\n\\n\\t\\t\\t\\t\\t// Get width or height on the element, requesting but not forcing parseFloat\\n\\t\\t\\t\\t\\tjQuery.css( elem, type, extra ) :\\n\\n\\t\\t\\t\\t\\t// Set width or height on the element\\n\\t\\t\\t\\t\\tjQuery.style( elem, type, value, extra );\\n\\t\\t\\t}, type, chainable ? margin : undefined, chainable, null );\\n\\t\\t};\\n\\t} );\\n} );\\n\\n\\njQuery.fn.extend( {\\n\\n\\tbind: function( types, data, fn ) {\\n\\t\\treturn this.on( types, null, data, fn );\\n\\t},\\n\\tunbind: function( types, fn ) {\\n\\t\\treturn this.off( types, null, fn );\\n\\t},\\n\\n\\tdelegate: function( selector, types, data, fn ) {\\n\\t\\treturn this.on( types, selector, data, fn );\\n\\t},\\n\\tundelegate: function( selector, types, fn ) {\\n\\n\\t\\t// ( namespace ) or ( selector, types [, fn] )\\n\\t\\treturn arguments.length === 1 ?\\n\\t\\t\\tthis.off( selector, \"**\" ) :\\n\\t\\t\\tthis.off( types, selector || \"**\", fn );\\n\\t},\\n\\tsize: function() {\\n\\t\\treturn this.length;\\n\\t}\\n} );\\n\\njQuery.fn.andSelf = jQuery.fn.addBack;\\n\\n\\n\\n\\n// Register as a named AMD module, since jQuery can be concatenated with other\\n// files that may use define, but not via a proper concatenation script that\\n// understands anonymous AMD modules. A named AMD is safest and most robust\\n// way to register. Lowercase jquery is used because AMD module names are\\n// derived from file names, and jQuery is normally delivered in a lowercase\\n// file name. Do this after creating the global so that if an AMD module wants\\n// to call noConflict to hide this version of jQuery, it will work.\\n\\n// Note that for maximum portability, libraries that are not jQuery should\\n// declare themselves as anonymous modules, and avoid setting a global if an\\n// AMD loader is present. jQuery is a special case. For more information, see\\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\\n\\nif ( true ) {\\n\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\\n\\t\\treturn jQuery;\\n\\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n}\\n\\n\\n\\nvar\\n\\n\\t// Map over jQuery in case of overwrite\\n\\t_jQuery = window.jQuery,\\n\\n\\t// Map over the $ in case of overwrite\\n\\t_$ = window.$;\\n\\njQuery.noConflict = function( deep ) {\\n\\tif ( window.$ === jQuery ) {\\n\\t\\twindow.$ = _$;\\n\\t}\\n\\n\\tif ( deep && window.jQuery === jQuery ) {\\n\\t\\twindow.jQuery = _jQuery;\\n\\t}\\n\\n\\treturn jQuery;\\n};\\n\\n// Expose jQuery and $ identifiers, even in AMD\\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\\n// and CommonJS for browser emulators (#13566)\\nif ( !noGlobal ) {\\n\\twindow.jQuery = window.$ = jQuery;\\n}\\n\\nreturn jQuery;\\n}));\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery/dist/jquery.js\\n// module id = 65\\n// module chunks = 0 1 2 3 5\\n//# sourceURL=webpack:///./~/jquery/dist/jquery.js?');\n},function(module,exports,__webpack_require__){eval(\"var listCacheClear = __webpack_require__(312),\\n    listCacheDelete = __webpack_require__(313),\\n    listCacheGet = __webpack_require__(314),\\n    listCacheHas = __webpack_require__(315),\\n    listCacheSet = __webpack_require__(316);\\n\\n/**\\n * Creates an list cache object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction ListCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `ListCache`.\\nListCache.prototype.clear = listCacheClear;\\nListCache.prototype['delete'] = listCacheDelete;\\nListCache.prototype.get = listCacheGet;\\nListCache.prototype.has = listCacheHas;\\nListCache.prototype.set = listCacheSet;\\n\\nmodule.exports = ListCache;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_ListCache.js\\n// module id = 66\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_ListCache.js?\")},function(module,exports,__webpack_require__){eval(\"var eq = __webpack_require__(152);\\n\\n/**\\n * Gets the index at which the `key` is found in `array` of key-value pairs.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} key The key to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction assocIndexOf(array, key) {\\n  var length = array.length;\\n  while (length--) {\\n    if (eq(array[length][0], key)) {\\n      return length;\\n    }\\n  }\\n  return -1;\\n}\\n\\nmodule.exports = assocIndexOf;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_assocIndexOf.js\\n// module id = 67\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_assocIndexOf.js?\")},function(module,exports,__webpack_require__){eval(\"var isKeyable = __webpack_require__(309);\\n\\n/**\\n * Gets the data for `map`.\\n *\\n * @private\\n * @param {Object} map The map to query.\\n * @param {string} key The reference key.\\n * @returns {*} Returns the map data.\\n */\\nfunction getMapData(map, key) {\\n  var data = map.__data__;\\n  return isKeyable(key)\\n    ? data[typeof key == 'string' ? 'string' : 'hash']\\n    : data.map;\\n}\\n\\nmodule.exports = getMapData;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getMapData.js\\n// module id = 68\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getMapData.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30);\\n\\n/* Built-in method references that are verified to be native. */\\nvar nativeCreate = getNative(Object, 'create');\\n\\nmodule.exports = nativeCreate;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_nativeCreate.js\\n// module id = 69\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_nativeCreate.js?\")},function(module,exports,__webpack_require__){eval(\"var isSymbol = __webpack_require__(74);\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Converts `value` to a string key if it's not a string or symbol.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {string|symbol} Returns the key.\\n */\\nfunction toKey(value) {\\n  if (typeof value == 'string' || isSymbol(value)) {\\n    return value;\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\nmodule.exports = toKey;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_toKey.js\\n// module id = 70\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_toKey.js?\")},function(module,exports){eval(\"/**\\n * This method returns the first argument it receives.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Util\\n * @param {*} value Any value.\\n * @returns {*} Returns `value`.\\n * @example\\n *\\n * var object = { 'a': 1 };\\n *\\n * console.log(_.identity(object) === object);\\n * // => true\\n */\\nfunction identity(value) {\\n  return value;\\n}\\n\\nmodule.exports = identity;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/identity.js\\n// module id = 71\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/identity.js?\")},function(module,exports,__webpack_require__){eval(\"var isFunction = __webpack_require__(155),\\n    isLength = __webpack_require__(102);\\n\\n/**\\n * Checks if `value` is array-like. A value is considered array-like if it's\\n * not a function and has a `value.length` that's an integer greater than or\\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\\n * @example\\n *\\n * _.isArrayLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLike(document.body.children);\\n * // => true\\n *\\n * _.isArrayLike('abc');\\n * // => true\\n *\\n * _.isArrayLike(_.noop);\\n * // => false\\n */\\nfunction isArrayLike(value) {\\n  return value != null && isLength(value.length) && !isFunction(value);\\n}\\n\\nmodule.exports = isArrayLike;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isArrayLike.js\\n// module id = 72\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isArrayLike.js?\")},function(module,exports){eval(\"/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return value != null && (type == 'object' || type == 'function');\\n}\\n\\nmodule.exports = isObject;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isObject.js\\n// module id = 73\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isObject.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGetTag = __webpack_require__(52),\\n    isObjectLike = __webpack_require__(41);\\n\\n/** `Object#toString` result references. */\\nvar symbolTag = '[object Symbol]';\\n\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' ||\\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\\n}\\n\\nmodule.exports = isSymbol;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isSymbol.js\\n// module id = 74\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isSymbol.js?\")},,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Utils = {\\n\\n    loadScript: function loadScript(src, async) {\\n        (function () {\\n            var ga = document.createElement('script');ga.type = 'text/javascript';ga.async = true;\\n            ga.src = src;\\n            ga.async = async;\\n            var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga, s);\\n        })();\\n    },\\n\\n    scriptLoaded: function scriptLoaded(src) {\\n        var len = $('script').filter(function () {\\n            return $(this).attr('src') == src;\\n        }).length;\\n\\n        return len > 0;\\n    },\\n\\n    parseJsonString: function parseJsonString(jsonText) {\\n        try {\\n            return $.parseJSON(jsonText);\\n        } catch (e) {}\\n        return {};\\n    },\\n\\n    formatPostLink: function formatPostLink(entryId) {\\n        return 'http://' + _page2.default.getDomain() + '/gag/' + entryId;\\n    },\\n\\n    formatProtocolForUrl: function formatProtocolForUrl(url) {\\n        // replace endPoint protocol by current page protocol\\n        return url.replace(/(^.*http:)|(^.*https:)/g, location.protocol);\\n    },\\n\\n    textSearch: function textSearch(inputElement, container, searchElement, config) {\\n        if (typeof config == 'undefined') {\\n            config = {};\\n        }\\n        $(inputElement).keyup(function () {\\n            var filter = $(this).val();\\n            var count = 0;\\n\\n            $(container).each(function () {\\n                var index = -1;\\n                var text = $(this).find(searchElement).text();\\n                if ((index = text.search(new RegExp(filter, \\\"i\\\"))) < 0) {\\n                    $(this).hide();\\n                } else {\\n                    $(this).show();\\n\\n                    if (typeof config.highlight != 'undefined' && config.highlight) {\\n                        var newText1 = text.substr(0, index) + \\\"<strong>\\\";\\n                        var newText2 = text.substr(index, filter.length) + \\\"</strong>\\\" + text.substr(index + filter.length, text.length);\\n                        $(this).find(searchElement).html(newText1 + newText2);\\n                    }\\n\\n                    count++;\\n                }\\n            });\\n        });\\n    },\\n\\n    getUrlParam: function getUrlParam(name) {\\n        return decodeURI((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, null])[1]);\\n    },\\n\\n    /**\\n     * Check current focused element is input\\n     * @returns {bool}\\n     */\\n    isCurrentlyFocusedInTypeable: function isCurrentlyFocusedInTypeable() {\\n        var focusedElementTagName = $(document.activeElement).prop(\\\"tagName\\\").toLowerCase();\\n        return focusedElementTagName == 'input' || focusedElementTagName == 'textarea';\\n    },\\n\\n    /**\\n     * Turns 12345 into 12,345\\n     * From: http://phpjs.org/functions/number_format/\\n     * @param number\\n     * @param decimals\\n     * @param dec_point\\n     * @param thousands_sep\\n     * @returns {string}\\n     */\\n    formatNumber: function formatNumber(number, decimals, dec_point, thousands_sep) {\\n        // Strip all characters but numerical ones.\\n        if (typeof decimals === 'undefined') decimals = 0;\\n        number = (number + '').replace(/[^0-9+\\\\-Ee.]/g, '');\\n        var n = !isFinite(+number) ? 0 : +number,\\n            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\\n            sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,\\n            dec = typeof dec_point === 'undefined' ? '.' : dec_point,\\n            s,\\n            toFixedFix = function toFixedFix(n, prec) {\\n            var k = Math.pow(10, prec);\\n            return '' + Math.round(n * k) / k;\\n        };\\n        // Fix for IE parseFloat(0.55).toFixed(0) = 0;\\n        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\\n        if (s[0].length > 3) {\\n            s[0] = s[0].replace(/\\\\B(?=(?:\\\\d{3})+(?!\\\\d))/g, sep);\\n        }\\n        if ((s[1] || '').length < prec) {\\n            s[1] = s[1] || '';\\n            s[1] += new Array(prec - s[1].length + 1).join('0');\\n        }\\n        return s.join(dec);\\n    },\\n\\n    cookieCheckKey: 'cchk',\\n    isCookieEnabled: function isCookieEnabled() {\\n        var cookie = $.cookie(this.cookieCheckKey);\\n        if (cookie != null) return true;\\n\\n        $.cookie(this.cookieCheckKey, 1, { duration: 1000 });\\n        cookie = $.cookie(this.cookieCheckKey);\\n        if (cookie != null) return true;\\n        return false;\\n    },\\n\\n    formatSecondToString: function formatSecondToString(seconds) {\\n\\n        var strings = [];\\n\\n        var hours = Math.floor(seconds / 3600);\\n        if (hours > 0) {\\n            var hourStr = hours > 1 ? 'hours' : 'hour';\\n            strings.push(hours + \\\" \\\" + hourStr);\\n            seconds = seconds - hours * 3600;\\n        }\\n\\n        var minutes = Math.floor(seconds / 60);\\n        if (minutes > 0) {\\n            var minuteStr = minutes > 1 ? 'minutes' : 'minute';\\n            strings.push(minutes + \\\" \\\" + minuteStr);\\n            seconds = seconds - minutes * 3600;\\n        }\\n\\n        if (seconds > 0) {\\n            var secondStr = seconds > 1 ? 'seconds' : 'second';\\n            strings.push(seconds + \\\" \\\" + secondStr);\\n        }\\n\\n        return strings.join(\\\" \\\");\\n    },\\n\\n    isMobileDevice: function isMobileDevice() {\\n        return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\\n        );\\n    },\\n\\n    arrayChunk: function arrayChunk(arr, chunkSize) {\\n        var groups = [],\\n            i;\\n        for (i = 0; i < arr.length; i += chunkSize) {\\n            groups.push(arr.slice(i, i + chunkSize));\\n        }\\n        return groups;\\n    },\\n\\n    getCurrentEntryId: function getCurrentEntryId() {\\n        var path = document.location.pathname;\\n        return path.split('/gag/')[1];\\n    }\\n};\\n\\nmodule.exports = Utils;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/utils.js\\n// module id = 80\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/utils.js?\")},,,,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs) {'use strict';\\n\\nvar _base = __webpack_require__(129);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar User = $.extend({}, new _base2.default(), function () {\\n\\n    var _self = {\\n        _isLoggedIn: null,\\n        _user: null\\n    };\\n\\n    return {\\n        init: function init() {\\n            _self._user = Configs.get('user');\\n        },\\n        isLoggedIn: function isLoggedIn(doRedirect, next) {\\n            _self._isLoggedIn = this.getUserId() > 0;\\n\\n            if (doRedirect && !_self._isLoggedIn) {\\n                var url = 'https://' + _page2.default.getDomain() + '/login';\\n                if (next) {\\n                    url += '?next=' + next; //encodeURIComponent(next);\\n                }\\n                _page2.default.load(url);\\n            }\\n\\n            return _self._isLoggedIn;\\n        },\\n\\n        getUsername: function getUsername() {\\n            return _self._user && _self._user.username ? _self._user.username : '';\\n        },\\n\\n        getUserId: function getUserId() {\\n            return _self._user && _self._user.id ? _self._user.id : 0;\\n        },\\n\\n        getAccountId: function getAccountId() {\\n            return _self._user && _self._user.account_id ? _self._user.account_id : 0;\\n        }\\n    };\\n}());\\n\\nmodule.exports = User;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/user.js\\n// module id = 93\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/user.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30),\\n    root = __webpack_require__(27);\\n\\n/* Built-in method references that are verified to be native. */\\nvar Map = getNative(root, 'Map');\\n\\nmodule.exports = Map;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Map.js\\n// module id = 94\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Map.js?\")},function(module,exports,__webpack_require__){eval(\"var mapCacheClear = __webpack_require__(317),\\n    mapCacheDelete = __webpack_require__(318),\\n    mapCacheGet = __webpack_require__(319),\\n    mapCacheHas = __webpack_require__(320),\\n    mapCacheSet = __webpack_require__(321);\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = mapCacheClear;\\nMapCache.prototype['delete'] = mapCacheDelete;\\nMapCache.prototype.get = mapCacheGet;\\nMapCache.prototype.has = mapCacheHas;\\nMapCache.prototype.set = mapCacheSet;\\n\\nmodule.exports = MapCache;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_MapCache.js\\n// module id = 95\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_MapCache.js?\")},function(module,exports,__webpack_require__){eval(\"var MapCache = __webpack_require__(95),\\n    setCacheAdd = __webpack_require__(329),\\n    setCacheHas = __webpack_require__(330);\\n\\n/**\\n *\\n * Creates an array cache object to store unique values.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [values] The values to cache.\\n */\\nfunction SetCache(values) {\\n  var index = -1,\\n      length = values == null ? 0 : values.length;\\n\\n  this.__data__ = new MapCache;\\n  while (++index < length) {\\n    this.add(values[index]);\\n  }\\n}\\n\\n// Add methods to `SetCache`.\\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\\nSetCache.prototype.has = setCacheHas;\\n\\nmodule.exports = SetCache;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_SetCache.js\\n// module id = 96\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_SetCache.js?\")},function(module,exports){eval(\"/**\\n * A specialized version of `_.map` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction arrayMap(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = iteratee(array[index], index, array);\\n  }\\n  return result;\\n}\\n\\nmodule.exports = arrayMap;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayMap.js\\n// module id = 97\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayMap.js?\")},function(module,exports){eval(\"/**\\n * Checks if a `cache` value for `key` exists.\\n *\\n * @private\\n * @param {Object} cache The cache to query.\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction cacheHas(cache, key) {\\n  return cache.has(key);\\n}\\n\\nmodule.exports = cacheHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_cacheHas.js\\n// module id = 98\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_cacheHas.js?\")},function(module,exports,__webpack_require__){eval(\"var isArray = __webpack_require__(19),\\n    isSymbol = __webpack_require__(74);\\n\\n/** Used to match property names within property paths. */\\nvar reIsDeepProp = /\\\\.|\\\\[(?:[^[\\\\]]*|([\\\"'])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*?\\\\1)\\\\]/,\\n    reIsPlainProp = /^\\\\w*$/;\\n\\n/**\\n * Checks if `value` is a property name and not a property path.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {Object} [object] The object to query keys on.\\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\\n */\\nfunction isKey(value, object) {\\n  if (isArray(value)) {\\n    return false;\\n  }\\n  var type = typeof value;\\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\\n      value == null || isSymbol(value)) {\\n    return true;\\n  }\\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\\n    (object != null && value in Object(object));\\n}\\n\\nmodule.exports = isKey;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isKey.js\\n// module id = 99\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isKey.js?\")},function(module,exports){eval(\"/**\\n * Converts `set` to an array of its values.\\n *\\n * @private\\n * @param {Object} set The set to convert.\\n * @returns {Array} Returns the values.\\n */\\nfunction setToArray(set) {\\n  var index = -1,\\n      result = Array(set.size);\\n\\n  set.forEach(function(value) {\\n    result[++index] = value;\\n  });\\n  return result;\\n}\\n\\nmodule.exports = setToArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_setToArray.js\\n// module id = 100\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_setToArray.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIsArguments = __webpack_require__(271),\\n    isObjectLike = __webpack_require__(41);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n\\n/**\\n * Checks if `value` is likely an `arguments` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArguments(function() { return arguments; }());\\n * // => true\\n *\\n * _.isArguments([1, 2, 3]);\\n * // => false\\n */\\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\\n    !propertyIsEnumerable.call(value, 'callee');\\n};\\n\\nmodule.exports = isArguments;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isArguments.js\\n// module id = 101\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isArguments.js?\")},function(module,exports){eval(\"/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/**\\n * Checks if `value` is a valid array-like length.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\\n * @example\\n *\\n * _.isLength(3);\\n * // => true\\n *\\n * _.isLength(Number.MIN_VALUE);\\n * // => false\\n *\\n * _.isLength(Infinity);\\n * // => false\\n *\\n * _.isLength('3');\\n * // => false\\n */\\nfunction isLength(value) {\\n  return typeof value == 'number' &&\\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\\n}\\n\\nmodule.exports = isLength;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isLength.js\\n// module id = 102\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isLength.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayLikeKeys = __webpack_require__(263),\\n    baseKeys = __webpack_require__(278),\\n    isArrayLike = __webpack_require__(72);\\n\\n/**\\n * Creates an array of the own enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects. See the\\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * for more details.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keys(new Foo);\\n * // => ['a', 'b'] (iteration order is not guaranteed)\\n *\\n * _.keys('hi');\\n * // => ['0', '1']\\n */\\nfunction keys(object) {\\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\\n}\\n\\nmodule.exports = keys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/keys.js\\n// module id = 103\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/keys.js?\")},,,function(module,exports){eval(\"module.exports = function(module) {\\r\\n\\tif(!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tmodule.children = [];\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n}\\r\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// (webpack)/buildin/module.js\\n// module id = 106\\n// module chunks = 0 1\\n//# sourceURL=webpack:///(webpack)/buildin/module.js?\")},,,,,,function(module,exports){eval(\"'use strict';\\n\\nvar LocalStorageUtils = {\\n\\n    storageImpl: {},\\n\\n    nonPersistentLS: {\\n        structureLocalStorage: {},\\n\\n        setItem: function setItem(key, value) {\\n            this.structureLocalStorage[key] = value;\\n        },\\n\\n        getItem: function getItem(key) {\\n            if (typeof this.structureLocalStorage[key] != 'undefined') {\\n                return this.structureLocalStorage[key];\\n            } else {\\n                return null;\\n            }\\n        },\\n\\n        removeItem: function removeItem(key) {\\n            this.structureLocalStorage[key] = undefined;\\n        }\\n    },\\n\\n    hasLocalStorage: function hasLocalStorage() {\\n        var test = 'test';\\n        try {\\n            localStorage.setItem(test, test);\\n            localStorage.removeItem(test);\\n            return true;\\n        } catch (e) {\\n            return false;\\n        }\\n    },\\n    getStore: function getStore() {\\n        this.storageImpl = this.nonPersistentLS;\\n        if (this.hasLocalStorage()) {\\n            this.storageImpl = localStorage;\\n        }\\n        return this.storageImpl;\\n    }\\n};\\n\\nmodule.exports = LocalStorageUtils;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/core/src/js/utils/LocalStorageUtils.js\\n// module id = 112\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./static/main/core/src/js/utils/LocalStorageUtils.js?\")},,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Configs) {'use strict';\\n\\nvar Piwik = {\\n    /**\\n     * for internal use only\\n     */\\n    push: function push(callParams) {\\n        try {\\n            if (!Configs.get('configs').piwikEnabled) {\\n                return;\\n            }\\n\\n            window._paq = window._paq || [];\\n            window._paq.push(callParams);\\n        } catch (e) {}\\n    },\\n\\n    trackEvent: function trackEvent(category, action, name, value, cvars) {\\n\\n        // always get current url as piwik report url\\n        this.push(['setCustomUrl', document.location.href]);\\n\\n        cvars = cvars || {};\\n        var i = 0;\\n        var self = this;\\n        Object.keys(cvars).forEach(function (key) {\\n            self.push(['setCustomVariable', ++i, key, cvars[key], 'event']);\\n        });\\n\\n        if (value == undefined) {\\n            // assign default value\\n            value = 1;\\n        }\\n\\n        this.push(['trackEvent', category, action, name, value]);\\n\\n        // clear custom vars after sending event\\n        for (i = 1; i <= Object.keys(cvars).length; i++) {\\n            self.push(['deleteCustomVariable', i, 'event']);\\n        }\\n    },\\n\\n    setUserId: function setUserId(userId) {\\n        this.push(['setUserId', \\\"\\\" + userId]);\\n    },\\n\\n    trackPageView: function trackPageView() {\\n        this.push(['trackPageView']);\\n    }\\n};\\n\\nmodule.exports = Piwik;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/Piwik.js\\n// module id = 116\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/Piwik.js?\")},,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(LocalStorageUtils, $) {'use strict';\\n\\n/**\\n *\\n * Send request to somewhere (internal / external service) for tracking usage and stat\\n *\\n */\\nvar TrackUtils = {\\n\\n    uniqueStoreKey: '_tuv',\\n    uniqueStoreMax: 100,\\n    trackUrl: 'http://t.9gag.com/img.gif',\\n    rlogTrackUrl: '//web-t.9gag.com/img.gif',\\n    rlogUrl: '//web-t.9gag.com/m.gif',\\n    appId: 'web.9gag.desktop.release',\\n    appVersion: '0',\\n\\n    _entryIDsBuffer: {},\\n    _store: null,\\n\\n    init: function init(options) {\\n        this.uniqueStoreKey = options.uniqueStoreKey || this.uniqueStoreKey;\\n        this.uniqueStoreMax = options.uniqueStoreMax || this.uniqueStoreMax;\\n        this.trackUrl = options.trackUrl || this.trackUrl;\\n        this.rlogTrackUrl = options.rlogTrackUrl || this.rlogTrackUrl;\\n        this.rlogUrl = options.rlogUrl || this.rlogUrl;\\n        this.appId = options.appId || this.appId;\\n        this.appVersion = options.appVersion || this.appVersion;\\n    },\\n\\n    /**\\n     * Return true if the key is not in the unique and save it.  Return false if already in the store.\\n     * @param key\\n     * @private\\n     */\\n    _checkUnique: function _checkUnique(key) {\\n        var historyJsonStr = this._getStore().getItem(this.uniqueStoreKey);\\n        if (historyJsonStr == undefined || historyJsonStr == null) historyJsonStr = \\\"[]\\\";\\n\\n        var historyArr = JSON.parse(historyJsonStr);\\n        if (historyArr.indexOf(key) == -1) {\\n            if (historyArr.length >= this.uniqueStoreMax) {\\n                historyArr.shift();\\n            }\\n            historyArr.push(key);\\n            this._getStore().setItem(this.uniqueStoreKey, JSON.stringify(historyArr));\\n            return true;\\n        }\\n        return false;\\n    },\\n\\n    /**\\n     * Return localstorage if exist else return Object as polyfill\\n     * @private\\n     */\\n    _getStore: function _getStore() {\\n        if (this._store) {\\n            return this._store;\\n        }\\n        this._store = LocalStorageUtils.getStore();\\n        return this._store;\\n    },\\n\\n    /**\\n     * Fire unique viewed event\\n     * @param options object\\n     * {\\n     *      label      => additional info description\\n     *      labelValue => addtional info\\n     *      platform   => trigger plaform [d=desktop | m=mobile web | iphone | ipad | android | admin]\\n     *      entry      => entryId (comma separated list)\\n     *      view       => view type to trigger [l=list | p=post | o=overlay]\\n     * }\\n     */\\n    uniqueViewed: function uniqueViewed(options) {\\n        var action = 'unique-viewed';\\n        if (typeof options.entry == \\\"undefined\\\") return;\\n        var idsStr = options.entry || \\\"\\\";\\n        idsStr += \\\"\\\";\\n        var ids = idsStr.split(',');\\n        var uniqueIds = [];\\n\\n        // get non-tracked ids\\n        for (var i = 0; i < ids.length; i++) {\\n            if (TrackUtils._checkUnique(ids[i])) {\\n                uniqueIds.push(ids[i]);\\n            }\\n        }\\n\\n        if (ids.length > 0 && uniqueIds.length > 0) {\\n            options['entry'] = uniqueIds.join(',');\\n            TrackUtils.event(action, 'v', options);\\n        }\\n    },\\n\\n    /**\\n     * track event and action\\n     * action  => e.g. post\\n     * value   => e.g. c(click)\\n     * options: {\\n     *      label      => additional info description\\n     *      labelValue => addtional info\\n     *      platform   => trigger plaform [d=desktop | m=mobile web | iphone | ipad | android | admin]\\n     *      entry      => entryId\\n     *      view       => view type to trigger [l=list | p=post | o=overlay]\\n     * }\\n     */\\n    event: function event(action, value, options) {\\n        var params = {\\n            'action': action,\\n            'value': value,\\n            'ref': '',\\n            'label': typeof options.label === \\\"undefined\\\" ? '' : options.label,\\n            'labelValue': typeof options.labelValue === \\\"undefined\\\" ? '' : options.labelValue,\\n            'platform': typeof options.platform === \\\"undefined\\\" ? '' : options.platform,\\n            'entry': typeof options.entry === \\\"undefined\\\" ? '' : options.entry,\\n            'user': typeof options.user === \\\"undefined\\\" ? '' : options.user,\\n            'view': typeof options.view === \\\"undefined\\\" ? '' : options.view\\n        };\\n        params.ref = TrackUtils._getQueryStringParam('ref');\\n\\n        var img1 = new Image();\\n        img1.src = TrackUtils._formatUrl(params);\\n\\n        var img2 = new Image();\\n        img2.src = TrackUtils._formatUrl(params, TrackUtils.rlogTrackUrl);\\n    },\\n\\n    _getQueryStringParam: function _getQueryStringParam(key) {\\n        var url = window.location.href;\\n        var keysValues = url.split(/[\\\\?&]+/);\\n        for (var i = 0; i < keysValues.length; i++) {\\n            var keyValue = keysValues[i].split(\\\"=\\\");\\n            if (keyValue[0] == key) {\\n                return keyValue[1];\\n            }\\n        }\\n        return '';\\n    },\\n\\n    _formatUrl: function _formatUrl(paramObj, baseUrl) {\\n        var reqUrl = baseUrl || TrackUtils.trackUrl;\\n        var queryString = '';\\n        var paramArr = [];\\n\\n        if (paramObj) {\\n            if (paramObj.action != undefined && paramObj.action != null) {\\n                paramArr.push('a=' + encodeURIComponent(paramObj.action));\\n            }\\n            if (paramObj.value != undefined && paramObj.value != null) {\\n                paramArr.push('v=' + encodeURIComponent(paramObj.value));\\n            }\\n            if (paramObj.ref != undefined && paramObj.ref != null) {\\n                paramArr.push('ref=' + encodeURIComponent(paramObj.ref));\\n            }\\n            if (paramObj.label != undefined && paramObj.label != null) {\\n                paramArr.push('lbl=' + encodeURIComponent(paramObj.label));\\n            }\\n            if (paramObj.labelValue != undefined && paramObj.labelValue != null) {\\n                paramArr.push('lblv=' + encodeURIComponent(paramObj.labelValue));\\n            }\\n            if (paramObj.platform != undefined && paramObj.platform != null) {\\n                paramArr.push('p=' + encodeURIComponent(paramObj.platform));\\n            }\\n            if (paramObj.entry != undefined && paramObj.entry != null) {\\n                paramArr.push('e=' + encodeURIComponent(paramObj.entry));\\n            }\\n            if (paramObj.user != undefined && paramObj.user != null) {\\n                paramArr.push('u=' + encodeURIComponent(paramObj.user));\\n            }\\n            if (paramObj.view != undefined && paramObj.view != null) {\\n                paramArr.push('w=' + encodeURIComponent(paramObj.view));\\n            }\\n        }\\n\\n        paramArr.push('url=' + encodeURIComponent(TrackUtils._getUrl()));\\n        paramArr.push('referrer=' + encodeURIComponent(TrackUtils._getReferrer()));\\n        paramArr.push('t=' + encodeURIComponent(TrackUtils._getTime()));\\n\\n        for (var i = 0; i < paramArr.length; i++) {\\n            queryString += paramArr[i] + \\\"&\\\";\\n        }\\n\\n        reqUrl += \\\"?\\\" + queryString;\\n\\n        return reqUrl;\\n    },\\n\\n    _getUrl: function _getUrl() {\\n        return location.href;\\n    },\\n\\n    _getReferrer: function _getReferrer() {\\n        return document.referrer;\\n    },\\n\\n    _getTime: function _getTime() {\\n        var now = new Date();\\n        var nowUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());\\n        var ts = Math.round(nowUTC.getTime() / 1000);\\n        return ts;\\n    },\\n\\n    /********** RLog BEGIN **********/\\n    logTime: function logTime(key, timeMillis) {\\n        /**\\n         * Use RLog to track time used for processing\\n         */\\n        var countryCode = $.cookie('____lo') || 'O1'; // track by individual countries\\n        var paramObj = {\\n            'a': TrackUtils.appId, // app ID\\n            'v': parseInt(TrackUtils.appVersion), // app version\\n            't': Math.round(timeMillis), // time in millisecond\\n            'k': key + '.' + countryCode, // RLog key\\n            'g': 'USER_EXPERIENCE' // RLog key group\\n        };\\n\\n        var url = TrackUtils.rlogUrl + \\\"?\\\" + $.param(paramObj);\\n        var img = new Image();\\n        img.src = url;\\n    },\\n\\n    logCount: function logCount(key, count) {\\n        /**\\n         * Use RLog to track time used for processing\\n         */\\n        var countryCode = $.cookie('____lo') || 'O1'; // track by individual countries\\n        var paramObj = {\\n            'a': TrackUtils.appId, // app ID\\n            'v': parseInt(TrackUtils.appVersion), // app version\\n            'c': count, // count to increment\\n            'k': key + '.' + countryCode, // RLog key\\n            'g': 'USER_EXPERIENCE', // RLog key group\\n            '_uniq': Math.random() + $.now()\\n        };\\n\\n        var url = TrackUtils.rlogUrl + \\\"?\\\" + $.param(paramObj);\\n        var img = new Image();\\n        img.src = url;\\n    },\\n\\n    profileUrlLoadTime: function profileUrlLoadTime(url, key) {\\n        /**\\n         * Timing how long it takes to load an image\\n         */\\n\\n        var startTime = performance.now();\\n        var img = new Image();\\n        img.onload = function () {\\n            var loadtime = performance.now() - startTime; // preventing browser cache\\n            TrackUtils.logTime('WEB_LOAD_' + key, loadtime);\\n        };\\n        img.src = url;\\n    },\\n\\n    downloadFail: function downloadFail(src) {\\n        setTimeout(function () {\\n            TrackUtils.logCount('DOWNLOAD_FAIL', 1);\\n        }, 1);\\n    },\\n\\n    injectEntryImageOnError: function injectEntryImageOnError() {\\n        var entryContainer = $(GAG.PostController.selectors.CONTAINER);\\n        var entryImage = entryContainer.find('.post-container img');\\n\\n        $(entryImage).one(\\\"error\\\", function () {\\n            var src = $(this).attr('src');\\n            TrackUtils.downloadFail(src);\\n        });\\n    }\\n    /********** RLog END **********/\\n\\n};\\n\\nmodule.exports = TrackUtils;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(112), __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/core/src/js/utils/TrackUtils.js\\n// module id = 127\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./static/main/core/src/js/utils/TrackUtils.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, GA, ModuleFactory, Configs, Utils) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/* \\nController for 6.0 Overlay Controller page \\n*/\\n/**\\n * Ideally, individual overlay specific triggering etc. should be handled by their own controller instead\\n * This controller should provide commands common for all overlays, for example, removing 'hide' class from the overlay div\\n *\\n * This controller binds also a generic close button for overlays for easy use.\\n * If an overlay has an object whose class contains 'badge-overlay-close', it will be binded a close action on its click event\\n */\\nvar OverlayController = $.extend({}, new _base2.default(), {\\n    _isShown: false,\\n    _hideUsingBackground: true, // sets whether clicking on the overlay background will trigger closing of the overlay\\n    _hideAllOverlayReturnToUpload: false, // show upload overlay after hide all overlay\\n\\n    selectors: {\\n        OVERLAY: '#overlay-container', // overlay background selector\\n        OVERLAY_COMPONENT: 'section', // individual overlay selectors\\n        OVERLAY_CLOSE_BUTTON: '.badge-overlay-close', // overlay close button selector\\n\\n        // these selectors are not used in this controller\\n        // but serves as a centralized registry to store these selectors for other controllers to use\\n        OVERLAY_COMPONENT_IDLE_POPUP: '#jsid-idle-popup-container',\\n        OVERLAY_COMPONENT_UPLOAD: '.badge-overlay-upload',\\n        OVERLAY_COMPONENT_REPORT: '.badge-overlay-report',\\n        OVERLAY_COMPONENT_LOGIN: '.badge-overlay-signin',\\n        OVERLAY_COMPONENT_SIGNUP_FB: '.badge-overlay-signup-fb',\\n        OVERLAY_COMPONENT_SIGNUP_EMAIL: '.badge-overlay-signup-email',\\n        OVERLAY_COMPONENT_DRAG_AND_DROP: '.badge-drag-and-drop',\\n\\n        OVERLAY_COMPONENT_IDLE_TIME: '.badge-idle-popup-idleTime'\\n    },\\n\\n    init: function init() {\\n        this.bindOverlayCloseButtons();\\n        this.bindMouseLeave();\\n    },\\n\\n    handlers: {\\n        closeButtonClickedHandler: function closeButtonClickedHandler(event) {\\n            if ($(event.currentTarget).closest(this.selectors.OVERLAY_COMPONENT).is(this.selectors.OVERLAY_COMPONENT_UPLOAD)) {\\n                GA.track('Upload', 'Clicked', 'Cancel');\\n                if (_page2.default.isUploadPage()) {\\n                    window.location.href = \\\"http://\\\" + _page2.default.getDomain();\\n                    return false;\\n                }\\n            }\\n            this.hideOverlay($(event.currentTarget).closest(this.selectors.OVERLAY_COMPONENT));\\n            event.preventDefault();\\n        },\\n        overlayBackgroundClickedHandler: function overlayBackgroundClickedHandler(event) {\\n            if (this._hideUsingBackground) {\\n                this.hideAllOverlay();\\n            }\\n        },\\n        overlayComponentClickedHandler: function overlayComponentClickedHandler(event) {\\n            event.stopPropagation();\\n        }\\n    },\\n\\n    ////////// public functions\\n\\n    isAnyOverlayShown: function isAnyOverlayShown() {\\n        return this._isShown;\\n    },\\n\\n    setHideUsingBackground: function setHideUsingBackground(hideUsingBackground) {\\n        this._hideUsingBackground = hideUsingBackground !== false;\\n    },\\n\\n    /**\\n     * Show the overlay background and show the overlay div defined by selector\\n     * If no selector is given, only the overlay background is shown\\n     * @param selector string or html obj or jquery obj\\n     * @param allowScrolling boolean applies no-scroll class to body\\n     */\\n    showOverlay: function showOverlay(selector, allowScrolling) {\\n        this.hideAllOverlay();\\n        this._isShown = true;\\n        $(this.selectors.OVERLAY).removeClass('hide');\\n        if (!allowScrolling) {\\n            $('body').addClass(\\\"no-scroll\\\");\\n        }\\n        if (typeof selector != 'undefined') {\\n            $(selector).removeClass('hide');\\n            if (selector == this.selectors.OVERLAY_COMPONENT_UPLOAD) {\\n                this.setHideUsingBackground(false);\\n            } else if (selector == ModuleFactory.PostController.selectors.MODAL_POST_ZOOM_CONTAINER) {\\n                this.setHideUsingBackground(true);\\n            }\\n        }\\n\\n        // update wording\\n        var idleTimeToPopupInSecond = Configs.get('configs.idlePopupIdleTime') / 1000;\\n        if (idleTimeToPopupInSecond > 0) {\\n            $(this.selectors.OVERLAY_COMPONENT_IDLE_TIME).text(Utils.formatSecondToString(idleTimeToPopupInSecond));\\n        }\\n    },\\n\\n    /**\\n     * Hide the overlay background and hide the overlay div defined by selector\\n     * If no selector is given, only the overlay background is hidden\\n     * @param selector string or html obj or jquery obj\\n     */\\n    hideOverlay: function hideOverlay(selector) {\\n        this._isShown = false;\\n        $(this.selectors.OVERLAY).addClass('hide');\\n        $('body').removeClass(\\\"no-scroll\\\");\\n        if (typeof selector != 'undefined') {\\n            $(selector).addClass('hide');\\n            if ($(selector).hasClass('badge-overlay-upload')) {\\n                this.setHideUsingBackground(true);\\n            }\\n        }\\n    },\\n\\n    /**\\n     * Hide all overlay contained in the overlay div\\n     */\\n    hideAllOverlay: function hideAllOverlay() {\\n        if (this._hideAllOverlayReturnToUpload) {\\n            this._hideAllOverlayReturnToUpload = false;\\n            this.showOverlay(this.selectors.OVERLAY_COMPONENT_UPLOAD, false);\\n        } else {\\n            this.hideOverlay($(this.selectors.OVERLAY).children());\\n        }\\n    },\\n\\n    bindOverlayCloseButtons: function bindOverlayCloseButtons() {\\n        // Generic overlay close buttons.\\n        $(this.selectors.OVERLAY).find(this.selectors.OVERLAY_CLOSE_BUTTON).click($.proxy(this.handlers.closeButtonClickedHandler, this));\\n        // Overlay background closing\\n        $(this.selectors.OVERLAY).click($.proxy(this.handlers.overlayBackgroundClickedHandler, this));\\n        // Overlay component should perform stop propagation to prevent clicking inside the overlay will close it\\n        $(this.selectors.OVERLAY).find(this.selectors.OVERLAY_COMPONENT).click($.proxy(this.handlers.overlayComponentClickedHandler, this));\\n    },\\n\\n    bindMouseLeave: function bindMouseLeave() {\\n        $(this.selectors.OVERLAY).mouseleave(function () {\\n            if (this._isShown && !$(this.selectors.OVERLAY_COMPONENT_DRAG_AND_DROP).hasClass('hide')) {\\n                this.hideOverlay(this.selectors.OVERLAY_COMPONENT_DRAG_AND_DROP);\\n            }\\n        });\\n    },\\n\\n    /**\\n     * Determines if an object is inside overlay\\n     * Useful for determining the correct behaviour for overlay/single page hybrid pages elements\\n     * @param object jQuery object to test\\n     * @return bool\\n     */\\n    isInsideOverlay: function isInsideOverlay(object) {\\n        return $(object).is(this.selectors.OVERLAY + \\\" *\\\");\\n    }\\n\\n});\\n\\nmodule.exports = OverlayController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(40), __webpack_require__(26), __webpack_require__(18), __webpack_require__(80)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/overlay.js\\n// module id = 128\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/overlay.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _object = __webpack_require__(422);\\n\\nvar _object2 = _interopRequireDefault(_object);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Model = function Model() {\\n    this._base = this;\\n};\\n\\nModel.prototype = new _object2.default();\\n\\nModel.prototype.getBase = function () {\\n    return this._base;\\n};\\n\\nModel.prototype.init = function () {};\\n\\nmodule.exports = Model;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/base.js\\n// module id = 129\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/base.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils) {'use strict';\\n\\nvar _base = __webpack_require__(129);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _cacheFactory = __webpack_require__(185);\\n\\nvar _cacheFactory2 = _interopRequireDefault(_cacheFactory);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/* \\n    A model for handling AJAX voting actions between client and server\\n*/\\nvar CacheableAbstractModel = $.extend({}, new _base2.default(), {\\n\\n    remoteHandler: null,\\n    cacheKey: '',\\n    cacheTTL: 3600,\\n    remoteKey: '',\\n\\n    init: function init(remoteHandler) {\\n        this.remoteHandler = remoteHandler;\\n    },\\n\\n    get: function get(options) {\\n        return this.getFromCache(options);\\n    },\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return {};\\n    },\\n\\n    getFromCache: function getFromCache() {\\n\\n        if (this.cacheKey == '') {\\n            LogUtils.log('getFromCache: empty cache key');\\n            return null;\\n        }\\n        var value = _cacheFactory2.default.storageImpl.getItem(this.cacheKey);\\n\\n        if (value == null) {\\n            return null;\\n        }\\n\\n        value = JSON.parse(value);\\n\\n        if (value.expireAt == undefined) {\\n            LogUtils.log('getFromCache: invalid cache. Reason: no expire time.  do clear:' + this.cacheKey);\\n            _cacheFactory2.default.storageImpl.removeItem(this.cacheKey);\\n            return null;\\n        } else if (value.expireAt < this.getCurrentTime()) {\\n            LogUtils.log('getFromCache: invalid cache. Reason: expired.  do clear:' + this.cacheKey);\\n            _cacheFactory2.default.storageImpl.removeItem(this.cacheKey);\\n            return null;\\n        } else {\\n            return value['data'];\\n        }\\n    },\\n\\n    addToCache: function addToCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    updateCache: function updateCache(data) {\\n\\n        if (this.cacheKey == '') {\\n            LogUtils.log('updateCache: empty cache key');\\n            return false;\\n        }\\n        var obj = {};\\n        obj['data'] = data;\\n        obj['expireAt'] = this.cacheTTL + this.getCurrentTime();\\n        _cacheFactory2.default.storageImpl.setItem(this.cacheKey, JSON.stringify(obj));\\n\\n        return true;\\n    },\\n\\n    clearCache: function clearCache() {\\n        if (this.cacheKey == '') {\\n            LogUtils.log('clearCache: empty cache key');\\n            return null;\\n        }\\n\\n        _cacheFactory2.default.storageImpl.removeItem(this.cacheKey);\\n        return true;\\n    },\\n\\n    getCurrentTime: function getCurrentTime() {\\n        return Math.floor(Date.now() / 1000);\\n    }\\n});\\n\\nmodule.exports = CacheableAbstractModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/abstract.js\\n// module id = 130\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/abstract.js?\")},,function(module,exports,__webpack_require__){eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * jQuery Cookie Plugin v1.4.1\\n * https://github.com/carhartl/jquery-cookie\\n *\\n * Copyright 2013 Klaus Hartl\\n * Released under the MIT license\\n */\\n(function (factory) {\\n\\tif (true) {\\n\\t\\t// AMD\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else if (typeof exports === 'object') {\\n\\t\\t// CommonJS\\n\\t\\tfactory(require('jquery'));\\n\\t} else {\\n\\t\\t// Browser globals\\n\\t\\tfactory(jQuery);\\n\\t}\\n}(function ($) {\\n\\n\\tvar pluses = /\\\\+/g;\\n\\n\\tfunction encode(s) {\\n\\t\\treturn config.raw ? s : encodeURIComponent(s);\\n\\t}\\n\\n\\tfunction decode(s) {\\n\\t\\treturn config.raw ? s : decodeURIComponent(s);\\n\\t}\\n\\n\\tfunction stringifyCookieValue(value) {\\n\\t\\treturn encode(config.json ? JSON.stringify(value) : String(value));\\n\\t}\\n\\n\\tfunction parseCookieValue(s) {\\n\\t\\tif (s.indexOf('\\\"') === 0) {\\n\\t\\t\\t// This is a quoted cookie as according to RFC2068, unescape...\\n\\t\\t\\ts = s.slice(1, -1).replace(/\\\\\\\\\\\"/g, '\\\"').replace(/\\\\\\\\\\\\\\\\/g, '\\\\\\\\');\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\t// Replace server-side written pluses with spaces.\\n\\t\\t\\t// If we can't decode the cookie, ignore it, it's unusable.\\n\\t\\t\\t// If we can't parse the cookie, ignore it, it's unusable.\\n\\t\\t\\ts = decodeURIComponent(s.replace(pluses, ' '));\\n\\t\\t\\treturn config.json ? JSON.parse(s) : s;\\n\\t\\t} catch(e) {}\\n\\t}\\n\\n\\tfunction read(s, converter) {\\n\\t\\tvar value = config.raw ? s : parseCookieValue(s);\\n\\t\\treturn $.isFunction(converter) ? converter(value) : value;\\n\\t}\\n\\n\\tvar config = $.cookie = function (key, value, options) {\\n\\n\\t\\t// Write\\n\\n\\t\\tif (value !== undefined && !$.isFunction(value)) {\\n\\t\\t\\toptions = $.extend({}, config.defaults, options);\\n\\n\\t\\t\\tif (typeof options.expires === 'number') {\\n\\t\\t\\t\\tvar days = options.expires, t = options.expires = new Date();\\n\\t\\t\\t\\tt.setTime(+t + days * 864e+5);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn (document.cookie = [\\n\\t\\t\\t\\tencode(key), '=', stringifyCookieValue(value),\\n\\t\\t\\t\\toptions.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\\n\\t\\t\\t\\toptions.path    ? '; path=' + options.path : '',\\n\\t\\t\\t\\toptions.domain  ? '; domain=' + options.domain : '',\\n\\t\\t\\t\\toptions.secure  ? '; secure' : ''\\n\\t\\t\\t].join(''));\\n\\t\\t}\\n\\n\\t\\t// Read\\n\\n\\t\\tvar result = key ? undefined : {};\\n\\n\\t\\t// To prevent the for loop in the first place assign an empty array\\n\\t\\t// in case there are no cookies at all. Also prevents odd result when\\n\\t\\t// calling $.cookie().\\n\\t\\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\\n\\n\\t\\tfor (var i = 0, l = cookies.length; i < l; i++) {\\n\\t\\t\\tvar parts = cookies[i].split('=');\\n\\t\\t\\tvar name = decode(parts.shift());\\n\\t\\t\\tvar cookie = parts.join('=');\\n\\n\\t\\t\\tif (key && key === name) {\\n\\t\\t\\t\\t// If second argument (value) is a function it's a converter...\\n\\t\\t\\t\\tresult = read(cookie, value);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Prevent storing a cookie that we couldn't decode.\\n\\t\\t\\tif (!key && (cookie = read(cookie)) !== undefined) {\\n\\t\\t\\t\\tresult[name] = cookie;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t};\\n\\n\\tconfig.defaults = {};\\n\\n\\t$.removeCookie = function (key, options) {\\n\\t\\tif ($.cookie(key) === undefined) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Must not alter options, thus extending a fresh object...\\n\\t\\t$.cookie(key, '', $.extend({}, options, { expires: -1 }));\\n\\t\\treturn !$.cookie(key);\\n\\t};\\n\\n}));\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery.cookie/jquery.cookie.js\\n// module id = 132\\n// module chunks = 1 2 3\\n//# sourceURL=webpack:///./~/jquery.cookie/jquery.cookie.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30),\\n    root = __webpack_require__(27);\\n\\n/* Built-in method references that are verified to be native. */\\nvar Set = getNative(root, 'Set');\\n\\nmodule.exports = Set;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Set.js\\n// module id = 133\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Set.js?\")},function(module,exports,__webpack_require__){eval(\"var ListCache = __webpack_require__(66),\\n    stackClear = __webpack_require__(333),\\n    stackDelete = __webpack_require__(334),\\n    stackGet = __webpack_require__(335),\\n    stackHas = __webpack_require__(336),\\n    stackSet = __webpack_require__(337);\\n\\n/**\\n * Creates a stack cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Stack(entries) {\\n  var data = this.__data__ = new ListCache(entries);\\n  this.size = data.size;\\n}\\n\\n// Add methods to `Stack`.\\nStack.prototype.clear = stackClear;\\nStack.prototype['delete'] = stackDelete;\\nStack.prototype.get = stackGet;\\nStack.prototype.has = stackHas;\\nStack.prototype.set = stackSet;\\n\\nmodule.exports = Stack;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Stack.js\\n// module id = 134\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Stack.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIndexOf = __webpack_require__(141);\\n\\n/**\\n * A specialized version of `_.includes` for arrays without support for\\n * specifying an index to search from.\\n *\\n * @private\\n * @param {Array} [array] The array to inspect.\\n * @param {*} target The value to search for.\\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\\n */\\nfunction arrayIncludes(array, value) {\\n  var length = array == null ? 0 : array.length;\\n  return !!length && baseIndexOf(array, value, 0) > -1;\\n}\\n\\nmodule.exports = arrayIncludes;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayIncludes.js\\n// module id = 135\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayIncludes.js?\")},function(module,exports){eval(\"/**\\n * This function is like `arrayIncludes` except that it accepts a comparator.\\n *\\n * @private\\n * @param {Array} [array] The array to inspect.\\n * @param {*} target The value to search for.\\n * @param {Function} comparator The comparator invoked per element.\\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\\n */\\nfunction arrayIncludesWith(array, value, comparator) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (comparator(value, array[index])) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nmodule.exports = arrayIncludesWith;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayIncludesWith.js\\n// module id = 136\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayIncludesWith.js?\")},function(module,exports){eval(\"/**\\n * Appends the elements of `values` to `array`.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to append.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayPush(array, values) {\\n  var index = -1,\\n      length = values.length,\\n      offset = array.length;\\n\\n  while (++index < length) {\\n    array[offset + index] = values[index];\\n  }\\n  return array;\\n}\\n\\nmodule.exports = arrayPush;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayPush.js\\n// module id = 137\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayPush.js?\")},function(module,exports,__webpack_require__){eval(\"var baseForOwn = __webpack_require__(268),\\n    createBaseEach = __webpack_require__(290);\\n\\n/**\\n * The base implementation of `_.forEach` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array|Object} collection The collection to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array|Object} Returns `collection`.\\n */\\nvar baseEach = createBaseEach(baseForOwn);\\n\\nmodule.exports = baseEach;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseEach.js\\n// module id = 138\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseEach.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayPush = __webpack_require__(137),\\n    isFlattenable = __webpack_require__(308);\\n\\n/**\\n * The base implementation of `_.flatten` with support for restricting flattening.\\n *\\n * @private\\n * @param {Array} array The array to flatten.\\n * @param {number} depth The maximum recursion depth.\\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\\n * @param {Array} [result=[]] The initial result value.\\n * @returns {Array} Returns the new flattened array.\\n */\\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\\n  var index = -1,\\n      length = array.length;\\n\\n  predicate || (predicate = isFlattenable);\\n  result || (result = []);\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (depth > 0 && predicate(value)) {\\n      if (depth > 1) {\\n        // Recursively flatten arrays (susceptible to call stack limits).\\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\\n      } else {\\n        arrayPush(result, value);\\n      }\\n    } else if (!isStrict) {\\n      result[result.length] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseFlatten;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseFlatten.js\\n// module id = 139\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseFlatten.js?\")},function(module,exports,__webpack_require__){eval(\"var castPath = __webpack_require__(145),\\n    toKey = __webpack_require__(70);\\n\\n/**\\n * The base implementation of `_.get` without support for default values.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path of the property to get.\\n * @returns {*} Returns the resolved value.\\n */\\nfunction baseGet(object, path) {\\n  path = castPath(path, object);\\n\\n  var index = 0,\\n      length = path.length;\\n\\n  while (object != null && index < length) {\\n    object = object[toKey(path[index++])];\\n  }\\n  return (index && index == length) ? object : undefined;\\n}\\n\\nmodule.exports = baseGet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseGet.js\\n// module id = 140\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseGet.js?\")},function(module,exports,__webpack_require__){eval(\"var baseFindIndex = __webpack_require__(266),\\n    baseIsNaN = __webpack_require__(274),\\n    strictIndexOf = __webpack_require__(338);\\n\\n/**\\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} value The value to search for.\\n * @param {number} fromIndex The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseIndexOf(array, value, fromIndex) {\\n  return value === value\\n    ? strictIndexOf(array, value, fromIndex)\\n    : baseFindIndex(array, baseIsNaN, fromIndex);\\n}\\n\\nmodule.exports = baseIndexOf;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIndexOf.js\\n// module id = 141\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIndexOf.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIsEqualDeep = __webpack_require__(272),\\n    isObjectLike = __webpack_require__(41);\\n\\n/**\\n * The base implementation of `_.isEqual` which supports partial comparisons\\n * and tracks traversed objects.\\n *\\n * @private\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @param {boolean} bitmask The bitmask flags.\\n *  1 - Unordered comparison\\n *  2 - Partial comparison\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n */\\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\\n  if (value === other) {\\n    return true;\\n  }\\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\\n    return value !== value && other !== other;\\n  }\\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\\n}\\n\\nmodule.exports = baseIsEqual;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsEqual.js\\n// module id = 142\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsEqual.js?\")},function(module,exports,__webpack_require__){eval(\"var identity = __webpack_require__(71),\\n    overRest = __webpack_require__(328),\\n    setToString = __webpack_require__(331);\\n\\n/**\\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\\n *\\n * @private\\n * @param {Function} func The function to apply a rest parameter to.\\n * @param {number} [start=func.length-1] The start position of the rest parameter.\\n * @returns {Function} Returns the new function.\\n */\\nfunction baseRest(func, start) {\\n  return setToString(overRest(func, start, identity), func + '');\\n}\\n\\nmodule.exports = baseRest;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseRest.js\\n// module id = 143\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseRest.js?\")},function(module,exports){eval(\"/**\\n * The base implementation of `_.unary` without support for storing metadata.\\n *\\n * @private\\n * @param {Function} func The function to cap arguments for.\\n * @returns {Function} Returns the new capped function.\\n */\\nfunction baseUnary(func) {\\n  return function(value) {\\n    return func(value);\\n  };\\n}\\n\\nmodule.exports = baseUnary;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseUnary.js\\n// module id = 144\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseUnary.js?\")},function(module,exports,__webpack_require__){eval(\"var isArray = __webpack_require__(19),\\n    isKey = __webpack_require__(99),\\n    stringToPath = __webpack_require__(339),\\n    toString = __webpack_require__(356);\\n\\n/**\\n * Casts `value` to a path array if it's not one.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @param {Object} [object] The object to query keys on.\\n * @returns {Array} Returns the cast property path array.\\n */\\nfunction castPath(value, object) {\\n  if (isArray(value)) {\\n    return value;\\n  }\\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\\n}\\n\\nmodule.exports = castPath;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_castPath.js\\n// module id = 145\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_castPath.js?\")},function(module,exports,__webpack_require__){eval(\"var SetCache = __webpack_require__(96),\\n    arraySome = __webpack_require__(264),\\n    cacheHas = __webpack_require__(98);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1,\\n    COMPARE_UNORDERED_FLAG = 2;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for arrays with support for\\n * partial deep comparisons.\\n *\\n * @private\\n * @param {Array} array The array to compare.\\n * @param {Array} other The other array to compare.\\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Object} stack Tracks traversed `array` and `other` objects.\\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\\n */\\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\\n      arrLength = array.length,\\n      othLength = other.length;\\n\\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n    return false;\\n  }\\n  // Assume cyclic values are equal.\\n  var stacked = stack.get(array);\\n  if (stacked && stack.get(other)) {\\n    return stacked == other;\\n  }\\n  var index = -1,\\n      result = true,\\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n  stack.set(array, other);\\n  stack.set(other, array);\\n\\n  // Ignore non-index properties.\\n  while (++index < arrLength) {\\n    var arrValue = array[index],\\n        othValue = other[index];\\n\\n    if (customizer) {\\n      var compared = isPartial\\n        ? customizer(othValue, arrValue, index, other, array, stack)\\n        : customizer(arrValue, othValue, index, array, other, stack);\\n    }\\n    if (compared !== undefined) {\\n      if (compared) {\\n        continue;\\n      }\\n      result = false;\\n      break;\\n    }\\n    // Recursively compare arrays (susceptible to call stack limits).\\n    if (seen) {\\n      if (!arraySome(other, function(othValue, othIndex) {\\n            if (!cacheHas(seen, othIndex) &&\\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\\n              return seen.push(othIndex);\\n            }\\n          })) {\\n        result = false;\\n        break;\\n      }\\n    } else if (!(\\n          arrValue === othValue ||\\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\\n        )) {\\n      result = false;\\n      break;\\n    }\\n  }\\n  stack['delete'](array);\\n  stack['delete'](other);\\n  return result;\\n}\\n\\nmodule.exports = equalArrays;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_equalArrays.js\\n// module id = 146\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_equalArrays.js?\")},function(module,exports){eval(\"/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\\n\\nmodule.exports = freeGlobal;\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_freeGlobal.js\\n// module id = 147\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_freeGlobal.js?\")},function(module,exports){eval(\"/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/** Used to detect unsigned integer values. */\\nvar reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n\\n/**\\n * Checks if `value` is a valid array-like index.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\\n */\\nfunction isIndex(value, length) {\\n  length = length == null ? MAX_SAFE_INTEGER : length;\\n  return !!length &&\\n    (typeof value == 'number' || reIsUint.test(value)) &&\\n    (value > -1 && value % 1 == 0 && value < length);\\n}\\n\\nmodule.exports = isIndex;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isIndex.js\\n// module id = 148\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isIndex.js?\")},function(module,exports,__webpack_require__){eval(\"var isObject = __webpack_require__(73);\\n\\n/**\\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` if suitable for strict\\n *  equality comparisons, else `false`.\\n */\\nfunction isStrictComparable(value) {\\n  return value === value && !isObject(value);\\n}\\n\\nmodule.exports = isStrictComparable;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isStrictComparable.js\\n// module id = 149\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isStrictComparable.js?\");\n},function(module,exports){eval(\"/**\\n * A specialized version of `matchesProperty` for source values suitable\\n * for strict equality comparisons, i.e. `===`.\\n *\\n * @private\\n * @param {string} key The key of the property to get.\\n * @param {*} srcValue The value to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction matchesStrictComparable(key, srcValue) {\\n  return function(object) {\\n    if (object == null) {\\n      return false;\\n    }\\n    return object[key] === srcValue &&\\n      (srcValue !== undefined || (key in Object(object)));\\n  };\\n}\\n\\nmodule.exports = matchesStrictComparable;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_matchesStrictComparable.js\\n// module id = 150\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_matchesStrictComparable.js?\")},function(module,exports){eval(\"/** Used for built-in method references. */\\nvar funcProto = Function.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to convert.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\nmodule.exports = toSource;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_toSource.js\\n// module id = 151\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_toSource.js?\")},function(module,exports){eval(\"/**\\n * Performs a\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * comparison between two values to determine if they are equivalent.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n * @example\\n *\\n * var object = { 'a': 1 };\\n * var other = { 'a': 1 };\\n *\\n * _.eq(object, object);\\n * // => true\\n *\\n * _.eq(object, other);\\n * // => false\\n *\\n * _.eq('a', 'a');\\n * // => true\\n *\\n * _.eq('a', Object('a'));\\n * // => false\\n *\\n * _.eq(NaN, NaN);\\n * // => true\\n */\\nfunction eq(value, other) {\\n  return value === other || (value !== value && other !== other);\\n}\\n\\nmodule.exports = eq;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/eq.js\\n// module id = 152\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/eq.js?\")},function(module,exports,__webpack_require__){eval(\"var isArrayLike = __webpack_require__(72),\\n    isObjectLike = __webpack_require__(41);\\n\\n/**\\n * This method is like `_.isArrayLike` except that it also checks if `value`\\n * is an object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array-like object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArrayLikeObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLikeObject(document.body.children);\\n * // => true\\n *\\n * _.isArrayLikeObject('abc');\\n * // => false\\n *\\n * _.isArrayLikeObject(_.noop);\\n * // => false\\n */\\nfunction isArrayLikeObject(value) {\\n  return isObjectLike(value) && isArrayLike(value);\\n}\\n\\nmodule.exports = isArrayLikeObject;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isArrayLikeObject.js\\n// module id = 153\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isArrayLikeObject.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(27),\\n    stubFalse = __webpack_require__(352);\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = freeModule && freeModule.exports === freeExports;\\n\\n/** Built-in value references. */\\nvar Buffer = moduleExports ? root.Buffer : undefined;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\\n\\n/**\\n * Checks if `value` is a buffer.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\\n * @example\\n *\\n * _.isBuffer(new Buffer(2));\\n * // => true\\n *\\n * _.isBuffer(new Uint8Array(2));\\n * // => false\\n */\\nvar isBuffer = nativeIsBuffer || stubFalse;\\n\\nmodule.exports = isBuffer;\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106)(module)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isBuffer.js\\n// module id = 154\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isBuffer.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGetTag = __webpack_require__(52),\\n    isObject = __webpack_require__(73);\\n\\n/** `Object#toString` result references. */\\nvar asyncTag = '[object AsyncFunction]',\\n    funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]',\\n    proxyTag = '[object Proxy]';\\n\\n/**\\n * Checks if `value` is classified as a `Function` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\\n * @example\\n *\\n * _.isFunction(_);\\n * // => true\\n *\\n * _.isFunction(/abc/);\\n * // => false\\n */\\nfunction isFunction(value) {\\n  if (!isObject(value)) {\\n    return false;\\n  }\\n  // The use of `Object#toString` avoids issues with the `typeof` operator\\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\\n  var tag = baseGetTag(value);\\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\\n}\\n\\nmodule.exports = isFunction;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isFunction.js\\n// module id = 155\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isFunction.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIsTypedArray = __webpack_require__(276),\\n    baseUnary = __webpack_require__(144),\\n    nodeUtil = __webpack_require__(325);\\n\\n/* Node.js helper references. */\\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\\n\\n/**\\n * Checks if `value` is classified as a typed array.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n * @example\\n *\\n * _.isTypedArray(new Uint8Array);\\n * // => true\\n *\\n * _.isTypedArray([]);\\n * // => false\\n */\\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\\n\\nmodule.exports = isTypedArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/isTypedArray.js\\n// module id = 156\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/isTypedArray.js?\")},,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval('(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.docCookies = f()}})(function(){var define,module,exports;\\n/*\\\\\\n|*|\\n|*|  :: cookies.js ::\\n|*|\\n|*|  A complete cookies reader/writer framework with full unicode support.\\n|*|\\n|*|  Revision #1 - September 4, 2014\\n|*|\\n|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\\n|*|  https://developer.mozilla.org/User:fusionchess\\n|*|\\n|*|  This framework is released under the GNU Public License, version 3 or later.\\n|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html\\n|*|\\n|*|  Syntaxes:\\n|*|\\n|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])\\n|*|  * docCookies.getItem(name)\\n|*|  * docCookies.removeItem(name[, path[, domain]])\\n|*|  * docCookies.hasItem(name)\\n|*|  * docCookies.keys()\\n|*|\\n\\\\*/\\n\\nvar docCookies = {\\n  getItem: function (sKey) {\\n    if (!sKey) { return null; }\\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\\\\\s*\" + encodeURIComponent(sKey).replace(/[\\\\-\\\\.\\\\+\\\\*]/g, \"\\\\\\\\$&\") + \"\\\\\\\\s*\\\\\\\\=\\\\\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\\n  },\\n  setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {\\n    if (!sKey || /^(?:expires|max\\\\-age|path|domain|secure)$/i.test(sKey)) { return false; }\\n    var sExpires = \"\";\\n    if (vEnd) {\\n      switch (vEnd.constructor) {\\n        case Number:\\n          sExpires = vEnd === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; max-age=\" + vEnd;\\n          break;\\n        case String:\\n          sExpires = \"; expires=\" + vEnd;\\n          break;\\n        case Date:\\n          sExpires = \"; expires=\" + vEnd.toUTCString();\\n          break;\\n      }\\n    }\\n    document.cookie = encodeURIComponent(sKey) + \"=\" + encodeURIComponent(sValue) + sExpires + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\") + (bSecure ? \"; secure\" : \"\");\\n    return true;\\n  },\\n  removeItem: function (sKey, sPath, sDomain) {\\n    if (!this.hasItem(sKey)) { return false; }\\n    document.cookie = encodeURIComponent(sKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\");\\n    return true;\\n  },\\n  hasItem: function (sKey) {\\n    if (!sKey) { return false; }\\n    return (new RegExp(\"(?:^|;\\\\\\\\s*)\" + encodeURIComponent(sKey).replace(/[\\\\-\\\\.\\\\+\\\\*]/g, \"\\\\\\\\$&\") + \"\\\\\\\\s*\\\\\\\\=\")).test(document.cookie);\\n  },\\n  keys: function () {\\n    var aKeys = document.cookie.replace(/((?:^|\\\\s*;)[^\\\\=]+)(?=;|$)|^\\\\s*|\\\\s*(?:\\\\=[^;]*)?(?:\\\\1|$)/g, \"\").split(/\\\\s*(?:\\\\=[^;]*)?;\\\\s*/);\\n    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }\\n    return aKeys;\\n  }\\n};\\n\\nreturn docCookies;\\n\\n});\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/doc-cookies/docCookies.umd.js\\n// module id = 172\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/doc-cookies/docCookies.umd.js?')},function(module,exports){eval('\"use strict\";\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nvar ArrayUtils = function () {\\n    function ArrayUtils() {\\n        _classCallCheck(this, ArrayUtils);\\n    }\\n\\n    _createClass(ArrayUtils, null, [{\\n        key: \"arrayUnique\",\\n        value: function arrayUnique(array) {\\n            var a = array.concat();\\n            for (var i = 0; i < a.length; ++i) {\\n                for (var j = i + 1; j < a.length; ++j) {\\n                    if (a[i] === a[j]) a.splice(j--, 1);\\n                }\\n            }\\n            return a;\\n        }\\n    }, {\\n        key: \"arrayShuffle\",\\n        value: function arrayShuffle(array) {\\n            var counter = array.length;\\n\\n            while (counter > 0) {\\n                var index = Math.floor(Math.random() * counter);\\n\\n                counter--;\\n\\n                var temp = array[counter];\\n                array[counter] = array[index];\\n                array[index] = temp;\\n            }\\n\\n            return array;\\n        }\\n    }]);\\n\\n    return ArrayUtils;\\n}();\\n\\nmodule.exports = ArrayUtils;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/core/src/js/utils/ArrayUtils.js\\n// module id = 173\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./static/main/core/src/js/utils/ArrayUtils.js?')},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(ArrayUtils) {'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar LocaleUtils = function () {\\n    function LocaleUtils() {\\n        _classCallCheck(this, LocaleUtils);\\n    }\\n\\n    _createClass(LocaleUtils, null, [{\\n        key: 'getLocales',\\n        value: function getLocales() {\\n            var locales = [];\\n            if (navigator.language) {\\n                locales.push(navigator.language);\\n            }\\n            if (navigator.userLanguage) {\\n                locales.push(navigator.userLanguage);\\n            }\\n            if (navigator.languages) {\\n                locales = locales.concat(navigator.languages);\\n            }\\n\\n            // ensure region exists by itself\\n            for (var i = 0; i < locales.length; i++) {\\n                var locale = locales[i];\\n                var pos = locale.indexOf('-');\\n                if (pos > -1) {\\n                    var region = locale.substring(0, pos);\\n                    if (locales.indexOf(region) == -1) {\\n                        locales.push(region);\\n                    }\\n                }\\n            }\\n\\n            return ArrayUtils.arrayUnique(locales);\\n        }\\n    }, {\\n        key: 'isMatchAnyLocales',\\n        value: function isMatchAnyLocales(locales) {\\n\\n            if (locales == '') {\\n                return true;\\n            }\\n\\n            if (typeof locales === 'string') {\\n                locales = locales.split(',');\\n            }\\n\\n            var browserLocales = LocaleUtils.getLocales();\\n            for (var i = 0; i < locales.length; i++) {\\n                var locale = locales[i];\\n\\n                for (var j = 0; j < browserLocales.length; j++) {\\n                    var browserLocale = browserLocales[j];\\n                    if (locale.toLowerCase() == browserLocale.toLowerCase().replace('-', '_')) {\\n                        return true;\\n                    }\\n                }\\n            }\\n\\n            return false;\\n        }\\n    }]);\\n\\n    return LocaleUtils;\\n}();\\n\\nmodule.exports = LocaleUtils;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/core/src/js/utils/LocaleUtils.js\\n// module id = 174\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./static/main/core/src/js/utils/LocaleUtils.js?\")},,,,,,,function(module,exports){eval('\"use strict\";\\n\\n// this factory is holding the state of cacheable-controllers\\n\\nvar CacheableControllerFactory = {\\n\\n    controllers: {},\\n\\n    setController: function setController(name, instance) {\\n        this.controllers[name] = instance;\\n    },\\n\\n    getController: function getController(name) {\\n        return this.controllers[name];\\n    }\\n\\n};\\n\\nmodule.exports = CacheableControllerFactory;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-factory.js\\n// module id = 181\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-factory.js?')},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, Utils, ModuleFactory, Piwik) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _rcfgAds = __webpack_require__(183);\\n\\nvar _rcfgAds2 = _interopRequireDefault(_rcfgAds);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _cacheFactory = __webpack_require__(185);\\n\\nvar _cacheFactory2 = _interopRequireDefault(_cacheFactory);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/* \\n    Controller for Featured Sidebar version 168\\n    Features provided:\\n    - Data loader and ads loader\\n    - Load-more logic for featured sidebar\\n    - sticky when scroll to end of featured sidebar\\n*/\\nvar FeaturedController = $.extend({}, new _base2.default(), {\\n    _isLoading: false, // true if an Ajax request is on the way\\n    _isLoadingHidden: false,\\n    _page: 1,\\n    _hiddenItemData: {},\\n    _noMoreItem: false,\\n    _currentPosition: 0,\\n    _endPoint: '',\\n    _featuredItemsEndPoint: '',\\n    _cacheKey: 'featured',\\n    _cacheExpireKey: 'featured_expire',\\n    _cacheFeaturedMaxItemCount: 50,\\n    _pageOneExpired: false,\\n    _cacheTtl: 900,\\n    _lastInsertIsAd: false,\\n    _dataResult: [], // this stores the full list of featured items returned from AJAX\\n    _taboolaSidebarPadding: 23,\\n    _sidebarRepetitiveAdPlacementId: 'sidebar_repetitive',\\n\\n    init: function init() {\\n\\n        this._endPoint = Configs.get('configs.endPoint');\\n        this._endPoint = Utils.formatProtocolForUrl(this._endPoint);\\n\\n        this._featuredItemsEndPoint = this._endPoint;\\n\\n        // #7023 bucket without taboola\\n        // handle post page by taboola\\n        //if (!Page.isPostPage()) {\\n        this.bindScrollEvents();\\n        //}\\n        this.bindClickEvents();\\n        $.proxy(this.handlers.loadMoreScrollHandler, this)();\\n    },\\n    selectors: {\\n        SIDEBAR_CONTAINER: '#sidebar-content',\\n        SIDEBAR_ITEMS: '.badge-featured-item',\\n        SIDEBAR_ITEM_PREFIX: '#featured-item-',\\n\\n        ITEM_CONTAINER: '#jsid-featured-item-container',\\n        FEATURED_AD: '#jsid-featured-sidebar-ad',\\n        DIV_GET_THE_APP: '.get-the-app',\\n        LOADING_DIALOG: '#block-feature-cover .loading',\\n        SIDEBAR_FOOTER: '#sidebar .footer',\\n        POST_ENTRY_INFO: '.badge-entry-info',\\n        MAIN_WRAPPER: '.main-wrap',\\n        FEATURED_TAIL: '#jsid-featured-sidebar-tail',\\n\\n        LOADING_SPINNER: '.block-feature-cover .loading'\\n    },\\n    handlers: {\\n        windowScrollHandler: function windowScrollHandler() {\\n            // loading starts when the page is 3 screen away from the bottom of the page\\n            $.proxy(FeaturedController.handlers.loadMoreScrollHandler, this)();\\n        },\\n\\n        resetSidebarToTop: function resetSidebarToTop() {\\n            var _self = FeaturedController;\\n            var sidebarContainer = $(_self.selectors.SIDEBAR_CONTAINER);\\n            sidebarContainer.removeClass('sticky');\\n            sidebarContainer.css({ 'position': '', 'top': '' });\\n        },\\n\\n        loadMoreScrollHandler: function loadMoreScrollHandler() {\\n\\n            if ($(FeaturedController.selectors.ITEM_CONTAINER).length > 0) {\\n                var _self = FeaturedController;\\n                var winH = $(window).height() - ModuleFactory.PageController._topStickyElementHeight;\\n\\n                var screenTop = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n                var screenBottom = screenTop + winH;\\n                var sidebarContainer = $(_self.selectors.SIDEBAR_CONTAINER);\\n                var posContainer = sidebarContainer.offset().top + sidebarContainer.height();\\n                var pixelToLoadMore = posContainer - screenBottom;\\n                var sidebarTail = $(_self.selectors.FEATURED_TAIL);\\n                var sidebarTailPadding = 50;\\n\\n                var sidebarTailHeight = +sidebarTail.height() - sidebarTailPadding;\\n                var stickyStart = $('.badge-page').offset().top + sidebarContainer.height() - sidebarTailHeight - (!_page2.default.isPostPage() ? ModuleFactory.PageController._topStickyElementHeight : _self._taboolaSidebarPadding);\\n                var stickyEnd = $('.badge-page').offset().top + $('.badge-page').height() + (winH - sidebarTailHeight) - (_page2.default.isPostPage() ? _self._taboolaSidebarPadding : 0);\\n\\n                var mainWrapperHeight = $(_self.selectors.MAIN_WRAPPER).height();\\n                var conditionSticky = mainWrapperHeight > sidebarContainer.height() && // Content view is bigger than sidebar\\n                winH < sidebarContainer.height() && // Sidebar is bigger than window size to sticky\\n                _self._noMoreItem && // Featured sidebar has finished loading\\n                !sidebarContainer.hasClass('sticky'); // Sidebar is not currently sticky\\n\\n                if (screenTop >= stickyStart && screenBottom <= stickyEnd && conditionSticky) {\\n                    // Sticky start\\n                    if (!Utils.isMobileDevice()) {\\n                        sidebarContainer.css({ 'position': 'fixed', 'top': -stickyStart + (_page2.default.isPostPage() ? 46 : 49) + $('.badge-page').offset().top + 'px', 'width': 'inherit' });\\n                        sidebarContainer.addClass('sticky');\\n                    }\\n                } else if (screenTop < stickyStart && sidebarContainer.hasClass('sticky')) {\\n                    _self.handlers.resetSidebarToTop();\\n                    ModuleFactory.CacheController.notifyForCacheUpdate(ModuleFactory.CacheController.keys.FEATURED_LIST);\\n                } else if (screenBottom > stickyEnd && sidebarContainer.hasClass('sticky')) {\\n                    sidebarContainer.css({ 'position': 'absolute', 'top': $('.badge-page').offset().top + $('.badge-page').height() - sidebarContainer.height() - 90 + 'px', 'width': 'inherit' });\\n                    sidebarContainer.removeClass('sticky');\\n                }\\n\\n                if (pixelToLoadMore < winH * 3) {\\n                    _self.loadMorePosts();\\n                }\\n            }\\n        },\\n\\n        loadMoreAjaxCallbackHandler: function loadMoreAjaxCallbackHandler(data) {\\n            if (!data || !data.okay) return; // some error has occured\\n            var _self = FeaturedController;\\n\\n            var clickedItemIds = _self.getClickedItemIds();\\n            if (!data.result || data.result.length == 0) {\\n                if (!data.areHiddenItems && !_self._isLoadingHidden) {\\n                    // sort the clicked featured items according to click order\\n                    var sortedHiddenItemData = [];\\n                    for (i = 0; i < clickedItemIds.length; i++) {\\n                        if (_self._hiddenItemData[clickedItemIds[i]]) {\\n                            sortedHiddenItemData.push(_self._hiddenItemData[clickedItemIds[i]]);\\n                        }\\n                    }\\n                    var hiddenItemDataObj = { 'okay': true, 'result': sortedHiddenItemData, 'areHiddenItems': true };\\n                    _self._isLoadingHidden = true;\\n                    _self.handlers.loadMoreAjaxCallbackHandler(hiddenItemDataObj);\\n                }\\n                _self._noMoreItem = true;\\n            }\\n            var container = $(_self.selectors.ITEM_CONTAINER);\\n            // the load more here is only about rendering - it only calls ajax once\\n            var itemDisplayed = container.data(\\\"item-displayed\\\");\\n            var adsTag = container.data(\\\"ads-tag\\\");\\n\\n            var adsAdded = 0;\\n            var totalHTML = '';\\n            var trackDisplayItems = {};\\n            var addedAdsPositions = [];\\n            var width;\\n            var height;\\n            var adTemplate;\\n            var adStyle;\\n            for (var i = 0; i < data.result.length; i++) {\\n                var item = data.result[i];\\n                var actualPosition = _self._currentPosition;\\n                var repetitiveAdContainer = _rcfgAds2.default.getAdContainer(_self._sidebarRepetitiveAdPlacementId, actualPosition);\\n                if (repetitiveAdContainer) {\\n                    width = width || _rcfgAds2.default.getCssStyle(repetitiveAdContainer.adPlacement, 'width');\\n                    height = height || _rcfgAds2.default.getCssStyle(repetitiveAdContainer.adPlacement, 'height');\\n                    adStyle = '';\\n                    if (width && height) {\\n                        adStyle = 'width: ' + width + '; height: ' + height + ';';\\n                    }\\n\\n                    adTemplate = '<section class=\\\"badge-block-ad block-ad\\\" style=\\\"' + adStyle + '\\\">\\\\\\n                        <div id=\\\"jsid-ad-container-sidebar_repetitive-' + actualPosition + '\\\" class=\\\"badge-gag-ads-container img-container\\\" data-gag-ads=\\\"' + adsTag + '\\\" style=\\\"' + adStyle + '\\\"></div>\\\\\\n                    </section>';\\n\\n                    if (!_self._lastInsertIsAd) {\\n                        totalHTML += adTemplate;\\n                        adsAdded++;\\n                        addedAdsPositions.push(actualPosition);\\n                        _self._lastInsertIsAd = true;\\n                    }\\n                    // GA.track(\\\"Featured-Sidebar\\\", \\\"AdsLoaded\\\", postType+\\\"|Page-\\\"+_self._page+\\\"|Position-\\\"+i);\\n                }\\n\\n                var template = '<li class=\\\"badge-featured-item\\\" data-item-id=\\\"' + item.itemId + '\\\" id=\\\"featured-item-' + item.itemId + '\\\" \\\\\\n                    data-item-pos=\\\"' + actualPosition + '\\\" data-item-type=\\\"' + item.type + '\\\" data-item-url=\\\"' + item.url + '\\\">\\\\\\n                    <div class=\\\"img-container\\\" data-item-id=\\\"' + item.itemId + '\\\">\\\\\\n                        <a href=\\\"' + item.url + '?ref=fsidebar\\\" class=\\\"badge-evt\\\" target=\\\"_blank\\\" >\\\\\\n                        <img src=\\\"' + item.imageURL + '\\\" /></a>\\\\\\n                    </div>\\\\\\n                    <div class=\\\"info-container\\\" data-item-id=\\\"' + item.itemId + '\\\">\\\\\\n                        <h3><a href=\\\"' + item.url + '?ref=fsidebar\\\" class=\\\"badge-evt\\\" target=\\\"_blank\\\">' + item.title + '</a></h3>\\\\\\n                    </div>\\\\\\n                </li>';\\n\\n                if ($('#featured-item-' + item.itemId).length == 0) {\\n                    if (_page2.default.isPostPage() && item.url.indexOf(ModuleFactory.PostController._fastCurrentEntryKey) > -1) {\\n                        _self.appendClickedItemId(parseInt(item.itemId));\\n                    } else {\\n\\n                        /* taboola bucket show 4 featured items only */\\n                        /* #7023 bucket without taboola\\n                        if (Page.isPostPage() && _self._currentPosition >= 4) {\\n                            _self._hiddenItemData[item.itemId] = item;\\n                            continue;\\n                        }\\n                        */\\n\\n                        if ((data.areHiddenItems || $.inArray(parseInt(item.itemId), clickedItemIds) == -1 || item.type == 'Recommendation') && _self._currentPosition < itemDisplayed) {\\n                            totalHTML += template;\\n                            _self._currentPosition++;\\n                            _self._lastInsertIsAd = false;\\n\\n                            // add to displayed Items\\n                            if (typeof item.type != 'undefined') {\\n                                if (typeof trackDisplayItems[item.type] === 'undefined') {\\n                                    trackDisplayItems[item.type] = [];\\n                                }\\n\\n                                trackDisplayItems[item.type].push({ position: _self._currentPosition, url: item.url });\\n                            }\\n                        } else {\\n                            // i.e. not rendering the list of hidden items && this is a clicked item -> so add to the hidden item map\\n                            _self._hiddenItemData[item.itemId] = item;\\n                        }\\n                    }\\n                }\\n                if (_self._currentPosition >= itemDisplayed) {\\n                    _self._noMoreItem = true;\\n                }\\n            }\\n\\n            if (totalHTML.length > 0) {\\n                container.append(totalHTML);\\n\\n                var itemTypes = Object.keys(trackDisplayItems);\\n                for (var j = 0; j < itemTypes.length; j++) {\\n\\n                    var itemType = itemTypes[j];\\n\\n                    // split array into chunk, as there is limit in number of piwik custom variables\\n                    var chunks = Utils.arrayChunk(trackDisplayItems[itemType], 6);\\n                    for (var chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\\n                        var trackData = {\\n                            ItemType: itemType,\\n                            SidebarId: Configs.getUuid()\\n                        };\\n\\n                        var displayItems = chunks[chunkIndex];\\n                        for (var k = 0; k < displayItems.length; k++) {\\n                            var displayItem = displayItems[k];\\n                            trackData['SidebarItem' + displayItem.position] = displayItem.url;\\n                        }\\n\\n                        Piwik.trackEvent('Sidebar', 'DisplaySidebar', '', '', trackData);\\n                    }\\n                }\\n            }\\n\\n            /* Update ads */\\n            if (adsAdded > 0) {\\n                container.ready(function () {\\n                    addedAdsPositions.forEach(function (addedAdPosition) {\\n                        var adContainer = _rcfgAds2.default.getAdContainer(_self._sidebarRepetitiveAdPlacementId, addedAdPosition);\\n                        if (adContainer) {\\n                            _rcfgAds2.default.renderAds(_self._sidebarRepetitiveAdPlacementId, [adContainer.adContainerId]);\\n                        }\\n                    });\\n                });\\n            }\\n\\n            // Notify for cache update\\n            ModuleFactory.CacheController.notifyForCacheUpdate(ModuleFactory.CacheController.keys.FEATURED_LIST);\\n\\n            _self._page++;\\n            _self._isLoading = false;\\n\\n            // Check offset of sidebar\\n            $.proxy(_self.handlers.loadMoreScrollHandler(), _self);\\n        }\\n\\n    },\\n\\n    loadMorePosts: function loadMorePosts() {\\n        var _self = this;\\n\\n        if (_self._isLoading || _self._noMoreItem) return;\\n        _self._isLoading = true;\\n\\n        var container = $(_self.selectors.ITEM_CONTAINER);\\n        var loadMoreTrigger = +container.data(\\\"load-more-trigger\\\");\\n        // #6120 Changed the feature sidebar ajax to return FULL list of elements, but we only pass a subset to the callback each time\\n        if (_self._page > 1 && _self._dataResult.length > 0) {\\n            var sliceResult = _self._dataResult.slice((_self._page - 1) * loadMoreTrigger, _self._page * loadMoreTrigger);\\n            $.proxy(_self.handlers.loadMoreAjaxCallbackHandler.call(_self, { okay: true, result: sliceResult }), _self);\\n            return;\\n        }\\n\\n        // #7032 share same list for all pages\\n        var listKey = 'desktop';\\n        var cacheKey = listKey;\\n        var url = _self._featuredItemsEndPoint + \\\"/read/ajax-featured?pageType=\\\" + listKey;\\n\\n        var entryId = Utils.getCurrentEntryId();\\n        if (entryId) {\\n            url = _self._featuredItemsEndPoint + \\\"/read/ajax-featured/\\\" + entryId + \\\"?pageType=\\\" + listKey;\\n            cacheKey = listKey + '-' + entryId;\\n        }\\n\\n        if (!_cacheFactory2.default.sessionStorageImpl || !_cacheFactory2.default.sessionStorageImpl.getItem(url) || _self._pageOneExpired || _self._page == 1 && _self.isCacheExpired(cacheKey)) {\\n            $(_self.selectors.LOADING_SPINNER).removeClass('hide');\\n            $.ajax({\\n                type: \\\"GET\\\",\\n                crossDomain: true,\\n                dataType: \\\"jsonp\\\",\\n                jsonpCallback: \\\"data\\\",\\n                cache: \\\"true\\\",\\n                url: url,\\n                success: function success(data) {\\n                    $(_self.selectors.LOADING_SPINNER).addClass('hide');\\n                    if (_cacheFactory2.default.sessionStorageImpl) {\\n                        if (_self._page == 1) {\\n                            _self.checkAndUpdateCacheExpireTime(cacheKey);\\n                            _self._pageOneExpired = true;\\n                        }\\n                        _cacheFactory2.default.sessionStorageImpl.setItem(url, JSON.stringify(data));\\n                    }\\n                    // #6120 Changed the feature sidebar ajax to return FULL list of elements, but we only pass a subset to the callback each time\\n                    if (data && data.okay && data.result && data.result.length > 0) {\\n                        data.result = _self.orderItems(data.result);\\n                        _self._dataResult = data.result; // this stores the full list of featured items returned from AJAX\\n                        data.result = data.result.slice((_self._page - 1) * loadMoreTrigger, _self._page * loadMoreTrigger);\\n                    }\\n                    $.proxy(_self.handlers.loadMoreAjaxCallbackHandler.call(_self, data), _self);\\n                },\\n                error: function error() {\\n                    _self._noMoreItem = true;\\n                    _self._isLoading = false;\\n                    $(_self.selectors.LOADING_SPINNER).addClass('hide');\\n                }\\n            });\\n        } else {\\n            var data = JSON.parse(_cacheFactory2.default.sessionStorageImpl.getItem(url));\\n            // #6120 Changed the feature sidebar ajax to return FULL list of elements, but we only pass a subset to the callback each time\\n            data.result = _self.orderItems(data.result);\\n            _self._dataResult = data.result; // this stores the full list of featured items returned from AJAX\\n            data.result = data.result.slice((_self._page - 1) * loadMoreTrigger, _self._page * loadMoreTrigger);\\n            $.proxy(_self.handlers.loadMoreAjaxCallbackHandler.call(_self, data), _self);\\n        }\\n    },\\n\\n    getCacheExpireTimes: function getCacheExpireTimes() {\\n        var expireTimes = {};\\n        if (_cacheFactory2.default.sessionStorageImpl.getItem(this._cacheExpireKey)) {\\n            expireTimes = JSON.parse(_cacheFactory2.default.sessionStorageImpl.getItem(this._cacheExpireKey));\\n        }\\n        return expireTimes ? expireTimes : {};\\n    },\\n\\n    setCacheExpireTime: function setCacheExpireTime(listKey, expire) {\\n        var _self = this;\\n        var expireTimes = _self.getCacheExpireTimes();\\n        expireTimes[listKey] = expire;\\n        _cacheFactory2.default.sessionStorageImpl.setItem(this._cacheExpireKey, JSON.stringify(expireTimes));\\n    },\\n\\n    checkAndUpdateCacheExpireTime: function checkAndUpdateCacheExpireTime(cacheKey) {\\n        var _self = this;\\n        if (_self.isCacheExpired(cacheKey)) {\\n            _self.setCacheExpireTime(cacheKey, $.now() + _self._cacheTtl * 1000);\\n        }\\n    },\\n\\n    isCacheExpired: function isCacheExpired(cacheKey) {\\n        var _self = this;\\n        var expireTimes = _self.getCacheExpireTimes();\\n        var expired = true;\\n        if (expireTimes[cacheKey] > $.now()) {\\n            expired = false;\\n        }\\n        return expired;\\n    },\\n\\n    appendClickedItemId: function appendClickedItemId(itemId) {\\n        var itemIds = this.getClickedItemIds();\\n        if (itemIds) {\\n            var idx = $.inArray(itemId, itemIds);\\n            if (idx == -1) {\\n                itemIds.push(itemId);\\n            } else {\\n                itemIds.splice(idx, 1);\\n                itemIds.push(itemId);\\n            }\\n            if (itemIds.length > this._cacheFeaturedMaxItemCount) {\\n                itemIds = itemIds.slice(itemIds.length - this._cacheFeaturedMaxItemCount);\\n            }\\n        } else {\\n            var itemIds = [];\\n            itemIds.push(itemId);\\n        }\\n        _cacheFactory2.default.storageImpl.setItem(this._cacheKey, JSON.stringify(itemIds));\\n    },\\n\\n    getClickedItemIds: function getClickedItemIds() {\\n        var data = _cacheFactory2.default.storageImpl.getItem(this._cacheKey);\\n        var itemIds = JSON.parse(data);\\n        return itemIds ? itemIds : [];\\n    },\\n\\n    bindScrollEvents: function bindScrollEvents() {\\n        $(window).on('scroll resize', null, null, $.proxy(this.handlers.windowScrollHandler, this));\\n    },\\n\\n    bindClickEvents: function bindClickEvents() {\\n        var _self = this;\\n        $('#jsid-featured-item-container').on('click', '.badge-featured-item', function (e) {\\n            var itemId = $(this).data('itemId');\\n            var trackData = {\\n                ItemType: $(this).data('itemType'),\\n                ItemUrl: $(this).data('itemUrl'),\\n                ItemPos: $(this).data('itemPos'),\\n                SidebarId: Configs.getUuid()\\n            };\\n\\n            Piwik.trackEvent('Sidebar', 'ClickSidebar', '', '', trackData);\\n            _self.appendClickedItemId(itemId);\\n        });\\n    },\\n\\n    orderItems: function orderItems(items) {\\n        var resultItems = [];\\n        var shuffleItems = [];\\n        for (var i = 0; i < items.length; i++) {\\n            if (items[i].type == 'Recommendation') {\\n                resultItems.push(items[i]);\\n            } else {\\n                shuffleItems.push(items[i]);\\n            }\\n        }\\n\\n        return resultItems.concat(this.shuffle(shuffleItems));\\n    },\\n\\n    shuffle: function shuffle(array) {\\n        var i = array.length,\\n            j = 0,\\n            temp;\\n        while (i--) {\\n            j = Math.floor(Math.random() * (i + 1));\\n            // swap randomly chosen element with current element\\n            temp = array[i];\\n            array[i] = array[j];\\n            array[j] = temp;\\n        }\\n        return array;\\n    }\\n});\\n\\nmodule.exports = FeaturedController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(80), __webpack_require__(26), __webpack_require__(116)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/featured.js\\n// module id = 182\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/featured.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _remoteConfigSystem = __webpack_require__(243);\\n\\nvar _remoteConfigSystem2 = _interopRequireDefault(_remoteConfigSystem);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar RcfgAdsController = $.extend({}, new _base2.default(), {\\n\\n    adConfigs: {},\\n    rcfgAdConfigs: {},\\n    targetedAdConfigs: {},\\n    currentAdView: '',\\n    defaultAdView: '',\\n    adServiceEnabled: false,\\n\\n    fixedAdPlacementsInAdViews: {\\n        sidebar: ['sidebar_top', 'sidebar_bottom'],\\n        footer: ['footer'],\\n        idlePopup: ['idle_popup'],\\n        postBottom: ['post_bottom']\\n    },\\n\\n    init: function init() {\\n        this.rcfgAdConfigs = Configs.get('rcfgAds');\\n        this.targetedAdConfigs = Configs.get('targetedAdTags');\\n        this.currentAdView = 'list_default';\\n        this.defaultAdView = 'list_default';\\n        this.adServiceEnabled = true;\\n\\n        this.setCurrentAdView();\\n        this.adConfigs = this.targetedAdTagsOverride();\\n        this.initAdPlugin();\\n\\n        this.renderSidebarTopAndBottomAds();\\n        this.renderPostBottomAds();\\n        this.renderFooterAds();\\n    },\\n\\n    initAdPlugin: function initAdPlugin() {\\n        var result = {};\\n        try {\\n            result = _remoteConfigSystem2.default.init(this.adConfigs, this.currentAdView, this.defaultAdView);\\n        } catch (error) {}\\n        if (typeof result.adServiceEnabled != 'undefined') {\\n            this.adServiceEnabled = result.adServiceEnabled;\\n            this.currentAdView = result.selectedAdView;\\n        }\\n    },\\n\\n    targetedAdTagsOverride: function targetedAdTagsOverride() {\\n        var adConfigs = this.rcfgAdConfigs;\\n        var country = $.cookie('____lo');\\n        for (var adViewKey in this.targetedAdConfigs) {\\n            if (this.targetedAdConfigs.hasOwnProperty(adViewKey)) {\\n                var adView = this.targetedAdConfigs[adViewKey];\\n                var adPlacements = adView['placements'];\\n                for (var adPlacementKey in adPlacements) {\\n                    if (adPlacements.hasOwnProperty(adPlacementKey)) {\\n                        var adPlacement = adPlacements[adPlacementKey];\\n                        if (typeof country !== 'string') {\\n                            country = 'ALL';\\n                        }\\n\\n                        var placement = null;\\n                        if (adPlacement.hasOwnProperty(country)) {\\n                            placement = adPlacement[country];\\n                        } else if (adPlacement.hasOwnProperty('ALL')) {\\n                            var excludeCountry = adPlacement['ALL'].rules[0].excludeCountry;\\n                            if (excludeCountry.indexOf(country) == -1) {\\n                                placement = adPlacement['ALL'];\\n                            }\\n                        }\\n                        if (placement != null) {\\n                            var currentAdViewName = this.defaultAdView;\\n                            if (adConfigs.hasOwnProperty(this.currentAdView)) {\\n                                currentAdViewName = this.currentAdView;\\n                            }\\n                            if (!adConfigs[currentAdViewName].placements.hasOwnProperty(adPlacementKey)) {\\n                                adConfigs[currentAdViewName].placements[adPlacementKey] = { 'rules': {} };\\n                            }\\n                            adConfigs[currentAdViewName].placements[adPlacementKey].rules = placement.rules;\\n                            adConfigs[currentAdViewName].displayAdEnabled = true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return adConfigs;\\n    },\\n\\n\\n    setCurrentAdView: function setCurrentAdView() {\\n        var pageKey = _page2.default.getPageKey();\\n        if (pageKey != '') {\\n            // test post page\\n            if (_page2.default.isPostPage()) {\\n                this.defaultAdView = 'post_default';\\n                if (_page2.default.isHouseAdPostPage()) {\\n                    this.currentAdView = 'post_housead';\\n                } else if (_page2.default.isFreshPostPage()) {\\n                    this.currentAdView = 'post_fresh';\\n                } else if (_page2.default.isNsfwPostPage()) {\\n                    this.currentAdView = 'post_nsfw';\\n                } else {\\n                    this.currentAdView = 'post_default';\\n                }\\n                return;\\n            }\\n\\n            // test profile page\\n            if (_page2.default.isProfilePage()) {\\n                this.currentAdView = 'profile';\\n                return;\\n            }\\n\\n            // test section hot and section fresh\\n            var splitPageKey = pageKey.toLowerCase().split(\\\"-\\\");\\n            if (splitPageKey.length >= 2) {\\n                var listType = splitPageKey[splitPageKey.length - 1];\\n                if (listType == 'hot' || listType == 'fresh') {\\n                    // section hot or section fresh\\n                    this.defaultAdView = 'section_' + listType;\\n                    splitPageKey.pop();\\n                    // replace underscores with hyphens\\n                    this.currentAdView = splitPageKey.join('-').replace(/_/g, '-') + '_' + listType;\\n                    return;\\n                }\\n            }\\n\\n            // hot or trending or fresh\\n            if (splitPageKey[0] == 'hot' || splitPageKey[0] == 'trending' || splitPageKey[0] == 'fresh') {\\n                this.currentAdView = splitPageKey[0];\\n                return;\\n            }\\n        }\\n\\n        // pages without page key\\n        var splitPathName = window.location.pathname.toLowerCase().split(\\\"/\\\");\\n        if (splitPathName.length > 1 && splitPathName[1] != '') {\\n            this.currentAdView = splitPathName[1];\\n        }\\n    },\\n\\n    renderFooterAds: function renderFooterAds() {\\n        var _this = this;\\n        var placements = _this.getFooterPlacements();\\n        if (placements) {\\n            placements.forEach(function (placement) {\\n                _this.renderPlacement(placement);\\n            });\\n        }\\n    },\\n\\n    renderPostBottomAds: function renderPostBottomAds() {\\n        var _this = this;\\n        var placements = _this.getPostBottomPlacements();\\n        if (placements) {\\n            placements.forEach(function (placement) {\\n                _this.renderPlacement(placement);\\n            });\\n        }\\n    },\\n\\n    renderPlacement: function renderPlacement(placement, position) {\\n        var _this = this;\\n        var container = _this.getAdContainer(placement, position);\\n        if (container) {\\n            var width = RcfgAdsController.getCssStyle(container.adPlacement, 'width');\\n            var height = RcfgAdsController.getCssStyle(container.adPlacement, 'height');\\n            if (width && height) {\\n                _this.applyAdsWidthHeight(container.adContainerId, width, height);\\n            }\\n            _this.renderAds(placement, [container.adContainerId]);\\n        }\\n    },\\n\\n    switchAdView: function switchAdView(adView, defaultAdView) {\\n        try {\\n            _remoteConfigSystem2.default.switchAdView(adView, defaultAdView);\\n        } catch (error) {}\\n    },\\n\\n    renderIdlePopupAds: function renderIdlePopupAds(isHouseAd) {\\n        var _this = this;\\n        var adView = isHouseAd ? 'idle_popup_housead' : 'idle_popup';\\n        _this.switchAdView(adView, 'idle_popup');\\n        var placements = _this.getIdlePopupPlacements();\\n        if (placements) {\\n            placements.forEach(function (placement) {\\n                _this.renderPlacement(placement);\\n            });\\n        }\\n    },\\n\\n    getAdContainer: function getAdContainer(adPlacement, position) {\\n        var adContainer = null;\\n        if (this.adServiceEnabled) {\\n            try {\\n                adContainer = _remoteConfigSystem2.default.getAdPlacementContainerByPosition(adPlacement, position);\\n            } catch (error) {}\\n        }\\n        return adContainer;\\n    },\\n\\n    renderAds: function renderAds(adPlacement, adContainerIds) {\\n        if (this.adServiceEnabled) {\\n            _remoteConfigSystem2.default.renderAds(adPlacement, adContainerIds);\\n        }\\n    },\\n\\n    reRenderAds: function reRenderAds() {\\n        var _this = this;\\n        _remoteConfigSystem2.default.switchAdView(_this.currentAdView, _this.defaultAdView);\\n        _this.renderSidebarTopAndBottomAds();\\n        _this.renderAllSidebarRepetitiveAds();\\n        _this.renderPostBottomAds();\\n        _this.renderFooterAds();\\n    },\\n\\n    renderSidebarTopAndBottomAds: function renderSidebarTopAndBottomAds() {\\n        var _this = this;\\n        var placements = _this.getSidebarTopAndBottomPlacements();\\n        if (placements) {\\n            placements.forEach(function (placement) {\\n                _this.renderPlacement(placement);\\n            });\\n        }\\n    },\\n\\n    renderAllSidebarRepetitiveAds: function renderAllSidebarRepetitiveAds() {\\n        var _this = this;\\n        var placementName = 'sidebar_repetitive';\\n        var adElements = $('#jsid-featured-item-container').find('.badge-gag-ads-container');\\n        if (adElements) {\\n            adElements.each(function (index) {\\n                var elementId = adElements[index].id;\\n                if (typeof elementId === 'string') {\\n                    var position = elementId.split(\\\"-\\\").pop();\\n                    _this.renderPlacement(placementName, parseInt(position));\\n                }\\n            });\\n        }\\n    },\\n\\n    getSidebarTopAndBottomPlacements: function getSidebarTopAndBottomPlacements() {\\n        return this.fixedAdPlacementsInAdViews['sidebar'];\\n    },\\n\\n    getFooterPlacements: function getFooterPlacements() {\\n        return this.fixedAdPlacementsInAdViews['footer'];\\n    },\\n\\n    getPostBottomPlacements: function getPostBottomPlacements() {\\n        return this.fixedAdPlacementsInAdViews['postBottom'];\\n    },\\n\\n    getIdlePopupPlacements: function getIdlePopupPlacements() {\\n        return this.fixedAdPlacementsInAdViews['idlePopup'];\\n    },\\n\\n    getCssStyle: function getCssStyle(adPlacement) {\\n        var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'height';\\n\\n        if (typeof adPlacement.rule != 'undefined') {\\n            if (typeof adPlacement.rule[attr] != 'undefined') {\\n                return adPlacement.rule[attr];\\n            }\\n        }\\n\\n        return null;\\n    },\\n\\n    applyAdsWidthHeight: function applyAdsWidthHeight(adContainerId, width, height) {\\n        $('#' + adContainerId).css({ \\\"width\\\": width, \\\"height\\\": height });\\n    }\\n});\\n\\nmodule.exports = RcfgAdsController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/rcfg-ads.js\\n// module id = 183\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/rcfg-ads.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, GA, LocaleUtils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _overlay = __webpack_require__(128);\\n\\nvar _overlay2 = _interopRequireDefault(_overlay);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _userUpload = __webpack_require__(420);\\n\\nvar _userUpload2 = _interopRequireDefault(_userUpload);\\n\\nvar _vote = __webpack_require__(250);\\n\\nvar _vote2 = _interopRequireDefault(_vote);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Dropzone = __webpack_require__(406); /* \\n                                        Controller for 6.0 Upload Page and Overlay\\n                                    */\\n\\n\\nvar UploadController = $.extend({}, new _base2.default(), {\\n\\n    TITLE_LENGTH_WARNING_THRESHOLD: 20,\\n    _sectionsCountMax: 0,\\n    _isUploadingImage: false,\\n    _isVerifyingUrl: false,\\n    _verifyUrlAjax: false,\\n    _quotaCountDown: false,\\n\\n    init: function init() {\\n        this._showLocaleSections();\\n        this._bindElements();\\n\\n        this._sectionsCountMax = $(this.selectors.SECTION_LIST).data('sections-count-max');\\n\\n        if (_page2.default.isUploadPage()) {\\n            _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_UPLOAD);\\n            var url = $('#jsid-get-url').text();\\n            var title = $('#jsid-get-title').text();\\n            if (url != '') {\\n                this.showUploadStep(this.selectors.UPLOAD_URL_STEP);\\n                $(this.selectors.UPLOAD_URL_INPUT).val(url);\\n                this._validateUrl();\\n                if (title != '') {\\n                    $(this.selectors.UPLOAD_TITLE_INPUT).val(title);\\n                }\\n                this.showUploadStep(this.selectors.UPLOAD_URL_STEP);\\n            } else {\\n                this.showUploadStep(this.selectors.UPLOAD_FILE_STEP);\\n            }\\n        }\\n    },\\n\\n    selectors: {\\n        UPLOAD_URL_BTN: '#jsid-upload-url-btn',\\n        UPLOAD_FILE_BTN: '#jsid-upload-file-btn',\\n        UPLOAD_FILE_BTN_TEXT: '.badge-drop-zone-text',\\n        UPLOAD_URL_NEXT_BTN: '.badge-upload-url-next-btn',\\n        UPLOAD_URL_BACK_BTN: '.badge-upload-url-back-btn',\\n        UPLOAD_INFO_NEXT_BTN: '.badge-upload-info-next-btn',\\n        UPLOAD_INFO_BACK_BTN: '.badge-upload-info-back-btn',\\n        UPLOAD_POST_PICK_SECTION_POST_BTN: '.badge-upload-pick-section-post-btn',\\n        UPLOAD_POST_PICK_SECTION_BACK_BTN: '.badge-upload-pick-section-back-btn',\\n        UPLOAD_URL_INPUT: '#jsid-upload-url-input',\\n        UPLOAD_FILE_INPUT: '#jsid-upload-file-input',\\n        UPLOAD_CHAR_COUNT: '#jsid-char-count',\\n        UPLOAD_TITLE_INPUT: '#jsid-upload-title',\\n        UPLOAD_SOURCE_CHECKBOX: '#jsid-source-checkbox',\\n        UPLOAD_SOURCE_CHECKBOX_LABEL: '#jsid-source-checkbox-label',\\n        UPLOAD_SOURCE_INPUT: '#jsid-source-input',\\n        UPLOAD_SOURCE_CHECKBOX_DIV: '#jsid-source-checkbox-div',\\n        UPLOAD_SOURCE_INPUT_TEXTBOX: '#jsid-source-input-textbox',\\n        UPLOAD_SUBMIT_BTN: '#jsid-submit-btn',\\n        UPLOAD_DISABLE_MASK: '#jsid-disable-mask',\\n        UPLOAD_STEP: '.badge-upload-step',\\n        UPLOAD_FILE_STEP: '.badge-upload-file-step',\\n        UPLOAD_URL_STEP: '.badge-upload-url-step',\\n        UPLOAD_INFO_STEP: '.badge-upload-info-step',\\n        UPLOAD_PICK_SECTION_STEP: '.badge-upload-pick-section-step',\\n        UPLOAD_FILE_PREVIEW: '#jsid-upload-file-preview',\\n        UPLOAD_INFO_MESSAGE: '.badge-upload-info-message',\\n        UPLOAD_URL_MESSAGE: '.badge-upload-url-message',\\n        UPLOAD_FILE_ID: '#jsid-upload-file-id',\\n        UPLOAD_FILE_CAPTCHA: '.badge-upload-captcha',\\n        UPLOAD_CSRF_TOKEN: '#jsid-upload-csrf-token',\\n\\n        UPLOAD_CONTENT_ERROR_LABEL: '#jsid-upload-content-error',\\n        UPLOAD_TITLE_ERROR_LABEL: '#jsid-upload-title-error',\\n        UPLOAD_ERROR_LABEL: '#jsid-upload-error',\\n        UPLOAD_SECTION_ERROR_LABEL: '#jsid-upload-section-error',\\n        UPLOAD_IS_NSFW: '#jsid-upload-is-nsfw',\\n\\n        SECTION_LIST: '#jsid-section-list',\\n        SECTION_LIST_ITEMS: '.badge-upload-section-list-item',\\n        SECTION_LIST_ITEMS_SELECTOR: '.badge-upload-section-list-item-selector',\\n        SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM: '.badge-upload-section-list-profile-only',\\n        SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM_SELECTOR: '.badge-upload-section-list-item-profile-only',\\n        DROPZONE_TEMPLATE: '#jsid-drop-zone-template',\\n        DROPZONE_PREVIEW: '#jsid-drop-zone-preview'\\n    },\\n\\n    css: {\\n        METHOD_SELECTED: 'upload-selected',\\n        TITLE_WARNING: 'warn'\\n    },\\n\\n    showUploadStep: function showUploadStep(step, message) {\\n        message = message || '';\\n        $(this.selectors.UPLOAD_STEP).addClass('hide');\\n        $(step).removeClass('hide');\\n        if (step == this.selectors.UPLOAD_INFO_STEP) {\\n            $(this.selectors.UPLOAD_TITLE_INPUT).focus();\\n            if (Configs.get('user.showCaptcha')) {\\n                $(this.selectors.UPLOAD_FILE_CAPTCHA).removeClass('hide');\\n            }\\n            this.showUploadInfoMessage(this.selectors.UPLOAD_INFO_MESSAGE, message);\\n        } else if (step == this.selectors.UPLOAD_URL_STEP) {\\n            $(this.selectors.UPLOAD_URL_INPUT).focus();\\n            this.showUploadInfoMessage(this.selectors.UPLOAD_URL_MESSAGE, message);\\n        }\\n    },\\n\\n    showUploadInfoMessage: function showUploadInfoMessage(selector, message) {\\n        if (message == '') {\\n            $(selector).addClass('hide');\\n        } else {\\n            $(selector).html(message);\\n            $(selector).removeClass('hide');\\n        }\\n    },\\n\\n    /* Update title char counter and color */\\n    _setCharCount: function _setCharCount(e) {\\n        var target = $(e.currentTarget);\\n        var maxlength = parseInt(target.data('maxlength'), 10);\\n        var length = target.val().length;\\n        var remain = maxlength - length;\\n        var titleInput = $(this.selectors.UPLOAD_CHAR_COUNT).text(remain);\\n\\n        if (remain <= this.TITLE_LENGTH_WARNING_THRESHOLD) {\\n            titleInput.addClass(this.css.TITLE_WARNING);\\n        } else {\\n            titleInput.removeClass(this.css.TITLE_WARNING);\\n        }\\n    },\\n\\n    _validateUrl: function _validateUrl(e) {\\n        //var target = $(e.currentTarget);\\n        if ($(this.selectors.UPLOAD_URL_INPUT).val().length > 0 && $(this.selectors.UPLOAD_URL_NEXT_BTN).text() != 'Loading') {\\n            $(this.selectors.UPLOAD_URL_NEXT_BTN).removeClass('disabled');\\n        } else {\\n            $(this.selectors.UPLOAD_URL_NEXT_BTN).addClass('disabled');\\n        }\\n    },\\n\\n    _updateSourceFields: function _updateSourceFields(e) {\\n        var target = $(this.selectors.UPLOAD_SOURCE_CHECKBOX);\\n        var sourceLink = $(this.selectors.UPLOAD_SOURCE_INPUT);\\n        if (target.is(':checked')) {\\n            sourceLink.removeClass('hide');\\n            sourceLink.addClass('last');\\n            $(this.selectors.UPLOAD_SOURCE_CHECKBOX_DIV).removeClass('last');\\n        } else {\\n            sourceLink.addClass('hide');\\n            sourceLink.removeClass('last');\\n            $(this.selectors.UPLOAD_SOURCE_CHECKBOX_DIV).addClass('last');\\n        }\\n    },\\n\\n    _updateSections: function _updateSections(e) {\\n        e.preventDefault();\\n        var _this = UploadController;\\n\\n        if (_this._sectionsCountMax == 1) {\\n            // remove all selected section\\n            $(_this.selectors.SECTION_LIST).find(_this.selectors.SECTION_LIST_ITEMS_SELECTOR).removeClass('selected');\\n        }\\n\\n        var checkedCount = 0;\\n        var clickedItem = $(e.target).closest(_this.selectors.SECTION_LIST_ITEMS);\\n        var isSelecting = !clickedItem.find(_this.selectors.SECTION_LIST_ITEMS_SELECTOR).hasClass('selected');\\n        if (isSelecting) {\\n            checkedCount++;\\n            if (clickedItem.is(_this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM)) {\\n                // remove all selected section\\n                $(_this.selectors.SECTION_LIST).find(_this.selectors.SECTION_LIST_ITEMS_SELECTOR).removeClass('selected');\\n            } else {\\n                // uncheck profile only\\n                $(_this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM_SELECTOR).removeClass('selected');\\n            }\\n        }\\n\\n        checkedCount = checkedCount + $(_this.selectors.SECTION_LIST).find(_this.selectors.SECTION_LIST_ITEMS_SELECTOR + '.selected').length;\\n\\n        if (checkedCount <= _this._sectionsCountMax) {\\n            clickedItem.find(_this.selectors.SECTION_LIST_ITEMS_SELECTOR).toggleClass('selected');\\n        }\\n\\n        if (checkedCount > 0 || $(_this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM_SELECTOR).hasClass('selected')) {\\n            $(_this.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).removeClass('disabled');\\n        } else {\\n            $(_this.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).addClass('disabled');\\n        }\\n    },\\n\\n    _getTitleError: function _getTitleError() {\\n        var title = $(this.selectors.UPLOAD_TITLE_INPUT).val();\\n        var minlength = $(this.selectors.UPLOAD_TITLE_INPUT).data('minlength');\\n        var maxlength = $(this.selectors.UPLOAD_TITLE_INPUT).data('maxlength');\\n\\n        // [\\\\u2000-\\\\u206F\\\\u2E00-\\\\u2E7F] matches all special whitespace in unicode to avoid empty space title spam\\n        var strippedTitle = title.replace(/[\\\\t!?,:;\\\\-\\\\s\\\\.]/g, '').replace(/[\\\\u2000-\\\\u206F\\\\u2E00-\\\\u2E7F]/g, '');\\n\\n        if (!title || strippedTitle.length < minlength) {\\n            return \\\"Give a funny, creative and descriptive title to the post would give the post a boost!\\\";\\n        } else if (title.length > maxlength) {\\n            return \\\"Your title is a bit long. Be concise!\\\";\\n        }\\n    },\\n\\n    _isValidImageUrl: function _isValidImageUrl(url) {\\n        var reg = /^http(s?):\\\\/\\\\//i;\\n        return url.toLowerCase().match(reg);\\n    },\\n\\n    _isValidImageExtension: function _isValidImageExtension(path) {\\n        path += \\\"\\\";\\n        var extension = path.split('.').pop();\\n        var reg = /(jpeg|jpg|gif|png)/i;\\n        return extension.match(reg);\\n    },\\n\\n    initialize: function initialize() {\\n        var _self = this;\\n\\n        // skip binding dropzone if no preview template\\n        if ($(this.selectors.DROPZONE_TEMPLATE).length == 0) {\\n            return false;\\n        }\\n\\n        var fileDropZone = new Dropzone(\\\"html\\\", {\\n            url: \\\"/submit/upload-image\\\",\\n            thumbnailWidth: 600,\\n            thumbnailHeight: 600,\\n            previewsContainer: this.selectors.DROPZONE_PREVIEW,\\n            clickable: this.selectors.UPLOAD_FILE_BTN,\\n            acceptedMimeTypes: 'image/jpeg, image/jpg, image/png, image/gif, video/mp4, video/webm, video/quicktime',\\n            previewTemplate: $(this.selectors.DROPZONE_TEMPLATE).html(),\\n            maxFilesize: _self.getMaxFilesize(),\\n            maxImageFilesize: Configs.get('configs.maxFilesize') / 1024 / 1024,\\n            maxVideoFilesize: Configs.get('configs.maxVideoFilesize') / 1024 / 1024\\n        });\\n\\n        fileDropZone.on(\\\"dragover\\\", function (e) {\\n            if (!_page2.default.isUploadPage() && !_self._isUploadingImage) {\\n                _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_DRAG_AND_DROP);\\n            }\\n        }).on(\\\"addedfile\\\", function (file) {\\n            var spinnerHtml = '<div class=\\\"simple-spinner\\\"></div>';\\n            $(_self.selectors.UPLOAD_FILE_PREVIEW).html(spinnerHtml);\\n            //$(UploadController.selectors.UPLOAD_FILE_PREVIEW).addClass('uploading');\\n            $(_self.selectors.UPLOAD_INFO_NEXT_BTN).addClass('disabled');\\n            $(_self.selectors.UPLOAD_URL_INPUT).val('');\\n\\n            _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_UPLOAD);\\n            _self.showUploadStep(_self.selectors.UPLOAD_INFO_STEP);\\n            GA.track('UploadAction', 'Upload', 'Image');\\n            if (this.files[1] != null) {\\n                this.removeFile(this.files[0]);\\n            }\\n        }).on(\\\"drop\\\", function (e) {\\n            if (_self._isUploadingImage) {\\n                return false;\\n            }\\n            if (!_page2.default.isUploadPage()) {\\n                _overlay2.default.hideAllOverlay();\\n            }\\n            GA.track('UploadAction', 'DragFile', 'Image');\\n            _self._isUploadingImage = true;\\n        }).on(\\\"success\\\", function (file, resp) {\\n            _self.uploadedFile(resp, file);\\n        }).on(\\\"error\\\", function (file, message) {\\n            _self.uploadedFile({\\n                okay: false,\\n                message: 'Error occurred while uploading photo.'\\n            }, file);\\n        }).on(\\\"complete\\\", function (file) {\\n            if (file.type.indexOf('image/') != 0 && !_self.isVideoFile(file)) {\\n                _self.uploadedFile({\\n                    okay: false,\\n                    message: 'Unsupported type.'\\n                }, file);\\n                GA.track('UploadAction', 'UploadError', 'UnSupportedType');\\n            } else if (_self.isVideoFile(file) && file.size > Configs.get('configs.maxVideoFilesize')) {\\n\\n                _self.uploadedFile({\\n                    okay: false,\\n                    message: 'File size is too large.'\\n                }, file);\\n                GA.track('UploadAction', 'UploadError', 'ExceedMaxVideoFileSize');\\n            } else if (!_self.isVideoFile(file) && file.size > Configs.get('configs.maxFilesize')) {\\n\\n                _self.uploadedFile({\\n                    okay: false,\\n                    message: 'File size is too large.'\\n                }, file);\\n                GA.track('UploadAction', 'UploadError', 'ExceedMaxFileSize');\\n            }\\n            _self._isUploadingImage = false;\\n        });\\n    },\\n\\n    getMaxFilesize: function getMaxFilesize() {\\n        return Math.max(Configs.get('configs.maxFilesize'), Configs.get('configs.maxVideoFilesize')) / 1024 / 1024;\\n    },\\n\\n    isVideoFile: function isVideoFile(file) {\\n\\n        if (file.type == 'video/mp4' || file.type == 'video/webm' || file.type == 'video/quicktime') {\\n            return true;\\n        }\\n\\n        return false;\\n    },\\n\\n    uploadedFile: function uploadedFile(resp, file) {\\n        if (resp.okay) {\\n\\n            if (this.isVideoFile(file)) {\\n\\n                var fileURL = URL.createObjectURL(file);\\n                this.updatePreviewHotlink('video', fileURL);\\n            } else {\\n\\n                $(this.selectors.UPLOAD_FILE_PREVIEW).html($(this.selectors.DROPZONE_PREVIEW).html());\\n            }\\n\\n            $('.dz-image').removeClass('hide');\\n            $(this.selectors.UPLOAD_INFO_NEXT_BTN).removeClass('disabled');\\n            $(this.selectors.UPLOAD_FILE_ID).val(resp.uploadId);\\n            $(this.selectors.UPLOAD_CSRF_TOKEN).val(resp.csrftoken);\\n        } else {\\n            $(this.selectors.UPLOAD_FILE_PREVIEW).html('');\\n            if (resp.message && resp.message != '') {\\n                this.showUploadStep(this.selectors.UPLOAD_INFO_STEP, resp.message);\\n            }\\n            this.startQuotaCountDown();\\n        }\\n        $(this.selectors.UPLOAD_FILE_PREVIEW).removeClass('uploading');\\n    },\\n\\n    urlNext: function urlNext() {\\n        var url = $(this.selectors.UPLOAD_URL_INPUT).val();\\n        if (!url.length) {\\n            return;\\n        }\\n        if (!this._isValidImageUrl(url)) {\\n            this.showUploadStep(this.selectors.UPLOAD_URL_STEP, 'Invalid URL.');\\n            return;\\n        }\\n        this.ajaxVerifyUrl(url);\\n    },\\n\\n    ajaxVerifyUrl: function ajaxVerifyUrl(url) {\\n        var _self = this;\\n\\n        if (this._isVerifyingUrl) {\\n            return;\\n        }\\n\\n        this._isVerifyingUrl = true;\\n        $(this.selectors.UPLOAD_URL_NEXT_BTN).addClass('disabled').text('Loading');\\n\\n        var params = {\\n            'url': url\\n        };\\n\\n        this._verifyUrlAjax = $.ajax({\\n            type: 'POST',\\n            dataType: 'json',\\n            url: '/submit/verify-url',\\n            data: params,\\n            success: function success(data) {\\n                if (data.okay) {\\n                    _self.showUploadStep(UploadController.selectors.UPLOAD_INFO_STEP);\\n                    GA.track('UploadAction', 'Upload', 'Url');\\n                    $(_self.selectors.UPLOAD_INFO_NEXT_BTN).removeClass('disabled');\\n                    if (data.previewType && data.previewUrl && data.previewType != '' && data.previewUrl != '') {\\n                        _self.updatePreviewHotlink(data.previewType, data.previewUrl);\\n                    } else {\\n                        _self.updatePreviewHotlink();\\n                    }\\n                    $(_self.selectors.UPLOAD_CSRF_TOKEN).val(data.csrftoken);\\n                } else if (data.message && data.message != '') {\\n                    _self.showUploadStep(UploadController.selectors.UPLOAD_URL_STEP, data.message);\\n                }\\n            },\\n            error: function error(xhr, status) {\\n                if (status == 'abort') return;\\n                _self.showUploadStep(UploadController.selectors.UPLOAD_URL_STEP, 'Error occurred.');\\n            },\\n            complete: function complete() {\\n                $(_self.selectors.UPLOAD_URL_NEXT_BTN).removeClass('disabled').text('Next');\\n                _self._isVerifyingUrl = false;\\n            }\\n        });\\n    },\\n\\n    updatePreviewHotlink: function updatePreviewHotlink(type, url) {\\n        if (type == 'photo') {\\n            $(this.selectors.UPLOAD_FILE_PREVIEW).html('<img src=\\\"' + url + '\\\" />');\\n        } else if (type == 'video') {\\n            $(this.selectors.UPLOAD_FILE_PREVIEW).html('<video src=\\\"' + url + '\\\" muted />');\\n        } else {\\n            $(this.selectors.UPLOAD_FILE_PREVIEW).html('');\\n        }\\n    },\\n\\n    validateUploadInfo: function validateUploadInfo() {\\n        var titleError = this._getTitleError();\\n        var valid = true;\\n\\n        if (titleError) {\\n            this.showUploadStep(this.selectors.UPLOAD_INFO_STEP, titleError);\\n            return false;\\n        }\\n\\n        if (Configs.get('user.showCaptcha') && !$('[name=g-recaptcha-response]', this.selectors.UPLOAD_INFO_STEP).val()) {\\n            this.showUploadStep(this.selectors.UPLOAD_INFO_STEP, 'Wrong CAPTCHA.');\\n            return false;\\n        }\\n\\n        return valid;\\n    },\\n\\n    _pad: function _pad(str, ch) {\\n        if (ch == undefined) {\\n            ch = '0';\\n        }\\n        return str < 10 ? ch + '' + str : str;\\n    },\\n\\n    _convertTime: function _convertTime(seconds) {\\n        var d = 0;\\n        var h = 0;\\n        var m = 0;\\n        var s = 0;\\n        if (seconds < 0) {\\n            seconds = 0;\\n        }\\n\\n        d = parseInt(seconds / 86400);\\n        seconds -= d * 86400;\\n        h = parseInt(seconds / 3600);\\n        seconds -= h * 3600;\\n        m = parseInt(seconds / 60);\\n        seconds -= m * 60;\\n        s = seconds;\\n\\n        var str = '';\\n        if (d > 0) str += this._pad(d) + ':';\\n        str += this._pad(h) + ':';\\n        str += this._pad(m) + ':';\\n        str += this._pad(s);\\n        return str;\\n    },\\n\\n    _updateDisplay: function _updateDisplay(el) {\\n        var ts = el.data('timestamp');\\n        var now = Math.round(new Date().getTime() / 1000);\\n        var startTs = el.data('start');\\n        if (startTs == null) {\\n            startTs = now;\\n            el.data('start', startTs);\\n        }\\n        var elapsed = now - startTs;\\n        el.text(this._convertTime(ts - elapsed));\\n    },\\n\\n    _updateAll: function _updateAll() {\\n        var _self = this;\\n\\n        $('.badge-countdown').each(function () {\\n            _self._updateDisplay($(this));\\n        });\\n    },\\n\\n    startQuotaCountDown: function startQuotaCountDown() {\\n        if (!this._quotaCountDown) {\\n            this._updateAll();\\n            this._quotaCountDown = setInterval(this._updateAll.bind(this), 1000);\\n        }\\n    },\\n\\n    _showLocaleSections: function _showLocaleSections() {\\n        var _this = this;\\n        $(_this.selectors.SECTION_LIST).find('li').each(function () {\\n            if (typeof $(this).attr('data-locales') === 'string') {\\n                var locales = $(this).attr('data-locales').split(',');\\n                if (locales.length > 0) {\\n                    if (LocaleUtils.isMatchAnyLocales(locales)) {\\n                        $(this).removeClass('hide');\\n                    }\\n                }\\n            }\\n        });\\n    },\\n\\n    _bindElements: function _bindElements() {\\n        var _self = this;\\n\\n        $(this.selectors.UPLOAD_FILE_BTN).on('click', $.proxy(function (e) {\\n            GA.track('UploadAction', 'TapSelectImage');\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_URL_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.showUploadStep(this.selectors.UPLOAD_URL_STEP);\\n            GA.track('UploadAction', 'TapAddUrl');\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_URL_NEXT_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.urlNext();\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_INFO_NEXT_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            if ($(e.target).hasClass('disabled')) {\\n                return false;\\n            }\\n            if (!_self.validateUploadInfo()) {\\n                return false;\\n            }\\n            _self.showUploadStep(this.selectors.UPLOAD_PICK_SECTION_STEP);\\n            GA.track('UploadAction', 'SubmitPostTitle');\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_URL_BACK_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.showUploadStep(this.selectors.UPLOAD_FILE_STEP);\\n            if (_self._verifyUrlAjax && _self._verifyUrlAjax.readyState != 4) {\\n                _self._verifyUrlAjax.abort();\\n            }\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_INFO_BACK_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.showUploadStep(this.selectors.UPLOAD_FILE_STEP);\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.submitUpload();\\n            GA.track('UploadAction', 'SubmitUpload');\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_POST_PICK_SECTION_BACK_BTN).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            _self.showUploadStep(this.selectors.UPLOAD_INFO_STEP);\\n        }, this));\\n\\n        $(this.selectors.UPLOAD_FILE_PREVIEW).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            if ($(_self.selectors.UPLOAD_FILE_PREVIEW).find('img, video').attr('src') != null) {\\n                var html = $(_self.selectors.UPLOAD_FILE_PREVIEW).find('img, video').clone().prop('autoplay', true);\\n                _self.showPostZoomOverlay(html);\\n                GA.track('UploadAction', 'TapPreviewImage');\\n            }\\n        }));\\n\\n        $(this.selectors.UPLOAD_URL_INPUT).keypress(function (e) {\\n            if (e.which == 13) {\\n                _self.urlNext();\\n            }\\n            e.stopPropagation();\\n        }).on('paste', function (e) {\\n            setTimeout(function () {\\n                _self.urlNext();\\n            }, 50);\\n            e.stopPropagation();\\n        });\\n\\n        // the setTimeout is required because none of keydown/keyup/keypress alone is sufficient for our purpose\\n        // keydown requires extra work to determine the after-key value\\n        // keyup doesn't get triggered in between when doing Ctrl+(v v v v v)\\n        // keypress doesn't trigger upon delete/backspace\\n        // so the solution is keydown with timeout\\n        $(this.selectors.UPLOAD_TITLE_INPUT).on('keydown input', $.proxy(function (e) {\\n            setTimeout($.proxy(this._setCharCount, this, e), 50);\\n        }, this));\\n        $(this.selectors.UPLOAD_URL_INPUT).on('keydown input', $.proxy(function (e) {\\n            setTimeout($.proxy(this._validateUrl, this, e), 50);\\n        }, this));\\n\\n        //$(this.selectors.UPLOAD_SOURCE_CHECKBOX + ',' + this.selectors.UPLOAD_SOURCE_CHECKBOX_LABEL).on('mousedown', function() {$(this.selectors.UPLOAD_SOURCE_CHECKBOX_LABEL).focus();});\\n        $(this.selectors.UPLOAD_SOURCE_CHECKBOX).on('change', $.proxy(this._updateSourceFields, this));\\n        $(this.selectors.SECTION_LIST_ITEMS).on('click', this._updateSections);\\n    },\\n\\n    showPostZoomOverlay: function showPostZoomOverlay(html) {\\n        $(ModuleFactory.PostController.selectors.MODAL_POST_ZOOM_CONTAINER).find('.badge-post-zoom-img').html(html);\\n        $(ModuleFactory.PostController.selectors.MODAL_POST_ZOOM_CONTAINER).find('video').prop({ 'controls': true });\\n        _overlay2.default.showOverlay(ModuleFactory.PostController.selectors.MODAL_POST_ZOOM_CONTAINER);\\n        _overlay2.default._hideAllOverlayReturnToUpload = true;\\n        _overlay2.default.setHideUsingBackground(true);\\n    },\\n\\n    submitUpload: function submitUpload() {\\n        var _self = this;\\n        var title = $(this.selectors.UPLOAD_TITLE_INPUT).val();\\n        var nsfw = 0;\\n        if ($(this.selectors.UPLOAD_IS_NSFW).is(':checked')) {\\n            nsfw = 1;\\n        }\\n\\n        var uploadId = $(this.selectors.UPLOAD_FILE_ID).val();\\n        var sections = this.getSelectedSectionUrls();\\n        var quoteSourceUrl = $(this.selectors.UPLOAD_SOURCE_INPUT_TEXTBOX).val();\\n        var url = $(this.selectors.UPLOAD_URL_INPUT).val();\\n        var recaptcha = $('[name=g-recaptcha-response]', this.selectors.UPLOAD_INFO_STEP).val();\\n        var csrftoken = $(this.selectors.UPLOAD_CSRF_TOKEN).val();\\n        var skipFromLists = 0;\\n        if ($(this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM_SELECTOR).hasClass('selected')) {\\n            skipFromLists = 1;\\n        }\\n        var params = {\\n            'title': title,\\n            'nsfw': nsfw,\\n            'uploadId': uploadId,\\n            'type': 'Photo',\\n            'section': sections,\\n            'source': quoteSourceUrl,\\n            'url': url,\\n            'g-recaptcha-response': recaptcha,\\n            'csrftoken': csrftoken,\\n            'skipFromLists': skipFromLists\\n        };\\n\\n        $(this.selectors.SECTION_LIST).addClass('disabled');\\n        $(this.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).addClass('disabled');\\n        $(this.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).text('Posting');\\n        $(this.selectors.UPLOAD_POST_PICK_SECTION_BACK_BTN).addClass('disabled');\\n        $(_overlay2.default.selectors.OVERLAY_CLOSE_BUTTON).addClass('hide');\\n\\n        var errorCallback = function errorCallback(resp) {\\n            var message = resp && resp.message && resp.message.length ? resp.message : 'Error occurred. Please try again.';\\n            _self.showUploadStep(UploadController.selectors.UPLOAD_INFO_STEP, message);\\n\\n            $(_self.selectors.SECTION_LIST).removeClass('disabled');\\n            $(_self.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).removeClass('disabled');\\n            $(_self.selectors.UPLOAD_POST_PICK_SECTION_POST_BTN).text('Post');\\n            $(_self.selectors.UPLOAD_POST_PICK_SECTION_BACK_BTN).removeClass('disabled');\\n            $(_overlay2.default.selectors.OVERLAY_CLOSE_BUTTON).removeClass('hide');\\n\\n            _self.startQuotaCountDown();\\n        };\\n\\n        $.ajax({\\n            type: 'POST',\\n            dataType: 'json',\\n            url: '/submit',\\n            data: params,\\n            success: function success(data) {\\n                if (data.okay) {\\n                    _userUpload2.default.clearCache();\\n                    _vote2.default.clearCache();\\n                    window.location.href = data.postUrl;\\n                    return;\\n                }\\n                errorCallback(data);\\n            },\\n            error: function error() {\\n                errorCallback();\\n            }\\n        });\\n    },\\n\\n    getSelectedSectionUrls: function getSelectedSectionUrls() {\\n        var sections = [];\\n        $(this.selectors.SECTION_LIST).find(this.selectors.SECTION_LIST_ITEMS_SELECTOR + '.selected').each(function (index, currentElement) {\\n            sections.push($(currentElement).data('url'));\\n        });\\n        return sections;\\n    },\\n\\n    updateMyProfileOnlyIcon: function updateMyProfileOnlyIcon(imgSrc) {\\n        if (imgSrc != null) {\\n            $(this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM).find('.icon').html('<img src=\\\"' + imgSrc + '\\\"/>');\\n        } else {\\n            $(this.selectors.SECTION_LIST_ITEMS_PROFILE_ONLY_ITEM).find('.icon').html('');\\n        }\\n    }\\n});\\n\\nmodule.exports = UploadController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(40), __webpack_require__(174), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/upload.js\\n// module id = 184\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/upload.js?\");\n},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($, LocalStorageUtils, LogUtils) {\"use strict\";\\n\\nvar _base = __webpack_require__(129);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheFactoryModel = $.extend({}, new _base2.default(), {\\n\\n    storageImpl: {},\\n    sessionStorageImpl: {},\\n\\n    init: function init() {\\n        // identify whether local storage can be used\\n        var testKey = \"9gagTestStorage\";\\n        this.storageImpl = LocalStorageUtils.getStore();\\n\\n        var hasSessionStorage = false;\\n        try {\\n            if (window.sessionStorage) {\\n                sessionStorage.setItem(testKey, \"\");\\n                sessionStorage.removeItem(testKey);\\n                this.sessionStorageImpl = sessionStorage;\\n                hasSessionStorage = true;\\n            }\\n        } catch (err) {\\n            LogUtils.log(\\'Session Storage is not available, use non-persistent storage instead\\');\\n        }\\n        if (!hasSessionStorage) {\\n            this.sessionStorageImpl = this.nonPersistentLS;\\n        }\\n    }\\n});\\n\\nmodule.exports = CacheFactoryModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(112), __webpack_require__(10)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/cache-factory.js\\n// module id = 185\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/cache-factory.js?')},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(TrackUtils, Configs) {'use strict';\\n\\nvar Track = {\\n\\n    init: function init() {\\n        TrackUtils.init(Configs.get('configs.t'));\\n    },\\n\\n    uniqueViewed: function uniqueViewed(options) {\\n        TrackUtils.uniqueViewed(options);\\n    },\\n\\n    event: function event(action, value, options) {\\n        var user = Configs.get('user.id');\\n        if (user) {\\n            options.user = user;\\n        }\\n        TrackUtils.event(action, value, options);\\n    },\\n\\n    logTime: function logTime(key, timeMillis) {\\n        TrackUtils.logTime(key, timeMillis);\\n    },\\n\\n    logCount: function logCount(key, count) {\\n        TrackUtils.logCount(key, count);\\n    },\\n\\n    downloadFail: function downloadFail(src) {\\n        TrackUtils.downloadFail(src);\\n    }\\n};\\n\\nmodule.exports = Track;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(127), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/track.js\\n// module id = 186\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/track.js?\")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _forEach = __webpack_require__(342);\\n\\nvar _forEach2 = _interopRequireDefault(_forEach);\\n\\nvar _indexOf = __webpack_require__(345);\\n\\nvar _indexOf2 = _interopRequireDefault(_indexOf);\\n\\nvar _last = __webpack_require__(346);\\n\\nvar _last2 = _interopRequireDefault(_last);\\n\\nvar _map = __webpack_require__(347);\\n\\nvar _map2 = _interopRequireDefault(_map);\\n\\nvar _union = __webpack_require__(357);\\n\\nvar _union2 = _interopRequireDefault(_union);\\n\\nvar _difference = __webpack_require__(341);\\n\\nvar _difference2 = _interopRequireDefault(_difference);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nvar _DFP = __webpack_require__(238);\\n\\nvar _DFP2 = _interopRequireDefault(_DFP);\\n\\nvar _Facebook = __webpack_require__(239);\\n\\nvar _Facebook2 = _interopRequireDefault(_Facebook);\\n\\nvar _Kixer = __webpack_require__(241);\\n\\nvar _Kixer2 = _interopRequireDefault(_Kixer);\\n\\nvar _FacebookNative = __webpack_require__(240);\\n\\nvar _FacebookNative2 = _interopRequireDefault(_FacebookNative);\\n\\nvar _PubNative = __webpack_require__(242);\\n\\nvar _PubNative2 = _interopRequireDefault(_PubNative);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar AdManager = function () {\\n    function AdManager(bucketRangeId) {\\n        _classCallCheck(this, AdManager);\\n\\n        this.adNetworks = [];\\n        this.adPlacements = [];\\n        this.bucketRangeId = bucketRangeId;\\n        this.renderedAdContainerIds = [];\\n    }\\n\\n    _createClass(AdManager, [{\\n        key: 'prepareAdPlacements',\\n        value: function prepareAdPlacements(adPlacements) {\\n            var _self = this;\\n            var bucketRangeId = this.bucketRangeId;\\n\\n            var adPlacementNames = Object.keys(adPlacements);\\n\\n            (0, _forEach2.default)(adPlacementNames, function (adPlacementName) {\\n\\n                if (typeof _self.adPlacements[adPlacementName] == 'undefined') {\\n                    var rules = adPlacements[adPlacementName].rules;\\n                    var currentRule = _self.getCurrentRule(rules, bucketRangeId);\\n                    if (typeof _self.adNetworks[currentRule.adNetwork] == 'undefined') {\\n                        _self.addAdNetwork(currentRule.adNetwork);\\n                    }\\n\\n                    // store data in class variable\\n                    var adPlacementData = adPlacements[adPlacementName];\\n                    // commenting this out to fix no placement issues after switching ad view\\n                    // delete adPlacementData['rules'];\\n                    adPlacementData['rule'] = currentRule;\\n                    adPlacementData['name'] = adPlacementName;\\n\\n                    _self.adPlacements[adPlacementName] = adPlacementData;\\n                }\\n            });\\n        }\\n    }, {\\n        key: 'resetAdPlacements',\\n        value: function resetAdPlacements() {\\n            this.adPlacements = [];\\n        }\\n    }, {\\n        key: 'resetRenderedAdContainerIds',\\n        value: function resetRenderedAdContainerIds() {\\n            this.renderedAdContainerIds = [];\\n\\n            _LogUtils2.default.log('clear this.renderedAdContainerIds');\\n        }\\n    }, {\\n        key: 'getCurrentRule',\\n        value: function getCurrentRule(rules) {\\n            var bucketRangeId = this.bucketRangeId;\\n\\n            var selectedRule = {};\\n            (0, _forEach2.default)(rules, function (rule) {\\n\\n                if ((bucketRangeId >= rule.idRangeStart || -1 == rule.idRangeStart) && (bucketRangeId <= rule.idRangeEnd || -1 == rule.idRangeEnd)) {\\n                    selectedRule = rule;\\n                }\\n            });\\n\\n            return selectedRule;\\n        }\\n    }, {\\n        key: 'addAdNetwork',\\n        value: function addAdNetwork(adNetworkName) {\\n            var adNetwork = void 0;\\n\\n            switch (adNetworkName) {\\n                case 'DFP':\\n                    adNetwork = new _DFP2.default();\\n                    break;\\n                case 'Facebook':\\n                    adNetwork = new _Facebook2.default();\\n                    break;\\n                case 'Kixer':\\n                    adNetwork = new _Kixer2.default();\\n                    break;\\n                case 'FacebookNative':\\n                    adNetwork = new _FacebookNative2.default();\\n                    break;\\n                case 'PubNative':\\n                    adNetwork = new _PubNative2.default();\\n                    break;\\n            }\\n\\n            this.adNetworks[adNetworkName] = adNetwork;\\n        }\\n\\n        // Vertical will use this method to get the ad container Id to insert\\n        // If the position does not fulfil the occurrence, return null\\n\\n    }, {\\n        key: 'getAdPlacementContainerByPosition',\\n        value: function getAdPlacementContainerByPosition(adPlacementName, position) {\\n\\n            var adPlacement = this.adPlacements[adPlacementName];\\n\\n            var adContainerId = '';\\n\\n            // fixed position, always allowed\\n            if (adPlacement.displayType == 1) {\\n                adContainerId = this.getAdContainerId(adPlacement);\\n\\n                // repetitive ads\\n            } else if (typeof adPlacement.rule.occurrence != 'undefined' && this.shouldInsertAdContainerByPosition(adPlacement.rule.occurrence, position)) {\\n                adContainerId = this.getAdContainerId(adPlacement, position);\\n            }\\n\\n            if (adContainerId != '') {\\n                return { adPlacement: adPlacement, adContainerId: adContainerId };\\n            }\\n\\n            return null;\\n        }\\n    }, {\\n        key: 'shouldInsertAdContainerByPosition',\\n        value: function shouldInsertAdContainerByPosition(occurrence, targetPosition) {\\n\\n            var occurrenceArr = occurrence.split('...');\\n            var occurrencePositions = (0, _map2.default)(occurrenceArr[0].split(','), function (position) {\\n                return parseInt(position);\\n            });\\n            var repeatFrequency = parseInt(occurrenceArr[1]);\\n\\n            if ((0, _indexOf2.default)(occurrencePositions, targetPosition) >= 0) {\\n                return true;\\n            }\\n\\n            if (targetPosition > (0, _last2.default)(occurrencePositions)) {\\n                for (var pos = (0, _last2.default)(occurrencePositions) + repeatFrequency; pos <= targetPosition; pos += repeatFrequency) {\\n                    if (pos == targetPosition) {\\n                        return true;\\n                    }\\n                }\\n            }\\n\\n            return false;\\n        }\\n    }, {\\n        key: 'getAdContainerId',\\n        value: function getAdContainerId(adPlacement) {\\n            var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n\\n            var adNetwork = this.adNetworks[adPlacement.rule.adNetwork];\\n            return adNetwork.getAdContainerId(adPlacement, position);\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacementName, adContainerIds) {\\n\\n            if (typeof this.adPlacements[adPlacementName] == 'undefined') {\\n                return false;\\n            }\\n\\n            var adPlacement = this.adPlacements[adPlacementName];\\n            var adNetwork = this.adNetworks[adPlacement.rule.adNetwork];\\n\\n            // not render the ids which are rendered before\\n            adContainerIds = (0, _difference2.default)(adContainerIds, this.renderedAdContainerIds);\\n\\n            adNetwork.renderAds(adPlacement, adContainerIds);\\n\\n            this.renderedAdContainerIds = (0, _union2.default)(this.renderedAdContainerIds, adContainerIds);\\n            return true;\\n        }\\n    }]);\\n\\n    return AdManager;\\n}();\\n\\nmodule.exports = AdManager;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/AdManager.js\\n// module id = 237\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/AdManager.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Base2 = __webpack_require__(49);\\n\\nvar _Base3 = _interopRequireDefault(_Base2);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar DFP = function (_Base) {\\n    _inherits(DFP, _Base);\\n\\n    function DFP() {\\n        _classCallCheck(this, DFP);\\n\\n        var _this = _possibleConstructorReturn(this, (DFP.__proto__ || Object.getPrototypeOf(DFP)).call(this));\\n\\n        _this.initialLoadScript();\\n        return _this;\\n    }\\n\\n    _createClass(DFP, [{\\n        key: 'initialLoadScript',\\n        value: function initialLoadScript() {\\n            window.googletag = window.googletag || {};\\n            window.googletag.cmd = window.googletag.cmd || [];\\n            (function () {\\n                var gads = document.createElement('script');\\n                gads.async = true;\\n                gads.type = 'text/javascript';\\n                var useSSL = 'https:' == document.location.protocol;\\n                gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';\\n                var node = document.getElementsByTagName('script')[0];\\n                node.parentNode.insertBefore(gads, node);\\n            })();\\n\\n            window.googletag.cmd.push(function () {\\n                window.googletag.pubads().set(\\\"page_url\\\", document.location.href);\\n                window.googletag.pubads().enableSingleRequest();\\n                window.googletag.enableServices();\\n            });\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacement, adContainerIds) {\\n            var adTag = adPlacement.rule.adTag;\\n\\n            var dimension = this.getAdContainerDimension(adPlacement);\\n            var width = dimension.width;\\n            var height = dimension.height;\\n\\n            // define ad slot\\n            adContainerIds.forEach(function (adContainerId) {\\n\\n                _LogUtils2.default.log('add DFP defineSlot command ' + adTag + ' ' + width + ' ' + height + ' ' + adContainerId);\\n\\n                window.googletag.cmd.push(function () {\\n                    window.googletag.defineSlot(adTag, [width, height], adContainerId).addService(window.googletag.pubads());\\n                });\\n            });\\n\\n            // display ads\\n            adContainerIds.forEach(function (adContainerId) {\\n                window.googletag.cmd.push(function () {\\n                    window.googletag.display(adContainerId);\\n                });\\n            });\\n        }\\n    }]);\\n\\n    return DFP;\\n}(_Base3.default);\\n\\nmodule.exports = DFP;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/DFP.js\\n// module id = 238\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/DFP.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Base2 = __webpack_require__(49);\\n\\nvar _Base3 = _interopRequireDefault(_Base2);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Facebook = function (_Base) {\\n    _inherits(Facebook, _Base);\\n\\n    function Facebook() {\\n        _classCallCheck(this, Facebook);\\n\\n        var _this = _possibleConstructorReturn(this, (Facebook.__proto__ || Object.getPrototypeOf(Facebook)).call(this));\\n\\n        _this.initialLoadScript();\\n        return _this;\\n    }\\n\\n    _createClass(Facebook, [{\\n        key: 'initialLoadScript',\\n        value: function initialLoadScript() {\\n            // should add FB javascript tag (with appId) in HTML\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacement, adContainerIds) {\\n            var adTag = adPlacement.rule.adTag;\\n\\n            var dimension = this.getAdContainerDimension(adPlacement);\\n            var width = dimension.width;\\n            var height = dimension.height;\\n\\n            // define ad slot\\n            adContainerIds.forEach(function (adContainerId) {\\n\\n                _LogUtils2.default.log('add Facebook ad tag ' + adTag + ' ' + width + ' ' + height + ' ' + adContainerId);\\n\\n                var fbNode = document.createElement('fb:ad');\\n                fbNode.setAttribute('placementid', adTag);\\n                fbNode.setAttribute('format', width + 'x' + height);\\n                fbNode.setAttribute('testmode', 'false');\\n\\n                document.getElementById(adContainerId).appendChild(fbNode);\\n            });\\n        }\\n    }]);\\n\\n    return Facebook;\\n}(_Base3.default);\\n\\nmodule.exports = Facebook;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/Facebook.js\\n// module id = 239\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/Facebook.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Base2 = __webpack_require__(49);\\n\\nvar _Base3 = _interopRequireDefault(_Base2);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar FacebookNative = function (_Base) {\\n    _inherits(FacebookNative, _Base);\\n\\n    function FacebookNative() {\\n        _classCallCheck(this, FacebookNative);\\n\\n        return _possibleConstructorReturn(this, (FacebookNative.__proto__ || Object.getPrototypeOf(FacebookNative)).apply(this, arguments));\\n    }\\n\\n    _createClass(FacebookNative, [{\\n        key: 'getTemplateHtml',\\n        value: function getTemplateHtml() {\\n            var html = '<a class=\\\"fbAdLink\\\">\\\\n                        <div class=\\\"fbAdTitle badge-fb-native-ad-title\\\"></div>\\\\n                        <div class=\\\"fbAdBody badge-fb-native-ad-body\\\"></div>\\\\n                       <div class=\\\"fbAdMedia badge-fb-native-ad-media\\\"></div>\\\\n                        <div class=\\\"fbAdCallToAction badge-fb-native-ad-calltoaction\\\"></div>\\\\n                       </a>';\\n\\n            return html;\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacement, adContainerIds) {\\n            var _this2 = this;\\n\\n            var adTag = adPlacement.rule.adTag;\\n\\n            // define ad slot\\n            adContainerIds.forEach(function (adContainerId) {\\n\\n                _LogUtils2.default.log('add Facebook ad tag ' + adTag + ' ' + adContainerId);\\n\\n                document.getElementById(adContainerId).style.height = 'auto';\\n                document.getElementById(adContainerId).parentNode.style.position = 'relative'; // for adChoices label\\n\\n                var fbNode = document.createElement('fb:ad');\\n                fbNode.setAttribute('placementid', adTag);\\n                fbNode.setAttribute('format', 'native');\\n                fbNode.setAttribute('nativeadid', adContainerId);\\n\\n                var templateNode = document.createElement('div');\\n                templateNode.id = adContainerId;\\n                templateNode.className = 'badge-fb-native-ad';\\n                templateNode.innerHTML = _this2.getTemplateHtml();\\n\\n                document.getElementById(adContainerId).appendChild(fbNode);\\n                document.getElementById(adContainerId).appendChild(templateNode);\\n            });\\n        }\\n    }]);\\n\\n    return FacebookNative;\\n}(_Base3.default);\\n\\nmodule.exports = FacebookNative;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/FacebookNative.js\\n// module id = 240\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/FacebookNative.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Base2 = __webpack_require__(49);\\n\\nvar _Base3 = _interopRequireDefault(_Base2);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Kixer = function (_Base) {\\n    _inherits(Kixer, _Base);\\n\\n    function Kixer() {\\n        _classCallCheck(this, Kixer);\\n\\n        var _this = _possibleConstructorReturn(this, (Kixer.__proto__ || Object.getPrototypeOf(Kixer)).call(this));\\n\\n        window.__kx_ad_slots = [];\\n        return _this;\\n    }\\n\\n    // for Kixer, it needs to include adTag in the div id\\n\\n\\n    _createClass(Kixer, [{\\n        key: 'getAdContainerId',\\n        value: function getAdContainerId(adPlacement, position) {\\n            var adTag = adPlacement.rule.adTag;\\n            return '__kx_ad_' + adTag;\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacement, adContainerIds) {\\n            var adTag = adPlacement.rule.adTag;\\n\\n            var slot = adTag;\\n\\n            var h = false;\\n            window.__kx_ad_slots.push(slot);\\n            if (typeof window.__kx_ad_start == 'function') {\\n                window.__kx_ad_start();\\n            } else {\\n                var s = document.createElement('script');\\n                s.type = 'text/javascript';\\n                s.async = true;\\n                s.src = '//cdn.kixer.com/ad/load.js';\\n                s.onload = s.onreadystatechange = function () {\\n                    if (!h && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {\\n                        h = true;\\n                        s.onload = s.onreadystatechange = null;\\n                        window.__kx_ad_start();\\n                    }\\n                };\\n                var x = document.getElementsByTagName('script')[0];\\n                x.parentNode.insertBefore(s, x);\\n            }\\n        }\\n    }]);\\n\\n    return Kixer;\\n}(_Base3.default);\\n\\nmodule.exports = Kixer;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/Kixer.js\\n// module id = 241\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/Kixer.js?\")},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Base2 = __webpack_require__(49);\\n\\nvar _Base3 = _interopRequireDefault(_Base2);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar PubNative = function (_Base) {\\n    _inherits(PubNative, _Base);\\n\\n    function PubNative() {\\n        _classCallCheck(this, PubNative);\\n\\n        var _this = _possibleConstructorReturn(this, (PubNative.__proto__ || Object.getPrototypeOf(PubNative)).call(this));\\n\\n        _this.initialLoadScript();\\n        return _this;\\n    }\\n\\n    _createClass(PubNative, [{\\n        key: 'initialLoadScript',\\n        value: function initialLoadScript() {}\\n    }, {\\n        key: 'initPubNative',\\n        value: function initPubNative(adTag, adContainerId) {\\n            (function () {\\n                var PnTagSettings = window.PnTagSettings || (window.PnTagSettings = { configs: [], count: 0 });\\n                var script = document.createElement('script');\\n                var currentScript = document.querySelector(\\\"#\\\" + adContainerId + \\\"_pubnative\\\");\\n                if (currentScript) {\\n                    currentScript.className = '';\\n                    currentScript.id = 'pn-ad-tag-' + adTag.apiParams.appToken + '-' + PnTagSettings.count++;\\n                    script.src = adTag.src;\\n                    currentScript.parentNode.insertBefore(script, currentScript);\\n                }\\n            })();\\n        }\\n    }, {\\n        key: 'renderAds',\\n        value: function renderAds(adPlacement, adContainerIds) {\\n            var _this2 = this;\\n\\n            if (!this.isJsonString(adPlacement.rule.adTag)) {\\n                return;\\n            }\\n\\n            var adTag = JSON.parse(adPlacement.rule.adTag);\\n            if (!adTag.hasOwnProperty('css') || !adTag.hasOwnProperty('apiParams')) {\\n                return;\\n            }\\n\\n            // display ads\\n            adContainerIds.forEach(function (adContainerId) {\\n                _this2.initPubNative(adTag, adContainerId);\\n\\n                _LogUtils2.default.log('add PubNative defineSlot command ' + JSON.stringify(adTag) + ' ' + adContainerId);\\n                window.PnTagSettings.configs.push({\\n                    css: adTag.css,\\n                    apiParams: adTag.apiParams\\n                });\\n            });\\n        }\\n    }]);\\n\\n    return PubNative;\\n}(_Base3.default);\\n\\nmodule.exports = PubNative;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/adNetworks/PubNative.js\\n// module id = 242\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/adNetworks/PubNative.js?\");\n},function(module,exports,__webpack_require__){eval(\"'use strict';\\n\\nvar _docCookies = __webpack_require__(172);\\n\\nvar _docCookies2 = _interopRequireDefault(_docCookies);\\n\\nvar _LogUtils = __webpack_require__(38);\\n\\nvar _LogUtils2 = _interopRequireDefault(_LogUtils);\\n\\nvar _AdManager = __webpack_require__(237);\\n\\nvar _AdManager2 = _interopRequireDefault(_AdManager);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar AdPlugin = function () {\\n\\n    var _self = {\\n\\n        adView: null,\\n        configs: {},\\n        bucketRangeId: 0,\\n        adManager: null,\\n\\n        setBucketRangeId: function setBucketRangeId() {\\n            _self.bucketRangeId = _docCookies2.default.getItem('____ri') || 0;\\n        },\\n        getConfigsByAdView: function getConfigsByAdView(adView) {\\n            return typeof _self.configs[adView] != 'undefined' ? _self.configs[adView] : null;\\n        },\\n        isDisplayAdEnabled: function isDisplayAdEnabled(adViewConfig) {\\n            return typeof adViewConfig.displayAdEnabled != 'undefined' ? adViewConfig.displayAdEnabled : false;\\n        },\\n        adViewHasRules: function adViewHasRules(adViewConfig) {\\n\\n            var adPlacementNames = Object.keys(adViewConfig.placements);\\n\\n            // no ad placements defined\\n            if (adPlacementNames.length == 0) {\\n                _LogUtils2.default.log('no adPlacements');\\n                return false;\\n            }\\n\\n            var hasRule = false;\\n            for (var key in adPlacementNames) {\\n\\n                var adPlacementName = adPlacementNames[key];\\n\\n                var rules = typeof adViewConfig.placements[adPlacementName].rule != 'undefined' ? [adViewConfig.placements[adPlacementName].rule] : adViewConfig.placements[adPlacementName].rules;\\n                if (rules.length > 0) {\\n                    hasRule = true;\\n                    break;\\n                }\\n            }\\n\\n            _LogUtils2.default.log('has rule: ' + hasRule);\\n            return hasRule;\\n        },\\n        init: function init(configs, adView, defaultAdView) {\\n            _self.configs = configs;\\n            _self.setBucketRangeId();\\n\\n            var result = _self.verifyAdView(adView, defaultAdView);\\n            if (!result.adServiceEnabled) {\\n                return { adServiceEnabled: false, selectedAdView: null };\\n            }\\n\\n            _self.adView = result.selectedAdView;\\n            _self.adManager = new _AdManager2.default(_self.bucketRangeId);\\n            _self.adManager.prepareAdPlacements(result.selectedAdViewConfig.placements);\\n\\n            _LogUtils2.default.log('success init, it will use :' + result.selectedAdView);\\n            return { adServiceEnabled: true, selectedAdView: result.selectedAdView };\\n        },\\n        verifyAdView: function verifyAdView(adView, defaultAdView) {\\n            var selectedAdView = adView;\\n            var selectedAdViewConfig = _self.getConfigsByAdView(adView);\\n\\n            // no config for this adView, use default ad view instead\\n            if (selectedAdViewConfig == null) {\\n\\n                selectedAdView = defaultAdView;\\n                selectedAdViewConfig = _self.getConfigsByAdView(defaultAdView);\\n                _LogUtils2.default.log('no adView for ' + adView + ', use default: ' + defaultAdView);\\n            } else if (!_self.isDisplayAdEnabled(selectedAdViewConfig)) {\\n\\n                // ad display is disabled for this adView\\n                _LogUtils2.default.log('adService is disabled for ' + selectedAdView);\\n                return { adServiceEnabled: false, selectedAdView: null };\\n            } else if (!_self.adViewHasRules(selectedAdViewConfig)) {\\n\\n                // no rules or no ad placements for adView, use default ad view instead\\n                selectedAdView = defaultAdView;\\n                selectedAdViewConfig = _self.getConfigsByAdView(defaultAdView);\\n                _LogUtils2.default.log('no rule for ' + adView + ', use default: ' + defaultAdView);\\n            }\\n\\n            return { adServiceEnabled: true, selectedAdView: selectedAdView, selectedAdViewConfig: selectedAdViewConfig };\\n        },\\n        getAdPlacementContainerByPosition: function getAdPlacementContainerByPosition(adPlacementName, position) {\\n            return _self.adManager ? _self.adManager.getAdPlacementContainerByPosition(adPlacementName, position) : null;\\n        },\\n        renderAds: function renderAds(adPlacementName, adContainerIds) {\\n            if (_self.adManager) {\\n\\n                _LogUtils2.default.logWithData('going to render ads for ' + adPlacementName, adContainerIds);\\n                _self.adManager.renderAds(adPlacementName, adContainerIds);\\n                return true;\\n            }\\n\\n            return false;\\n        },\\n        switchAdView: function switchAdView(adView, defaultAdView) {\\n\\n            var result = _self.verifyAdView(adView, defaultAdView);\\n            if (!result.adServiceEnabled) {\\n                return { adServiceEnabled: false, selectedAdView: null };\\n            }\\n\\n            _self.adView = result.selectedAdView;\\n            if (_self.adManager === null) {\\n                _self.adManager = new _AdManager2.default(_self.bucketRangeId);\\n            }\\n            _self.adManager.resetAdPlacements();\\n            _self.adManager.resetRenderedAdContainerIds();\\n            _self.adManager.prepareAdPlacements(result.selectedAdViewConfig.placements);\\n\\n            _LogUtils2.default.log('successfully switch adView, it will use :' + result.selectedAdView);\\n            return { adServiceEnabled: true, selectedAdView: result.selectedAdView };\\n        }\\n    };\\n\\n    return {\\n        init: _self.init,\\n        renderAds: _self.renderAds,\\n        getAdPlacementContainerByPosition: _self.getAdPlacementContainerByPosition,\\n        switchAdView: _self.switchAdView\\n    };\\n}();\\n\\nmodule.exports = AdPlugin;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/remote-config-system/public/static/src/js/init.js\\n// module id = 243\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/remote-config-system/public/static/src/js/init.js?\")},,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Validator, GA, Configs, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _overlay = __webpack_require__(128);\\n\\nvar _overlay2 = _interopRequireDefault(_overlay);\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _facebook = __webpack_require__(251);\\n\\nvar _facebook2 = _interopRequireDefault(_facebook);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar AccountController = $.extend({}, new _base2.default(), {\\n\\n    init: function init() {\\n        this.bindElements();\\n    },\\n\\n    selectors: {\\n        HEADER_LOGIN_BUTTON: '.badge-login-button',\\n        HEADER_SIGNUP_BUTTON: '.badge-signup-button',\\n\\n        LOGIN_FORM_NEXT_URL: '#jsid-login-form-next-url',\\n        LOGIN_FACEBOOK_CONNECT_BUTTON: '.badge-facebook-connect',\\n        LOGIN_GPLUS_CONNECT_BUTTON: '.badge-gplus-connect',\\n\\n        SIGNUP_FB: '#signup-fb',\\n        SIGNUP_EMAIL: '#signup-email',\\n        SIGNUP_EMAIL_LINK: '.badge-signup-email-link',\\n        SIGNUP_LOGIN_LINK: '.badge-signup-login-link',\\n        SIGNUP_FORM_NEXT_URL: '.badge-signup-form-next-url',\\n\\n        DELETE_CONFIRM_FORM: '.badge-delete-confirm-form',\\n        SHOW_DELETE_FORM_BTN: '#jsid-show-form-btn',\\n\\n        RESET_SUBMIT_BTN: '.badge-reset-submit',\\n        RESET_SUBMIT_FROM: '#jsid-form-reset',\\n        RESET_NEW_PWD: '#jsid-reset-new-pwd',\\n        RESET_RETYPE_NEW_PWD: '#jsid-reset-retype-new-pwd'\\n    },\\n\\n    bindElements: function bindElements() {\\n        this.bindSignupElements();\\n        this.bindLoginElements();\\n        this.bindDeleteConfirmElements();\\n        this.bindFacebookConnectElements();\\n        this.bindGplusConnectElements();\\n\\n        this.bindResetForm();\\n    },\\n\\n    bindSignupElements: function bindSignupElements() {\\n        var _self = this;\\n\\n        $(this.selectors.HEADER_SIGNUP_BUTTON).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            this.presentSignupForm();\\n        }, this));\\n\\n        // \\\"Sign up with your Email Address\\\" link\\n        $(this.selectors.SIGNUP_EMAIL_LINK).click($.proxy(function (e) {\\n            e.preventDefault();\\n            this.switchToEmailSignup();\\n        }, this));\\n\\n        // \\\"Have an account? Login\\\" link\\n        $(this.selectors.SIGNUP_LOGIN_LINK).each(function () {\\n            if (_overlay2.default.isInsideOverlay($(this))) {\\n                $(this).click($.proxy(function (e) {\\n                    e.preventDefault();\\n                    this.presentLoginForm($(this.selectors.SIGNUP_FORM_NEXT_URL).val());\\n                }, _self));\\n            }\\n        });\\n\\n        $(this.selectors.SIGNUP_EMAIL).on('submit', $.proxy(function (event) {\\n            $('.badge-input-tzo').val(this._getTimezoneOffset());\\n            //isValid = AccountController._validateEmailSignUpForm();\\n            var isValid = true; // FIXME: do some client side checking\\n            if (!isValid) {\\n                event.preventDefault();\\n                return false;\\n            }\\n        }, this));\\n    },\\n\\n    bindLoginElements: function bindLoginElements() {\\n        $(this.selectors.HEADER_LOGIN_BUTTON).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n            this.presentLoginForm();\\n        }, this));\\n    },\\n\\n    bindDeleteConfirmElements: function bindDeleteConfirmElements() {\\n        $(this.selectors.SHOW_DELETE_FORM_BTN).on('click', $.proxy(function () {\\n            $(this.selectors.DELETE_CONFIRM_FORM).removeClass('hide');\\n        }, this));\\n    },\\n\\n    bindFacebookConnectElements: function bindFacebookConnectElements() {\\n        $(this.selectors.LOGIN_FACEBOOK_CONNECT_BUTTON).on('click', $.proxy(function (e) {\\n            e.preventDefault();\\n\\n            // FIXME: add GA stuffs\\n            // track GA event\\n            //var el = $(this);\\n            //AccountController._trackElementClicked(el, 'Facebook-Signup');\\n\\n            var redirectUrl = $(this.selectors.LOGIN_FORM_NEXT_URL).val();\\n            //            var isNsfw = el.hasClass('nsfw-post');\\n            //            if (isNsfw) {\\n            //                Facebook.Connect.addParam('nsfw', 1);\\n            //            }\\n            //\\n            //            Facebook.Connect.addParam('src', el.attr('ref-source'));\\n            //            Facebook.Connect.addParam('ref', el.attr('ref-url'));\\n            //            Facebook.Connect.addParam('app', el.attr('app'));\\n            //            Facebook.Connect.addParam('tzo', AccountController._getTimezoneOffset());\\n\\n            var val = { \\\"a\\\": false, \\\"d\\\": false, \\\"lo\\\": false, \\\"dl\\\": false };\\n            var cookieVal = JSON.stringify(val);\\n            $.cookie('auto_log', cookieVal, { path: '/' });\\n\\n            _facebook2.default.Connect.connect(redirectUrl);\\n        }, this));\\n    },\\n    bindGplusConnectElements: function bindGplusConnectElements() {\\n        /*\\n        $(this.selectors.LOGIN_GPLUS_CONNECT_BUTTON).on('click', $.proxy(function(e) {\\n            e.preventDefault();\\n            alert('This will be implemented soon ;)');\\n        },this));\\n        */\\n    },\\n\\n    bindResetForm: function bindResetForm() {\\n        $(this.selectors.RESET_SUBMIT_FROM).submit($.proxy(function (e) {\\n            if (this.validateReset()) {\\n                return true;\\n            }\\n            return false;\\n        }, this));\\n    },\\n\\n    validateReset: function validateReset() {\\n        var password = $(this.selectors.RESET_NEW_PWD).val();\\n        var retype_password = $(this.selectors.RESET_RETYPE_NEW_PWD).val();\\n\\n        if (password != retype_password) {\\n            $('.badge-error-message').text('Your new password doesn\\\\'t seem to be matching.').removeClass('hide');\\n            return false;\\n        }\\n\\n        var rs = Validator.isValidPassword(password, 6, 30);\\n        if (rs) {\\n            $('.badge-error-message').text('').addClass('hide');\\n        } else {\\n            $('.badge-error-message').text('Invalid password.').removeClass('hide');\\n        }\\n        return rs;\\n    },\\n\\n    _getTimezoneOffset: function _getTimezoneOffset() {\\n        return new Date().getTimezoneOffset() / -60;\\n    },\\n\\n    ////////// public functions\\n    presentLoginForm: function presentLoginForm(nextUrl) {\\n        GA.track('Login', 'LoginOverlay', _page2.default.getPageKey());\\n        _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_LOGIN, false);\\n        $('#jsid-login-email-name').focus();\\n        if (typeof nextUrl != 'undefined') {\\n            // set both signup+login because FB connect reads both\\n            $(this.selectors.LOGIN_FORM_NEXT_URL).val(nextUrl);\\n            $(this.selectors.SIGNUP_FORM_NEXT_URL).val(nextUrl);\\n        } else {\\n            $(this.selectors.LOGIN_FORM_NEXT_URL).val(location.href);\\n            $(this.selectors.SIGNUP_FORM_NEXT_URL).val(location.href);\\n        }\\n    },\\n    presentSignupForm: function presentSignupForm(nextUrl) {\\n        GA.track('SignUp', 'SignUpOverlay', _page2.default.getPageKey());\\n        _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_SIGNUP_FB, false);\\n        if (typeof nextUrl != 'undefined') {\\n            // set both signup+login because FB connect reads both\\n            $(this.selectors.LOGIN_FORM_NEXT_URL).val(nextUrl);\\n            $(this.selectors.SIGNUP_FORM_NEXT_URL).val(nextUrl);\\n        } else {\\n            $(this.selectors.LOGIN_FORM_NEXT_URL).val(location.href);\\n            $(this.selectors.SIGNUP_FORM_NEXT_URL).val(location.href);\\n        }\\n        this.switchToFacebookSignup();\\n        // TODO: set focus etc.\\n    },\\n    switchToEmailSignup: function switchToEmailSignup() {\\n        GA.track('SignUp', 'SignUpEmailOverlay', _page2.default.getPageKey());\\n        $(this.selectors.SIGNUP_FB).addClass('hide');\\n        $(this.selectors.SIGNUP_EMAIL).removeClass('hide');\\n    },\\n    switchToFacebookSignup: function switchToFacebookSignup() {\\n        $(this.selectors.SIGNUP_EMAIL).addClass('hide');\\n        $(this.selectors.SIGNUP_FB).removeClass('hide');\\n    },\\n\\n    /**\\n     * Sets safe mode to either on or off.\\n     * @param value bool\\n     * @param nextUrl the URL to redirect to\\n     */\\n    setSafeMode: function setSafeMode(value, nextUrl) {\\n        if (typeof nextUrl == 'undefined') nextUrl = '';\\n\\n        if (_user2.default.isLoggedIn()) {\\n            // To enable cacheable 9gag, NSFW behavior is controlled by a cookie on client side\\n            var options = _page2.default.getCookieOptions();\\n            options.domain = Configs.get('page.cookie_domain');\\n\\n            $.cookie(ModuleFactory.PageController._safeModeCookieKey, value, options);\\n        }\\n\\n        var url = '/profile/safe-browse?enable=' + value + '&url=' + encodeURIComponent(nextUrl);\\n        window.location = url;\\n    }\\n\\n}); /**\\n     * Handles login, signup, delete account etc.\\n     * @type {*}\\n     */\\n\\n\\nmodule.exports = AccountController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(419), __webpack_require__(40), __webpack_require__(18), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/account.js\\n// module id = 247\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/account.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Utils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _listScroll = __webpack_require__(249);\\n\\nvar _listScroll2 = _interopRequireDefault(_listScroll);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _shortcut = __webpack_require__(862);\\n\\nvar _shortcut2 = _interopRequireDefault(_shortcut);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar KeyboardController = $.extend({}, new _base2.default(), function () {\\n\\n    var _self = {\\n\\n        JUMP_PREV: 'JUMP_PREV',\\n        JUMP_NEXT: 'JUMP_NEXT',\\n        VOTE_UP: 'VOTE_UP',\\n        VOTE_DOWN: 'VOTE_DOWN',\\n        UNVOTE: 'UNVOTE',\\n        JUMP_COMMENT: 'JUMP_COMMENT',\\n        LEFT_ARROW: 37,\\n        RIGHT_ARROW: 39,\\n        KEY_END: 35,\\n        KEY_HOME: 36,\\n\\n        _track: function _track(action) {\\n            // #7006 reduce GA keyboard\\n            // GA.track('keyboard', action, Page.getPageKey());\\n        },\\n\\n        _bindHomeEnd: function _bindHomeEnd() {\\n            // Re-calculate sticky elements when user uses HOME or END keys\\n            $(document).keydown(function (e) {\\n                if (Utils.isCurrentlyFocusedInTypeable()) return true;\\n\\n                if (e.keyCode == _self.KEY_HOME || e.keyCode == _self.KEY_END) {\\n                    e.preventDefault();\\n\\n                    var post = ModuleFactory.PostController;\\n                    $('html,body').animate({\\n                        scrollTop: e.keyCode == _self.KEY_END ? $(document).height() : 0\\n                    }, 100, 'swing', function () {\\n\\n                        // Recalculate in-view entries after scroll animation\\n                        ModuleFactory.ListController.handlers.recalculateInViewEntries();\\n\\n                        $(post.selectors.ENTRY_CONTAINER + ' ' + post.selectors.ENTRY_STICKY_ELEMENTS).each(function () {\\n                            $(this).css({ 'position': '', 'z-index': '', 'top': '' });\\n                            $(this).removeClass(post.CLASS_STICKY);\\n                        });\\n\\n                        ModuleFactory.PostController.handlers.entryStickElementHandler();\\n                        _listScroll2.default.handlers.scanFeaturedItemForArchive();\\n                    });\\n\\n                    return false;\\n                }\\n            });\\n        },\\n\\n        _bindJumpPrev: function _bindJumpPrev(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('prev');\\n                if (_page2.default.isPostPage()) {\\n                    ModuleFactory.PostController.prevEntry();\\n                } else {\\n                    _self.jump(_self.JUMP_PREV);\\n                }\\n            });\\n\\n            // Bind Left Right Key like J/K\\n            if (_page2.default.isPostPage()) {\\n                $(document).keydown(function (e) {\\n                    if (Utils.isCurrentlyFocusedInTypeable()) return true;\\n                    if (e.keyCode == _self.LEFT_ARROW) {\\n                        ModuleFactory.PostController.prevEntry();\\n                        return false;\\n                    }\\n                });\\n            }\\n        },\\n\\n        _bindJumpNext: function _bindJumpNext(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('next');\\n                if (_page2.default.isPostPage()) {\\n\\n                    // Bucket GA tracking\\n                    //#7022 GA.track('Next-Post-Toolbar-keyboard', 'PostClicked', 1);\\n\\n                    ModuleFactory.PostController.nextEntry();\\n                } else {\\n                    _self.jump(_self.JUMP_NEXT);\\n                }\\n            });\\n\\n            // Bind Left Right Key like J/K\\n            if (_page2.default.isPostPage()) {\\n                $(document).keydown(function (e) {\\n                    if (Utils.isCurrentlyFocusedInTypeable()) return true;\\n                    if (e.keyCode == _self.RIGHT_ARROW) {\\n                        ModuleFactory.PostController.nextEntry();\\n                        return false;\\n                    }\\n                });\\n            }\\n        },\\n\\n        _bindPostVoteUp: function _bindPostVoteUp(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('upvote');\\n                var post = ModuleFactory.PostController;\\n                var target = _page2.default.isPostPage() ? $(post.selectors.ENTRY_CONTAINER) : ModuleFactory.ListController.findCurrentlyInFocusEntry();\\n                post.upvoteEntry(target);\\n            }, 'keyup');\\n        },\\n\\n        _bindPostVoteDown: function _bindPostVoteDown(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('downvote');\\n                var post = ModuleFactory.PostController;\\n                var target = _page2.default.isPostPage() ? $(post.selectors.ENTRY_CONTAINER) : ModuleFactory.ListController.findCurrentlyInFocusEntry();\\n                post.downvoteEntry(target);\\n            }, 'keyup');\\n        },\\n\\n        _bindPostComment: function _bindPostComment(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('comment');\\n                ModuleFactory.PostController.commentEntry(ModuleFactory.ListController.findCurrentlyInFocusEntry());\\n            });\\n        },\\n\\n        _bindScrollToTop: function _bindScrollToTop(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('back-to-top');\\n                _self.scrollToTop();\\n            });\\n        },\\n\\n        _bindRandomEntry: function _bindRandomEntry(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('random');\\n                _self.randomEntry();\\n            });\\n        },\\n\\n        _bindPostPlay: function _bindPostPlay(key) {\\n            _self.bindAction(key, function () {\\n                _self._track('play');\\n                var target = _page2.default.isPostPage() ? $(ModuleFactory.PostController.selectors.ENTRY_CONTAINER) : ModuleFactory.ListController.findCurrentlyInFocusEntry();\\n                ModuleFactory.PostController.playEntry(target);\\n            });\\n        },\\n\\n        _bindElements: function _bindElements() {\\n            _self._bindScrollToTop('b');\\n            _self._bindJumpPrev('k');\\n            _self._bindJumpNext('j');\\n            _self._bindRandomEntry('r');\\n            _self._bindPostVoteUp('l');\\n            _self._bindPostVoteDown('h');\\n            _self._bindPostComment('c');\\n            _self._bindPostPlay('p');\\n            _self._bindHomeEnd();\\n        },\\n\\n        _getKeyOptions: function _getKeyOptions(type) {\\n            return {\\n                type: type || 'keypress',\\n                propagate: false,\\n                target: document,\\n                disable_in_input: true,\\n                require_command_mode: false\\n            };\\n        },\\n\\n        bindAction: function bindAction(key, action, type) {\\n            _shortcut2.default.add(key, action, _self._getKeyOptions(type));\\n        },\\n\\n        jump: function jump(direction) {\\n            if (direction == _self.JUMP_PREV) {\\n                ModuleFactory.ListController.scrollToPrevEntry();\\n            } else {\\n                ModuleFactory.ListController.scrollToNextEntry();\\n            }\\n        },\\n\\n        scrollToTop: function scrollToTop() {\\n            ModuleFactory.PageController.scrollToTop();\\n        },\\n\\n        randomEntry: function randomEntry() {\\n            _page2.default.load('http://' + _page2.default.getDomain() + '/random');\\n        }\\n\\n    };\\n\\n    return {\\n\\n        init: function init() {\\n            _self._bindElements();\\n        },\\n\\n        jump: _self.jump,\\n        bindAction: _self.bindAction,\\n        scrollToTop: _self.scrollToTop,\\n        randomEntry: _self.randomEntry\\n\\n    };\\n}());\\n\\nmodule.exports = KeyboardController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(80), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/keyboard.js\\n// module id = 248\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/keyboard.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, ModuleFactory, CacheableControllerFactory, GA, ComScore) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _featured = __webpack_require__(182);\\n\\nvar _featured2 = _interopRequireDefault(_featured);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar ListScrollingController = $.extend({}, new _base2.default(), {\\n\\n    _isLoading: false, // true if an Ajax request is on the way\\n    _listViewElement: null,\\n    _bottomReached: false, // if true, it means 'no more posts available'\\n    _loadCountMax: 20,\\n    _loadItemCount: 0,\\n    _loadedCount: 1,\\n\\n    _lastScrollEntryPoint: 0,\\n    _lastScrollFeaturedPoint: 0,\\n\\n    _disableAutoHiding: false,\\n\\n    selectors: {\\n        LOAD_MORE_BUTTON: '.badge-load-more-post',\\n        ENTRY_LIST_CONTAINER: '.badge-entry-collection',\\n        ENTRY_CONTAINER: '.badge-entry-container',\\n        ENTRY_LIST_VIEW: '.badge-list-view-element',\\n\\n        ADS_CONTAINER_FEATURED: '#jsid-featured-item-container section'\\n    },\\n    init: function init() {\\n        this._listViewElement = $(this.selectors.ENTRY_LIST_VIEW);\\n\\n        // ios device cannot use auto-hiding feature due to ios scroll event doesn't file until the scrollng is done\\n        if (navigator.userAgent.match(/(iPhone|iPod|iPad)/i)) {\\n            this._disableAutoHiding = true;\\n        } else if (_page2.default.isPostPage()) {\\n            this._disableAutoHiding = true;\\n        }\\n\\n        this.bindElements();\\n    },\\n\\n    bindElements: function bindElements() {\\n        this.bindScrollEvents();\\n        this.bindLastEntryInFocus();\\n    },\\n\\n    handlers: {\\n\\n        windowScrollHandler: function windowScrollHandler() {\\n            // loading starts when the page is 2 screen away from the bottom of the page\\n            $.proxy(this.handlers.loadMoreScrollHandler, this)();\\n\\n            if (!this._disableAutoHiding) {\\n                // auto hiding of out-of-view elements\\n                $.proxy(this.handlers.autoHidingScrollHandler, this)();\\n            }\\n        },\\n\\n        loadMoreScrollHandler: function loadMoreScrollHandler() {\\n            var winH = $(window).height();\\n            if ($(window).scrollTop() + winH >= $(document).height() - winH * 3) {\\n                this.loadMorePosts();\\n            }\\n        },\\n\\n        loadMoreLastEntryFocusHandler: function loadMoreLastEntryFocusHandler(e) {\\n            var entry = $(e.target);\\n            if ($(this.selectors.ENTRY_CONTAINER).last().is(entry)) {\\n                this.loadMorePosts();\\n            }\\n        },\\n\\n        archiveContainer: function archiveContainer(container, height) {\\n            if (container.html() != '') {\\n                ModuleFactory.PostController.postCallback('postWillArchive', container);\\n\\n                container.css('min-height', height + 'px');\\n                container.data('stored-html', container.html());\\n                container.empty();\\n                container.addClass('archived');\\n\\n                ModuleFactory.PostController.postCallback('postDidArchive', container);\\n            }\\n        },\\n\\n        extractContainer: function extractContainer(container) {\\n            if (container.data('stored-html') != null) {\\n                ModuleFactory.PostController.postCallback('postWillRestore', container);\\n\\n                container.html(container.data('stored-html'));\\n                container.data('stored-html', null);\\n                container.removeClass('archived');\\n\\n                ModuleFactory.PostController.postCallback('postDidRestore', container);\\n            }\\n        },\\n\\n        scanEntriesForArchive: function scanEntriesForArchive() {\\n            var _self = ListScrollingController;\\n            var cache = ModuleFactory.CacheController;\\n            var entryCacheHandler = cache.getEntryHandler();\\n            var list = ModuleFactory.ListController;\\n            var entryList = entryCacheHandler.getEntryList();\\n\\n            var winH = $(window).height();\\n            var screenBefore = winH * 3;\\n            var screenAfter = winH * 4;\\n\\n            var currentPos = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n\\n            if (!entryList || entryList.length == 0 || cache.isUpdateNeeded(cache.keys.ENTRY_LIST)) {\\n                // Cache miss, going to get data from DOM\\n                cache.parseEntryInfo();\\n                entryList = entryCacheHandler.getEntryList();\\n                cache.notifyForCacheUpdateCompleted(cache.keys.ENTRY_LIST);\\n            }\\n\\n            // Find entries that are not archived but offscreen\\n            $(list.selectors.ENTRY_CONTAINER + \\\":not(.archived)\\\").each(function () {\\n                var container = $(this);\\n                var entryId = container.data('entry-id');\\n                var h = entryCacheHandler.getEntryInfoForKey(entryId, 'height');\\n                var off = entryCacheHandler.getEntryInfoForKey(entryId, 'offset');\\n                var top = off.top;\\n                var bottom = off.top + h;\\n\\n                if (bottom < currentPos - screenBefore - h || top > currentPos + screenAfter + h) {\\n                    // Archive entry\\n                    _self.handlers.archiveContainer(container, h);\\n                }\\n            });\\n\\n            // Restore onscreen entries\\n            for (var i = 0; i < entryList.length; i++) {\\n                var entryId = entryList[i];\\n                var h = entryCacheHandler.getEntryInfoForKey(entryId, 'height');\\n                var off = entryCacheHandler.getEntryInfoForKey(entryId, 'offset');\\n                var top = off.top;\\n                var bottom = off.top + h;\\n\\n                if (bottom >= currentPos - screenBefore - h && top <= currentPos + screenAfter + h) {\\n                    var container = $(list.selectors.ENTRY_CONTAINER_ID_PREFIX + entryId);\\n                    _self.handlers.extractContainer(container);\\n                }\\n            }\\n        },\\n\\n        scanFeaturedItemForArchive: function scanFeaturedItemForArchive() {\\n            var _self = ListScrollingController;\\n            var cache = ModuleFactory.CacheController;\\n            var featuredCacheHandler = cache.getFeaturedItemHandler();\\n            var featured = _featured2.default;\\n\\n            var winH = $(window).height();\\n            var screenBefore = winH * 2;\\n            var screenAfter = winH * 3;\\n\\n            var currentPos = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n            var featuredList = featuredCacheHandler.getFeaturedList();\\n\\n            if (!featuredList || featuredList.length == 0 || cache.isUpdateNeeded(cache.keys.FEATURED_LIST)) {\\n                var itemIds = [];\\n                $(featured.selectors.SIDEBAR_ITEMS).each(function () {\\n                    var itemId = $(this).data('item-id');\\n                    var featuredItem = cache.handlers.getFeaturedItemInfoFromDOM($(this));\\n                    featuredCacheHandler.setFeaturedItemInfo(itemId, featuredItem);\\n                    itemIds.push(itemId);\\n                });\\n                featuredCacheHandler.setFeaturedList(itemIds);\\n                featuredList = itemIds;\\n                cache.notifyForCacheUpdateCompleted(cache.keys.FEATURED_LIST);\\n            }\\n\\n            // Find featured item and archive\\n            $(featured.selectors.SIDEBAR_ITEMS + \\\":not(.archived)\\\").each(function () {\\n                var container = $(this);\\n                var itemId = container.data('item-id');\\n                var featuredItem = featuredCacheHandler.getFeaturedItemInfo(itemId);\\n\\n                if (!featuredItem) {\\n                    featuredItem = cache.handlers.getFeaturedItemInfoFromDOM(container);\\n                    featuredCacheHandler.setFeaturedItemInfo(itemId, featuredItem);\\n                }\\n\\n                var top = featuredItem.top;\\n                var bottom = top + featuredItem.height;\\n\\n                if (bottom < currentPos - screenBefore - featuredItem.height || top > currentPos + screenAfter + featuredItem.height) {\\n\\n                    _self.handlers.archiveContainer(container, featuredItem.height);\\n                }\\n            });\\n\\n            // Restore onscreen entries\\n            for (var i = 0; i < featuredList.length; i++) {\\n                var itemId = featuredList[i];\\n                var featuredItem = featuredCacheHandler.getFeaturedItemInfo(itemId);\\n\\n                if (!featuredItem) {\\n                    featuredItem = cache.handlers.getFeaturedItemInfoFromDOM(container);\\n                    featuredCacheHandler.setFeaturedItemInfo(itemId, featuredItem);\\n                }\\n\\n                var top = featuredItem.top;\\n                var bottom = top + featuredItem.height;\\n\\n                if (bottom >= currentPos - screenBefore - featuredItem.height && top <= currentPos + screenAfter + featuredItem.height) {\\n\\n                    var container = $(featured.selectors.SIDEBAR_ITEM_PREFIX + itemId);\\n                    _self.handlers.extractContainer(container);\\n                }\\n            }\\n        },\\n\\n        autoHidingScrollHandler: function autoHidingScrollHandler() {\\n            var _self = this;\\n\\n            var currentPos = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n            var scrolledDistanceForEntry = Math.abs(currentPos - this._lastScrollEntryPoint);\\n            var scrolledDistanceForFeatured = Math.abs(currentPos - this._lastScrollFeaturedPoint);\\n\\n            // Archive entries\\n            if (scrolledDistanceForEntry > 1000) {\\n                _self._lastScrollEntryPoint = currentPos;\\n                _self.handlers.scanEntriesForArchive();\\n            }\\n\\n            // Archive featured items\\n            if (scrolledDistanceForFeatured > 1000) {\\n                _self._lastScrollFeaturedPoint = currentPos;\\n                _self.handlers.scanFeaturedItemForArchive();\\n            }\\n        },\\n\\n        loadMoreAjaxHandler: function loadMoreAjaxHandler(data) {\\n            if (!data.okay) return; // some error has occured\\n\\n            var googleAdTagIntervalStr = $('#jsid-gat-interval').data(\\\"post-interval\\\") + \\\"\\\"; // covert to string\\n            var googleAdTagIntervals = googleAdTagIntervalStr.split(\\\",\\\");\\n\\n            var totalHtml = '';\\n            // var adsLoaded = false;\\n            for (var i = 0; i < data.ids.length; i++) {\\n                var entryKey = data.ids[i];\\n                if ($('#jsid-entry-entity-' + entryKey).length == 0) {\\n\\n                    // First page is generated already, so the first ad position\\n                    if (googleAdTagIntervals.indexOf(i + \\\"\\\") > -1) {\\n                        totalHtml += '<div class=\\\"banner-block stream-naughty\\\">\\\\\\n                                    <div class=\\\"naughty-background\\\">\\\\\\n                                        <div class=\\\"badge-gag-ads-container naughty-container\\\" data-gag-ads=\\\"list-instream-300x250\\\"></div>\\\\\\n                                    </div>\\\\\\n                                </div>';\\n                        // adsLoaded = true;\\n                    }\\n                    totalHtml += data.items[entryKey];\\n\\n                    this._loadItemCount++;\\n                }\\n            }\\n\\n            var lastEntryElement = this.findLastEntryElement();\\n            $(lastEntryElement).append(totalHtml);\\n\\n            ModuleFactory.PageController.injectEntryImageOnError();\\n\\n            // act on gif entries depending on the auto play GIF cookie value\\n            ModuleFactory.PageController.loadAnimatedGif();\\n\\n            // Update cache for new entries\\n            var cache = ModuleFactory.CacheController;\\n            cache.notifyForCacheUpdate(cache.keys.ENTRY_LIST);\\n\\n            // Update UI for cacheable\\n            CacheableControllerFactory.getController('vote').process();\\n            CacheableControllerFactory.getController('vote').remoteHandler.processQueue();\\n\\n            // if (adsLoaded) {\\n            //     AdsController.notifyForAdsInsert(this.selectors.ENTRY_LIST_CONTAINER);\\n            // }\\n\\n            /* Track load-more usage */\\n            GA.track('PostList', 'LoadList', _page2.default.getPageKey(), '', { LoadedCount: this._loadedCount });\\n            this._loadedCount++;\\n\\n            if ($(this.selectors.LOAD_MORE_BUTTON).data('load-count-max')) {\\n                this._loadCountMax = $(this.selectors.LOAD_MORE_BUTTON).data('load-count-max');\\n            }\\n\\n            /* Track i-want-more-fun usage */\\n            if (this._loadedCount == this._loadCountMax) {\\n                GA.track('PostList', 'LoadListEnd', _page2.default.getPageKey());\\n            }\\n\\n            var loadMoreBut = $(this.selectors.LOAD_MORE_BUTTON);\\n            if (this._loadedCount < this._loadCountMax) {\\n                if (data.loadMoreUrl != '') {\\n                    // have loadMore\\n                    loadMoreBut.prop('href', data.loadMoreUrl);\\n                    loadMoreBut.text(loadMoreBut.data('original-text'));\\n                    loadMoreBut.data('original-text', '');\\n                    loadMoreBut.removeClass('spin');\\n                } else {\\n                    // no more loadMore\\n                    loadMoreBut.removeAttr('href');\\n                    loadMoreBut.text('No more posts');\\n                    loadMoreBut.removeClass('spin').addClass('end');\\n                    this._bottomReached = true;\\n                }\\n            } else {\\n                // Max loaded count reached\\n                loadMoreBut.text('I want more fun');\\n                loadMoreBut.prop('href', data.loadMoreUrl);\\n                loadMoreBut.removeClass('spin').addClass('blue');\\n                this._bottomReached = true;\\n            }\\n\\n            // fire comScore for attached content in infinite scroll list\\n            ComScore.firePageviewCandidate();\\n\\n            this._isLoading = false;\\n        }\\n\\n    },\\n\\n    loadMorePosts: function loadMorePosts() {\\n        if (this._isLoading || this._bottomReached) return;\\n        var loadMoreBut = $(this.selectors.LOAD_MORE_BUTTON);\\n        loadMoreBut.data('original-text', loadMoreBut.text());\\n        loadMoreBut.text(loadMoreBut.data('loading-text'));\\n        loadMoreBut.addClass('spin');\\n        var requestUrl = loadMoreBut.prop('href');\\n        this._isLoading = true;\\n        if (typeof requestUrl != 'undefined' && requestUrl != '') {\\n            $.getJSON(requestUrl, null, $.proxy(this.handlers.loadMoreAjaxHandler, this));\\n        }\\n    },\\n\\n    findLastEntryElement: function findLastEntryElement() {\\n        return this._listViewElement.find(this.selectors.ENTRY_LIST_CONTAINER).last();\\n        return this._listViewElement.find(this.selectors.ENTRY_CONTAINER).last();\\n    },\\n\\n    bindScrollEvents: function bindScrollEvents() {\\n        $(window).scroll($.proxy(this.handlers.windowScrollHandler, this));\\n    },\\n\\n    bindLastEntryInFocus: function bindLastEntryInFocus() {\\n        $('body').on(ModuleFactory.ListController.customEvents.IN_FOCUS_SET, this.selectors.ENTRY_CONTAINER, null, $.proxy(this.handlers.loadMoreLastEntryFocusHandler, this));\\n    }\\n}); /*\\n     * Controller for 6.0 list view (infinite scrolling and lazy loading)\\n     * Features provided:\\n     * - infinite scrolling, triggers when:\\n     *   1) we are less than 3 screens away from the bottom of the page\\n     *   2) the last entry is in-focus (because some long entries will be longer than 3 screens, making J/K not working)\\n     * - auto hiding of out-of-view elements (i.e. lazy loading)\\n     */\\n\\n\\nmodule.exports = ListScrollingController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(26), __webpack_require__(181), __webpack_require__(40), __webpack_require__(418)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/list-scroll.js\\n// module id = 249\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/list-scroll.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _abstract = __webpack_require__(130);\\n\\nvar _abstract2 = _interopRequireDefault(_abstract);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableVoteModel = $.extend({}, _abstract2.default, {\\n\\n    cacheKey: 'cacheableVote',\\n    cacheTTL: 1800,\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        return { action: 'vote', params: {} };\\n    },\\n\\n    /**\\n     */\\n    get: function get() {\\n        var value = this.getFromCache();\\n        if (value === null) {\\n            return value;\\n        }\\n\\n        return value;\\n    },\\n\\n    addToCache: function addToCache(data) {\\n\\n        var value = this.getFromCache();\\n\\n        if (value === null) {\\n            value = {};\\n        }\\n\\n        $.each(data, function (entryKey, score) {\\n            value[entryKey] = score;\\n        });\\n\\n        return this.updateCache(value);\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    }\\n}); /* \\n        A model for handling AJAX voting actions between client and server\\n    */\\n\\n\\nmodule.exports = CacheableVoteModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/vote.js\\n// module id = 250\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/vote.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Configs, Utils, $, GA) {'use strict';\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Facebook = {\\n    _xfbmlRenderItems: [],\\n    _fbInitedCallbacks: [],\\n    _asyncInited: false,\\n\\n    init: function init() {},\\n\\n    asyncInit: function asyncInit() {\\n\\n        this._asyncInited = true;\\n\\n        this.initApp();\\n        this.executeRenderQueue();\\n        this.subscribeLike();\\n    },\\n\\n    initApp: function initApp() {\\n\\n        FB.init({\\n            appId: Configs.Facebook.getAppId(),\\n            version: 'v2.2',\\n            xfbml: false,\\n            status: true,\\n            cookie: true\\n        });\\n\\n        this._checkFacebookLoginStatus();\\n    },\\n\\n    /* Add a callback function which would be execute after FB object inited and it would be trigged based on user login status */\\n    /* 'connected', 'logged-in', 'all' */\\n    addInitCallback: function addInitCallback(callbackType, callback) {\\n        Facebook._fbInitedCallbacks.push({ 'callbackType': callbackType, 'callback': callback });\\n    },\\n\\n    _executeFbInitedCallbacks: function _executeFbInitedCallbacks(callbackType) {\\n        for (var i = 0; i < this._fbInitedCallbacks.length; i++) {\\n            var cbItem = this._fbInitedCallbacks[i];\\n            if (callbackType.indexOf(cbItem.callbackType) !== -1 && typeof cbItem.callback == 'function' && !this._fbInitedCallbacks[i]['executed']) {\\n                this._fbInitedCallbacks[i]['executed'] = true;\\n                cbItem.callback();\\n            }\\n        }\\n    },\\n\\n    sessionChangeHandler: function sessionChangeHandler(response) {\\n        if (!response) return;\\n\\n        if (response.status === 'connected') {\\n            /* Logged-in and connected */\\n            if (response.authResponse) {\\n                //response.authResponse.userID;\\n                Facebook.autoLogin();\\n                Facebook._executeFbInitedCallbacks('connected,logged-in,all');\\n            }\\n        } else if (response.status === 'not_authorized') {\\n            /* Logged-in only */\\n            Facebook._executeFbInitedCallbacks('logged-in,all');\\n        } else {\\n            /* Not logged-in */\\n            Facebook._executeFbInitedCallbacks('logged-out,all');\\n        }\\n    },\\n\\n    _checkFacebookLoginStatus: function _checkFacebookLoginStatus() {\\n        FB.getLoginStatus(Facebook.sessionChangeHandler);\\n        FB.Event.subscribe('auth.authResponseChange', Facebook.sessionChangeHandler);\\n    },\\n\\n    /* Call parsing function for all queued elements */\\n    executeRenderQueue: function executeRenderQueue() {\\n        for (var i = 0; i < this._xfbmlRenderItems.length; i++) {\\n            var task = this._xfbmlRenderItems[i];\\n            this.parseElement(task['elementId'], task['callback']);\\n        }\\n    },\\n\\n    renderElement: function renderElement(elementId, callback) {\\n        if (this._asyncInited) {\\n            this.parseElement(elementId, callback);\\n        } else {\\n            this._xfbmlRenderItems.push({ 'elementId': elementId, 'callback': callback });\\n        }\\n    },\\n\\n    /* Render FB element using FB JS-SDK */\\n    parseElement: function parseElement(elementId, callback) {\\n        var el = document.getElementById(elementId);\\n        if (!el) return;\\n        // passing null to FB.XFBML.parse() would cause re-rendering for all elements on page!!\\n\\n        try {\\n            if (callback) {\\n                FB.XFBML.parse(el, callback);\\n            } else {\\n                FB.XFBML.parse(el);\\n            }\\n        } catch (e) {}\\n    },\\n\\n    /* Login to facebook app */\\n    login: function login(callback) {\\n        FB.login(function (response) {\\n            if (response.authResponse) {\\n                if (typeof callback == \\\"function\\\") callback.call(response);else alert(\\\"it is not a callback\\\");\\n            }\\n            return response.authResponse;\\n        });\\n    },\\n\\n    autoConnectKey: 'auto_log',\\n    autoConnectDuration: { path: '/', duration: 365 * 20 },\\n\\n    autoLogin: function autoLogin() {\\n        if (_user2.default.isLoggedIn()) return;\\n        if (!Utils.isCookieEnabled()) return;\\n\\n        var cookie = $.cookie(Facebook.autoConnectKey);\\n        var val = { \\\"a\\\": false, \\\"d\\\": false, \\\"lo\\\": false, \\\"dl\\\": false };\\n        if (cookie || cookie === false) {\\n            val = JSON.parse(cookie);\\n        }\\n        if (val != null) {\\n            if (val.a) return;\\n            if (!val.dl && (val.lo || val.d)) return;\\n        }\\n\\n        // track GA event\\n        GA.track('Login', 'AutoConnectFacebook', _page2.default.getPageKey());\\n        val.a = true;\\n        var cookieVal = JSON.stringify(val);\\n        var returns = $.cookie(Facebook.autoConnectKey, cookieVal, Facebook.autoConnectDuration);\\n        Facebook.Connect.autoLogin(location.href);\\n    },\\n\\n    /* Render facebook Like plugin on special element */\\n    renderLike: function renderLike(elementId, callback, configs) {\\n        var div = this.Plugins.Like.getElement(configs);\\n        var el = $('#' + elementId).html('').append(div);\\n        this.renderElement(elementId, callback);\\n    },\\n\\n    subscribeLike: function subscribeLike() {\\n        FB.Event.subscribe('edge.create', function (url) {\\n            GA.track('Social', 'LikeFacebook', _page2.default.getPageKey(), '', { Url: url });\\n        });\\n    },\\n\\n    Plugins: {\\n\\n        Like: {\\n\\n            getElement: function getElement(configs) {\\n                /* Default config values for html5 version */\\n                var defaults = {\\n                    'class': 'fb-like',\\n                    'data-href': '',\\n                    'data-layout': 'button_count',\\n                    'data-show-faces': 'false',\\n                    'data-font': 'arial',\\n                    'data-width': 300\\n                };\\n                configs = $.extend(defaults, configs);\\n                var div = $('<div/>');\\n                for (var dataKey in configs) {\\n                    div.attr(dataKey, configs[dataKey]);\\n                }\\n                return div;\\n            }\\n        }\\n    },\\n\\n    Connect: {\\n\\n        FB_CONNECT_CALLBACK_URL: '/connect/facebook-callback',\\n\\n        _additionalParams: {},\\n\\n        addParam: function addParam(key, value) {\\n            this._additionalParams[key] = value;\\n        },\\n\\n        _getConnectParamsString: function _getConnectParamsString() {\\n            var str = '';\\n            var index = 0;\\n            for (k in this._additionalParams) {\\n                str += (index == 0 ? '' : '&') + k + '=' + encodeURIComponent(this._additionalParams[k]);\\n                index++;\\n            }\\n            return str;\\n        },\\n\\n        _getConnectUrl: function _getConnectUrl(token) {\\n            var url = Facebook.Connect.FB_CONNECT_CALLBACK_URL;\\n            url += '?' + this._getConnectParamsString();\\n            return url;\\n        },\\n\\n        autoLogin: function autoLogin(redirectUrl) {\\n            try {\\n                if (redirectUrl == undefined || redirectUrl == null) {\\n                    redirectUrl = '/';\\n                }\\n\\n                var url = 'https://' + _page2.default.getDomain() + '/connect/auto-login';\\n                var next = 'next=' + encodeURIComponent(redirectUrl + '&' + this._getConnectParamsString());\\n                url += '?' + next;\\n\\n                window.location = url;\\n            } catch (e) {\\n                return;\\n            }\\n        },\\n\\n        connect: function connect(redirectUrl) {\\n            try {\\n                if (redirectUrl == undefined || redirectUrl == null) {\\n                    redirectUrl = '/';\\n                }\\n\\n                var url = 'https://' + _page2.default.getDomain() + '/connect/facebook';\\n                var next = 'next=' + encodeURIComponent(redirectUrl + '&' + this._getConnectParamsString());\\n                url += '?' + next;\\n\\n                window.location = url;\\n            } catch (e) {\\n                return;\\n            }\\n        }\\n    }\\n};\\n\\nwindow.fbAsyncInit = function () {\\n    Facebook.asyncInit();\\n};\\n\\nmodule.exports = Facebook;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(80), __webpack_require__(3), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/facebook.js\\n// module id = 251\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/facebook.js?\")},,function(module,exports,__webpack_require__){eval('var jQuery = __webpack_require__(3);\\n\\n/*!\\n * jQuery UI Core 1.10.4\\n * http://jqueryui.com\\n *\\n * Copyright 2014 jQuery Foundation and other contributors\\n * Released under the MIT license.\\n * http://jquery.org/license\\n *\\n * http://api.jqueryui.com/category/ui-core/\\n */\\n(function( $, undefined ) {\\n\\nvar uuid = 0,\\n\\truniqueId = /^ui-id-\\\\d+$/;\\n\\n// $.ui might exist from components with no dependencies, e.g., $.ui.position\\n$.ui = $.ui || {};\\n\\n$.extend( $.ui, {\\n\\tversion: \"1.10.4\",\\n\\n\\tkeyCode: {\\n\\t\\tBACKSPACE: 8,\\n\\t\\tCOMMA: 188,\\n\\t\\tDELETE: 46,\\n\\t\\tDOWN: 40,\\n\\t\\tEND: 35,\\n\\t\\tENTER: 13,\\n\\t\\tESCAPE: 27,\\n\\t\\tHOME: 36,\\n\\t\\tLEFT: 37,\\n\\t\\tNUMPAD_ADD: 107,\\n\\t\\tNUMPAD_DECIMAL: 110,\\n\\t\\tNUMPAD_DIVIDE: 111,\\n\\t\\tNUMPAD_ENTER: 108,\\n\\t\\tNUMPAD_MULTIPLY: 106,\\n\\t\\tNUMPAD_SUBTRACT: 109,\\n\\t\\tPAGE_DOWN: 34,\\n\\t\\tPAGE_UP: 33,\\n\\t\\tPERIOD: 190,\\n\\t\\tRIGHT: 39,\\n\\t\\tSPACE: 32,\\n\\t\\tTAB: 9,\\n\\t\\tUP: 38\\n\\t}\\n});\\n\\n// plugins\\n$.fn.extend({\\n\\tfocus: (function( orig ) {\\n\\t\\treturn function( delay, fn ) {\\n\\t\\t\\treturn typeof delay === \"number\" ?\\n\\t\\t\\t\\tthis.each(function() {\\n\\t\\t\\t\\t\\tvar elem = this;\\n\\t\\t\\t\\t\\tsetTimeout(function() {\\n\\t\\t\\t\\t\\t\\t$( elem ).focus();\\n\\t\\t\\t\\t\\t\\tif ( fn ) {\\n\\t\\t\\t\\t\\t\\t\\tfn.call( elem );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}, delay );\\n\\t\\t\\t\\t}) :\\n\\t\\t\\t\\torig.apply( this, arguments );\\n\\t\\t};\\n\\t})( $.fn.focus ),\\n\\n\\tscrollParent: function() {\\n\\t\\tvar scrollParent;\\n\\t\\tif (($.ui.ie && (/(static|relative)/).test(this.css(\"position\"))) || (/absolute/).test(this.css(\"position\"))) {\\n\\t\\t\\tscrollParent = this.parents().filter(function() {\\n\\t\\t\\t\\treturn (/(relative|absolute|fixed)/).test($.css(this,\"position\")) && (/(auto|scroll)/).test($.css(this,\"overflow\")+$.css(this,\"overflow-y\")+$.css(this,\"overflow-x\"));\\n\\t\\t\\t}).eq(0);\\n\\t\\t} else {\\n\\t\\t\\tscrollParent = this.parents().filter(function() {\\n\\t\\t\\t\\treturn (/(auto|scroll)/).test($.css(this,\"overflow\")+$.css(this,\"overflow-y\")+$.css(this,\"overflow-x\"));\\n\\t\\t\\t}).eq(0);\\n\\t\\t}\\n\\n\\t\\treturn (/fixed/).test(this.css(\"position\")) || !scrollParent.length ? $(document) : scrollParent;\\n\\t},\\n\\n\\tzIndex: function( zIndex ) {\\n\\t\\tif ( zIndex !== undefined ) {\\n\\t\\t\\treturn this.css( \"zIndex\", zIndex );\\n\\t\\t}\\n\\n\\t\\tif ( this.length ) {\\n\\t\\t\\tvar elem = $( this[ 0 ] ), position, value;\\n\\t\\t\\twhile ( elem.length && elem[ 0 ] !== document ) {\\n\\t\\t\\t\\t// Ignore z-index if position is set to a value where z-index is ignored by the browser\\n\\t\\t\\t\\t// This makes behavior of this function consistent across browsers\\n\\t\\t\\t\\t// WebKit always returns auto if the element is positioned\\n\\t\\t\\t\\tposition = elem.css( \"position\" );\\n\\t\\t\\t\\tif ( position === \"absolute\" || position === \"relative\" || position === \"fixed\" ) {\\n\\t\\t\\t\\t\\t// IE returns 0 when zIndex is not specified\\n\\t\\t\\t\\t\\t// other browsers return a string\\n\\t\\t\\t\\t\\t// we ignore the case of nested elements with an explicit value of 0\\n\\t\\t\\t\\t\\t// <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\\n\\t\\t\\t\\t\\tvalue = parseInt( elem.css( \"zIndex\" ), 10 );\\n\\t\\t\\t\\t\\tif ( !isNaN( value ) && value !== 0 ) {\\n\\t\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telem = elem.parent();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t},\\n\\n\\tuniqueId: function() {\\n\\t\\treturn this.each(function() {\\n\\t\\t\\tif ( !this.id ) {\\n\\t\\t\\t\\tthis.id = \"ui-id-\" + (++uuid);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\tremoveUniqueId: function() {\\n\\t\\treturn this.each(function() {\\n\\t\\t\\tif ( runiqueId.test( this.id ) ) {\\n\\t\\t\\t\\t$( this ).removeAttr( \"id\" );\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n});\\n\\n// selectors\\nfunction focusable( element, isTabIndexNotNaN ) {\\n\\tvar map, mapName, img,\\n\\t\\tnodeName = element.nodeName.toLowerCase();\\n\\tif ( \"area\" === nodeName ) {\\n\\t\\tmap = element.parentNode;\\n\\t\\tmapName = map.name;\\n\\t\\tif ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\timg = $( \"img[usemap=#\" + mapName + \"]\" )[0];\\n\\t\\treturn !!img && visible( img );\\n\\t}\\n\\treturn ( /input|select|textarea|button|object/.test( nodeName ) ?\\n\\t\\t!element.disabled :\\n\\t\\t\"a\" === nodeName ?\\n\\t\\t\\telement.href || isTabIndexNotNaN :\\n\\t\\t\\tisTabIndexNotNaN) &&\\n\\t\\t// the element and all of its ancestors must be visible\\n\\t\\tvisible( element );\\n}\\n\\nfunction visible( element ) {\\n\\treturn $.expr.filters.visible( element ) &&\\n\\t\\t!$( element ).parents().addBack().filter(function() {\\n\\t\\t\\treturn $.css( this, \"visibility\" ) === \"hidden\";\\n\\t\\t}).length;\\n}\\n\\n$.extend( $.expr[ \":\" ], {\\n\\tdata: $.expr.createPseudo ?\\n\\t\\t$.expr.createPseudo(function( dataName ) {\\n\\t\\t\\treturn function( elem ) {\\n\\t\\t\\t\\treturn !!$.data( elem, dataName );\\n\\t\\t\\t};\\n\\t\\t}) :\\n\\t\\t// support: jQuery <1.8\\n\\t\\tfunction( elem, i, match ) {\\n\\t\\t\\treturn !!$.data( elem, match[ 3 ] );\\n\\t\\t},\\n\\n\\tfocusable: function( element ) {\\n\\t\\treturn focusable( element, !isNaN( $.attr( element, \"tabindex\" ) ) );\\n\\t},\\n\\n\\ttabbable: function( element ) {\\n\\t\\tvar tabIndex = $.attr( element, \"tabindex\" ),\\n\\t\\t\\tisTabIndexNaN = isNaN( tabIndex );\\n\\t\\treturn ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );\\n\\t}\\n});\\n\\n// support: jQuery <1.8\\nif ( !$( \"<a>\" ).outerWidth( 1 ).jquery ) {\\n\\t$.each( [ \"Width\", \"Height\" ], function( i, name ) {\\n\\t\\tvar side = name === \"Width\" ? [ \"Left\", \"Right\" ] : [ \"Top\", \"Bottom\" ],\\n\\t\\t\\ttype = name.toLowerCase(),\\n\\t\\t\\torig = {\\n\\t\\t\\t\\tinnerWidth: $.fn.innerWidth,\\n\\t\\t\\t\\tinnerHeight: $.fn.innerHeight,\\n\\t\\t\\t\\touterWidth: $.fn.outerWidth,\\n\\t\\t\\t\\touterHeight: $.fn.outerHeight\\n\\t\\t\\t};\\n\\n\\t\\tfunction reduce( elem, size, border, margin ) {\\n\\t\\t\\t$.each( side, function() {\\n\\t\\t\\t\\tsize -= parseFloat( $.css( elem, \"padding\" + this ) ) || 0;\\n\\t\\t\\t\\tif ( border ) {\\n\\t\\t\\t\\t\\tsize -= parseFloat( $.css( elem, \"border\" + this + \"Width\" ) ) || 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( margin ) {\\n\\t\\t\\t\\t\\tsize -= parseFloat( $.css( elem, \"margin\" + this ) ) || 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn size;\\n\\t\\t}\\n\\n\\t\\t$.fn[ \"inner\" + name ] = function( size ) {\\n\\t\\t\\tif ( size === undefined ) {\\n\\t\\t\\t\\treturn orig[ \"inner\" + name ].call( this );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function() {\\n\\t\\t\\t\\t$( this ).css( type, reduce( this, size ) + \"px\" );\\n\\t\\t\\t});\\n\\t\\t};\\n\\n\\t\\t$.fn[ \"outer\" + name] = function( size, margin ) {\\n\\t\\t\\tif ( typeof size !== \"number\" ) {\\n\\t\\t\\t\\treturn orig[ \"outer\" + name ].call( this, size );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function() {\\n\\t\\t\\t\\t$( this).css( type, reduce( this, size, true, margin ) + \"px\" );\\n\\t\\t\\t});\\n\\t\\t};\\n\\t});\\n}\\n\\n// support: jQuery <1.8\\nif ( !$.fn.addBack ) {\\n\\t$.fn.addBack = function( selector ) {\\n\\t\\treturn this.add( selector == null ?\\n\\t\\t\\tthis.prevObject : this.prevObject.filter( selector )\\n\\t\\t);\\n\\t};\\n}\\n\\n// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)\\nif ( $( \"<a>\" ).data( \"a-b\", \"a\" ).removeData( \"a-b\" ).data( \"a-b\" ) ) {\\n\\t$.fn.removeData = (function( removeData ) {\\n\\t\\treturn function( key ) {\\n\\t\\t\\tif ( arguments.length ) {\\n\\t\\t\\t\\treturn removeData.call( this, $.camelCase( key ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn removeData.call( this );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t})( $.fn.removeData );\\n}\\n\\n\\n\\n\\n\\n// deprecated\\n$.ui.ie = !!/msie [\\\\w.]+/.exec( navigator.userAgent.toLowerCase() );\\n\\n$.support.selectstart = \"onselectstart\" in document.createElement( \"div\" );\\n$.fn.extend({\\n\\tdisableSelection: function() {\\n\\t\\treturn this.bind( ( $.support.selectstart ? \"selectstart\" : \"mousedown\" ) +\\n\\t\\t\\t\".ui-disableSelection\", function( event ) {\\n\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t});\\n\\t},\\n\\n\\tenableSelection: function() {\\n\\t\\treturn this.unbind( \".ui-disableSelection\" );\\n\\t}\\n});\\n\\n$.extend( $.ui, {\\n\\t// $.ui.plugin is deprecated. Use $.widget() extensions instead.\\n\\tplugin: {\\n\\t\\tadd: function( module, option, set ) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t\\tproto = $.ui[ module ].prototype;\\n\\t\\t\\tfor ( i in set ) {\\n\\t\\t\\t\\tproto.plugins[ i ] = proto.plugins[ i ] || [];\\n\\t\\t\\t\\tproto.plugins[ i ].push( [ option, set[ i ] ] );\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tcall: function( instance, name, args ) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t\\tset = instance.plugins[ name ];\\n\\t\\t\\tif ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( i = 0; i < set.length; i++ ) {\\n\\t\\t\\t\\tif ( instance.options[ set[ i ][ 0 ] ] ) {\\n\\t\\t\\t\\t\\tset[ i ][ 1 ].apply( instance.element, args );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\t// only used by resizable\\n\\thasScroll: function( el, a ) {\\n\\n\\t\\t//If overflow is hidden, the element might have extra content, but the user wants to hide it\\n\\t\\tif ( $( el ).css( \"overflow\" ) === \"hidden\") {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tvar scroll = ( a && a === \"left\" ) ? \"scrollLeft\" : \"scrollTop\",\\n\\t\\t\\thas = false;\\n\\n\\t\\tif ( el[ scroll ] > 0 ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// TODO: determine which cases actually cause this to happen\\n\\t\\t// if the element doesn\\'t have the scroll set, see if it\\'s possible to\\n\\t\\t// set the scroll\\n\\t\\tel[ scroll ] = 1;\\n\\t\\thas = ( el[ scroll ] > 0 );\\n\\t\\tel[ scroll ] = 0;\\n\\t\\treturn has;\\n\\t}\\n});\\n\\n})( jQuery );\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery-ui/core.js\\n// module id = 253\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/jquery-ui/core.js?')},function(module,exports,__webpack_require__){eval('var jQuery = __webpack_require__(3);\\n\\n/*!\\n * jQuery UI Widget 1.10.4\\n * http://jqueryui.com\\n *\\n * Copyright 2014 jQuery Foundation and other contributors\\n * Released under the MIT license.\\n * http://jquery.org/license\\n *\\n * http://api.jqueryui.com/jQuery.widget/\\n */\\n(function( $, undefined ) {\\n\\nvar uuid = 0,\\n\\tslice = Array.prototype.slice,\\n\\t_cleanData = $.cleanData;\\n$.cleanData = function( elems ) {\\n\\tfor ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {\\n\\t\\ttry {\\n\\t\\t\\t$( elem ).triggerHandler( \"remove\" );\\n\\t\\t// http://bugs.jquery.com/ticket/8235\\n\\t\\t} catch( e ) {}\\n\\t}\\n\\t_cleanData( elems );\\n};\\n\\n$.widget = function( name, base, prototype ) {\\n\\tvar fullName, existingConstructor, constructor, basePrototype,\\n\\t\\t// proxiedPrototype allows the provided prototype to remain unmodified\\n\\t\\t// so that it can be used as a mixin for multiple widgets (#8876)\\n\\t\\tproxiedPrototype = {},\\n\\t\\tnamespace = name.split( \".\" )[ 0 ];\\n\\n\\tname = name.split( \".\" )[ 1 ];\\n\\tfullName = namespace + \"-\" + name;\\n\\n\\tif ( !prototype ) {\\n\\t\\tprototype = base;\\n\\t\\tbase = $.Widget;\\n\\t}\\n\\n\\t// create selector for plugin\\n\\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\\n\\t\\treturn !!$.data( elem, fullName );\\n\\t};\\n\\n\\t$[ namespace ] = $[ namespace ] || {};\\n\\texistingConstructor = $[ namespace ][ name ];\\n\\tconstructor = $[ namespace ][ name ] = function( options, element ) {\\n\\t\\t// allow instantiation without \"new\" keyword\\n\\t\\tif ( !this._createWidget ) {\\n\\t\\t\\treturn new constructor( options, element );\\n\\t\\t}\\n\\n\\t\\t// allow instantiation without initializing for simple inheritance\\n\\t\\t// must use \"new\" keyword (the code above always passes args)\\n\\t\\tif ( arguments.length ) {\\n\\t\\t\\tthis._createWidget( options, element );\\n\\t\\t}\\n\\t};\\n\\t// extend with the existing constructor to carry over any static properties\\n\\t$.extend( constructor, existingConstructor, {\\n\\t\\tversion: prototype.version,\\n\\t\\t// copy the object used to create the prototype in case we need to\\n\\t\\t// redefine the widget later\\n\\t\\t_proto: $.extend( {}, prototype ),\\n\\t\\t// track widgets that inherit from this widget in case this widget is\\n\\t\\t// redefined after a widget inherits from it\\n\\t\\t_childConstructors: []\\n\\t});\\n\\n\\tbasePrototype = new base();\\n\\t// we need to make the options hash a property directly on the new instance\\n\\t// otherwise we\\'ll modify the options hash on the prototype that we\\'re\\n\\t// inheriting from\\n\\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\\n\\t$.each( prototype, function( prop, value ) {\\n\\t\\tif ( !$.isFunction( value ) ) {\\n\\t\\t\\tproxiedPrototype[ prop ] = value;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tproxiedPrototype[ prop ] = (function() {\\n\\t\\t\\tvar _super = function() {\\n\\t\\t\\t\\t\\treturn base.prototype[ prop ].apply( this, arguments );\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t_superApply = function( args ) {\\n\\t\\t\\t\\t\\treturn base.prototype[ prop ].apply( this, args );\\n\\t\\t\\t\\t};\\n\\t\\t\\treturn function() {\\n\\t\\t\\t\\tvar __super = this._super,\\n\\t\\t\\t\\t\\t__superApply = this._superApply,\\n\\t\\t\\t\\t\\treturnValue;\\n\\n\\t\\t\\t\\tthis._super = _super;\\n\\t\\t\\t\\tthis._superApply = _superApply;\\n\\n\\t\\t\\t\\treturnValue = value.apply( this, arguments );\\n\\n\\t\\t\\t\\tthis._super = __super;\\n\\t\\t\\t\\tthis._superApply = __superApply;\\n\\n\\t\\t\\t\\treturn returnValue;\\n\\t\\t\\t};\\n\\t\\t})();\\n\\t});\\n\\tconstructor.prototype = $.widget.extend( basePrototype, {\\n\\t\\t// TODO: remove support for widgetEventPrefix\\n\\t\\t// always use the name + a colon as the prefix, e.g., draggable:start\\n\\t\\t// don\\'t prefix for widgets that aren\\'t DOM-based\\n\\t\\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\\n\\t}, proxiedPrototype, {\\n\\t\\tconstructor: constructor,\\n\\t\\tnamespace: namespace,\\n\\t\\twidgetName: name,\\n\\t\\twidgetFullName: fullName\\n\\t});\\n\\n\\t// If this widget is being redefined then we need to find all widgets that\\n\\t// are inheriting from it and redefine all of them so that they inherit from\\n\\t// the new version of this widget. We\\'re essentially trying to replace one\\n\\t// level in the prototype chain.\\n\\tif ( existingConstructor ) {\\n\\t\\t$.each( existingConstructor._childConstructors, function( i, child ) {\\n\\t\\t\\tvar childPrototype = child.prototype;\\n\\n\\t\\t\\t// redefine the child widget using the same prototype that was\\n\\t\\t\\t// originally used, but inherit from the new version of the base\\n\\t\\t\\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );\\n\\t\\t});\\n\\t\\t// remove the list of existing child constructors from the old constructor\\n\\t\\t// so the old child constructors can be garbage collected\\n\\t\\tdelete existingConstructor._childConstructors;\\n\\t} else {\\n\\t\\tbase._childConstructors.push( constructor );\\n\\t}\\n\\n\\t$.widget.bridge( name, constructor );\\n};\\n\\n$.widget.extend = function( target ) {\\n\\tvar input = slice.call( arguments, 1 ),\\n\\t\\tinputIndex = 0,\\n\\t\\tinputLength = input.length,\\n\\t\\tkey,\\n\\t\\tvalue;\\n\\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\\n\\t\\tfor ( key in input[ inputIndex ] ) {\\n\\t\\t\\tvalue = input[ inputIndex ][ key ];\\n\\t\\t\\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\\n\\t\\t\\t\\t// Clone objects\\n\\t\\t\\t\\tif ( $.isPlainObject( value ) ) {\\n\\t\\t\\t\\t\\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\\n\\t\\t\\t\\t\\t\\t$.widget.extend( {}, target[ key ], value ) :\\n\\t\\t\\t\\t\\t\\t// Don\\'t extend strings, arrays, etc. with objects\\n\\t\\t\\t\\t\\t\\t$.widget.extend( {}, value );\\n\\t\\t\\t\\t// Copy everything else by reference\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttarget[ key ] = value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn target;\\n};\\n\\n$.widget.bridge = function( name, object ) {\\n\\tvar fullName = object.prototype.widgetFullName || name;\\n\\t$.fn[ name ] = function( options ) {\\n\\t\\tvar isMethodCall = typeof options === \"string\",\\n\\t\\t\\targs = slice.call( arguments, 1 ),\\n\\t\\t\\treturnValue = this;\\n\\n\\t\\t// allow multiple hashes to be passed on init\\n\\t\\toptions = !isMethodCall && args.length ?\\n\\t\\t\\t$.widget.extend.apply( null, [ options ].concat(args) ) :\\n\\t\\t\\toptions;\\n\\n\\t\\tif ( isMethodCall ) {\\n\\t\\t\\tthis.each(function() {\\n\\t\\t\\t\\tvar methodValue,\\n\\t\\t\\t\\t\\tinstance = $.data( this, fullName );\\n\\t\\t\\t\\tif ( !instance ) {\\n\\t\\t\\t\\t\\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +\\n\\t\\t\\t\\t\\t\\t\"attempted to call method \\'\" + options + \"\\'\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {\\n\\t\\t\\t\\t\\treturn $.error( \"no such method \\'\" + options + \"\\' for \" + name + \" widget instance\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmethodValue = instance[ options ].apply( instance, args );\\n\\t\\t\\t\\tif ( methodValue !== instance && methodValue !== undefined ) {\\n\\t\\t\\t\\t\\treturnValue = methodValue && methodValue.jquery ?\\n\\t\\t\\t\\t\\t\\treturnValue.pushStack( methodValue.get() ) :\\n\\t\\t\\t\\t\\t\\tmethodValue;\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tthis.each(function() {\\n\\t\\t\\t\\tvar instance = $.data( this, fullName );\\n\\t\\t\\t\\tif ( instance ) {\\n\\t\\t\\t\\t\\tinstance.option( options || {} )._init();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t$.data( this, fullName, new object( options, this ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn returnValue;\\n\\t};\\n};\\n\\n$.Widget = function( /* options, element */ ) {};\\n$.Widget._childConstructors = [];\\n\\n$.Widget.prototype = {\\n\\twidgetName: \"widget\",\\n\\twidgetEventPrefix: \"\",\\n\\tdefaultElement: \"<div>\",\\n\\toptions: {\\n\\t\\tdisabled: false,\\n\\n\\t\\t// callbacks\\n\\t\\tcreate: null\\n\\t},\\n\\t_createWidget: function( options, element ) {\\n\\t\\telement = $( element || this.defaultElement || this )[ 0 ];\\n\\t\\tthis.element = $( element );\\n\\t\\tthis.uuid = uuid++;\\n\\t\\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\\n\\t\\tthis.options = $.widget.extend( {},\\n\\t\\t\\tthis.options,\\n\\t\\t\\tthis._getCreateOptions(),\\n\\t\\t\\toptions );\\n\\n\\t\\tthis.bindings = $();\\n\\t\\tthis.hoverable = $();\\n\\t\\tthis.focusable = $();\\n\\n\\t\\tif ( element !== this ) {\\n\\t\\t\\t$.data( element, this.widgetFullName, this );\\n\\t\\t\\tthis._on( true, this.element, {\\n\\t\\t\\t\\tremove: function( event ) {\\n\\t\\t\\t\\t\\tif ( event.target === element ) {\\n\\t\\t\\t\\t\\t\\tthis.destroy();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tthis.document = $( element.style ?\\n\\t\\t\\t\\t// element within the document\\n\\t\\t\\t\\telement.ownerDocument :\\n\\t\\t\\t\\t// element is window or document\\n\\t\\t\\t\\telement.document || element );\\n\\t\\t\\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );\\n\\t\\t}\\n\\n\\t\\tthis._create();\\n\\t\\tthis._trigger( \"create\", null, this._getCreateEventData() );\\n\\t\\tthis._init();\\n\\t},\\n\\t_getCreateOptions: $.noop,\\n\\t_getCreateEventData: $.noop,\\n\\t_create: $.noop,\\n\\t_init: $.noop,\\n\\n\\tdestroy: function() {\\n\\t\\tthis._destroy();\\n\\t\\t// we can probably remove the unbind calls in 2.0\\n\\t\\t// all event bindings should go through this._on()\\n\\t\\tthis.element\\n\\t\\t\\t.unbind( this.eventNamespace )\\n\\t\\t\\t// 1.9 BC for #7810\\n\\t\\t\\t// TODO remove dual storage\\n\\t\\t\\t.removeData( this.widgetName )\\n\\t\\t\\t.removeData( this.widgetFullName )\\n\\t\\t\\t// support: jquery <1.6.3\\n\\t\\t\\t// http://bugs.jquery.com/ticket/9413\\n\\t\\t\\t.removeData( $.camelCase( this.widgetFullName ) );\\n\\t\\tthis.widget()\\n\\t\\t\\t.unbind( this.eventNamespace )\\n\\t\\t\\t.removeAttr( \"aria-disabled\" )\\n\\t\\t\\t.removeClass(\\n\\t\\t\\t\\tthis.widgetFullName + \"-disabled \" +\\n\\t\\t\\t\\t\"ui-state-disabled\" );\\n\\n\\t\\t// clean up events and states\\n\\t\\tthis.bindings.unbind( this.eventNamespace );\\n\\t\\tthis.hoverable.removeClass( \"ui-state-hover\" );\\n\\t\\tthis.focusable.removeClass( \"ui-state-focus\" );\\n\\t},\\n\\t_destroy: $.noop,\\n\\n\\twidget: function() {\\n\\t\\treturn this.element;\\n\\t},\\n\\n\\toption: function( key, value ) {\\n\\t\\tvar options = key,\\n\\t\\t\\tparts,\\n\\t\\t\\tcurOption,\\n\\t\\t\\ti;\\n\\n\\t\\tif ( arguments.length === 0 ) {\\n\\t\\t\\t// don\\'t return a reference to the internal hash\\n\\t\\t\\treturn $.widget.extend( {}, this.options );\\n\\t\\t}\\n\\n\\t\\tif ( typeof key === \"string\" ) {\\n\\t\\t\\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\\n\\t\\t\\toptions = {};\\n\\t\\t\\tparts = key.split( \".\" );\\n\\t\\t\\tkey = parts.shift();\\n\\t\\t\\tif ( parts.length ) {\\n\\t\\t\\t\\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\\n\\t\\t\\t\\tfor ( i = 0; i < parts.length - 1; i++ ) {\\n\\t\\t\\t\\t\\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\\n\\t\\t\\t\\t\\tcurOption = curOption[ parts[ i ] ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tkey = parts.pop();\\n\\t\\t\\t\\tif ( arguments.length === 1 ) {\\n\\t\\t\\t\\t\\treturn curOption[ key ] === undefined ? null : curOption[ key ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcurOption[ key ] = value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ( arguments.length === 1 ) {\\n\\t\\t\\t\\t\\treturn this.options[ key ] === undefined ? null : this.options[ key ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\toptions[ key ] = value;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._setOptions( options );\\n\\n\\t\\treturn this;\\n\\t},\\n\\t_setOptions: function( options ) {\\n\\t\\tvar key;\\n\\n\\t\\tfor ( key in options ) {\\n\\t\\t\\tthis._setOption( key, options[ key ] );\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\t_setOption: function( key, value ) {\\n\\t\\tthis.options[ key ] = value;\\n\\n\\t\\tif ( key === \"disabled\" ) {\\n\\t\\t\\tthis.widget()\\n\\t\\t\\t\\t.toggleClass( this.widgetFullName + \"-disabled ui-state-disabled\", !!value )\\n\\t\\t\\t\\t.attr( \"aria-disabled\", value );\\n\\t\\t\\tthis.hoverable.removeClass( \"ui-state-hover\" );\\n\\t\\t\\tthis.focusable.removeClass( \"ui-state-focus\" );\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\n\\tenable: function() {\\n\\t\\treturn this._setOption( \"disabled\", false );\\n\\t},\\n\\tdisable: function() {\\n\\t\\treturn this._setOption( \"disabled\", true );\\n\\t},\\n\\n\\t_on: function( suppressDisabledCheck, element, handlers ) {\\n\\t\\tvar delegateElement,\\n\\t\\t\\tinstance = this;\\n\\n\\t\\t// no suppressDisabledCheck flag, shuffle arguments\\n\\t\\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\\n\\t\\t\\thandlers = element;\\n\\t\\t\\telement = suppressDisabledCheck;\\n\\t\\t\\tsuppressDisabledCheck = false;\\n\\t\\t}\\n\\n\\t\\t// no element argument, shuffle and use this.element\\n\\t\\tif ( !handlers ) {\\n\\t\\t\\thandlers = element;\\n\\t\\t\\telement = this.element;\\n\\t\\t\\tdelegateElement = this.widget();\\n\\t\\t} else {\\n\\t\\t\\t// accept selectors, DOM elements\\n\\t\\t\\telement = delegateElement = $( element );\\n\\t\\t\\tthis.bindings = this.bindings.add( element );\\n\\t\\t}\\n\\n\\t\\t$.each( handlers, function( event, handler ) {\\n\\t\\t\\tfunction handlerProxy() {\\n\\t\\t\\t\\t// allow widgets to customize the disabled handling\\n\\t\\t\\t\\t// - disabled as an array instead of boolean\\n\\t\\t\\t\\t// - disabled class as method for disabling individual parts\\n\\t\\t\\t\\tif ( !suppressDisabledCheck &&\\n\\t\\t\\t\\t\\t\\t( instance.options.disabled === true ||\\n\\t\\t\\t\\t\\t\\t\\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\\n\\t\\t\\t\\t\\t.apply( instance, arguments );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// copy the guid so direct unbinding works\\n\\t\\t\\tif ( typeof handler !== \"string\" ) {\\n\\t\\t\\t\\thandlerProxy.guid = handler.guid =\\n\\t\\t\\t\\t\\thandler.guid || handlerProxy.guid || $.guid++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar match = event.match( /^(\\\\w+)\\\\s*(.*)$/ ),\\n\\t\\t\\t\\teventName = match[1] + instance.eventNamespace,\\n\\t\\t\\t\\tselector = match[2];\\n\\t\\t\\tif ( selector ) {\\n\\t\\t\\t\\tdelegateElement.delegate( selector, eventName, handlerProxy );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\telement.bind( eventName, handlerProxy );\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t_off: function( element, eventName ) {\\n\\t\\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) + this.eventNamespace;\\n\\t\\telement.unbind( eventName ).undelegate( eventName );\\n\\t},\\n\\n\\t_delay: function( handler, delay ) {\\n\\t\\tfunction handlerProxy() {\\n\\t\\t\\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\\n\\t\\t\\t\\t.apply( instance, arguments );\\n\\t\\t}\\n\\t\\tvar instance = this;\\n\\t\\treturn setTimeout( handlerProxy, delay || 0 );\\n\\t},\\n\\n\\t_hoverable: function( element ) {\\n\\t\\tthis.hoverable = this.hoverable.add( element );\\n\\t\\tthis._on( element, {\\n\\t\\t\\tmouseenter: function( event ) {\\n\\t\\t\\t\\t$( event.currentTarget ).addClass( \"ui-state-hover\" );\\n\\t\\t\\t},\\n\\t\\t\\tmouseleave: function( event ) {\\n\\t\\t\\t\\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t_focusable: function( element ) {\\n\\t\\tthis.focusable = this.focusable.add( element );\\n\\t\\tthis._on( element, {\\n\\t\\t\\tfocusin: function( event ) {\\n\\t\\t\\t\\t$( event.currentTarget ).addClass( \"ui-state-focus\" );\\n\\t\\t\\t},\\n\\t\\t\\tfocusout: function( event ) {\\n\\t\\t\\t\\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t_trigger: function( type, event, data ) {\\n\\t\\tvar prop, orig,\\n\\t\\t\\tcallback = this.options[ type ];\\n\\n\\t\\tdata = data || {};\\n\\t\\tevent = $.Event( event );\\n\\t\\tevent.type = ( type === this.widgetEventPrefix ?\\n\\t\\t\\ttype :\\n\\t\\t\\tthis.widgetEventPrefix + type ).toLowerCase();\\n\\t\\t// the original event may come from any element\\n\\t\\t// so we need to reset the target on the new event\\n\\t\\tevent.target = this.element[ 0 ];\\n\\n\\t\\t// copy original event properties over to the new event\\n\\t\\torig = event.originalEvent;\\n\\t\\tif ( orig ) {\\n\\t\\t\\tfor ( prop in orig ) {\\n\\t\\t\\t\\tif ( !( prop in event ) ) {\\n\\t\\t\\t\\t\\tevent[ prop ] = orig[ prop ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.element.trigger( event, data );\\n\\t\\treturn !( $.isFunction( callback ) &&\\n\\t\\t\\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||\\n\\t\\t\\tevent.isDefaultPrevented() );\\n\\t}\\n};\\n\\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\\n\\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\\n\\t\\tif ( typeof options === \"string\" ) {\\n\\t\\t\\toptions = { effect: options };\\n\\t\\t}\\n\\t\\tvar hasOptions,\\n\\t\\t\\teffectName = !options ?\\n\\t\\t\\t\\tmethod :\\n\\t\\t\\t\\toptions === true || typeof options === \"number\" ?\\n\\t\\t\\t\\t\\tdefaultEffect :\\n\\t\\t\\t\\t\\toptions.effect || defaultEffect;\\n\\t\\toptions = options || {};\\n\\t\\tif ( typeof options === \"number\" ) {\\n\\t\\t\\toptions = { duration: options };\\n\\t\\t}\\n\\t\\thasOptions = !$.isEmptyObject( options );\\n\\t\\toptions.complete = callback;\\n\\t\\tif ( options.delay ) {\\n\\t\\t\\telement.delay( options.delay );\\n\\t\\t}\\n\\t\\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\\n\\t\\t\\telement[ method ]( options );\\n\\t\\t} else if ( effectName !== method && element[ effectName ] ) {\\n\\t\\t\\telement[ effectName ]( options.duration, options.easing, callback );\\n\\t\\t} else {\\n\\t\\t\\telement.queue(function( next ) {\\n\\t\\t\\t\\t$( this )[ method ]();\\n\\t\\t\\t\\tif ( callback ) {\\n\\t\\t\\t\\t\\tcallback.call( element[ 0 ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnext();\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n});\\n\\n})( jQuery );\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery-ui/widget.js\\n// module id = 254\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/jquery-ui/widget.js?');\n},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30),\\n    root = __webpack_require__(27);\\n\\n/* Built-in method references that are verified to be native. */\\nvar DataView = getNative(root, 'DataView');\\n\\nmodule.exports = DataView;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_DataView.js\\n// module id = 255\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_DataView.js?\")},function(module,exports,__webpack_require__){eval(\"var hashClear = __webpack_require__(303),\\n    hashDelete = __webpack_require__(304),\\n    hashGet = __webpack_require__(305),\\n    hashHas = __webpack_require__(306),\\n    hashSet = __webpack_require__(307);\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = hashClear;\\nHash.prototype['delete'] = hashDelete;\\nHash.prototype.get = hashGet;\\nHash.prototype.has = hashHas;\\nHash.prototype.set = hashSet;\\n\\nmodule.exports = Hash;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Hash.js\\n// module id = 256\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Hash.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30),\\n    root = __webpack_require__(27);\\n\\n/* Built-in method references that are verified to be native. */\\nvar Promise = getNative(root, 'Promise');\\n\\nmodule.exports = Promise;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Promise.js\\n// module id = 257\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Promise.js?\")},function(module,exports,__webpack_require__){eval(\"var root = __webpack_require__(27);\\n\\n/** Built-in value references. */\\nvar Uint8Array = root.Uint8Array;\\n\\nmodule.exports = Uint8Array;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_Uint8Array.js\\n// module id = 258\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_Uint8Array.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30),\\n    root = __webpack_require__(27);\\n\\n/* Built-in method references that are verified to be native. */\\nvar WeakMap = getNative(root, 'WeakMap');\\n\\nmodule.exports = WeakMap;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_WeakMap.js\\n// module id = 259\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_WeakMap.js?\")},function(module,exports){eval(\"/**\\n * A faster alternative to `Function#apply`, this function invokes `func`\\n * with the `this` binding of `thisArg` and the arguments of `args`.\\n *\\n * @private\\n * @param {Function} func The function to invoke.\\n * @param {*} thisArg The `this` binding of `func`.\\n * @param {Array} args The arguments to invoke `func` with.\\n * @returns {*} Returns the result of `func`.\\n */\\nfunction apply(func, thisArg, args) {\\n  switch (args.length) {\\n    case 0: return func.call(thisArg);\\n    case 1: return func.call(thisArg, args[0]);\\n    case 2: return func.call(thisArg, args[0], args[1]);\\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\\n  }\\n  return func.apply(thisArg, args);\\n}\\n\\nmodule.exports = apply;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_apply.js\\n// module id = 260\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_apply.js?\")},function(module,exports){eval(\"/**\\n * A specialized version of `_.forEach` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayEach(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (iteratee(array[index], index, array) === false) {\\n      break;\\n    }\\n  }\\n  return array;\\n}\\n\\nmodule.exports = arrayEach;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayEach.js\\n// module id = 261\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayEach.js?\")},function(module,exports){eval(\"/**\\n * A specialized version of `_.filter` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {Array} Returns the new filtered array.\\n */\\nfunction arrayFilter(array, predicate) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = arrayFilter;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayFilter.js\\n// module id = 262\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayFilter.js?\")},function(module,exports,__webpack_require__){eval(\"var baseTimes = __webpack_require__(285),\\n    isArguments = __webpack_require__(101),\\n    isArray = __webpack_require__(19),\\n    isBuffer = __webpack_require__(154),\\n    isIndex = __webpack_require__(148),\\n    isTypedArray = __webpack_require__(156);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Creates an array of the enumerable property names of the array-like `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @param {boolean} inherited Specify returning inherited property names.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction arrayLikeKeys(value, inherited) {\\n  var isArr = isArray(value),\\n      isArg = !isArr && isArguments(value),\\n      isBuff = !isArr && !isArg && isBuffer(value),\\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\\n      skipIndexes = isArr || isArg || isBuff || isType,\\n      result = skipIndexes ? baseTimes(value.length, String) : [],\\n      length = result.length;\\n\\n  for (var key in value) {\\n    if ((inherited || hasOwnProperty.call(value, key)) &&\\n        !(skipIndexes && (\\n           // Safari 9 has enumerable `arguments.length` in strict mode.\\n           key == 'length' ||\\n           // Node.js 0.10 has enumerable non-index properties on buffers.\\n           (isBuff && (key == 'offset' || key == 'parent')) ||\\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\\n           // Skip index properties.\\n           isIndex(key, length)\\n        ))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = arrayLikeKeys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arrayLikeKeys.js\\n// module id = 263\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arrayLikeKeys.js?\")},function(module,exports){eval(\"/**\\n * A specialized version of `_.some` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {boolean} Returns `true` if any element passes the predicate check,\\n *  else `false`.\\n */\\nfunction arraySome(array, predicate) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (predicate(array[index], index, array)) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nmodule.exports = arraySome;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_arraySome.js\\n// module id = 264\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_arraySome.js?\")},function(module,exports,__webpack_require__){eval(\"var SetCache = __webpack_require__(96),\\n    arrayIncludes = __webpack_require__(135),\\n    arrayIncludesWith = __webpack_require__(136),\\n    arrayMap = __webpack_require__(97),\\n    baseUnary = __webpack_require__(144),\\n    cacheHas = __webpack_require__(98);\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * The base implementation of methods like `_.difference` without support\\n * for excluding multiple arrays or iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Array} values The values to exclude.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n */\\nfunction baseDifference(array, values, iteratee, comparator) {\\n  var index = -1,\\n      includes = arrayIncludes,\\n      isCommon = true,\\n      length = array.length,\\n      result = [],\\n      valuesLength = values.length;\\n\\n  if (!length) {\\n    return result;\\n  }\\n  if (iteratee) {\\n    values = arrayMap(values, baseUnary(iteratee));\\n  }\\n  if (comparator) {\\n    includes = arrayIncludesWith;\\n    isCommon = false;\\n  }\\n  else if (values.length >= LARGE_ARRAY_SIZE) {\\n    includes = cacheHas;\\n    isCommon = false;\\n    values = new SetCache(values);\\n  }\\n  outer:\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee == null ? value : iteratee(value);\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (isCommon && computed === computed) {\\n      var valuesIndex = valuesLength;\\n      while (valuesIndex--) {\\n        if (values[valuesIndex] === computed) {\\n          continue outer;\\n        }\\n      }\\n      result.push(value);\\n    }\\n    else if (!includes(values, computed, comparator)) {\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseDifference;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseDifference.js\\n// module id = 265\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseDifference.js?\")},function(module,exports){eval(\"/**\\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\\n * support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Function} predicate The function invoked per iteration.\\n * @param {number} fromIndex The index to search from.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\\n  var length = array.length,\\n      index = fromIndex + (fromRight ? 1 : -1);\\n\\n  while ((fromRight ? index-- : ++index < length)) {\\n    if (predicate(array[index], index, array)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nmodule.exports = baseFindIndex;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseFindIndex.js\\n// module id = 266\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseFindIndex.js?\")},function(module,exports,__webpack_require__){eval(\"var createBaseFor = __webpack_require__(291);\\n\\n/**\\n * The base implementation of `baseForOwn` which iterates over `object`\\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\\n * Iteratee functions may exit iteration early by explicitly returning `false`.\\n *\\n * @private\\n * @param {Object} object The object to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @returns {Object} Returns `object`.\\n */\\nvar baseFor = createBaseFor();\\n\\nmodule.exports = baseFor;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseFor.js\\n// module id = 267\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseFor.js?\")},function(module,exports,__webpack_require__){eval(\"var baseFor = __webpack_require__(267),\\n    keys = __webpack_require__(103);\\n\\n/**\\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Object} object The object to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseForOwn(object, iteratee) {\\n  return object && baseFor(object, iteratee, keys);\\n}\\n\\nmodule.exports = baseForOwn;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseForOwn.js\\n// module id = 268\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseForOwn.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayPush = __webpack_require__(137),\\n    isArray = __webpack_require__(19);\\n\\n/**\\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n  var result = keysFunc(object);\\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\\n}\\n\\nmodule.exports = baseGetAllKeys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseGetAllKeys.js\\n// module id = 269\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseGetAllKeys.js?\")},function(module,exports){eval(\"/**\\n * The base implementation of `_.hasIn` without support for deep paths.\\n *\\n * @private\\n * @param {Object} [object] The object to query.\\n * @param {Array|string} key The key to check.\\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\\n */\\nfunction baseHasIn(object, key) {\\n  return object != null && key in Object(object);\\n}\\n\\nmodule.exports = baseHasIn;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseHasIn.js\\n// module id = 270\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseHasIn.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGetTag = __webpack_require__(52),\\n    isObjectLike = __webpack_require__(41);\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]';\\n\\n/**\\n * The base implementation of `_.isArguments`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n */\\nfunction baseIsArguments(value) {\\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\\n}\\n\\nmodule.exports = baseIsArguments;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsArguments.js\\n// module id = 271\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsArguments.js?\")},function(module,exports,__webpack_require__){eval(\"var Stack = __webpack_require__(134),\\n    equalArrays = __webpack_require__(146),\\n    equalByTag = __webpack_require__(294),\\n    equalObjects = __webpack_require__(295),\\n    getTag = __webpack_require__(300),\\n    isArray = __webpack_require__(19),\\n    isBuffer = __webpack_require__(154),\\n    isTypedArray = __webpack_require__(156);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1;\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * A specialized version of `baseIsEqual` for arrays and objects which performs\\n * deep comparisons and tracks traversed objects enabling objects with circular\\n * references to be compared.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\\n  var objIsArr = isArray(object),\\n      othIsArr = isArray(other),\\n      objTag = objIsArr ? arrayTag : getTag(object),\\n      othTag = othIsArr ? arrayTag : getTag(other);\\n\\n  objTag = objTag == argsTag ? objectTag : objTag;\\n  othTag = othTag == argsTag ? objectTag : othTag;\\n\\n  var objIsObj = objTag == objectTag,\\n      othIsObj = othTag == objectTag,\\n      isSameTag = objTag == othTag;\\n\\n  if (isSameTag && isBuffer(object)) {\\n    if (!isBuffer(other)) {\\n      return false;\\n    }\\n    objIsArr = true;\\n    objIsObj = false;\\n  }\\n  if (isSameTag && !objIsObj) {\\n    stack || (stack = new Stack);\\n    return (objIsArr || isTypedArray(object))\\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\\n  }\\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\\n\\n    if (objIsWrapped || othIsWrapped) {\\n      var objUnwrapped = objIsWrapped ? object.value() : object,\\n          othUnwrapped = othIsWrapped ? other.value() : other;\\n\\n      stack || (stack = new Stack);\\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\\n    }\\n  }\\n  if (!isSameTag) {\\n    return false;\\n  }\\n  stack || (stack = new Stack);\\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\\n}\\n\\nmodule.exports = baseIsEqualDeep;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsEqualDeep.js\\n// module id = 272\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsEqualDeep.js?\")},function(module,exports,__webpack_require__){eval(\"var Stack = __webpack_require__(134),\\n    baseIsEqual = __webpack_require__(142);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1,\\n    COMPARE_UNORDERED_FLAG = 2;\\n\\n/**\\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Object} object The object to inspect.\\n * @param {Object} source The object of property values to match.\\n * @param {Array} matchData The property names, values, and compare flags to match.\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\\n */\\nfunction baseIsMatch(object, source, matchData, customizer) {\\n  var index = matchData.length,\\n      length = index,\\n      noCustomizer = !customizer;\\n\\n  if (object == null) {\\n    return !length;\\n  }\\n  object = Object(object);\\n  while (index--) {\\n    var data = matchData[index];\\n    if ((noCustomizer && data[2])\\n          ? data[1] !== object[data[0]]\\n          : !(data[0] in object)\\n        ) {\\n      return false;\\n    }\\n  }\\n  while (++index < length) {\\n    data = matchData[index];\\n    var key = data[0],\\n        objValue = object[key],\\n        srcValue = data[1];\\n\\n    if (noCustomizer && data[2]) {\\n      if (objValue === undefined && !(key in object)) {\\n        return false;\\n      }\\n    } else {\\n      var stack = new Stack;\\n      if (customizer) {\\n        var result = customizer(objValue, srcValue, key, object, source, stack);\\n      }\\n      if (!(result === undefined\\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\\n            : result\\n          )) {\\n        return false;\\n      }\\n    }\\n  }\\n  return true;\\n}\\n\\nmodule.exports = baseIsMatch;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsMatch.js\\n// module id = 273\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsMatch.js?\")},function(module,exports){eval(\"/**\\n * The base implementation of `_.isNaN` without support for number objects.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\\n */\\nfunction baseIsNaN(value) {\\n  return value !== value;\\n}\\n\\nmodule.exports = baseIsNaN;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsNaN.js\\n// module id = 274\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsNaN.js?\")},function(module,exports,__webpack_require__){eval(\"var isFunction = __webpack_require__(155),\\n    isMasked = __webpack_require__(310),\\n    isObject = __webpack_require__(73),\\n    toSource = __webpack_require__(151);\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * The base implementation of `_.isNative` without bad shim checks.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n */\\nfunction baseIsNative(value) {\\n  if (!isObject(value) || isMasked(value)) {\\n    return false;\\n  }\\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\\n  return pattern.test(toSource(value));\\n}\\n\\nmodule.exports = baseIsNative;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsNative.js\\n// module id = 275\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsNative.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGetTag = __webpack_require__(52),\\n    isLength = __webpack_require__(102),\\n    isObjectLike = __webpack_require__(41);\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    funcTag = '[object Function]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values of typed arrays. */\\nvar typedArrayTags = {};\\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\\ntypedArrayTags[uint32Tag] = true;\\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\\ntypedArrayTags[weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n */\\nfunction baseIsTypedArray(value) {\\n  return isObjectLike(value) &&\\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\\n}\\n\\nmodule.exports = baseIsTypedArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIsTypedArray.js\\n// module id = 276\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIsTypedArray.js?\")},function(module,exports,__webpack_require__){eval(\"var baseMatches = __webpack_require__(280),\\n    baseMatchesProperty = __webpack_require__(281),\\n    identity = __webpack_require__(71),\\n    isArray = __webpack_require__(19),\\n    property = __webpack_require__(350);\\n\\n/**\\n * The base implementation of `_.iteratee`.\\n *\\n * @private\\n * @param {*} [value=_.identity] The value to convert to an iteratee.\\n * @returns {Function} Returns the iteratee.\\n */\\nfunction baseIteratee(value) {\\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\\n  if (typeof value == 'function') {\\n    return value;\\n  }\\n  if (value == null) {\\n    return identity;\\n  }\\n  if (typeof value == 'object') {\\n    return isArray(value)\\n      ? baseMatchesProperty(value[0], value[1])\\n      : baseMatches(value);\\n  }\\n  return property(value);\\n}\\n\\nmodule.exports = baseIteratee;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseIteratee.js\\n// module id = 277\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseIteratee.js?\")},function(module,exports,__webpack_require__){eval(\"var isPrototype = __webpack_require__(311),\\n    nativeKeys = __webpack_require__(324);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeys(object) {\\n  if (!isPrototype(object)) {\\n    return nativeKeys(object);\\n  }\\n  var result = [];\\n  for (var key in Object(object)) {\\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseKeys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseKeys.js\\n// module id = 278\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseKeys.js?\")},function(module,exports,__webpack_require__){eval(\"var baseEach = __webpack_require__(138),\\n    isArrayLike = __webpack_require__(72);\\n\\n/**\\n * The base implementation of `_.map` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array|Object} collection The collection to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction baseMap(collection, iteratee) {\\n  var index = -1,\\n      result = isArrayLike(collection) ? Array(collection.length) : [];\\n\\n  baseEach(collection, function(value, key, collection) {\\n    result[++index] = iteratee(value, key, collection);\\n  });\\n  return result;\\n}\\n\\nmodule.exports = baseMap;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseMap.js\\n// module id = 279\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseMap.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIsMatch = __webpack_require__(273),\\n    getMatchData = __webpack_require__(297),\\n    matchesStrictComparable = __webpack_require__(150);\\n\\n/**\\n * The base implementation of `_.matches` which doesn't clone `source`.\\n *\\n * @private\\n * @param {Object} source The object of property values to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction baseMatches(source) {\\n  var matchData = getMatchData(source);\\n  if (matchData.length == 1 && matchData[0][2]) {\\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\\n  }\\n  return function(object) {\\n    return object === source || baseIsMatch(object, source, matchData);\\n  };\\n}\\n\\nmodule.exports = baseMatches;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseMatches.js\\n// module id = 280\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseMatches.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIsEqual = __webpack_require__(142),\\n    get = __webpack_require__(343),\\n    hasIn = __webpack_require__(344),\\n    isKey = __webpack_require__(99),\\n    isStrictComparable = __webpack_require__(149),\\n    matchesStrictComparable = __webpack_require__(150),\\n    toKey = __webpack_require__(70);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1,\\n    COMPARE_UNORDERED_FLAG = 2;\\n\\n/**\\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\\n *\\n * @private\\n * @param {string} path The path of the property to get.\\n * @param {*} srcValue The value to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction baseMatchesProperty(path, srcValue) {\\n  if (isKey(path) && isStrictComparable(srcValue)) {\\n    return matchesStrictComparable(toKey(path), srcValue);\\n  }\\n  return function(object) {\\n    var objValue = get(object, path);\\n    return (objValue === undefined && objValue === srcValue)\\n      ? hasIn(object, path)\\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\\n  };\\n}\\n\\nmodule.exports = baseMatchesProperty;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseMatchesProperty.js\\n// module id = 281\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseMatchesProperty.js?\")},function(module,exports){eval(\"/**\\n * The base implementation of `_.property` without support for deep paths.\\n *\\n * @private\\n * @param {string} key The key of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n */\\nfunction baseProperty(key) {\\n  return function(object) {\\n    return object == null ? undefined : object[key];\\n  };\\n}\\n\\nmodule.exports = baseProperty;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseProperty.js\\n// module id = 282\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseProperty.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGet = __webpack_require__(140);\\n\\n/**\\n * A specialized version of `baseProperty` which supports deep paths.\\n *\\n * @private\\n * @param {Array|string} path The path of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n */\\nfunction basePropertyDeep(path) {\\n  return function(object) {\\n    return baseGet(object, path);\\n  };\\n}\\n\\nmodule.exports = basePropertyDeep;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_basePropertyDeep.js\\n// module id = 283\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_basePropertyDeep.js?\")},function(module,exports,__webpack_require__){eval(\"var constant = __webpack_require__(340),\\n    defineProperty = __webpack_require__(293),\\n    identity = __webpack_require__(71);\\n\\n/**\\n * The base implementation of `setToString` without support for hot loop shorting.\\n *\\n * @private\\n * @param {Function} func The function to modify.\\n * @param {Function} string The `toString` result.\\n * @returns {Function} Returns `func`.\\n */\\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\\n  return defineProperty(func, 'toString', {\\n    'configurable': true,\\n    'enumerable': false,\\n    'value': constant(string),\\n    'writable': true\\n  });\\n};\\n\\nmodule.exports = baseSetToString;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseSetToString.js\\n// module id = 284\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseSetToString.js?\");\n},function(module,exports){eval(\"/**\\n * The base implementation of `_.times` without support for iteratee shorthands\\n * or max array length checks.\\n *\\n * @private\\n * @param {number} n The number of times to invoke `iteratee`.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the array of results.\\n */\\nfunction baseTimes(n, iteratee) {\\n  var index = -1,\\n      result = Array(n);\\n\\n  while (++index < n) {\\n    result[index] = iteratee(index);\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseTimes;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseTimes.js\\n// module id = 285\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseTimes.js?\")},function(module,exports,__webpack_require__){eval(\"var Symbol = __webpack_require__(51),\\n    arrayMap = __webpack_require__(97),\\n    isArray = __webpack_require__(19),\\n    isSymbol = __webpack_require__(74);\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (isArray(value)) {\\n    // Recursively convert values (susceptible to call stack limits).\\n    return arrayMap(value, baseToString) + '';\\n  }\\n  if (isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\nmodule.exports = baseToString;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseToString.js\\n// module id = 286\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseToString.js?\")},function(module,exports,__webpack_require__){eval(\"var SetCache = __webpack_require__(96),\\n    arrayIncludes = __webpack_require__(135),\\n    arrayIncludesWith = __webpack_require__(136),\\n    cacheHas = __webpack_require__(98),\\n    createSet = __webpack_require__(292),\\n    setToArray = __webpack_require__(100);\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n */\\nfunction baseUniq(array, iteratee, comparator) {\\n  var index = -1,\\n      includes = arrayIncludes,\\n      length = array.length,\\n      isCommon = true,\\n      result = [],\\n      seen = result;\\n\\n  if (comparator) {\\n    isCommon = false;\\n    includes = arrayIncludesWith;\\n  }\\n  else if (length >= LARGE_ARRAY_SIZE) {\\n    var set = iteratee ? null : createSet(array);\\n    if (set) {\\n      return setToArray(set);\\n    }\\n    isCommon = false;\\n    includes = cacheHas;\\n    seen = new SetCache;\\n  }\\n  else {\\n    seen = iteratee ? [] : result;\\n  }\\n  outer:\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (isCommon && computed === computed) {\\n      var seenIndex = seen.length;\\n      while (seenIndex--) {\\n        if (seen[seenIndex] === computed) {\\n          continue outer;\\n        }\\n      }\\n      if (iteratee) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n    else if (!includes(seen, computed, comparator)) {\\n      if (seen !== result) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseUniq;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_baseUniq.js\\n// module id = 287\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_baseUniq.js?\")},function(module,exports,__webpack_require__){eval(\"var identity = __webpack_require__(71);\\n\\n/**\\n * Casts `value` to `identity` if it's not a function.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {Function} Returns cast function.\\n */\\nfunction castFunction(value) {\\n  return typeof value == 'function' ? value : identity;\\n}\\n\\nmodule.exports = castFunction;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_castFunction.js\\n// module id = 288\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_castFunction.js?\")},function(module,exports,__webpack_require__){eval(\"var root = __webpack_require__(27);\\n\\n/** Used to detect overreaching core-js shims. */\\nvar coreJsData = root['__core-js_shared__'];\\n\\nmodule.exports = coreJsData;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_coreJsData.js\\n// module id = 289\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_coreJsData.js?\")},function(module,exports,__webpack_require__){eval(\"var isArrayLike = __webpack_require__(72);\\n\\n/**\\n * Creates a `baseEach` or `baseEachRight` function.\\n *\\n * @private\\n * @param {Function} eachFunc The function to iterate over a collection.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {Function} Returns the new base function.\\n */\\nfunction createBaseEach(eachFunc, fromRight) {\\n  return function(collection, iteratee) {\\n    if (collection == null) {\\n      return collection;\\n    }\\n    if (!isArrayLike(collection)) {\\n      return eachFunc(collection, iteratee);\\n    }\\n    var length = collection.length,\\n        index = fromRight ? length : -1,\\n        iterable = Object(collection);\\n\\n    while ((fromRight ? index-- : ++index < length)) {\\n      if (iteratee(iterable[index], index, iterable) === false) {\\n        break;\\n      }\\n    }\\n    return collection;\\n  };\\n}\\n\\nmodule.exports = createBaseEach;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_createBaseEach.js\\n// module id = 290\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_createBaseEach.js?\")},function(module,exports){eval(\"/**\\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\\n *\\n * @private\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {Function} Returns the new base function.\\n */\\nfunction createBaseFor(fromRight) {\\n  return function(object, iteratee, keysFunc) {\\n    var index = -1,\\n        iterable = Object(object),\\n        props = keysFunc(object),\\n        length = props.length;\\n\\n    while (length--) {\\n      var key = props[fromRight ? length : ++index];\\n      if (iteratee(iterable[key], key, iterable) === false) {\\n        break;\\n      }\\n    }\\n    return object;\\n  };\\n}\\n\\nmodule.exports = createBaseFor;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_createBaseFor.js\\n// module id = 291\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_createBaseFor.js?\")},function(module,exports,__webpack_require__){eval(\"var Set = __webpack_require__(133),\\n    noop = __webpack_require__(349),\\n    setToArray = __webpack_require__(100);\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Creates a set object of `values`.\\n *\\n * @private\\n * @param {Array} values The values to add to the set.\\n * @returns {Object} Returns the new set.\\n */\\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\\n  return new Set(values);\\n};\\n\\nmodule.exports = createSet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_createSet.js\\n// module id = 292\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_createSet.js?\")},function(module,exports,__webpack_require__){eval(\"var getNative = __webpack_require__(30);\\n\\nvar defineProperty = (function() {\\n  try {\\n    var func = getNative(Object, 'defineProperty');\\n    func({}, '', {});\\n    return func;\\n  } catch (e) {}\\n}());\\n\\nmodule.exports = defineProperty;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_defineProperty.js\\n// module id = 293\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_defineProperty.js?\")},function(module,exports,__webpack_require__){eval(\"var Symbol = __webpack_require__(51),\\n    Uint8Array = __webpack_require__(258),\\n    eq = __webpack_require__(152),\\n    equalArrays = __webpack_require__(146),\\n    mapToArray = __webpack_require__(322),\\n    setToArray = __webpack_require__(100);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1,\\n    COMPARE_UNORDERED_FLAG = 2;\\n\\n/** `Object#toString` result references. */\\nvar boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]';\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for comparing objects of\\n * the same `toStringTag`.\\n *\\n * **Note:** This function only supports comparing values with tags of\\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {string} tag The `toStringTag` of the objects to compare.\\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Object} stack Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\\n  switch (tag) {\\n    case dataViewTag:\\n      if ((object.byteLength != other.byteLength) ||\\n          (object.byteOffset != other.byteOffset)) {\\n        return false;\\n      }\\n      object = object.buffer;\\n      other = other.buffer;\\n\\n    case arrayBufferTag:\\n      if ((object.byteLength != other.byteLength) ||\\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\\n        return false;\\n      }\\n      return true;\\n\\n    case boolTag:\\n    case dateTag:\\n    case numberTag:\\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\\n      // Invalid dates are coerced to `NaN`.\\n      return eq(+object, +other);\\n\\n    case errorTag:\\n      return object.name == other.name && object.message == other.message;\\n\\n    case regexpTag:\\n    case stringTag:\\n      // Coerce regexes to strings and treat strings, primitives and objects,\\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\\n      // for more details.\\n      return object == (other + '');\\n\\n    case mapTag:\\n      var convert = mapToArray;\\n\\n    case setTag:\\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n      convert || (convert = setToArray);\\n\\n      if (object.size != other.size && !isPartial) {\\n        return false;\\n      }\\n      // Assume cyclic values are equal.\\n      var stacked = stack.get(object);\\n      if (stacked) {\\n        return stacked == other;\\n      }\\n      bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n      // Recursively compare objects (susceptible to call stack limits).\\n      stack.set(object, other);\\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\\n      stack['delete'](object);\\n      return result;\\n\\n    case symbolTag:\\n      if (symbolValueOf) {\\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\\n      }\\n  }\\n  return false;\\n}\\n\\nmodule.exports = equalByTag;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_equalByTag.js\\n// module id = 294\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_equalByTag.js?\")},function(module,exports,__webpack_require__){eval(\"var getAllKeys = __webpack_require__(296);\\n\\n/** Used to compose bitmasks for value comparisons. */\\nvar COMPARE_PARTIAL_FLAG = 1;\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for objects with support for\\n * partial deep comparisons.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Object} stack Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\\n      objProps = getAllKeys(object),\\n      objLength = objProps.length,\\n      othProps = getAllKeys(other),\\n      othLength = othProps.length;\\n\\n  if (objLength != othLength && !isPartial) {\\n    return false;\\n  }\\n  var index = objLength;\\n  while (index--) {\\n    var key = objProps[index];\\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n      return false;\\n    }\\n  }\\n  // Assume cyclic values are equal.\\n  var stacked = stack.get(object);\\n  if (stacked && stack.get(other)) {\\n    return stacked == other;\\n  }\\n  var result = true;\\n  stack.set(object, other);\\n  stack.set(other, object);\\n\\n  var skipCtor = isPartial;\\n  while (++index < objLength) {\\n    key = objProps[index];\\n    var objValue = object[key],\\n        othValue = other[key];\\n\\n    if (customizer) {\\n      var compared = isPartial\\n        ? customizer(othValue, objValue, key, other, object, stack)\\n        : customizer(objValue, othValue, key, object, other, stack);\\n    }\\n    // Recursively compare objects (susceptible to call stack limits).\\n    if (!(compared === undefined\\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\\n          : compared\\n        )) {\\n      result = false;\\n      break;\\n    }\\n    skipCtor || (skipCtor = key == 'constructor');\\n  }\\n  if (result && !skipCtor) {\\n    var objCtor = object.constructor,\\n        othCtor = other.constructor;\\n\\n    // Non `Object` object instances with different constructors are not equal.\\n    if (objCtor != othCtor &&\\n        ('constructor' in object && 'constructor' in other) &&\\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\\n      result = false;\\n    }\\n  }\\n  stack['delete'](object);\\n  stack['delete'](other);\\n  return result;\\n}\\n\\nmodule.exports = equalObjects;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_equalObjects.js\\n// module id = 295\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_equalObjects.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGetAllKeys = __webpack_require__(269),\\n    getSymbols = __webpack_require__(299),\\n    keys = __webpack_require__(103);\\n\\n/**\\n * Creates an array of own enumerable property names and symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeys(object) {\\n  return baseGetAllKeys(object, keys, getSymbols);\\n}\\n\\nmodule.exports = getAllKeys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getAllKeys.js\\n// module id = 296\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getAllKeys.js?\")},function(module,exports,__webpack_require__){eval(\"var isStrictComparable = __webpack_require__(149),\\n    keys = __webpack_require__(103);\\n\\n/**\\n * Gets the property names, values, and compare flags of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the match data of `object`.\\n */\\nfunction getMatchData(object) {\\n  var result = keys(object),\\n      length = result.length;\\n\\n  while (length--) {\\n    var key = result[length],\\n        value = object[key];\\n\\n    result[length] = [key, value, isStrictComparable(value)];\\n  }\\n  return result;\\n}\\n\\nmodule.exports = getMatchData;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getMatchData.js\\n// module id = 297\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getMatchData.js?\")},function(module,exports,__webpack_require__){eval(\"var Symbol = __webpack_require__(51);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\\n\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\nfunction getRawTag(value) {\\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\\n      tag = value[symToStringTag];\\n\\n  try {\\n    value[symToStringTag] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString.call(value);\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag] = tag;\\n    } else {\\n      delete value[symToStringTag];\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = getRawTag;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getRawTag.js\\n// module id = 298\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getRawTag.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayFilter = __webpack_require__(262),\\n    stubArray = __webpack_require__(351);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\\n  if (object == null) {\\n    return [];\\n  }\\n  object = Object(object);\\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\\n    return propertyIsEnumerable.call(object, symbol);\\n  });\\n};\\n\\nmodule.exports = getSymbols;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getSymbols.js\\n// module id = 299\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getSymbols.js?\")},function(module,exports,__webpack_require__){eval(\"var DataView = __webpack_require__(255),\\n    Map = __webpack_require__(94),\\n    Promise = __webpack_require__(257),\\n    Set = __webpack_require__(133),\\n    WeakMap = __webpack_require__(259),\\n    baseGetTag = __webpack_require__(52),\\n    toSource = __webpack_require__(151);\\n\\n/** `Object#toString` result references. */\\nvar mapTag = '[object Map]',\\n    objectTag = '[object Object]',\\n    promiseTag = '[object Promise]',\\n    setTag = '[object Set]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar dataViewTag = '[object DataView]';\\n\\n/** Used to detect maps, sets, and weakmaps. */\\nvar dataViewCtorString = toSource(DataView),\\n    mapCtorString = toSource(Map),\\n    promiseCtorString = toSource(Promise),\\n    setCtorString = toSource(Set),\\n    weakMapCtorString = toSource(WeakMap);\\n\\n/**\\n * Gets the `toStringTag` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nvar getTag = baseGetTag;\\n\\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\\n    (Map && getTag(new Map) != mapTag) ||\\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\\n    (Set && getTag(new Set) != setTag) ||\\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\\n  getTag = function(value) {\\n    var result = baseGetTag(value),\\n        Ctor = result == objectTag ? value.constructor : undefined,\\n        ctorString = Ctor ? toSource(Ctor) : '';\\n\\n    if (ctorString) {\\n      switch (ctorString) {\\n        case dataViewCtorString: return dataViewTag;\\n        case mapCtorString: return mapTag;\\n        case promiseCtorString: return promiseTag;\\n        case setCtorString: return setTag;\\n        case weakMapCtorString: return weakMapTag;\\n      }\\n    }\\n    return result;\\n  };\\n}\\n\\nmodule.exports = getTag;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getTag.js\\n// module id = 300\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getTag.js?\")},function(module,exports){eval(\"/**\\n * Gets the value at `key` of `object`.\\n *\\n * @private\\n * @param {Object} [object] The object to query.\\n * @param {string} key The key of the property to get.\\n * @returns {*} Returns the property value.\\n */\\nfunction getValue(object, key) {\\n  return object == null ? undefined : object[key];\\n}\\n\\nmodule.exports = getValue;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_getValue.js\\n// module id = 301\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_getValue.js?\")},function(module,exports,__webpack_require__){eval(\"var castPath = __webpack_require__(145),\\n    isArguments = __webpack_require__(101),\\n    isArray = __webpack_require__(19),\\n    isIndex = __webpack_require__(148),\\n    isLength = __webpack_require__(102),\\n    toKey = __webpack_require__(70);\\n\\n/**\\n * Checks if `path` exists on `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path to check.\\n * @param {Function} hasFunc The function to check properties.\\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\\n */\\nfunction hasPath(object, path, hasFunc) {\\n  path = castPath(path, object);\\n\\n  var index = -1,\\n      length = path.length,\\n      result = false;\\n\\n  while (++index < length) {\\n    var key = toKey(path[index]);\\n    if (!(result = object != null && hasFunc(object, key))) {\\n      break;\\n    }\\n    object = object[key];\\n  }\\n  if (result || ++index != length) {\\n    return result;\\n  }\\n  length = object == null ? 0 : object.length;\\n  return !!length && isLength(length) && isIndex(key, length) &&\\n    (isArray(object) || isArguments(object));\\n}\\n\\nmodule.exports = hasPath;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hasPath.js\\n// module id = 302\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hasPath.js?\")},function(module,exports,__webpack_require__){eval(\"var nativeCreate = __webpack_require__(69);\\n\\n/**\\n * Removes all key-value entries from the hash.\\n *\\n * @private\\n * @name clear\\n * @memberOf Hash\\n */\\nfunction hashClear() {\\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\\n  this.size = 0;\\n}\\n\\nmodule.exports = hashClear;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hashClear.js\\n// module id = 303\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hashClear.js?\")},function(module,exports){eval(\"/**\\n * Removes `key` and its value from the hash.\\n *\\n * @private\\n * @name delete\\n * @memberOf Hash\\n * @param {Object} hash The hash to modify.\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction hashDelete(key) {\\n  var result = this.has(key) && delete this.__data__[key];\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\nmodule.exports = hashDelete;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hashDelete.js\\n// module id = 304\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hashDelete.js?\")},function(module,exports,__webpack_require__){eval(\"var nativeCreate = __webpack_require__(69);\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Gets the hash value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Hash\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction hashGet(key) {\\n  var data = this.__data__;\\n  if (nativeCreate) {\\n    var result = data[key];\\n    return result === HASH_UNDEFINED ? undefined : result;\\n  }\\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\\n}\\n\\nmodule.exports = hashGet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hashGet.js\\n// module id = 305\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hashGet.js?\")},function(module,exports,__webpack_require__){eval(\"var nativeCreate = __webpack_require__(69);\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Checks if a hash value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Hash\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction hashHas(key) {\\n  var data = this.__data__;\\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\\n}\\n\\nmodule.exports = hashHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hashHas.js\\n// module id = 306\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hashHas.js?\")},function(module,exports,__webpack_require__){eval(\"var nativeCreate = __webpack_require__(69);\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Sets the hash `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Hash\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the hash instance.\\n */\\nfunction hashSet(key, value) {\\n  var data = this.__data__;\\n  this.size += this.has(key) ? 0 : 1;\\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\\n  return this;\\n}\\n\\nmodule.exports = hashSet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_hashSet.js\\n// module id = 307\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_hashSet.js?\")},function(module,exports,__webpack_require__){eval(\"var Symbol = __webpack_require__(51),\\n    isArguments = __webpack_require__(101),\\n    isArray = __webpack_require__(19);\\n\\n/** Built-in value references. */\\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\\n\\n/**\\n * Checks if `value` is a flattenable `arguments` object or array.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\\n */\\nfunction isFlattenable(value) {\\n  return isArray(value) || isArguments(value) ||\\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\\n}\\n\\nmodule.exports = isFlattenable;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isFlattenable.js\\n// module id = 308\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isFlattenable.js?\")},function(module,exports){eval(\"/**\\n * Checks if `value` is suitable for use as unique object key.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\\n */\\nfunction isKeyable(value) {\\n  var type = typeof value;\\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\\n    ? (value !== '__proto__')\\n    : (value === null);\\n}\\n\\nmodule.exports = isKeyable;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isKeyable.js\\n// module id = 309\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isKeyable.js?\")},function(module,exports,__webpack_require__){eval(\"var coreJsData = __webpack_require__(289);\\n\\n/** Used to detect methods masquerading as native. */\\nvar maskSrcKey = (function() {\\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\\n  return uid ? ('Symbol(src)_1.' + uid) : '';\\n}());\\n\\n/**\\n * Checks if `func` has its source masked.\\n *\\n * @private\\n * @param {Function} func The function to check.\\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\\n */\\nfunction isMasked(func) {\\n  return !!maskSrcKey && (maskSrcKey in func);\\n}\\n\\nmodule.exports = isMasked;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isMasked.js\\n// module id = 310\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isMasked.js?\")},function(module,exports){eval(\"/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Checks if `value` is likely a prototype object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\\n */\\nfunction isPrototype(value) {\\n  var Ctor = value && value.constructor,\\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\\n\\n  return value === proto;\\n}\\n\\nmodule.exports = isPrototype;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_isPrototype.js\\n// module id = 311\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_isPrototype.js?\")},function(module,exports){eval(\"/**\\n * Removes all key-value entries from the list cache.\\n *\\n * @private\\n * @name clear\\n * @memberOf ListCache\\n */\\nfunction listCacheClear() {\\n  this.__data__ = [];\\n  this.size = 0;\\n}\\n\\nmodule.exports = listCacheClear;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_listCacheClear.js\\n// module id = 312\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_listCacheClear.js?\")},function(module,exports,__webpack_require__){eval(\"var assocIndexOf = __webpack_require__(67);\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * Removes `key` and its value from the list cache.\\n *\\n * @private\\n * @name delete\\n * @memberOf ListCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction listCacheDelete(key) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    return false;\\n  }\\n  var lastIndex = data.length - 1;\\n  if (index == lastIndex) {\\n    data.pop();\\n  } else {\\n    splice.call(data, index, 1);\\n  }\\n  --this.size;\\n  return true;\\n}\\n\\nmodule.exports = listCacheDelete;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_listCacheDelete.js\\n// module id = 313\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_listCacheDelete.js?\");\n},function(module,exports,__webpack_require__){eval(\"var assocIndexOf = __webpack_require__(67);\\n\\n/**\\n * Gets the list cache value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf ListCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction listCacheGet(key) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  return index < 0 ? undefined : data[index][1];\\n}\\n\\nmodule.exports = listCacheGet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_listCacheGet.js\\n// module id = 314\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_listCacheGet.js?\")},function(module,exports,__webpack_require__){eval(\"var assocIndexOf = __webpack_require__(67);\\n\\n/**\\n * Checks if a list cache value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf ListCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction listCacheHas(key) {\\n  return assocIndexOf(this.__data__, key) > -1;\\n}\\n\\nmodule.exports = listCacheHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_listCacheHas.js\\n// module id = 315\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_listCacheHas.js?\")},function(module,exports,__webpack_require__){eval(\"var assocIndexOf = __webpack_require__(67);\\n\\n/**\\n * Sets the list cache `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf ListCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the list cache instance.\\n */\\nfunction listCacheSet(key, value) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    ++this.size;\\n    data.push([key, value]);\\n  } else {\\n    data[index][1] = value;\\n  }\\n  return this;\\n}\\n\\nmodule.exports = listCacheSet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_listCacheSet.js\\n// module id = 316\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_listCacheSet.js?\")},function(module,exports,__webpack_require__){eval(\"var Hash = __webpack_require__(256),\\n    ListCache = __webpack_require__(66),\\n    Map = __webpack_require__(94);\\n\\n/**\\n * Removes all key-value entries from the map.\\n *\\n * @private\\n * @name clear\\n * @memberOf MapCache\\n */\\nfunction mapCacheClear() {\\n  this.size = 0;\\n  this.__data__ = {\\n    'hash': new Hash,\\n    'map': new (Map || ListCache),\\n    'string': new Hash\\n  };\\n}\\n\\nmodule.exports = mapCacheClear;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapCacheClear.js\\n// module id = 317\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapCacheClear.js?\")},function(module,exports,__webpack_require__){eval(\"var getMapData = __webpack_require__(68);\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  var result = getMapData(this, key)['delete'](key);\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\nmodule.exports = mapCacheDelete;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapCacheDelete.js\\n// module id = 318\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapCacheDelete.js?\")},function(module,exports,__webpack_require__){eval(\"var getMapData = __webpack_require__(68);\\n\\n/**\\n * Gets the map value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf MapCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction mapCacheGet(key) {\\n  return getMapData(this, key).get(key);\\n}\\n\\nmodule.exports = mapCacheGet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapCacheGet.js\\n// module id = 319\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapCacheGet.js?\")},function(module,exports,__webpack_require__){eval(\"var getMapData = __webpack_require__(68);\\n\\n/**\\n * Checks if a map value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf MapCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction mapCacheHas(key) {\\n  return getMapData(this, key).has(key);\\n}\\n\\nmodule.exports = mapCacheHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapCacheHas.js\\n// module id = 320\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapCacheHas.js?\")},function(module,exports,__webpack_require__){eval(\"var getMapData = __webpack_require__(68);\\n\\n/**\\n * Sets the map `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf MapCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the map cache instance.\\n */\\nfunction mapCacheSet(key, value) {\\n  var data = getMapData(this, key),\\n      size = data.size;\\n\\n  data.set(key, value);\\n  this.size += data.size == size ? 0 : 1;\\n  return this;\\n}\\n\\nmodule.exports = mapCacheSet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapCacheSet.js\\n// module id = 321\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapCacheSet.js?\")},function(module,exports){eval(\"/**\\n * Converts `map` to its key-value pairs.\\n *\\n * @private\\n * @param {Object} map The map to convert.\\n * @returns {Array} Returns the key-value pairs.\\n */\\nfunction mapToArray(map) {\\n  var index = -1,\\n      result = Array(map.size);\\n\\n  map.forEach(function(value, key) {\\n    result[++index] = [key, value];\\n  });\\n  return result;\\n}\\n\\nmodule.exports = mapToArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_mapToArray.js\\n// module id = 322\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_mapToArray.js?\")},function(module,exports,__webpack_require__){eval(\"var memoize = __webpack_require__(348);\\n\\n/** Used as the maximum memoize cache size. */\\nvar MAX_MEMOIZE_SIZE = 500;\\n\\n/**\\n * A specialized version of `_.memoize` which clears the memoized function's\\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\\n *\\n * @private\\n * @param {Function} func The function to have its output memoized.\\n * @returns {Function} Returns the new memoized function.\\n */\\nfunction memoizeCapped(func) {\\n  var result = memoize(func, function(key) {\\n    if (cache.size === MAX_MEMOIZE_SIZE) {\\n      cache.clear();\\n    }\\n    return key;\\n  });\\n\\n  var cache = result.cache;\\n  return result;\\n}\\n\\nmodule.exports = memoizeCapped;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_memoizeCapped.js\\n// module id = 323\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_memoizeCapped.js?\")},function(module,exports,__webpack_require__){eval(\"var overArg = __webpack_require__(327);\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeKeys = overArg(Object.keys, Object);\\n\\nmodule.exports = nativeKeys;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_nativeKeys.js\\n// module id = 324\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_nativeKeys.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(147);\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = freeModule && freeModule.exports === freeExports;\\n\\n/** Detect free variable `process` from Node.js. */\\nvar freeProcess = moduleExports && freeGlobal.process;\\n\\n/** Used to access faster Node.js helpers. */\\nvar nodeUtil = (function() {\\n  try {\\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\\n  } catch (e) {}\\n}());\\n\\nmodule.exports = nodeUtil;\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106)(module)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_nodeUtil.js\\n// module id = 325\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_nodeUtil.js?\")},function(module,exports){eval(\"/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\nfunction objectToString(value) {\\n  return nativeObjectToString.call(value);\\n}\\n\\nmodule.exports = objectToString;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_objectToString.js\\n// module id = 326\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_objectToString.js?\")},function(module,exports){eval(\"/**\\n * Creates a unary function that invokes `func` with its argument transformed.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {Function} transform The argument transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overArg(func, transform) {\\n  return function(arg) {\\n    return func(transform(arg));\\n  };\\n}\\n\\nmodule.exports = overArg;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_overArg.js\\n// module id = 327\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_overArg.js?\")},function(module,exports,__webpack_require__){eval(\"var apply = __webpack_require__(260);\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * A specialized version of `baseRest` which transforms the rest array.\\n *\\n * @private\\n * @param {Function} func The function to apply a rest parameter to.\\n * @param {number} [start=func.length-1] The start position of the rest parameter.\\n * @param {Function} transform The rest array transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overRest(func, start, transform) {\\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\\n  return function() {\\n    var args = arguments,\\n        index = -1,\\n        length = nativeMax(args.length - start, 0),\\n        array = Array(length);\\n\\n    while (++index < length) {\\n      array[index] = args[start + index];\\n    }\\n    index = -1;\\n    var otherArgs = Array(start + 1);\\n    while (++index < start) {\\n      otherArgs[index] = args[index];\\n    }\\n    otherArgs[start] = transform(array);\\n    return apply(func, this, otherArgs);\\n  };\\n}\\n\\nmodule.exports = overRest;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_overRest.js\\n// module id = 328\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_overRest.js?\")},function(module,exports){eval(\"/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Adds `value` to the array cache.\\n *\\n * @private\\n * @name add\\n * @memberOf SetCache\\n * @alias push\\n * @param {*} value The value to cache.\\n * @returns {Object} Returns the cache instance.\\n */\\nfunction setCacheAdd(value) {\\n  this.__data__.set(value, HASH_UNDEFINED);\\n  return this;\\n}\\n\\nmodule.exports = setCacheAdd;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_setCacheAdd.js\\n// module id = 329\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_setCacheAdd.js?\")},function(module,exports){eval(\"/**\\n * Checks if `value` is in the array cache.\\n *\\n * @private\\n * @name has\\n * @memberOf SetCache\\n * @param {*} value The value to search for.\\n * @returns {number} Returns `true` if `value` is found, else `false`.\\n */\\nfunction setCacheHas(value) {\\n  return this.__data__.has(value);\\n}\\n\\nmodule.exports = setCacheHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_setCacheHas.js\\n// module id = 330\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_setCacheHas.js?\")},function(module,exports,__webpack_require__){eval(\"var baseSetToString = __webpack_require__(284),\\n    shortOut = __webpack_require__(332);\\n\\n/**\\n * Sets the `toString` method of `func` to return `string`.\\n *\\n * @private\\n * @param {Function} func The function to modify.\\n * @param {Function} string The `toString` result.\\n * @returns {Function} Returns `func`.\\n */\\nvar setToString = shortOut(baseSetToString);\\n\\nmodule.exports = setToString;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_setToString.js\\n// module id = 331\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_setToString.js?\")},function(module,exports){eval(\"/** Used to detect hot functions by number of calls within a span of milliseconds. */\\nvar HOT_COUNT = 800,\\n    HOT_SPAN = 16;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeNow = Date.now;\\n\\n/**\\n * Creates a function that'll short out and invoke `identity` instead\\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\\n * milliseconds.\\n *\\n * @private\\n * @param {Function} func The function to restrict.\\n * @returns {Function} Returns the new shortable function.\\n */\\nfunction shortOut(func) {\\n  var count = 0,\\n      lastCalled = 0;\\n\\n  return function() {\\n    var stamp = nativeNow(),\\n        remaining = HOT_SPAN - (stamp - lastCalled);\\n\\n    lastCalled = stamp;\\n    if (remaining > 0) {\\n      if (++count >= HOT_COUNT) {\\n        return arguments[0];\\n      }\\n    } else {\\n      count = 0;\\n    }\\n    return func.apply(undefined, arguments);\\n  };\\n}\\n\\nmodule.exports = shortOut;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_shortOut.js\\n// module id = 332\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_shortOut.js?\")},function(module,exports,__webpack_require__){eval(\"var ListCache = __webpack_require__(66);\\n\\n/**\\n * Removes all key-value entries from the stack.\\n *\\n * @private\\n * @name clear\\n * @memberOf Stack\\n */\\nfunction stackClear() {\\n  this.__data__ = new ListCache;\\n  this.size = 0;\\n}\\n\\nmodule.exports = stackClear;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stackClear.js\\n// module id = 333\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stackClear.js?\")},function(module,exports){eval(\"/**\\n * Removes `key` and its value from the stack.\\n *\\n * @private\\n * @name delete\\n * @memberOf Stack\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction stackDelete(key) {\\n  var data = this.__data__,\\n      result = data['delete'](key);\\n\\n  this.size = data.size;\\n  return result;\\n}\\n\\nmodule.exports = stackDelete;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stackDelete.js\\n// module id = 334\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stackDelete.js?\")},function(module,exports){eval(\"/**\\n * Gets the stack value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Stack\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction stackGet(key) {\\n  return this.__data__.get(key);\\n}\\n\\nmodule.exports = stackGet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stackGet.js\\n// module id = 335\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stackGet.js?\")},function(module,exports){eval(\"/**\\n * Checks if a stack value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Stack\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction stackHas(key) {\\n  return this.__data__.has(key);\\n}\\n\\nmodule.exports = stackHas;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stackHas.js\\n// module id = 336\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stackHas.js?\")},function(module,exports,__webpack_require__){eval(\"var ListCache = __webpack_require__(66),\\n    Map = __webpack_require__(94),\\n    MapCache = __webpack_require__(95);\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * Sets the stack `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Stack\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the stack cache instance.\\n */\\nfunction stackSet(key, value) {\\n  var data = this.__data__;\\n  if (data instanceof ListCache) {\\n    var pairs = data.__data__;\\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\\n      pairs.push([key, value]);\\n      this.size = ++data.size;\\n      return this;\\n    }\\n    data = this.__data__ = new MapCache(pairs);\\n  }\\n  data.set(key, value);\\n  this.size = data.size;\\n  return this;\\n}\\n\\nmodule.exports = stackSet;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stackSet.js\\n// module id = 337\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stackSet.js?\")},function(module,exports){eval(\"/**\\n * A specialized version of `_.indexOf` which performs strict equality\\n * comparisons of values, i.e. `===`.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} value The value to search for.\\n * @param {number} fromIndex The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction strictIndexOf(array, value, fromIndex) {\\n  var index = fromIndex - 1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (array[index] === value) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nmodule.exports = strictIndexOf;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_strictIndexOf.js\\n// module id = 338\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_strictIndexOf.js?\")},function(module,exports,__webpack_require__){eval(\"var memoizeCapped = __webpack_require__(323);\\n\\n/** Used to match property names within property paths. */\\nvar reLeadingDot = /^\\\\./,\\n    rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = memoizeCapped(function(string) {\\n  var result = [];\\n  if (reLeadingDot.test(string)) {\\n    result.push('');\\n  }\\n  string.replace(rePropName, function(match, number, quote, string) {\\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\nmodule.exports = stringToPath;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/_stringToPath.js\\n// module id = 339\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/_stringToPath.js?\")},function(module,exports){eval(\"/**\\n * Creates a function that returns `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Util\\n * @param {*} value The value to return from the new function.\\n * @returns {Function} Returns the new constant function.\\n * @example\\n *\\n * var objects = _.times(2, _.constant({ 'a': 1 }));\\n *\\n * console.log(objects);\\n * // => [{ 'a': 1 }, { 'a': 1 }]\\n *\\n * console.log(objects[0] === objects[1]);\\n * // => true\\n */\\nfunction constant(value) {\\n  return function() {\\n    return value;\\n  };\\n}\\n\\nmodule.exports = constant;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/constant.js\\n// module id = 340\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/constant.js?\")},function(module,exports,__webpack_require__){eval(\"var baseDifference = __webpack_require__(265),\\n    baseFlatten = __webpack_require__(139),\\n    baseRest = __webpack_require__(143),\\n    isArrayLikeObject = __webpack_require__(153);\\n\\n/**\\n * Creates an array of `array` values not included in the other given arrays\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons. The order and references of result values are\\n * determined by the first array.\\n *\\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {...Array} [values] The values to exclude.\\n * @returns {Array} Returns the new array of filtered values.\\n * @see _.without, _.xor\\n * @example\\n *\\n * _.difference([2, 1], [2, 3]);\\n * // => [1]\\n */\\nvar difference = baseRest(function(array, values) {\\n  return isArrayLikeObject(array)\\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\\n    : [];\\n});\\n\\nmodule.exports = difference;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/difference.js\\n// module id = 341\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/difference.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayEach = __webpack_require__(261),\\n    baseEach = __webpack_require__(138),\\n    castFunction = __webpack_require__(288),\\n    isArray = __webpack_require__(19);\\n\\n/**\\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\\n * The iteratee is invoked with three arguments: (value, index|key, collection).\\n * Iteratee functions may exit iteration early by explicitly returning `false`.\\n *\\n * **Note:** As with other \\\"Collections\\\" methods, objects with a \\\"length\\\"\\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\\n * or `_.forOwn` for object iteration.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @alias each\\n * @category Collection\\n * @param {Array|Object} collection The collection to iterate over.\\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\\n * @returns {Array|Object} Returns `collection`.\\n * @see _.forEachRight\\n * @example\\n *\\n * _.forEach([1, 2], function(value) {\\n *   console.log(value);\\n * });\\n * // => Logs `1` then `2`.\\n *\\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\\n *   console.log(key);\\n * });\\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\\n */\\nfunction forEach(collection, iteratee) {\\n  var func = isArray(collection) ? arrayEach : baseEach;\\n  return func(collection, castFunction(iteratee));\\n}\\n\\nmodule.exports = forEach;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/forEach.js\\n// module id = 342\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/forEach.js?\")},function(module,exports,__webpack_require__){eval(\"var baseGet = __webpack_require__(140);\\n\\n/**\\n * Gets the value at `path` of `object`. If the resolved value is\\n * `undefined`, the `defaultValue` is returned in its place.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.7.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path of the property to get.\\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n * @returns {*} Returns the resolved value.\\n * @example\\n *\\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n *\\n * _.get(object, 'a[0].b.c');\\n * // => 3\\n *\\n * _.get(object, ['a', '0', 'b', 'c']);\\n * // => 3\\n *\\n * _.get(object, 'a.b.c', 'default');\\n * // => 'default'\\n */\\nfunction get(object, path, defaultValue) {\\n  var result = object == null ? undefined : baseGet(object, path);\\n  return result === undefined ? defaultValue : result;\\n}\\n\\nmodule.exports = get;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/get.js\\n// module id = 343\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/get.js?\")},function(module,exports,__webpack_require__){eval(\"var baseHasIn = __webpack_require__(270),\\n    hasPath = __webpack_require__(302);\\n\\n/**\\n * Checks if `path` is a direct or inherited property of `object`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path to check.\\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\\n * @example\\n *\\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\\n *\\n * _.hasIn(object, 'a');\\n * // => true\\n *\\n * _.hasIn(object, 'a.b');\\n * // => true\\n *\\n * _.hasIn(object, ['a', 'b']);\\n * // => true\\n *\\n * _.hasIn(object, 'b');\\n * // => false\\n */\\nfunction hasIn(object, path) {\\n  return object != null && hasPath(object, path, baseHasIn);\\n}\\n\\nmodule.exports = hasIn;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/hasIn.js\\n// module id = 344\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/hasIn.js?\")},function(module,exports,__webpack_require__){eval(\"var baseIndexOf = __webpack_require__(141),\\n    toInteger = __webpack_require__(354);\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * Gets the index at which the first occurrence of `value` is found in `array`\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons. If `fromIndex` is negative, it's used as the\\n * offset from the end of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {*} value The value to search for.\\n * @param {number} [fromIndex=0] The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n * @example\\n *\\n * _.indexOf([1, 2, 1, 2], 2);\\n * // => 1\\n *\\n * // Search from the `fromIndex`.\\n * _.indexOf([1, 2, 1, 2], 2, 2);\\n * // => 3\\n */\\nfunction indexOf(array, value, fromIndex) {\\n  var length = array == null ? 0 : array.length;\\n  if (!length) {\\n    return -1;\\n  }\\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\\n  if (index < 0) {\\n    index = nativeMax(length + index, 0);\\n  }\\n  return baseIndexOf(array, value, index);\\n}\\n\\nmodule.exports = indexOf;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/indexOf.js\\n// module id = 345\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/indexOf.js?\")},function(module,exports){eval(\"/**\\n * Gets the last element of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @returns {*} Returns the last element of `array`.\\n * @example\\n *\\n * _.last([1, 2, 3]);\\n * // => 3\\n */\\nfunction last(array) {\\n  var length = array == null ? 0 : array.length;\\n  return length ? array[length - 1] : undefined;\\n}\\n\\nmodule.exports = last;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/last.js\\n// module id = 346\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/last.js?\")},function(module,exports,__webpack_require__){eval(\"var arrayMap = __webpack_require__(97),\\n    baseIteratee = __webpack_require__(277),\\n    baseMap = __webpack_require__(279),\\n    isArray = __webpack_require__(19);\\n\\n/**\\n * Creates an array of values by running each element in `collection` thru\\n * `iteratee`. The iteratee is invoked with three arguments:\\n * (value, index|key, collection).\\n *\\n * Many lodash methods are guarded to work as iteratees for methods like\\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\\n *\\n * The guarded methods are:\\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Collection\\n * @param {Array|Object} collection The collection to iterate over.\\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n * @example\\n *\\n * function square(n) {\\n *   return n * n;\\n * }\\n *\\n * _.map([4, 8], square);\\n * // => [16, 64]\\n *\\n * _.map({ 'a': 4, 'b': 8 }, square);\\n * // => [16, 64] (iteration order is not guaranteed)\\n *\\n * var users = [\\n *   { 'user': 'barney' },\\n *   { 'user': 'fred' }\\n * ];\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.map(users, 'user');\\n * // => ['barney', 'fred']\\n */\\nfunction map(collection, iteratee) {\\n  var func = isArray(collection) ? arrayMap : baseMap;\\n  return func(collection, baseIteratee(iteratee, 3));\\n}\\n\\nmodule.exports = map;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/map.js\\n// module id = 347\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/map.js?\")},function(module,exports,__webpack_require__){eval(\"var MapCache = __webpack_require__(95);\\n\\n/** Error message constants. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/**\\n * Creates a function that memoizes the result of `func`. If `resolver` is\\n * provided, it determines the cache key for storing the result based on the\\n * arguments provided to the memoized function. By default, the first argument\\n * provided to the memoized function is used as the map cache key. The `func`\\n * is invoked with the `this` binding of the memoized function.\\n *\\n * **Note:** The cache is exposed as the `cache` property on the memoized\\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\\n * constructor with one whose instances implement the\\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to have its output memoized.\\n * @param {Function} [resolver] The function to resolve the cache key.\\n * @returns {Function} Returns the new memoized function.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': 2 };\\n * var other = { 'c': 3, 'd': 4 };\\n *\\n * var values = _.memoize(_.values);\\n * values(object);\\n * // => [1, 2]\\n *\\n * values(other);\\n * // => [3, 4]\\n *\\n * object.a = 2;\\n * values(object);\\n * // => [1, 2]\\n *\\n * // Modify the result cache.\\n * values.cache.set(object, ['a', 'b']);\\n * values(object);\\n * // => ['a', 'b']\\n *\\n * // Replace `_.memoize.Cache`.\\n * _.memoize.Cache = WeakMap;\\n */\\nfunction memoize(func, resolver) {\\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  var memoized = function() {\\n    var args = arguments,\\n        key = resolver ? resolver.apply(this, args) : args[0],\\n        cache = memoized.cache;\\n\\n    if (cache.has(key)) {\\n      return cache.get(key);\\n    }\\n    var result = func.apply(this, args);\\n    memoized.cache = cache.set(key, result) || cache;\\n    return result;\\n  };\\n  memoized.cache = new (memoize.Cache || MapCache);\\n  return memoized;\\n}\\n\\n// Expose `MapCache`.\\nmemoize.Cache = MapCache;\\n\\nmodule.exports = memoize;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/memoize.js\\n// module id = 348\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/memoize.js?\")},function(module,exports){eval(\"/**\\n * This method returns `undefined`.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.3.0\\n * @category Util\\n * @example\\n *\\n * _.times(2, _.noop);\\n * // => [undefined, undefined]\\n */\\nfunction noop() {\\n  // No operation performed.\\n}\\n\\nmodule.exports = noop;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/noop.js\\n// module id = 349\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/noop.js?\");\n},function(module,exports,__webpack_require__){eval(\"var baseProperty = __webpack_require__(282),\\n    basePropertyDeep = __webpack_require__(283),\\n    isKey = __webpack_require__(99),\\n    toKey = __webpack_require__(70);\\n\\n/**\\n * Creates a function that returns the value at `path` of a given object.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Util\\n * @param {Array|string} path The path of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n * @example\\n *\\n * var objects = [\\n *   { 'a': { 'b': 2 } },\\n *   { 'a': { 'b': 1 } }\\n * ];\\n *\\n * _.map(objects, _.property('a.b'));\\n * // => [2, 1]\\n *\\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\\n * // => [1, 2]\\n */\\nfunction property(path) {\\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n}\\n\\nmodule.exports = property;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/property.js\\n// module id = 350\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/property.js?\")},function(module,exports){eval(\"/**\\n * This method returns a new empty array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {Array} Returns the new empty array.\\n * @example\\n *\\n * var arrays = _.times(2, _.stubArray);\\n *\\n * console.log(arrays);\\n * // => [[], []]\\n *\\n * console.log(arrays[0] === arrays[1]);\\n * // => false\\n */\\nfunction stubArray() {\\n  return [];\\n}\\n\\nmodule.exports = stubArray;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/stubArray.js\\n// module id = 351\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/stubArray.js?\")},function(module,exports){eval(\"/**\\n * This method returns `false`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {boolean} Returns `false`.\\n * @example\\n *\\n * _.times(2, _.stubFalse);\\n * // => [false, false]\\n */\\nfunction stubFalse() {\\n  return false;\\n}\\n\\nmodule.exports = stubFalse;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/stubFalse.js\\n// module id = 352\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/stubFalse.js?\")},function(module,exports,__webpack_require__){eval(\"var toNumber = __webpack_require__(355);\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0,\\n    MAX_INTEGER = 1.7976931348623157e+308;\\n\\n/**\\n * Converts `value` to a finite number.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.12.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted number.\\n * @example\\n *\\n * _.toFinite(3.2);\\n * // => 3.2\\n *\\n * _.toFinite(Number.MIN_VALUE);\\n * // => 5e-324\\n *\\n * _.toFinite(Infinity);\\n * // => 1.7976931348623157e+308\\n *\\n * _.toFinite('3.2');\\n * // => 3.2\\n */\\nfunction toFinite(value) {\\n  if (!value) {\\n    return value === 0 ? value : 0;\\n  }\\n  value = toNumber(value);\\n  if (value === INFINITY || value === -INFINITY) {\\n    var sign = (value < 0 ? -1 : 1);\\n    return sign * MAX_INTEGER;\\n  }\\n  return value === value ? value : 0;\\n}\\n\\nmodule.exports = toFinite;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/toFinite.js\\n// module id = 353\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/toFinite.js?\")},function(module,exports,__webpack_require__){eval(\"var toFinite = __webpack_require__(353);\\n\\n/**\\n * Converts `value` to an integer.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted integer.\\n * @example\\n *\\n * _.toInteger(3.2);\\n * // => 3\\n *\\n * _.toInteger(Number.MIN_VALUE);\\n * // => 0\\n *\\n * _.toInteger(Infinity);\\n * // => 1.7976931348623157e+308\\n *\\n * _.toInteger('3.2');\\n * // => 3\\n */\\nfunction toInteger(value) {\\n  var result = toFinite(value),\\n      remainder = result % 1;\\n\\n  return result === result ? (remainder ? result - remainder : result) : 0;\\n}\\n\\nmodule.exports = toInteger;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/toInteger.js\\n// module id = 354\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/toInteger.js?\")},function(module,exports,__webpack_require__){eval(\"var isObject = __webpack_require__(73),\\n    isSymbol = __webpack_require__(74);\\n\\n/** Used as references for various `Number` constants. */\\nvar NAN = 0 / 0;\\n\\n/** Used to match leading and trailing whitespace. */\\nvar reTrim = /^\\\\s+|\\\\s+$/g;\\n\\n/** Used to detect bad signed hexadecimal string values. */\\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\\n\\n/** Used to detect binary string values. */\\nvar reIsBinary = /^0b[01]+$/i;\\n\\n/** Used to detect octal string values. */\\nvar reIsOctal = /^0o[0-7]+$/i;\\n\\n/** Built-in method references without a dependency on `root`. */\\nvar freeParseInt = parseInt;\\n\\n/**\\n * Converts `value` to a number.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to process.\\n * @returns {number} Returns the number.\\n * @example\\n *\\n * _.toNumber(3.2);\\n * // => 3.2\\n *\\n * _.toNumber(Number.MIN_VALUE);\\n * // => 5e-324\\n *\\n * _.toNumber(Infinity);\\n * // => Infinity\\n *\\n * _.toNumber('3.2');\\n * // => 3.2\\n */\\nfunction toNumber(value) {\\n  if (typeof value == 'number') {\\n    return value;\\n  }\\n  if (isSymbol(value)) {\\n    return NAN;\\n  }\\n  if (isObject(value)) {\\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\\n    value = isObject(other) ? (other + '') : other;\\n  }\\n  if (typeof value != 'string') {\\n    return value === 0 ? value : +value;\\n  }\\n  value = value.replace(reTrim, '');\\n  var isBinary = reIsBinary.test(value);\\n  return (isBinary || reIsOctal.test(value))\\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\\n    : (reIsBadHex.test(value) ? NAN : +value);\\n}\\n\\nmodule.exports = toNumber;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/toNumber.js\\n// module id = 355\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/toNumber.js?\")},function(module,exports,__webpack_require__){eval(\"var baseToString = __webpack_require__(286);\\n\\n/**\\n * Converts `value` to a string. An empty string is returned for `null`\\n * and `undefined` values. The sign of `-0` is preserved.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n * @example\\n *\\n * _.toString(null);\\n * // => ''\\n *\\n * _.toString(-0);\\n * // => '-0'\\n *\\n * _.toString([1, 2, 3]);\\n * // => '1,2,3'\\n */\\nfunction toString(value) {\\n  return value == null ? '' : baseToString(value);\\n}\\n\\nmodule.exports = toString;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/toString.js\\n// module id = 356\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/toString.js?\")},function(module,exports,__webpack_require__){eval(\"var baseFlatten = __webpack_require__(139),\\n    baseRest = __webpack_require__(143),\\n    baseUniq = __webpack_require__(287),\\n    isArrayLikeObject = __webpack_require__(153);\\n\\n/**\\n * Creates an array of unique values, in order, from all given arrays using\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @returns {Array} Returns the new array of combined values.\\n * @example\\n *\\n * _.union([2], [1, 2]);\\n * // => [2, 1]\\n */\\nvar union = baseRest(function(arrays) {\\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\\n});\\n\\nmodule.exports = union;\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/lodash/union.js\\n// module id = 357\\n// module chunks = 0 1\\n//# sourceURL=webpack:///./~/lodash/union.js?\")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(jQuery, module) {\\n/*\\n *\\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\\n *\\n * Copyright (c) 2012, Matias Meno\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \"Software\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n * THE SOFTWARE.\\n *\\n */\\n\\n(function() {\\n  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,\\n    __slice = [].slice,\\n    __hasProp = {}.hasOwnProperty,\\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\\n\\n  noop = function() {};\\n\\n  Emitter = (function() {\\n    function Emitter() {}\\n\\n    Emitter.prototype.addEventListener = Emitter.prototype.on;\\n\\n    Emitter.prototype.on = function(event, fn) {\\n      this._callbacks = this._callbacks || {};\\n      if (!this._callbacks[event]) {\\n        this._callbacks[event] = [];\\n      }\\n      this._callbacks[event].push(fn);\\n      return this;\\n    };\\n\\n    Emitter.prototype.emit = function() {\\n      var args, callback, callbacks, event, _i, _len;\\n      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\\n      this._callbacks = this._callbacks || {};\\n      callbacks = this._callbacks[event];\\n      if (callbacks) {\\n        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\\n          callback = callbacks[_i];\\n          callback.apply(this, args);\\n        }\\n      }\\n      return this;\\n    };\\n\\n    Emitter.prototype.removeListener = Emitter.prototype.off;\\n\\n    Emitter.prototype.removeAllListeners = Emitter.prototype.off;\\n\\n    Emitter.prototype.removeEventListener = Emitter.prototype.off;\\n\\n    Emitter.prototype.off = function(event, fn) {\\n      var callback, callbacks, i, _i, _len;\\n      if (!this._callbacks || arguments.length === 0) {\\n        this._callbacks = {};\\n        return this;\\n      }\\n      callbacks = this._callbacks[event];\\n      if (!callbacks) {\\n        return this;\\n      }\\n      if (arguments.length === 1) {\\n        delete this._callbacks[event];\\n        return this;\\n      }\\n      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {\\n        callback = callbacks[i];\\n        if (callback === fn) {\\n          callbacks.splice(i, 1);\\n          break;\\n        }\\n      }\\n      return this;\\n    };\\n\\n    return Emitter;\\n\\n  })();\\n\\n  Dropzone = (function(_super) {\\n    var extend, resolveOption;\\n\\n    __extends(Dropzone, _super);\\n\\n    Dropzone.prototype.Emitter = Emitter;\\n\\n\\n    /*\\n    This is a list of all available events you can register on a dropzone object.\\n    \\n    You can register an event handler like this:\\n    \\n        dropzone.on(\"dragEnter\", function() { });\\n     */\\n\\n    Dropzone.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\\n\\n    Dropzone.prototype.defaultOptions = {\\n      url: null,\\n      method: \"post\",\\n      withCredentials: false,\\n      parallelUploads: 2,\\n      uploadMultiple: false,\\n      maxFilesize: 256,\\n      paramName: \"file\",\\n      createImageThumbnails: true,\\n      maxThumbnailFilesize: 10,\\n      thumbnailWidth: 120,\\n      thumbnailHeight: 120,\\n      filesizeBase: 1000,\\n      maxFiles: null,\\n      params: {},\\n      clickable: true,\\n      ignoreHiddenFiles: true,\\n      acceptedFiles: null,\\n      acceptedMimeTypes: null,\\n      autoProcessQueue: true,\\n      autoQueue: true,\\n      addRemoveLinks: false,\\n      previewsContainer: null,\\n      hiddenInputContainer: \"body\",\\n      capture: null,\\n      dictDefaultMessage: \"Drop files here to upload\",\\n      dictFallbackMessage: \"Your browser does not support drag\\'n\\'drop file uploads.\",\\n      dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\\n      dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\\n      dictInvalidFileType: \"You can\\'t upload files of this type.\",\\n      dictResponseError: \"Server responded with {{statusCode}} code.\",\\n      dictCancelUpload: \"Cancel upload\",\\n      dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\\n      dictRemoveFile: \"Remove file\",\\n      dictRemoveFileConfirmation: null,\\n      dictMaxFilesExceeded: \"You can not upload any more files.\",\\n      accept: function(file, done) {\\n        return done();\\n      },\\n      init: function() {\\n        return noop;\\n      },\\n      forceFallback: false,\\n      fallback: function() {\\n        var child, messageElement, span, _i, _len, _ref;\\n        this.element.className = \"\" + this.element.className + \" dz-browser-not-supported\";\\n        _ref = this.element.getElementsByTagName(\"div\");\\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n          child = _ref[_i];\\n          if (/(^| )dz-message($| )/.test(child.className)) {\\n            messageElement = child;\\n            child.className = \"dz-message\";\\n            continue;\\n          }\\n        }\\n        if (!messageElement) {\\n          messageElement = Dropzone.createElement(\"<div class=\\\\\"dz-message\\\\\"><span></span></div>\");\\n          this.element.appendChild(messageElement);\\n        }\\n        span = messageElement.getElementsByTagName(\"span\")[0];\\n        if (span) {\\n          if (span.textContent != null) {\\n            span.textContent = this.options.dictFallbackMessage;\\n          } else if (span.innerText != null) {\\n            span.innerText = this.options.dictFallbackMessage;\\n          }\\n        }\\n        return this.element.appendChild(this.getFallbackForm());\\n      },\\n      resize: function(file) {\\n        var info, srcRatio, trgRatio;\\n        info = {\\n          srcX: 0,\\n          srcY: 0,\\n          srcWidth: file.width,\\n          srcHeight: file.height\\n        };\\n        srcRatio = file.width / file.height;\\n        info.optWidth = this.options.thumbnailWidth;\\n        info.optHeight = this.options.thumbnailHeight;\\n        if ((info.optWidth == null) && (info.optHeight == null)) {\\n          info.optWidth = info.srcWidth;\\n          info.optHeight = info.srcHeight;\\n        } else if (info.optWidth == null) {\\n          info.optWidth = srcRatio * info.optHeight;\\n        } else if (info.optHeight == null) {\\n          info.optHeight = (1 / srcRatio) * info.optWidth;\\n        }\\n        trgRatio = info.optWidth / info.optHeight;\\n        if (file.height < info.optHeight || file.width < info.optWidth) {\\n          info.trgHeight = info.srcHeight;\\n          info.trgWidth = info.srcWidth;\\n        } else {\\n          if (srcRatio > trgRatio) {\\n            info.srcHeight = file.height;\\n            info.srcWidth = info.srcHeight * trgRatio;\\n          } else {\\n            info.srcWidth = file.width;\\n            info.srcHeight = info.srcWidth / trgRatio;\\n          }\\n        }\\n        info.srcX = (file.width - info.srcWidth) / 2;\\n        info.srcY = (file.height - info.srcHeight) / 2;\\n        return info;\\n      },\\n\\n      /*\\n      Those functions register themselves to the events on init and handle all\\n      the user interface specific stuff. Overwriting them won\\'t break the upload\\n      but can break the way it\\'s displayed.\\n      You can overwrite them if you don\\'t like the default behavior. If you just\\n      want to add an additional event handler, register it on the dropzone object\\n      and don\\'t overwrite those options.\\n       */\\n      drop: function(e) {\\n        return this.element.classList.remove(\"dz-drag-hover\");\\n      },\\n      dragstart: noop,\\n      dragend: function(e) {\\n        return this.element.classList.remove(\"dz-drag-hover\");\\n      },\\n      dragenter: function(e) {\\n        return this.element.classList.add(\"dz-drag-hover\");\\n      },\\n      dragover: function(e) {\\n        return this.element.classList.add(\"dz-drag-hover\");\\n      },\\n      dragleave: function(e) {\\n        return this.element.classList.remove(\"dz-drag-hover\");\\n      },\\n      paste: noop,\\n      reset: function() {\\n        return this.element.classList.remove(\"dz-started\");\\n      },\\n      addedfile: function(file) {\\n        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\\n        if (this.element === this.previewsContainer) {\\n          this.element.classList.add(\"dz-started\");\\n        }\\n        if (this.previewsContainer) {\\n          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\\n          file.previewTemplate = file.previewElement;\\n          this.previewsContainer.appendChild(file.previewElement);\\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-name]\");\\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n            node = _ref[_i];\\n            node.textContent = file.name;\\n          }\\n          _ref1 = file.previewElement.querySelectorAll(\"[data-dz-size]\");\\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\\n            node = _ref1[_j];\\n            node.innerHTML = this.filesize(file.size);\\n          }\\n          if (this.options.addRemoveLinks) {\\n            file._removeLink = Dropzone.createElement(\"<a class=\\\\\"dz-remove\\\\\" href=\\\\\"javascript:undefined;\\\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\\n            file.previewElement.appendChild(file._removeLink);\\n          }\\n          removeFileEvent = (function(_this) {\\n            return function(e) {\\n              e.preventDefault();\\n              e.stopPropagation();\\n              if (file.status === Dropzone.UPLOADING) {\\n                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {\\n                  return _this.removeFile(file);\\n                });\\n              } else {\\n                if (_this.options.dictRemoveFileConfirmation) {\\n                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {\\n                    return _this.removeFile(file);\\n                  });\\n                } else {\\n                  return _this.removeFile(file);\\n                }\\n              }\\n            };\\n          })(this);\\n          _ref2 = file.previewElement.querySelectorAll(\"[data-dz-remove]\");\\n          _results = [];\\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\\n            removeLink = _ref2[_k];\\n            _results.push(removeLink.addEventListener(\"click\", removeFileEvent));\\n          }\\n          return _results;\\n        }\\n      },\\n      removedfile: function(file) {\\n        var _ref;\\n        if (file.previewElement) {\\n          if ((_ref = file.previewElement) != null) {\\n            _ref.parentNode.removeChild(file.previewElement);\\n          }\\n        }\\n        return this._updateMaxFilesReachedClass();\\n      },\\n      thumbnail: function(file, dataUrl) {\\n        var thumbnailElement, _i, _len, _ref;\\n        if (file.previewElement) {\\n          file.previewElement.classList.remove(\"dz-file-preview\");\\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\");\\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n            thumbnailElement = _ref[_i];\\n            thumbnailElement.alt = file.name;\\n            thumbnailElement.src = dataUrl;\\n          }\\n          return setTimeout(((function(_this) {\\n            return function() {\\n              return file.previewElement.classList.add(\"dz-image-preview\");\\n            };\\n          })(this)), 1);\\n        }\\n      },\\n      error: function(file, message) {\\n        var node, _i, _len, _ref, _results;\\n        if (file.previewElement) {\\n          file.previewElement.classList.add(\"dz-error\");\\n          if (typeof message !== \"String\" && message.error) {\\n            message = message.error;\\n          }\\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\\n          _results = [];\\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n            node = _ref[_i];\\n            _results.push(node.textContent = message);\\n          }\\n          return _results;\\n        }\\n      },\\n      errormultiple: noop,\\n      processing: function(file) {\\n        if (file.previewElement) {\\n          file.previewElement.classList.add(\"dz-processing\");\\n          if (file._removeLink) {\\n            return file._removeLink.textContent = this.options.dictCancelUpload;\\n          }\\n        }\\n      },\\n      processingmultiple: noop,\\n      uploadprogress: function(file, progress, bytesSent) {\\n        var node, _i, _len, _ref, _results;\\n        if (file.previewElement) {\\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\");\\n          _results = [];\\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n            node = _ref[_i];\\n            if (node.nodeName === \\'PROGRESS\\') {\\n              _results.push(node.value = progress);\\n            } else {\\n              _results.push(node.style.width = \"\" + progress + \"%\");\\n            }\\n          }\\n          return _results;\\n        }\\n      },\\n      totaluploadprogress: noop,\\n      sending: noop,\\n      sendingmultiple: noop,\\n      success: function(file) {\\n        if (file.previewElement) {\\n          return file.previewElement.classList.add(\"dz-success\");\\n        }\\n      },\\n      successmultiple: noop,\\n      canceled: function(file) {\\n        return this.emit(\"error\", file, \"Upload canceled.\");\\n      },\\n      canceledmultiple: noop,\\n      complete: function(file) {\\n        if (file._removeLink) {\\n          file._removeLink.textContent = this.options.dictRemoveFile;\\n        }\\n        if (file.previewElement) {\\n          return file.previewElement.classList.add(\"dz-complete\");\\n        }\\n      },\\n      completemultiple: noop,\\n      maxfilesexceeded: noop,\\n      maxfilesreached: noop,\\n      queuecomplete: noop,\\n      addedfiles: noop,\\n      previewTemplate: \"<div class=\\\\\"dz-preview dz-file-preview\\\\\">\\\\n  <div class=\\\\\"dz-image\\\\\"><img data-dz-thumbnail /></div>\\\\n  <div class=\\\\\"dz-details\\\\\">\\\\n    <div class=\\\\\"dz-size\\\\\"><span data-dz-size></span></div>\\\\n    <div class=\\\\\"dz-filename\\\\\"><span data-dz-name></span></div>\\\\n  </div>\\\\n  <div class=\\\\\"dz-progress\\\\\"><span class=\\\\\"dz-upload\\\\\" data-dz-uploadprogress></span></div>\\\\n  <div class=\\\\\"dz-error-message\\\\\"><span data-dz-errormessage></span></div>\\\\n  <div class=\\\\\"dz-success-mark\\\\\">\\\\n    <svg width=\\\\\"54px\\\\\" height=\\\\\"54px\\\\\" viewBox=\\\\\"0 0 54 54\\\\\" version=\\\\\"1.1\\\\\" xmlns=\\\\\"http://www.w3.org/2000/svg\\\\\" xmlns:xlink=\\\\\"http://www.w3.org/1999/xlink\\\\\" xmlns:sketch=\\\\\"http://www.bohemiancoding.com/sketch/ns\\\\\">\\\\n      <title>Check</title>\\\\n      <defs></defs>\\\\n      <g id=\\\\\"Page-1\\\\\" stroke=\\\\\"none\\\\\" stroke-width=\\\\\"1\\\\\" fill=\\\\\"none\\\\\" fill-rule=\\\\\"evenodd\\\\\" sketch:type=\\\\\"MSPage\\\\\">\\\\n        <path d=\\\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\\\" id=\\\\\"Oval-2\\\\\" stroke-opacity=\\\\\"0.198794158\\\\\" stroke=\\\\\"#747474\\\\\" fill-opacity=\\\\\"0.816519475\\\\\" fill=\\\\\"#FFFFFF\\\\\" sketch:type=\\\\\"MSShapeGroup\\\\\"></path>\\\\n      </g>\\\\n    </svg>\\\\n  </div>\\\\n  <div class=\\\\\"dz-error-mark\\\\\">\\\\n    <svg width=\\\\\"54px\\\\\" height=\\\\\"54px\\\\\" viewBox=\\\\\"0 0 54 54\\\\\" version=\\\\\"1.1\\\\\" xmlns=\\\\\"http://www.w3.org/2000/svg\\\\\" xmlns:xlink=\\\\\"http://www.w3.org/1999/xlink\\\\\" xmlns:sketch=\\\\\"http://www.bohemiancoding.com/sketch/ns\\\\\">\\\\n      <title>Error</title>\\\\n      <defs></defs>\\\\n      <g id=\\\\\"Page-1\\\\\" stroke=\\\\\"none\\\\\" stroke-width=\\\\\"1\\\\\" fill=\\\\\"none\\\\\" fill-rule=\\\\\"evenodd\\\\\" sketch:type=\\\\\"MSPage\\\\\">\\\\n        <g id=\\\\\"Check-+-Oval-2\\\\\" sketch:type=\\\\\"MSLayerGroup\\\\\" stroke=\\\\\"#747474\\\\\" stroke-opacity=\\\\\"0.198794158\\\\\" fill=\\\\\"#FFFFFF\\\\\" fill-opacity=\\\\\"0.816519475\\\\\">\\\\n          <path d=\\\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\\\" id=\\\\\"Oval-2\\\\\" sketch:type=\\\\\"MSShapeGroup\\\\\"></path>\\\\n        </g>\\\\n      </g>\\\\n    </svg>\\\\n  </div>\\\\n</div>\"\\n    };\\n\\n    extend = function() {\\n      var key, object, objects, target, val, _i, _len;\\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\\n        object = objects[_i];\\n        for (key in object) {\\n          val = object[key];\\n          target[key] = val;\\n        }\\n      }\\n      return target;\\n    };\\n\\n    function Dropzone(element, options) {\\n      var elementOptions, fallback, _ref;\\n      this.element = element;\\n      this.version = Dropzone.version;\\n      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\\\\n*/g, \"\");\\n      this.clickableElements = [];\\n      this.listeners = [];\\n      this.files = [];\\n      if (typeof this.element === \"string\") {\\n        this.element = document.querySelector(this.element);\\n      }\\n      if (!(this.element && (this.element.nodeType != null))) {\\n        throw new Error(\"Invalid dropzone element.\");\\n      }\\n      if (this.element.dropzone) {\\n        throw new Error(\"Dropzone already attached.\");\\n      }\\n      Dropzone.instances.push(this);\\n      this.element.dropzone = this;\\n      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};\\n      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});\\n      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {\\n        return this.options.fallback.call(this);\\n      }\\n      if (this.options.url == null) {\\n        this.options.url = this.element.getAttribute(\"action\");\\n      }\\n      if (!this.options.url) {\\n        throw new Error(\"No URL provided.\");\\n      }\\n      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {\\n        throw new Error(\"You can\\'t provide both \\'acceptedFiles\\' and \\'acceptedMimeTypes\\'. \\'acceptedMimeTypes\\' is deprecated.\");\\n      }\\n      if (this.options.acceptedMimeTypes) {\\n        this.options.acceptedFiles = this.options.acceptedMimeTypes;\\n        delete this.options.acceptedMimeTypes;\\n      }\\n      this.options.method = this.options.method.toUpperCase();\\n      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {\\n        fallback.parentNode.removeChild(fallback);\\n      }\\n      if (this.options.previewsContainer !== false) {\\n        if (this.options.previewsContainer) {\\n          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, \"previewsContainer\");\\n        } else {\\n          this.previewsContainer = this.element;\\n        }\\n      }\\n      if (this.options.clickable) {\\n        if (this.options.clickable === true) {\\n          this.clickableElements = [this.element];\\n        } else {\\n          this.clickableElements = Dropzone.getElements(this.options.clickable, \"clickable\");\\n        }\\n      }\\n      this.init();\\n    }\\n\\n    Dropzone.prototype.getAcceptedFiles = function() {\\n      var file, _i, _len, _ref, _results;\\n      _ref = this.files;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        if (file.accepted) {\\n          _results.push(file);\\n        }\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.getRejectedFiles = function() {\\n      var file, _i, _len, _ref, _results;\\n      _ref = this.files;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        if (!file.accepted) {\\n          _results.push(file);\\n        }\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.getFilesWithStatus = function(status) {\\n      var file, _i, _len, _ref, _results;\\n      _ref = this.files;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        if (file.status === status) {\\n          _results.push(file);\\n        }\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.getQueuedFiles = function() {\\n      return this.getFilesWithStatus(Dropzone.QUEUED);\\n    };\\n\\n    Dropzone.prototype.getUploadingFiles = function() {\\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\\n    };\\n\\n    Dropzone.prototype.getAddedFiles = function() {\\n      return this.getFilesWithStatus(Dropzone.ADDED);\\n    };\\n\\n    Dropzone.prototype.getActiveFiles = function() {\\n      var file, _i, _len, _ref, _results;\\n      _ref = this.files;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {\\n          _results.push(file);\\n        }\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.init = function() {\\n      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;\\n      if (this.element.tagName === \"form\") {\\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\\n      }\\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\\\"dz-default dz-message\\\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\\n      }\\n      if (this.clickableElements.length) {\\n        setupHiddenFileInput = (function(_this) {\\n          return function() {\\n            if (_this.hiddenFileInput) {\\n              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);\\n            }\\n            _this.hiddenFileInput = document.createElement(\"input\");\\n            _this.hiddenFileInput.setAttribute(\"type\", \"file\");\\n            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {\\n              _this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\\n            }\\n            _this.hiddenFileInput.className = \"dz-hidden-input\";\\n            if (_this.options.acceptedFiles != null) {\\n              _this.hiddenFileInput.setAttribute(\"accept\", _this.options.acceptedFiles);\\n            }\\n            if (_this.options.capture != null) {\\n              _this.hiddenFileInput.setAttribute(\"capture\", _this.options.capture);\\n            }\\n            _this.hiddenFileInput.style.visibility = \"hidden\";\\n            _this.hiddenFileInput.style.position = \"absolute\";\\n            _this.hiddenFileInput.style.top = \"0\";\\n            _this.hiddenFileInput.style.left = \"0\";\\n            _this.hiddenFileInput.style.height = \"0\";\\n            _this.hiddenFileInput.style.width = \"0\";\\n            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);\\n            return _this.hiddenFileInput.addEventListener(\"change\", function() {\\n              var file, files, _i, _len;\\n              files = _this.hiddenFileInput.files;\\n              if (files.length) {\\n                for (_i = 0, _len = files.length; _i < _len; _i++) {\\n                  file = files[_i];\\n                  _this.addFile(file);\\n                }\\n              }\\n              _this.emit(\"addedfiles\", files);\\n              return setupHiddenFileInput();\\n            });\\n          };\\n        })(this);\\n        setupHiddenFileInput();\\n      }\\n      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;\\n      _ref1 = this.events;\\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\\n        eventName = _ref1[_i];\\n        this.on(eventName, this.options[eventName]);\\n      }\\n      this.on(\"uploadprogress\", (function(_this) {\\n        return function() {\\n          return _this.updateTotalUploadProgress();\\n        };\\n      })(this));\\n      this.on(\"removedfile\", (function(_this) {\\n        return function() {\\n          return _this.updateTotalUploadProgress();\\n        };\\n      })(this));\\n      this.on(\"canceled\", (function(_this) {\\n        return function(file) {\\n          return _this.emit(\"complete\", file);\\n        };\\n      })(this));\\n      this.on(\"complete\", (function(_this) {\\n        return function(file) {\\n          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {\\n            return setTimeout((function() {\\n              return _this.emit(\"queuecomplete\");\\n            }), 0);\\n          }\\n        };\\n      })(this));\\n      noPropagation = function(e) {\\n        e.stopPropagation();\\n        if (e.preventDefault) {\\n          return e.preventDefault();\\n        } else {\\n          return e.returnValue = false;\\n        }\\n      };\\n      this.listeners = [\\n        {\\n          element: this.element,\\n          events: {\\n            \"dragstart\": (function(_this) {\\n              return function(e) {\\n                return _this.emit(\"dragstart\", e);\\n              };\\n            })(this),\\n            \"dragenter\": (function(_this) {\\n              return function(e) {\\n                noPropagation(e);\\n                return _this.emit(\"dragenter\", e);\\n              };\\n            })(this),\\n            \"dragover\": (function(_this) {\\n              return function(e) {\\n                var efct;\\n                try {\\n                  efct = e.dataTransfer.effectAllowed;\\n                } catch (_error) {}\\n                e.dataTransfer.dropEffect = \\'move\\' === efct || \\'linkMove\\' === efct ? \\'move\\' : \\'copy\\';\\n                noPropagation(e);\\n                return _this.emit(\"dragover\", e);\\n              };\\n            })(this),\\n            \"dragleave\": (function(_this) {\\n              return function(e) {\\n                return _this.emit(\"dragleave\", e);\\n              };\\n            })(this),\\n            \"drop\": (function(_this) {\\n              return function(e) {\\n                noPropagation(e);\\n                return _this.drop(e);\\n              };\\n            })(this),\\n            \"dragend\": (function(_this) {\\n              return function(e) {\\n                return _this.emit(\"dragend\", e);\\n              };\\n            })(this)\\n          }\\n        }\\n      ];\\n      this.clickableElements.forEach((function(_this) {\\n        return function(clickableElement) {\\n          return _this.listeners.push({\\n            element: clickableElement,\\n            events: {\\n              \"click\": function(evt) {\\n                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(\".dz-message\")))) {\\n                  _this.hiddenFileInput.click();\\n                }\\n                return true;\\n              }\\n            }\\n          });\\n        };\\n      })(this));\\n      this.enable();\\n      return this.options.init.call(this);\\n    };\\n\\n    Dropzone.prototype.destroy = function() {\\n      var _ref;\\n      this.disable();\\n      this.removeAllFiles(true);\\n      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {\\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\\n        this.hiddenFileInput = null;\\n      }\\n      delete this.element.dropzone;\\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\\n    };\\n\\n    Dropzone.prototype.updateTotalUploadProgress = function() {\\n      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;\\n      totalBytesSent = 0;\\n      totalBytes = 0;\\n      activeFiles = this.getActiveFiles();\\n      if (activeFiles.length) {\\n        _ref = this.getActiveFiles();\\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n          file = _ref[_i];\\n          totalBytesSent += file.upload.bytesSent;\\n          totalBytes += file.upload.total;\\n        }\\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\\n      } else {\\n        totalUploadProgress = 100;\\n      }\\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\\n    };\\n\\n    Dropzone.prototype._getParamName = function(n) {\\n      if (typeof this.options.paramName === \"function\") {\\n        return this.options.paramName(n);\\n      } else {\\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\\n      }\\n    };\\n\\n    Dropzone.prototype.getFallbackForm = function() {\\n      var existingFallback, fields, fieldsString, form;\\n      if (existingFallback = this.getExistingFallback()) {\\n        return existingFallback;\\n      }\\n      fieldsString = \"<div class=\\\\\"dz-fallback\\\\\">\";\\n      if (this.options.dictFallbackText) {\\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\\n      }\\n      fieldsString += \"<input type=\\\\\"file\\\\\" name=\\\\\"\" + (this._getParamName(0)) + \"\\\\\" \" + (this.options.uploadMultiple ? \\'multiple=\"multiple\"\\' : void 0) + \" /><input type=\\\\\"submit\\\\\" value=\\\\\"Upload!\\\\\"></div>\";\\n      fields = Dropzone.createElement(fieldsString);\\n      if (this.element.tagName !== \"FORM\") {\\n        form = Dropzone.createElement(\"<form action=\\\\\"\" + this.options.url + \"\\\\\" enctype=\\\\\"multipart/form-data\\\\\" method=\\\\\"\" + this.options.method + \"\\\\\"></form>\");\\n        form.appendChild(fields);\\n      } else {\\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\\n        this.element.setAttribute(\"method\", this.options.method);\\n      }\\n      return form != null ? form : fields;\\n    };\\n\\n    Dropzone.prototype.getExistingFallback = function() {\\n      var fallback, getFallback, tagName, _i, _len, _ref;\\n      getFallback = function(elements) {\\n        var el, _i, _len;\\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\\n          el = elements[_i];\\n          if (/(^| )fallback($| )/.test(el.className)) {\\n            return el;\\n          }\\n        }\\n      };\\n      _ref = [\"div\", \"form\"];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        tagName = _ref[_i];\\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\\n          return fallback;\\n        }\\n      }\\n    };\\n\\n    Dropzone.prototype.setupEventListeners = function() {\\n      var elementListeners, event, listener, _i, _len, _ref, _results;\\n      _ref = this.listeners;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        elementListeners = _ref[_i];\\n        _results.push((function() {\\n          var _ref1, _results1;\\n          _ref1 = elementListeners.events;\\n          _results1 = [];\\n          for (event in _ref1) {\\n            listener = _ref1[event];\\n            _results1.push(elementListeners.element.addEventListener(event, listener, false));\\n          }\\n          return _results1;\\n        })());\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.removeEventListeners = function() {\\n      var elementListeners, event, listener, _i, _len, _ref, _results;\\n      _ref = this.listeners;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        elementListeners = _ref[_i];\\n        _results.push((function() {\\n          var _ref1, _results1;\\n          _ref1 = elementListeners.events;\\n          _results1 = [];\\n          for (event in _ref1) {\\n            listener = _ref1[event];\\n            _results1.push(elementListeners.element.removeEventListener(event, listener, false));\\n          }\\n          return _results1;\\n        })());\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.disable = function() {\\n      var file, _i, _len, _ref, _results;\\n      this.clickableElements.forEach(function(element) {\\n        return element.classList.remove(\"dz-clickable\");\\n      });\\n      this.removeEventListeners();\\n      _ref = this.files;\\n      _results = [];\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        _results.push(this.cancelUpload(file));\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype.enable = function() {\\n      this.clickableElements.forEach(function(element) {\\n        return element.classList.add(\"dz-clickable\");\\n      });\\n      return this.setupEventListeners();\\n    };\\n\\n    Dropzone.prototype.filesize = function(size) {\\n      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;\\n      selectedSize = 0;\\n      selectedUnit = \"b\";\\n      if (size > 0) {\\n        units = [\\'TB\\', \\'GB\\', \\'MB\\', \\'KB\\', \\'b\\'];\\n        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {\\n          unit = units[i];\\n          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\\n          if (size >= cutoff) {\\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\\n            selectedUnit = unit;\\n            break;\\n          }\\n        }\\n        selectedSize = Math.round(10 * selectedSize) / 10;\\n      }\\n      return \"<strong>\" + selectedSize + \"</strong> \" + selectedUnit;\\n    };\\n\\n    Dropzone.prototype._updateMaxFilesReachedClass = function() {\\n      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\\n          this.emit(\\'maxfilesreached\\', this.files);\\n        }\\n        return this.element.classList.add(\"dz-max-files-reached\");\\n      } else {\\n        return this.element.classList.remove(\"dz-max-files-reached\");\\n      }\\n    };\\n\\n    Dropzone.prototype.drop = function(e) {\\n      var files, items;\\n      if (!e.dataTransfer) {\\n        return;\\n      }\\n      this.emit(\"drop\", e);\\n      files = e.dataTransfer.files;\\n      this.emit(\"addedfiles\", files);\\n      if (files.length) {\\n        items = e.dataTransfer.items;\\n        if (items && items.length && (items[0].webkitGetAsEntry != null)) {\\n          this._addFilesFromItems(items);\\n        } else {\\n          this.handleFiles(files);\\n        }\\n      }\\n    };\\n\\n    Dropzone.prototype.paste = function(e) {\\n      var items, _ref;\\n      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {\\n        return;\\n      }\\n      this.emit(\"paste\", e);\\n      items = e.clipboardData.items;\\n      if (items.length) {\\n        return this._addFilesFromItems(items);\\n      }\\n    };\\n\\n    Dropzone.prototype.handleFiles = function(files) {\\n      var file, _i, _len, _results;\\n      _results = [];\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        _results.push(this.addFile(file));\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype._addFilesFromItems = function(items) {\\n      var entry, item, _i, _len, _results;\\n      _results = [];\\n      for (_i = 0, _len = items.length; _i < _len; _i++) {\\n        item = items[_i];\\n        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\\n          if (entry.isFile) {\\n            _results.push(this.addFile(item.getAsFile()));\\n          } else if (entry.isDirectory) {\\n            _results.push(this._addFilesFromDirectory(entry, entry.name));\\n          } else {\\n            _results.push(void 0);\\n          }\\n        } else if (item.getAsFile != null) {\\n          if ((item.kind == null) || item.kind === \"file\") {\\n            _results.push(this.addFile(item.getAsFile()));\\n          } else {\\n            _results.push(void 0);\\n          }\\n        } else {\\n          _results.push(void 0);\\n        }\\n      }\\n      return _results;\\n    };\\n\\n    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {\\n      var dirReader, entriesReader;\\n      dirReader = directory.createReader();\\n      entriesReader = (function(_this) {\\n        return function(entries) {\\n          var entry, _i, _len;\\n          for (_i = 0, _len = entries.length; _i < _len; _i++) {\\n            entry = entries[_i];\\n            if (entry.isFile) {\\n              entry.file(function(file) {\\n                if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === \\'.\\') {\\n                  return;\\n                }\\n                file.fullPath = \"\" + path + \"/\" + file.name;\\n                return _this.addFile(file);\\n              });\\n            } else if (entry.isDirectory) {\\n              _this._addFilesFromDirectory(entry, \"\" + path + \"/\" + entry.name);\\n            }\\n          }\\n        };\\n      })(this);\\n      return dirReader.readEntries(entriesReader, function(error) {\\n        return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\\n      });\\n    };\\n\\n    Dropzone.prototype.accept = function(file, done) {\\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\\n        return done(this.options.dictInvalidFileType);\\n      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\\n        return this.emit(\"maxfilesexceeded\", file);\\n      } else {\\n        return this.options.accept.call(this, file, done);\\n      }\\n    };\\n\\n    Dropzone.prototype.addFile = function(file) {\\n      file.upload = {\\n        progress: 0,\\n        total: file.size,\\n        bytesSent: 0\\n      };\\n      this.files.push(file);\\n      file.status = Dropzone.ADDED;\\n      this.emit(\"addedfile\", file);\\n      this._enqueueThumbnail(file);\\n      return this.accept(file, (function(_this) {\\n        return function(error) {\\n          if (error) {\\n            file.accepted = false;\\n            _this._errorProcessing([file], error);\\n          } else {\\n            file.accepted = true;\\n            if (_this.options.autoQueue) {\\n              _this.enqueueFile(file);\\n            }\\n          }\\n          return _this._updateMaxFilesReachedClass();\\n        };\\n      })(this));\\n    };\\n\\n    Dropzone.prototype.enqueueFiles = function(files) {\\n      var file, _i, _len;\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        this.enqueueFile(file);\\n      }\\n      return null;\\n    };\\n\\n    Dropzone.prototype.enqueueFile = function(file) {\\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\\n        file.status = Dropzone.QUEUED;\\n        if (this.options.autoProcessQueue) {\\n          return setTimeout(((function(_this) {\\n            return function() {\\n              return _this.processQueue();\\n            };\\n          })(this)), 0);\\n        }\\n      } else {\\n        throw new Error(\"This file can\\'t be queued because it has already been processed or was rejected.\");\\n      }\\n    };\\n\\n    Dropzone.prototype._thumbnailQueue = [];\\n\\n    Dropzone.prototype._processingThumbnail = false;\\n\\n    Dropzone.prototype._enqueueThumbnail = function(file) {\\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\\n        this._thumbnailQueue.push(file);\\n        return setTimeout(((function(_this) {\\n          return function() {\\n            return _this._processThumbnailQueue();\\n          };\\n        })(this)), 0);\\n      }\\n    };\\n\\n    Dropzone.prototype._processThumbnailQueue = function() {\\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\\n        return;\\n      }\\n      this._processingThumbnail = true;\\n      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {\\n        return function() {\\n          _this._processingThumbnail = false;\\n          return _this._processThumbnailQueue();\\n        };\\n      })(this));\\n    };\\n\\n    Dropzone.prototype.removeFile = function(file) {\\n      if (file.status === Dropzone.UPLOADING) {\\n        this.cancelUpload(file);\\n      }\\n      this.files = without(this.files, file);\\n      this.emit(\"removedfile\", file);\\n      if (this.files.length === 0) {\\n        return this.emit(\"reset\");\\n      }\\n    };\\n\\n    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {\\n      var file, _i, _len, _ref;\\n      if (cancelIfNecessary == null) {\\n        cancelIfNecessary = false;\\n      }\\n      _ref = this.files.slice();\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        file = _ref[_i];\\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\\n          this.removeFile(file);\\n        }\\n      }\\n      return null;\\n    };\\n\\n    Dropzone.prototype.createThumbnail = function(file, callback) {\\n      var fileReader;\\n      fileReader = new FileReader;\\n      fileReader.onload = (function(_this) {\\n        return function() {\\n          if (file.type === \"image/svg+xml\") {\\n            _this.emit(\"thumbnail\", file, fileReader.result);\\n            if (callback != null) {\\n              callback();\\n            }\\n            return;\\n          }\\n          return _this.createThumbnailFromUrl(file, fileReader.result, callback);\\n        };\\n      })(this);\\n      return fileReader.readAsDataURL(file);\\n    };\\n\\n    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {\\n      var img;\\n      img = document.createElement(\"img\");\\n      if (crossOrigin) {\\n        img.crossOrigin = crossOrigin;\\n      }\\n      img.onload = (function(_this) {\\n        return function() {\\n          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;\\n          file.width = img.width;\\n          file.height = img.height;\\n          resizeInfo = _this.options.resize.call(_this, file);\\n          if (resizeInfo.trgWidth == null) {\\n            resizeInfo.trgWidth = resizeInfo.optWidth;\\n          }\\n          if (resizeInfo.trgHeight == null) {\\n            resizeInfo.trgHeight = resizeInfo.optHeight;\\n          }\\n          canvas = document.createElement(\"canvas\");\\n          ctx = canvas.getContext(\"2d\");\\n          canvas.width = resizeInfo.trgWidth;\\n          canvas.height = resizeInfo.trgHeight;\\n          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\\n          thumbnail = canvas.toDataURL(\"image/png\");\\n          _this.emit(\"thumbnail\", file, thumbnail);\\n          if (callback != null) {\\n            return callback();\\n          }\\n        };\\n      })(this);\\n      if (callback != null) {\\n        img.onerror = callback;\\n      }\\n      return img.src = imageUrl;\\n    };\\n\\n    Dropzone.prototype.processQueue = function() {\\n      var i, parallelUploads, processingLength, queuedFiles;\\n      parallelUploads = this.options.parallelUploads;\\n      processingLength = this.getUploadingFiles().length;\\n      i = processingLength;\\n      if (processingLength >= parallelUploads) {\\n        return;\\n      }\\n      queuedFiles = this.getQueuedFiles();\\n      if (!(queuedFiles.length > 0)) {\\n        return;\\n      }\\n      if (this.options.uploadMultiple) {\\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\\n      } else {\\n        while (i < parallelUploads) {\\n          if (!queuedFiles.length) {\\n            return;\\n          }\\n          this.processFile(queuedFiles.shift());\\n          i++;\\n        }\\n      }\\n    };\\n\\n    Dropzone.prototype.processFile = function(file) {\\n      return this.processFiles([file]);\\n    };\\n\\n    Dropzone.prototype.processFiles = function(files) {\\n      var file, _i, _len;\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        file.processing = true;\\n        file.status = Dropzone.UPLOADING;\\n        this.emit(\"processing\", file);\\n      }\\n      if (this.options.uploadMultiple) {\\n        this.emit(\"processingmultiple\", files);\\n      }\\n      return this.uploadFiles(files);\\n    };\\n\\n    Dropzone.prototype._getFilesWithXhr = function(xhr) {\\n      var file, files;\\n      return files = (function() {\\n        var _i, _len, _ref, _results;\\n        _ref = this.files;\\n        _results = [];\\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n          file = _ref[_i];\\n          if (file.xhr === xhr) {\\n            _results.push(file);\\n          }\\n        }\\n        return _results;\\n      }).call(this);\\n    };\\n\\n    Dropzone.prototype.cancelUpload = function(file) {\\n      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;\\n      if (file.status === Dropzone.UPLOADING) {\\n        groupedFiles = this._getFilesWithXhr(file.xhr);\\n        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {\\n          groupedFile = groupedFiles[_i];\\n          groupedFile.status = Dropzone.CANCELED;\\n        }\\n        file.xhr.abort();\\n        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {\\n          groupedFile = groupedFiles[_j];\\n          this.emit(\"canceled\", groupedFile);\\n        }\\n        if (this.options.uploadMultiple) {\\n          this.emit(\"canceledmultiple\", groupedFiles);\\n        }\\n      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {\\n        file.status = Dropzone.CANCELED;\\n        this.emit(\"canceled\", file);\\n        if (this.options.uploadMultiple) {\\n          this.emit(\"canceledmultiple\", [file]);\\n        }\\n      }\\n      if (this.options.autoProcessQueue) {\\n        return this.processQueue();\\n      }\\n    };\\n\\n    resolveOption = function() {\\n      var args, option;\\n      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\\n      if (typeof option === \\'function\\') {\\n        return option.apply(this, args);\\n      }\\n      return option;\\n    };\\n\\n    Dropzone.prototype.uploadFile = function(file) {\\n      return this.uploadFiles([file]);\\n    };\\n\\n    Dropzone.prototype.uploadFiles = function(files) {\\n      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\\n      xhr = new XMLHttpRequest();\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        file.xhr = xhr;\\n      }\\n      method = resolveOption(this.options.method, files);\\n      url = resolveOption(this.options.url, files);\\n      xhr.open(method, url, true);\\n      xhr.withCredentials = !!this.options.withCredentials;\\n      response = null;\\n      handleError = (function(_this) {\\n        return function() {\\n          var _j, _len1, _results;\\n          _results = [];\\n          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\\n            file = files[_j];\\n            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr));\\n          }\\n          return _results;\\n        };\\n      })(this);\\n      updateProgress = (function(_this) {\\n        return function(e) {\\n          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;\\n          if (e != null) {\\n            progress = 100 * e.loaded / e.total;\\n            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\\n              file = files[_j];\\n              file.upload = {\\n                progress: progress,\\n                total: e.total,\\n                bytesSent: e.loaded\\n              };\\n            }\\n          } else {\\n            allFilesFinished = true;\\n            progress = 100;\\n            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {\\n              file = files[_k];\\n              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {\\n                allFilesFinished = false;\\n              }\\n              file.upload.progress = progress;\\n              file.upload.bytesSent = file.upload.total;\\n            }\\n            if (allFilesFinished) {\\n              return;\\n            }\\n          }\\n          _results = [];\\n          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {\\n            file = files[_l];\\n            _results.push(_this.emit(\"uploadprogress\", file, progress, file.upload.bytesSent));\\n          }\\n          return _results;\\n        };\\n      })(this);\\n      xhr.onload = (function(_this) {\\n        return function(e) {\\n          var _ref;\\n          if (files[0].status === Dropzone.CANCELED) {\\n            return;\\n          }\\n          if (xhr.readyState !== 4) {\\n            return;\\n          }\\n          response = xhr.responseText;\\n          if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\\n            try {\\n              response = JSON.parse(response);\\n            } catch (_error) {\\n              e = _error;\\n              response = \"Invalid JSON response from server.\";\\n            }\\n          }\\n          updateProgress();\\n          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {\\n            return handleError();\\n          } else {\\n            return _this._finished(files, response, e);\\n          }\\n        };\\n      })(this);\\n      xhr.onerror = (function(_this) {\\n        return function() {\\n          if (files[0].status === Dropzone.CANCELED) {\\n            return;\\n          }\\n          return handleError();\\n        };\\n      })(this);\\n      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;\\n      progressObj.onprogress = updateProgress;\\n      headers = {\\n        \"Accept\": \"application/json\",\\n        \"Cache-Control\": \"no-cache\",\\n        \"X-Requested-With\": \"XMLHttpRequest\"\\n      };\\n      if (this.options.headers) {\\n        extend(headers, this.options.headers);\\n      }\\n      for (headerName in headers) {\\n        headerValue = headers[headerName];\\n        if (headerValue) {\\n          xhr.setRequestHeader(headerName, headerValue);\\n        }\\n      }\\n      formData = new FormData();\\n      if (this.options.params) {\\n        _ref1 = this.options.params;\\n        for (key in _ref1) {\\n          value = _ref1[key];\\n          formData.append(key, value);\\n        }\\n      }\\n      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\\n        file = files[_j];\\n        this.emit(\"sending\", file, xhr, formData);\\n      }\\n      if (this.options.uploadMultiple) {\\n        this.emit(\"sendingmultiple\", files, xhr, formData);\\n      }\\n      if (this.element.tagName === \"FORM\") {\\n        _ref2 = this.element.querySelectorAll(\"input, textarea, select, button\");\\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\\n          input = _ref2[_k];\\n          inputName = input.getAttribute(\"name\");\\n          inputType = input.getAttribute(\"type\");\\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\\n            _ref3 = input.options;\\n            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\\n              option = _ref3[_l];\\n              if (option.selected) {\\n                formData.append(inputName, option.value);\\n              }\\n            }\\n          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== \"checkbox\" && _ref4 !== \"radio\") || input.checked) {\\n            formData.append(inputName, input.value);\\n          }\\n        }\\n      }\\n      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {\\n        formData.append(this._getParamName(i), files[i], files[i].name);\\n      }\\n      return this.submitRequest(xhr, formData, files);\\n    };\\n\\n    Dropzone.prototype.submitRequest = function(xhr, formData, files) {\\n      return xhr.send(formData);\\n    };\\n\\n    Dropzone.prototype._finished = function(files, responseText, e) {\\n      var file, _i, _len;\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        file.status = Dropzone.SUCCESS;\\n        this.emit(\"success\", file, responseText, e);\\n        this.emit(\"complete\", file);\\n      }\\n      if (this.options.uploadMultiple) {\\n        this.emit(\"successmultiple\", files, responseText, e);\\n        this.emit(\"completemultiple\", files);\\n      }\\n      if (this.options.autoProcessQueue) {\\n        return this.processQueue();\\n      }\\n    };\\n\\n    Dropzone.prototype._errorProcessing = function(files, message, xhr) {\\n      var file, _i, _len;\\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\\n        file = files[_i];\\n        file.status = Dropzone.ERROR;\\n        this.emit(\"error\", file, message, xhr);\\n        this.emit(\"complete\", file);\\n      }\\n      if (this.options.uploadMultiple) {\\n        this.emit(\"errormultiple\", files, message, xhr);\\n        this.emit(\"completemultiple\", files);\\n      }\\n      if (this.options.autoProcessQueue) {\\n        return this.processQueue();\\n      }\\n    };\\n\\n    return Dropzone;\\n\\n  })(Emitter);\\n\\n  Dropzone.version = \"4.2.0\";\\n\\n  Dropzone.options = {};\\n\\n  Dropzone.optionsForElement = function(element) {\\n    if (element.getAttribute(\"id\")) {\\n      return Dropzone.options[camelize(element.getAttribute(\"id\"))];\\n    } else {\\n      return void 0;\\n    }\\n  };\\n\\n  Dropzone.instances = [];\\n\\n  Dropzone.forElement = function(element) {\\n    if (typeof element === \"string\") {\\n      element = document.querySelector(element);\\n    }\\n    if ((element != null ? element.dropzone : void 0) == null) {\\n      throw new Error(\"No Dropzone found for given element. This is probably because you\\'re trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\\n    }\\n    return element.dropzone;\\n  };\\n\\n  Dropzone.autoDiscover = true;\\n\\n  Dropzone.discover = function() {\\n    var checkElements, dropzone, dropzones, _i, _len, _results;\\n    if (document.querySelectorAll) {\\n      dropzones = document.querySelectorAll(\".dropzone\");\\n    } else {\\n      dropzones = [];\\n      checkElements = function(elements) {\\n        var el, _i, _len, _results;\\n        _results = [];\\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\\n          el = elements[_i];\\n          if (/(^| )dropzone($| )/.test(el.className)) {\\n            _results.push(dropzones.push(el));\\n          } else {\\n            _results.push(void 0);\\n          }\\n        }\\n        return _results;\\n      };\\n      checkElements(document.getElementsByTagName(\"div\"));\\n      checkElements(document.getElementsByTagName(\"form\"));\\n    }\\n    _results = [];\\n    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {\\n      dropzone = dropzones[_i];\\n      if (Dropzone.optionsForElement(dropzone) !== false) {\\n        _results.push(new Dropzone(dropzone));\\n      } else {\\n        _results.push(void 0);\\n      }\\n    }\\n    return _results;\\n  };\\n\\n  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\\\\/12/i];\\n\\n  Dropzone.isBrowserSupported = function() {\\n    var capableBrowser, regex, _i, _len, _ref;\\n    capableBrowser = true;\\n    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\\n      if (!(\"classList\" in document.createElement(\"a\"))) {\\n        capableBrowser = false;\\n      } else {\\n        _ref = Dropzone.blacklistedBrowsers;\\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n          regex = _ref[_i];\\n          if (regex.test(navigator.userAgent)) {\\n            capableBrowser = false;\\n            continue;\\n          }\\n        }\\n      }\\n    } else {\\n      capableBrowser = false;\\n    }\\n    return capableBrowser;\\n  };\\n\\n  without = function(list, rejectedItem) {\\n    var item, _i, _len, _results;\\n    _results = [];\\n    for (_i = 0, _len = list.length; _i < _len; _i++) {\\n      item = list[_i];\\n      if (item !== rejectedItem) {\\n        _results.push(item);\\n      }\\n    }\\n    return _results;\\n  };\\n\\n  camelize = function(str) {\\n    return str.replace(/[\\\\-_](\\\\w)/g, function(match) {\\n      return match.charAt(1).toUpperCase();\\n    });\\n  };\\n\\n  Dropzone.createElement = function(string) {\\n    var div;\\n    div = document.createElement(\"div\");\\n    div.innerHTML = string;\\n    return div.childNodes[0];\\n  };\\n\\n  Dropzone.elementInside = function(element, container) {\\n    if (element === container) {\\n      return true;\\n    }\\n    while (element = element.parentNode) {\\n      if (element === container) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  };\\n\\n  Dropzone.getElement = function(el, name) {\\n    var element;\\n    if (typeof el === \"string\") {\\n      element = document.querySelector(el);\\n    } else if (el.nodeType != null) {\\n      element = el;\\n    }\\n    if (element == null) {\\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\\n    }\\n    return element;\\n  };\\n\\n  Dropzone.getElements = function(els, name) {\\n    var e, el, elements, _i, _j, _len, _len1, _ref;\\n    if (els instanceof Array) {\\n      elements = [];\\n      try {\\n        for (_i = 0, _len = els.length; _i < _len; _i++) {\\n          el = els[_i];\\n          elements.push(this.getElement(el, name));\\n        }\\n      } catch (_error) {\\n        e = _error;\\n        elements = null;\\n      }\\n    } else if (typeof els === \"string\") {\\n      elements = [];\\n      _ref = document.querySelectorAll(els);\\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\\n        el = _ref[_j];\\n        elements.push(el);\\n      }\\n    } else if (els.nodeType != null) {\\n      elements = [els];\\n    }\\n    if (!((elements != null) && elements.length)) {\\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\\n    }\\n    return elements;\\n  };\\n\\n  Dropzone.confirm = function(question, accepted, rejected) {\\n    if (window.confirm(question)) {\\n      return accepted();\\n    } else if (rejected != null) {\\n      return rejected();\\n    }\\n  };\\n\\n  Dropzone.isValidFile = function(file, acceptedFiles) {\\n    var baseMimeType, mimeType, validType, _i, _len;\\n    if (!acceptedFiles) {\\n      return true;\\n    }\\n    acceptedFiles = acceptedFiles.split(\",\");\\n    mimeType = file.type;\\n    baseMimeType = mimeType.replace(/\\\\/.*$/, \"\");\\n    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {\\n      validType = acceptedFiles[_i];\\n      validType = validType.trim();\\n      if (validType.charAt(0) === \".\") {\\n        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\\n          return true;\\n        }\\n      } else if (/\\\\/\\\\*$/.test(validType)) {\\n        if (baseMimeType === validType.replace(/\\\\/.*$/, \"\")) {\\n          return true;\\n        }\\n      } else {\\n        if (mimeType === validType) {\\n          return true;\\n        }\\n      }\\n    }\\n    return false;\\n  };\\n\\n  if (typeof jQuery !== \"undefined\" && jQuery !== null) {\\n    jQuery.fn.dropzone = function(options) {\\n      return this.each(function() {\\n        return new Dropzone(this, options);\\n      });\\n    };\\n  }\\n\\n  if (typeof module !== \"undefined\" && module !== null) {\\n    module.exports = Dropzone;\\n  } else {\\n    window.Dropzone = Dropzone;\\n  }\\n\\n  Dropzone.ADDED = \"added\";\\n\\n  Dropzone.QUEUED = \"queued\";\\n\\n  Dropzone.ACCEPTED = Dropzone.QUEUED;\\n\\n  Dropzone.UPLOADING = \"uploading\";\\n\\n  Dropzone.PROCESSING = Dropzone.UPLOADING;\\n\\n  Dropzone.CANCELED = \"canceled\";\\n\\n  Dropzone.ERROR = \"error\";\\n\\n  Dropzone.SUCCESS = \"success\";\\n\\n\\n  /*\\n  \\n  Bugfix for iOS 6 and 7\\n  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\\n  based on the work of https://github.com/stomita/ios-imagefile-megapixel\\n   */\\n\\n  detectVerticalSquash = function(img) {\\n    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;\\n    iw = img.naturalWidth;\\n    ih = img.naturalHeight;\\n    canvas = document.createElement(\"canvas\");\\n    canvas.width = 1;\\n    canvas.height = ih;\\n    ctx = canvas.getContext(\"2d\");\\n    ctx.drawImage(img, 0, 0);\\n    data = ctx.getImageData(0, 0, 1, ih).data;\\n    sy = 0;\\n    ey = ih;\\n    py = ih;\\n    while (py > sy) {\\n      alpha = data[(py - 1) * 4 + 3];\\n      if (alpha === 0) {\\n        ey = py;\\n      } else {\\n        sy = py;\\n      }\\n      py = (ey + sy) >> 1;\\n    }\\n    ratio = py / ih;\\n    if (ratio === 0) {\\n      return 1;\\n    } else {\\n      return ratio;\\n    }\\n  };\\n\\n  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\\n    var vertSquashRatio;\\n    vertSquashRatio = detectVerticalSquash(img);\\n    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\\n  };\\n\\n\\n  /*\\n   * contentloaded.js\\n   *\\n   * Author: Diego Perini (diego.perini at gmail.com)\\n   * Summary: cross-browser wrapper for DOMContentLoaded\\n   * Updated: 20101020\\n   * License: MIT\\n   * Version: 1.2\\n   *\\n   * URL:\\n   * http://javascript.nwbox.com/ContentLoaded/\\n   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\\n   */\\n\\n  contentLoaded = function(win, fn) {\\n    var add, doc, done, init, poll, pre, rem, root, top;\\n    done = false;\\n    top = true;\\n    doc = win.document;\\n    root = doc.documentElement;\\n    add = (doc.addEventListener ? \"addEventListener\" : \"attachEvent\");\\n    rem = (doc.addEventListener ? \"removeEventListener\" : \"detachEvent\");\\n    pre = (doc.addEventListener ? \"\" : \"on\");\\n    init = function(e) {\\n      if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\\n        return;\\n      }\\n      (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\\n      if (!done && (done = true)) {\\n        return fn.call(win, e.type || e);\\n      }\\n    };\\n    poll = function() {\\n      var e;\\n      try {\\n        root.doScroll(\"left\");\\n      } catch (_error) {\\n        e = _error;\\n        setTimeout(poll, 50);\\n        return;\\n      }\\n      return init(\"poll\");\\n    };\\n    if (doc.readyState !== \"complete\") {\\n      if (doc.createEventObject && root.doScroll) {\\n        try {\\n          top = !win.frameElement;\\n        } catch (_error) {}\\n        if (top) {\\n          poll();\\n        }\\n      }\\n      doc[add](pre + \"DOMContentLoaded\", init, false);\\n      doc[add](pre + \"readystatechange\", init, false);\\n      return win[add](pre + \"load\", init, false);\\n    }\\n  };\\n\\n  Dropzone._autoDiscoverFunction = function() {\\n    if (Dropzone.autoDiscover) {\\n      return Dropzone.discover();\\n    }\\n  };\\n\\n  contentLoaded(window, Dropzone._autoDiscoverFunction);\\n\\n}).call(this);\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(106)(module)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/dropzone/dist/dropzone.js\\n// module id = 406\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/dropzone/dist/dropzone.js?');\n},,,,,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, GA) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar NotificationsScrollingController = $.extend({}, new _base2.default(), {\\n\\n    _isLoading: false,\\n    _bottomReached: false,\\n    _loadCount: 0,\\n\\n    selectors: {\\n        NOTIFICATION_LIST: '.badge-notification-list',\\n        END_OF_LIST: '.badge-notification-eol',\\n        NEXT_KEY: '.badge-notification-nextKey',\\n        LOADER: '.badge-notification-loader'\\n    },\\n\\n    init: function init() {\\n\\n        var list = $(this.selectors.NOTIFICATION_LIST);\\n        if (list.length == 0) {\\n            return;\\n        }\\n        this.bindElements();\\n    },\\n\\n    bindElements: function bindElements() {\\n        this.bindScrollEvents();\\n    },\\n\\n    bindScrollEvents: function bindScrollEvents() {\\n        $(window).scroll($.proxy(this.handlers.windowScrollHandler, this));\\n    },\\n\\n    loadMorePosts: function loadMorePosts() {\\n\\n        if (this._isLoading || this._bottomReached) return;\\n\\n        GA.track('Noti', 'LoadList', '', '', { LoadedCount: ++this._loadCount });\\n\\n        var _self = this;\\n        var refKey = $(_self.selectors.NOTIFICATION_LIST).find(_self.selectors.NEXT_KEY).last().text();\\n        $(_self.selectors.NOTIFICATION_LIST).find(_self.selectors.LOADER).removeClass('hide');\\n\\n        this._isLoading = true;\\n\\n        $.ajax({\\n            url: '/notifications/load-more',\\n            data: { 'refKey': refKey },\\n            dataType: 'html',\\n            success: function success(data) {\\n                _self._isLoading = false;\\n                if (data) {\\n                    $(_self.selectors.NOTIFICATION_LIST).find('ul').find(_self.selectors.LOADER).before(data);\\n\\n                    var eol = $(_self.selectors.NOTIFICATION_LIST).find(_self.selectors.END_OF_LIST);\\n                    if (eol.length > 0) {\\n                        _self._bottomReached = true;\\n                        GA.track('Noti', 'LoadListEnd');\\n                    }\\n                } else {\\n                    _self._bottomReached = true;\\n                    GA.track('Noti', 'LoadListEmpty');\\n                }\\n            },\\n            error: function error(data) {\\n                _self._isLoading = false;\\n                _self._bottomReached = true;\\n                GA.track('Noti', 'LoadListError');\\n            },\\n            complete: function complete(data) {\\n                $(_self.selectors.NOTIFICATION_LIST).find(_self.selectors.LOADER).addClass('hide');\\n            }\\n        });\\n    },\\n\\n    handlers: {\\n\\n        windowScrollHandler: function windowScrollHandler() {\\n            // loading starts when the page is 2 screen away from the bottom of the page\\n            $.proxy(NotificationsScrollingController.handlers.loadMoreScrollHandler, this)();\\n        },\\n\\n        loadMoreScrollHandler: function loadMoreScrollHandler() {\\n            var winH = $(window).height();\\n            if ($(window).scrollTop() + winH >= $(NotificationsScrollingController.selectors.NOTIFICATION_LIST).height()) {\\n                NotificationsScrollingController.loadMorePosts();\\n            }\\n        }\\n    }\\n});\\n\\nmodule.exports = NotificationsScrollingController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/notifications-scroll.js\\n// module id = 415\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/notifications-scroll.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, LogUtils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _webNoti = __webpack_require__(417);\\n\\nvar _webNoti2 = _interopRequireDefault(_webNoti);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/* \\n    General controller for Push Notification\\n*/\\nvar PushController = $.extend({}, new _base2.default(), {\\n\\n    DELAY: 1000,\\n    INIT_DELAY: 2000,\\n\\n    _lastBadgetTs: false, /* Last update time */\\n    _minBadgeInterval: 5000, /* Minimum update interval between ajax calls */\\n    _regularLongPollingInterval: 180000, /* Initial long polling interval */\\n    _checkUpdateQueueInterval: 1000,\\n    _isRequestingUpdate: false,\\n    unreadCount: 0,\\n\\n    init: function init() {},\\n\\n    onWindowLoad: function onWindowLoad() {\\n        if (!Configs.get('user.id')) return;\\n\\n        // After all content loaded, wait for a period of INIT_DELAY before long polling\\n        setTimeout($.proxy(function () {\\n            this._initPush();\\n            this._initBadgeUpdate();\\n        }, this), this.INIT_DELAY);\\n    },\\n\\n    selectors: {\\n        NOTIFICATION_UNREAD_COUNT: '#jsid-notification-unread-count'\\n    },\\n\\n    _pullNotificatons: function _pullNotificatons(data) {\\n        var counter = $(this.selectors.NOTIFICATION_UNREAD_COUNT);\\n        if (!counter) return;\\n        this.putToUpdateQueue(data);\\n    },\\n\\n    _initPush: function _initPush() {\\n\\n        function messageReceived(text, id, channel) {\\n            var data = {\\n                'type': 'noti',\\n                'message': text,\\n                'id': id,\\n                'channel': channel\\n            };\\n            LogUtils.log(data);\\n            PushController._pullNotificatons(data);\\n        };\\n\\n        var options = {\\n            host: Configs.get('user.noti.host'),\\n            port: Configs.get('user.noti.port'),\\n            modes: Configs.get('user.noti.modes')\\n        };\\n\\n        if (!options['host'] || !options['port']) {\\n            return;\\n        }\\n\\n        var pushstream = new PushStream(options);\\n\\n        pushstream.onmessage = messageReceived;\\n\\n        var channels = Configs.get('user.noti.channels');\\n\\n        if (channels instanceof Array) {\\n            for (var i = 0; i < channels.length; i++) {\\n                pushstream.addChannel(channels[i]);\\n                LogUtils.log(channels[i]);\\n            }\\n        }\\n        pushstream.connect();\\n    },\\n\\n    _updateQueue: [],\\n\\n    putToUpdateQueue: function putToUpdateQueue(data) {\\n        this._updateQueue.push(data);\\n    },\\n\\n    getNsReadStateCb: function getNsReadStateCb(json, getNotifications) {\\n        this._isRequestingUpdate = false;\\n        this._lastBadgetTs = new Date().getTime();\\n        if (json && json.status == 'OK') {\\n            if (this.unreadCount != json.payload.unreadCount) {\\n                if (getNotifications) {\\n                    $(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_CONTAINER).empty(); // force reset to avoid append to tail\\n                    ModuleFactory.PageController.getNotifications();\\n                }\\n                this.updateNotificationUnreadCount(json.payload.unreadCount);\\n            }\\n        } else {\\n            this._isRequestingUpdate = false;\\n        }\\n    },\\n\\n    _getNsReadState: function _getNsReadState() {\\n        var notiUrl = Configs.get('user.noti.read_state_url') + '?' + Configs.get('user.noti.read_state_params');\\n        this._isRequestingUpdate = true;\\n        var req = $.ajax({\\n            url: notiUrl,\\n            type: 'GET',\\n            dataType: 'jsonp',\\n            success: function success(data) {\\n                PushController.getNsReadStateCb(data, true);\\n            }\\n        });\\n    },\\n\\n    getNotificationBadge: function getNotificationBadge() {\\n        if (this._isRequestingUpdate) return;\\n\\n        return this._getNsReadState();\\n    },\\n\\n    updateNotificationUnreadCount: function updateNotificationUnreadCount(unreadCount) {\\n        var counter = $(this.selectors.NOTIFICATION_UNREAD_COUNT);\\n        if (!counter) return;\\n\\n        if (unreadCount > 0) {\\n            this.unreadCount = unreadCount;\\n            counter.text(unreadCount);\\n            counter.addClass('new');\\n            var message = unreadCount + ' unread messages. \\\\nClick to read detail.';\\n            if (unreadCount == 1) {\\n                message = unreadCount + ' unread message. \\\\nClick to read detail.';\\n            }\\n            _webNoti2.default.show(message);\\n        } else {\\n            this.unreadCount = 0;\\n            counter.text('');\\n            counter.removeClass('new');\\n        }\\n\\n        ModuleFactory.PageController.refreshPageTitle();\\n    },\\n\\n    /* Check if any scheduled update */\\n    checkUpdateQueue: function checkUpdateQueue() {\\n        if (this._updateQueue.length > 0) {\\n            /* Filter repeated updates */\\n            this._updateQueue = [];\\n            this.getNotificationBadge();\\n        }\\n    },\\n\\n    /* Check update interval */\\n    processUpdateQueue: function processUpdateQueue() {\\n        var now = new Date().getTime();\\n        if (!this._lastBadgetTs || now - this._lastBadgetTs >= this._minBadgeInterval) {\\n            this.checkUpdateQueue();\\n        }\\n    },\\n\\n    /* Put a update task to queue and wait for execution */\\n    addRegularLongPolling: function addRegularLongPolling() {\\n        this.putToUpdateQueue({});\\n    },\\n\\n    scheduleRegularLongPolling: function scheduleRegularLongPolling() {\\n        this.addRegularLongPolling();\\n        this._regularLongPollingInterval = this._regularLongPollingInterval * 1.5;\\n        setTimeout(this.scheduleRegularLongPolling.bind(this), this._regularLongPollingInterval);\\n    },\\n\\n    /* Regular check update queue and schedule regular update */\\n    _initBadgeUpdate: function _initBadgeUpdate() {\\n        setInterval(this.processUpdateQueue.bind(this), this._checkUpdateQueueInterval);\\n        setTimeout(this.scheduleRegularLongPolling.bind(this), this._regularLongPollingInterval);\\n    }\\n\\n});\\n\\nmodule.exports = PushController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(10), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/push.js\\n// module id = 416\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/push.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils, Configs, ModuleFactory, GA) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar WebNotiController = $.extend({}, new _base2.default(), {\\n\\n    COOKIE_SLEEP_KEY: 'webnoti_sleep',\\n\\n    init: function init() {},\\n\\n    requestPermission: function requestPermission(message) {\\n        Notification.requestPermission(function (status) {\\n            // This allows to use Notification.permission with Chrome/Safari\\n            if (Notification.permission !== status) {\\n                Notification.permission = status;\\n            }\\n\\n            if (message && Notification.permission === \\\"granted\\\") {\\n                WebNotiController.initNotification(message);\\n            }\\n        });\\n    },\\n\\n    show: function show(message) {\\n\\n        if (!window.Notification) {\\n            LogUtils.log('No notification');\\n            return;\\n        }\\n\\n        if (Notification.permission === \\\"granted\\\") {\\n            this.initNotification(message);\\n            return;\\n        }\\n\\n        if (Notification.permission !== \\\"denied\\\") {\\n            this.requestPermission(message);\\n        }\\n    },\\n\\n    initNotification: function initNotification(message) {\\n\\n        var cookie = $.cookie(this.COOKIE_SLEEP_KEY);\\n        if (cookie) {\\n            LogUtils.log('WebNoti skipped');\\n            //#7022 GA.track('Notification-Web', 'Skipped', '', 0);\\n            return;\\n        }\\n\\n        var n = new Notification(message, {\\n            tag: 'nineGAGNotification',\\n            icon: Configs.get('page.assets_url') + '/logo-noti-black.png'\\n        });\\n        n.onclick = this.clickHandler;\\n        n.onclose = this.closeHandler;\\n        n.onerror = this.errorHandler;\\n    },\\n\\n    clickHandler: function clickHandler(e) {\\n\\n        try {\\n            ModuleFactory.PageController.showMenu(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_ITEM);\\n            $(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_MENU).addClass('menu');\\n            $(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_MENU + ' a').addClass('selected');\\n            $(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_ITEM).data('plugin_tinyscrollbar').update({ invertscroll: true });\\n            ModuleFactory.PageController.markNotificationsAsRead();\\n            ModuleFactory.PageController.hidePopupMenu(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_ITEM);\\n\\n            window.focus();\\n            $('html, body').animate({\\n                scrollTop: $(ModuleFactory.PageController.selectors.HEADER_NOTIFICATION_ITEM).offset().top\\n            }, 200);\\n            GA.track('PushNoti', 'OpenNoti');\\n        } catch (err) {\\n            LogUtils.log(err.message);\\n        }\\n    },\\n\\n    closeHandler: function closeHandler(e) {\\n        var date = new Date();\\n        date.setTime(date.getTime() + Configs.get('page.webNotiSleepTtl') * 1000);\\n        $.cookie(WebNotiController.COOKIE_SLEEP_KEY, 1, { path: '/', expires: date });\\n        GA.track('PushNoti', 'CloseNoti');\\n    },\\n\\n    errorHandler: function errorHandler(e) {}\\n\\n}); /*\\n        General controller for Web Notification\\n        https://developer.mozilla.org/en-US/docs/Web/API/Notification/Using_Web_Notifications#Tag_example\\n     */\\n\\n\\nmodule.exports = WebNotiController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(18), __webpack_require__(26), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/web-noti.js\\n// module id = 417\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/web-noti.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {\\\"use strict\\\";\\n\\nvar ComScore = {\\n\\n    firePageviewCandidate: function firePageviewCandidate() {\\n\\n        if (typeof window.COMSCORE != 'undefined') {\\n            window.COMSCORE.beacon({\\n                c1: \\\"2\\\",\\n                c2: \\\"22471533\\\"\\n            });\\n\\n            $.ajax({\\n                url: '/static/pv.xml',\\n                dataType: 'xml',\\n                type: 'GET'\\n            });\\n        }\\n    }\\n};\\n\\nmodule.exports = ComScore;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/ComScore.js\\n// module id = 418\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/ComScore.js?\")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {\"use strict\";\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Validator = {\\n    isValidLoginKey: function isValidLoginKey(usernameOrEmail) {\\n        return this.isValidUsername(usernameOrEmail) || this.isValidEmail(usernameOrEmail);\\n    },\\n\\n    isValidUsername: function isValidUsername(username) {\\n        return username.test(\"^[0-9a-zA-Z_]{3,15}$\");\\n    },\\n\\n    isValidEmail: function isValidEmail(email) {\\n        return email.match(\"^([a-zA-Z0-9._-]+)@([a-zA-Z0-9.-]+)\\\\\\\\.([a-zA-Z]{2,4})$\") != null;\\n    },\\n\\n    isValidFullName: function isValidFullName(fullName) {\\n        return $.trim(fullName).length > 0;\\n    },\\n\\n    isValidPassword: function isValidPassword(password, min, max) {\\n        var isValid = true;\\n        if (min != undefined) {\\n            if (password.length < min) {\\n                isValid = false;\\n            }\\n        }\\n        if (max != undefined) {\\n            if (password.length > max) {\\n                isValid = false;\\n            }\\n        }\\n        if (password.length == 0) {\\n            isValid = false;\\n        }\\n        return isValid;\\n    },\\n\\n    isValidGender: function isValidGender(gender) {\\n        return gender == \\'F\\' || gender == \\'M\\';\\n    },\\n\\n    MONTH_DAYS: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\\n\\n    isValidDateValues: function isValidDateValues(dobYear, dobMonth, dobDay) {\\n        var isLeap = dobYear % 400 == 0 || dobYear % 100 != 0 && dobYear % 4 == 0;\\n        this.MONTH_DAYS[1] = isLeap ? 29 : 28;\\n        var validRange = dobDay >= 1 && dobDay <= 31 && dobMonth >= 1 && dobMonth <= 12 && dobYear >= 1900;\\n        var validDay = dobDay <= this.MONTH_DAYS[dobMonth - 1];\\n        return validRange && validDay;\\n    },\\n\\n    isValidPostLink: function isValidPostLink(url) {\\n        var pattern = new RegExp(\"^http(s?)://\" + _page2.default.getDomain() + \"/gag/([1-9])([0-9]*)(\\\\\\\\?[^ ]*)?$\");\\n        return url.trim().test(pattern);\\n    },\\n\\n    lookLikeURL: function lookLikeURL(url) {\\n        var pattern = new RegExp(\"^http(s?)://\");\\n        return url.trim().test(pattern);\\n    }\\n};\\n\\nmodule.exports = Validator;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/validator.js\\n// module id = 419\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/validator.js?')},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _abstract = __webpack_require__(130);\\n\\nvar _abstract2 = _interopRequireDefault(_abstract);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserUploadModel = $.extend({}, _abstract2.default, {\\n\\n    cacheKey: 'cacheableUserUpload',\\n    cacheTTL: 1800,\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        return { action: 'user-upload', params: {} };\\n    },\\n\\n    /**\\n     * @param username {username}\\n     */\\n    get: function get() {\\n        return this.getFromCache();\\n    },\\n\\n    addToCache: function addToCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    }\\n}); /* \\n     A model for handling user uploaded posts between client and server\\n     */\\n\\n\\nmodule.exports = CacheableUserUploadModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/user-upload.js\\n// module id = 420\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/user-upload.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs) {'use strict';\\n\\nvar GPlus = {\\n\\n    btnClicked: false,\\n    _asyncInited: false,\\n    _renderQueue: [],\\n\\n    init: function init() {\\n        this._checkAsyncInit();\\n    },\\n\\n    _checkAsyncInit: function _checkAsyncInit() {\\n        if (typeof gapi !== \\\"undefined\\\") {\\n            this.asyncInit();\\n        } else {\\n            setTimeout($.proxy(this._checkAsyncInit, this), 100);\\n        }\\n    },\\n\\n    asyncInit: function asyncInit() {\\n        this._asyncInited = true;\\n        this._executeQueue();\\n    },\\n\\n    renderButton: function renderButton(elementId, callback) {\\n        var options = this._getRenderOptions();\\n        options['callback'] = callback;\\n\\n        if (this._asyncInited) {\\n            gapi.signin.render(elementId, options);\\n        } else {\\n            this._renderQueue.push({ 'domId': elementId, 'options': options });\\n        }\\n    },\\n\\n    _executeQueue: function _executeQueue() {\\n        while (this._renderQueue.length > 0) {\\n            var item = this._renderQueue.shift();\\n            gapi.signin.render(item['domId'], item['options']);\\n        }\\n    },\\n\\n    _getRenderOptions: function _getRenderOptions() {\\n        var options = {\\n            'clientid': Configs.get('configs.gplus.client_id'),\\n            'cookiepolicy': 'single_host_origin',\\n            'accesstype': 'offline',\\n            'scope': 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/userinfo.email'\\n        };\\n        var apppackagename = Configs.get('configs.gplus.app_package_name');\\n        if (apppackagename) {\\n            options['apppackagename'] = apppackagename;\\n        }\\n        return options;\\n    }\\n\\n};\\n\\nmodule.exports = GPlus;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/gplus.js\\n// module id = 421\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/gplus.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(LogUtils) {'use strict';\\n\\nvar _response = __webpack_require__(869);\\n\\nvar _response2 = _interopRequireDefault(_response);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar BaseObject = function BaseObject() {\\n    this._namespace = '';\\n};\\n\\nBaseObject.prototype.setNamespace = function (namespace) {\\n    this._namespace = namespace;\\n};\\n\\nBaseObject.prototype.log = function (msg, prependText) {\\n    LogUtils.log(this._namespace + ' ' + (prependText ? prependText + ' ' : '') + msg);\\n};\\n\\nBaseObject.prototype.failed = function (msg) {\\n    return new _response2.default().failed(msg);\\n};\\n\\nBaseObject.prototype.succeeded = function (msg) {\\n    return new _response2.default().succeeded(msg);\\n};\\n\\nmodule.exports = BaseObject;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/object.js\\n// module id = 422\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/object.js?\")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($, Configs) {\\'use strict\\';\\n\\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\\n\\n/**\\n * Load toast message from cookie and return one toast message\\n * @return Object ( (string) color , (string) msg)\\n */\\nvar Toast = function () {\\n\\n    var _self = {\\n        _toastMsgCookieKey: \\'toastMsg\\',\\n        init: function init() {},\\n        getToast: function getToast() {\\n            // save check whether cookie is enabled\\n            if (!navigator.cookieEnabled) {\\n                return {};\\n            }\\n            // get the toast from cookie and remove it right afterwards\\n            var toastCode = $.cookie(_self._toastMsgCookieKey);\\n            $.cookie(_self._toastMsgCookieKey, 0, { expires: -1, domain: Configs.get(\\'page.cookie_domain\\'), path: \\'/\\' });\\n            if (!toastCode) return {};\\n            // explode and save to array\\n            toastCode = toastCode.split(\\',\\');\\n            // currently we support only 1 toast message due to html/css supporting only 1\\n            if (toastCode.length == 0) {\\n                return {};\\n            }\\n            toastCode = toastCode[0];\\n            var toastMessage = _self.mapToastCode(toastCode);\\n            if (typeof toastMessage !== \\'undefined\\') {\\n                return toastMessage;\\n            }\\n            return {};\\n        },\\n\\n        mapToastCode: function mapToastCode(toastCode) {\\n            var color = _self.COLOR;\\n            var text = _self.TEXT;\\n            var mapping = _self.MAPPING;\\n\\n            var message = {\\n                \\'SAFE_MODE_DISABLED\\': {\\n                    \"color\": color.COLOR_RED,\\n                    \"text\": text.SAFE_MODE_DISABLED\\n                },\\n                \\'POST_REMOVED\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.POST_REMOVED\\n                },\\n                \\'WELCOME_BACK\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.WELCOME_BACK\\n                },\\n                \\'WELCOME_TO_9GAG\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.WELCOME_TO_9GAG\\n                },\\n                \\'POST_DELETED\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.POST_DELETED\\n                },\\n                \\'POST_DISASSOCIATED\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.POST_DISASSOCIATED\\n                },\\n                \\'PROFILE_SETTING_SAVED\\': {\\n                    \"color\": color.COLOR_GREEN,\\n                    \"text\": text.PROFILE_SETTING_SAVED\\n                },\\n                \\'PROFILE_SETTING_ERROR\\': {\\n                    \"color\": color.COLOR_RED,\\n                    \"text\": text.PROFILE_SETTING_ERROR\\n                },\\n                \\'PROFILE_LANGUAGE_CHANGED\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.PROFILE_LANGUAGE_CHANGED\\n                },\\n                \\'CONTACT_FORM_SENT\\': {\\n                    \"color\": color.COLOR_GREEN,\\n                    \"text\": text.CONTACT_FORM_SENT\\n                },\\n                \\'CONTACT_FORM_ERROR\\': {\\n                    \"color\": color.COLOR_RED,\\n                    \"text\": text.CONTACT_FORM_ERROR\\n                },\\n                \\'LOGIN_FAILED\\': {\\n                    \"color\": color.COLOR_RED,\\n                    \"text\": text.LOGIN_FAILED\\n                },\\n                \\'PRIVACY_SETTING_NOTICE\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.PRIVACY_SETTING_NOTICE\\n                },\\n                \\'ACCOUNT_DELETED\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.ACCOUNT_DELETED\\n                },\\n                \\'ACCOUNT_CONFIRM_SENT\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.ACCOUNT_CONFIRM_SENT\\n                },\\n                \\'ACCOUNT_CONFIRM_ERROR\\': {\\n                    \"color\": color.COLOR_RED,\\n                    \"text\": text.ACCOUNT_CONFIRM_ERROR\\n                },\\n                \\'ACCOUNT_VERFIY_ERROR\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.ACCOUNT_VERIFY_ERROR\\n                },\\n                \\'SITE_READ_ONLY_MODE\\': {\\n                    \"color\": color.COLOR_YELLOW,\\n                    \"text\": text.SITE_READ_ONLY_MODE\\n                }\\n            };\\n\\n            if (!_typeof(mapping[toastCode]) !== \\'undefined\\') {\\n                return message[mapping[toastCode]];\\n            }\\n        },\\n\\n        COLOR: {\\n            COLOR_RED: \\'red\\',\\n            COLOR_YELLOW: \\'yellow\\',\\n            COLOR_GREEN: \\'green\\',\\n            COLOR_BLUE: \\'blue\\'\\n        },\\n\\n        TEXT: {\\n            SAFE_MODE_DISABLED: \"NSFW Posts are shown\",\\n            POST_REMOVED: \"Ooooops! The post you\\'re looking for has been reported by the community and removed.\",\\n            WELCOME_BACK: \"Awww Yeah! Welcome back.\",\\n            WELCOME_TO_9GAG: \"Me Gusta! Welcome to 9GAG, go have fun now!\",\\n            POST_DELETED: \"The post is removed.\",\\n            POST_DISASSOCIATED: \"The post is removed from your profile.\",\\n            PROFILE_SETTING_SAVED: \"Your settings have been saved.\",\\n            PROFILE_SETTING_ERROR: \"Ooooops! There is an error.\",\\n            PROFILE_LANGUAGE_CHANGED: \"Language have been changed.\",\\n            CONTACT_FORM_SENT: \"Your email has been sent.\",\\n            CONTACT_FORM_ERROR: \"Ooooops! There is an error.\",\\n            LOGIN_FAILED: \"Ooooops! There is an error logging in.\",\\n            PRIVACY_SETTING_NOTICE: \"You can now control your profile privacy in settings.\",\\n            ACCOUNT_DELETED: \"Your account has been deleted.\",\\n            ACCOUNT_CONFIRM_SENT: \"A confirmation message has been sent.\",\\n            ACCOUNT_CONFIRM_ERROR: \"There was a problem sending the confirmation message.\",\\n            ACCOUNT_VERIFY_ERROR: \"There was a problem verifying your email.\",\\n            SITE_READ_ONLY_MODE: \\'9GAG is undergoing maintenance right now. Sign-up and Upload will be back shortly.\\'\\n        },\\n\\n        MAPPING: {\\n            1: \\'SAFE_MODE_DISABLED\\',\\n            2: \\'WELCOME_BACK\\',\\n            3: \\'POST_REMOVED\\',\\n            4: \\'WELCOME_TO_9GAG\\',\\n            5: \\'POST_DELETED\\',\\n            6: \\'POST_DISASSOCIATED\\',\\n            7: \\'PROFILE_SETTING_SAVED\\',\\n            8: \\'PROFILE_SETTING_ERROR\\',\\n            9: \\'PROFILE_LANGUAGE_CHANGED\\',\\n            10: \\'CONTACT_FORM_SENT\\',\\n            11: \\'CONTACT_FORM_ERROR\\',\\n            12: \\'LOGIN_FAILED\\',\\n            13: \\'PRIVACY_SETTING_NOTICE\\',\\n            14: \\'ACCOUNT_DELETED\\',\\n            15: \\'ACCOUNT_CONFIRM_SENT\\',\\n            16: \\'ACCOUNT_CONFIRM_ERROR\\',\\n            18: \\'ACCOUNT_VERFIY_ERROR\\',\\n            17: \\'SITE_READ_ONLY_MODE\\'\\n        }\\n    };\\n    return {\\n        init: _self.init,\\n        getToast: _self.getToast\\n    };\\n}();\\n\\nmodule.exports = Toast;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/toast.js\\n// module id = 423\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/toast.js?')},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Utils) {'use strict';\\n\\nvar _base = __webpack_require__(129);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Vote = $.extend({}, new _base2.default(), {\\n\\n\\tAPI: {\\n\\t\\tURL_LIKE: '/vote/like',\\n\\t\\tURL_DISLIKE: '/vote/dislike',\\n\\t\\tURL_UNLIKE: '/vote/unlike'\\n\\t},\\n\\n\\t_requests: {},\\n\\n\\t_isRequesting: false,\\n\\n\\tinit: function init() {},\\n\\n\\t/*\\n     Submit AJAX call to server \\n     okHandler is called once with doPostAction=FASLE before submit (e.g. have visual effect),\\n     okHandler or failHandler would be called with doPostAction=TRUE after the request is completed.\\n */\\n\\t_submitRequest: function _submitRequest(url, entryId, okHandler, failHandler) {\\n\\t\\tvar _self = this;\\n\\n\\t\\tif (entryId === undefined) return;\\n\\t\\t//##*if (!User.isLoggedIn(true, Page.getBackUrl())) return;\\n\\n\\t\\t/* Check if there is processing request */\\n\\t\\tif (this._isRequesting) {\\n\\t\\t\\t//this.log('vote request on progress, id=' + entryId);\\n\\t\\t\\t//return;\\n\\t\\t}\\n\\n\\t\\tvar params = { 'id': entryId };\\n\\t\\tvar doPostAction = true;\\n\\n\\t\\t$.ajax({\\n\\t\\t\\ttype: 'POST',\\n\\t\\t\\turl: url,\\n\\t\\t\\tdata: params,\\n\\t\\t\\tbeforeSend: function beforeSend() {\\n\\t\\t\\t\\tthis._isRequesting = true;\\n\\t\\t\\t\\tif (typeof okHandler == 'function') okHandler(entryId);\\n\\t\\t\\t},\\n\\t\\t\\tcomplete: function complete() {\\n\\t\\t\\t\\tthis._isRequesting = false;\\n\\t\\t\\t},\\n\\t\\t\\tsuccess: function success(jsonText) {\\n\\t\\t\\t\\tvar json = Utils.parseJsonString(jsonText);\\n\\t\\t\\t\\tif (json.id && json.msg) {\\n\\t\\t\\t\\t\\tif (typeof okHandler == 'function') okHandler(entryId);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif (typeof failHandler == 'function') failHandler(entryId);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\terror: function error(json) {\\n\\t\\t\\t\\tif (typeof failHandler == 'function') failHandler(entryId);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t/* Public methods */\\n\\tlike: function like(entryId, okHandler, failHandler) {\\n\\t\\tthis._submitRequest(this.API.URL_LIKE, entryId, okHandler, failHandler);\\n\\t},\\n\\n\\tunlike: function unlike(entryId, okHandler, failHandler) {\\n\\t\\tthis._submitRequest(this.API.URL_UNLIKE, entryId, okHandler, failHandler);\\n\\t},\\n\\n\\tdislike: function dislike(entryId, okHandler, failHandler) {\\n\\t\\tthis._submitRequest(this.API.URL_DISLIKE, entryId, okHandler, failHandler);\\n\\t}\\n\\n}); /* \\n        A model for handling AJAX voting actions between client and server\\n    */\\n\\n\\nmodule.exports = Vote;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(80)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/vote.js\\n// module id = 424\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/vote.js?\");\n},,function(module,exports,__webpack_require__){eval('var jQuery = __webpack_require__(3);\\n__webpack_require__(253);\\n__webpack_require__(254);\\n__webpack_require__(427);\\n\\n/*!\\n * jQuery UI Menu 1.10.4\\n * http://jqueryui.com\\n *\\n * Copyright 2014 jQuery Foundation and other contributors\\n * Released under the MIT license.\\n * http://jquery.org/license\\n *\\n * http://api.jqueryui.com/menu/\\n *\\n * Depends:\\n *\\tjquery.ui.core.js\\n *\\tjquery.ui.widget.js\\n *\\tjquery.ui.position.js\\n */\\n(function( $, undefined ) {\\n\\n$.widget( \"ui.menu\", {\\n\\tversion: \"1.10.4\",\\n\\tdefaultElement: \"<ul>\",\\n\\tdelay: 300,\\n\\toptions: {\\n\\t\\ticons: {\\n\\t\\t\\tsubmenu: \"ui-icon-carat-1-e\"\\n\\t\\t},\\n\\t\\tmenus: \"ul\",\\n\\t\\tposition: {\\n\\t\\t\\tmy: \"left top\",\\n\\t\\t\\tat: \"right top\"\\n\\t\\t},\\n\\t\\trole: \"menu\",\\n\\n\\t\\t// callbacks\\n\\t\\tblur: null,\\n\\t\\tfocus: null,\\n\\t\\tselect: null\\n\\t},\\n\\n\\t_create: function() {\\n\\t\\tthis.activeMenu = this.element;\\n\\t\\t// flag used to prevent firing of the click handler\\n\\t\\t// as the event bubbles up through nested menus\\n\\t\\tthis.mouseHandled = false;\\n\\t\\tthis.element\\n\\t\\t\\t.uniqueId()\\n\\t\\t\\t.addClass( \"ui-menu ui-widget ui-widget-content ui-corner-all\" )\\n\\t\\t\\t.toggleClass( \"ui-menu-icons\", !!this.element.find( \".ui-icon\" ).length )\\n\\t\\t\\t.attr({\\n\\t\\t\\t\\trole: this.options.role,\\n\\t\\t\\t\\ttabIndex: 0\\n\\t\\t\\t})\\n\\t\\t\\t// need to catch all clicks on disabled menu\\n\\t\\t\\t// not possible through _on\\n\\t\\t\\t.bind( \"click\" + this.eventNamespace, $.proxy(function( event ) {\\n\\t\\t\\t\\tif ( this.options.disabled ) {\\n\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, this ));\\n\\n\\t\\tif ( this.options.disabled ) {\\n\\t\\t\\tthis.element\\n\\t\\t\\t\\t.addClass( \"ui-state-disabled\" )\\n\\t\\t\\t\\t.attr( \"aria-disabled\", \"true\" );\\n\\t\\t}\\n\\n\\t\\tthis._on({\\n\\t\\t\\t// Prevent focus from sticking to links inside menu after clicking\\n\\t\\t\\t// them (focus should always stay on UL during navigation).\\n\\t\\t\\t\"mousedown .ui-menu-item > a\": function( event ) {\\n\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t},\\n\\t\\t\\t\"click .ui-state-disabled > a\": function( event ) {\\n\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t},\\n\\t\\t\\t\"click .ui-menu-item:has(a)\": function( event ) {\\n\\t\\t\\t\\tvar target = $( event.target ).closest( \".ui-menu-item\" );\\n\\t\\t\\t\\tif ( !this.mouseHandled && target.not( \".ui-state-disabled\" ).length ) {\\n\\t\\t\\t\\t\\tthis.select( event );\\n\\n\\t\\t\\t\\t\\t// Only set the mouseHandled flag if the event will bubble, see #9469.\\n\\t\\t\\t\\t\\tif ( !event.isPropagationStopped() ) {\\n\\t\\t\\t\\t\\t\\tthis.mouseHandled = true;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Open submenu on click\\n\\t\\t\\t\\t\\tif ( target.has( \".ui-menu\" ).length ) {\\n\\t\\t\\t\\t\\t\\tthis.expand( event );\\n\\t\\t\\t\\t\\t} else if ( !this.element.is( \":focus\" ) && $( this.document[ 0 ].activeElement ).closest( \".ui-menu\" ).length ) {\\n\\n\\t\\t\\t\\t\\t\\t// Redirect focus to the menu\\n\\t\\t\\t\\t\\t\\tthis.element.trigger( \"focus\", [ true ] );\\n\\n\\t\\t\\t\\t\\t\\t// If the active item is on the top level, let it stay active.\\n\\t\\t\\t\\t\\t\\t// Otherwise, blur the active item since it is no longer visible.\\n\\t\\t\\t\\t\\t\\tif ( this.active && this.active.parents( \".ui-menu\" ).length === 1 ) {\\n\\t\\t\\t\\t\\t\\t\\tclearTimeout( this.timer );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\"mouseenter .ui-menu-item\": function( event ) {\\n\\t\\t\\t\\tvar target = $( event.currentTarget );\\n\\t\\t\\t\\t// Remove ui-state-active class from siblings of the newly focused menu item\\n\\t\\t\\t\\t// to avoid a jump caused by adjacent elements both having a class with a border\\n\\t\\t\\t\\ttarget.siblings().children( \".ui-state-active\" ).removeClass( \"ui-state-active\" );\\n\\t\\t\\t\\tthis.focus( event, target );\\n\\t\\t\\t},\\n\\t\\t\\tmouseleave: \"collapseAll\",\\n\\t\\t\\t\"mouseleave .ui-menu\": \"collapseAll\",\\n\\t\\t\\tfocus: function( event, keepActiveItem ) {\\n\\t\\t\\t\\t// If there\\'s already an active item, keep it active\\n\\t\\t\\t\\t// If not, activate the first item\\n\\t\\t\\t\\tvar item = this.active || this.element.children( \".ui-menu-item\" ).eq( 0 );\\n\\n\\t\\t\\t\\tif ( !keepActiveItem ) {\\n\\t\\t\\t\\t\\tthis.focus( event, item );\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tblur: function( event ) {\\n\\t\\t\\t\\tthis._delay(function() {\\n\\t\\t\\t\\t\\tif ( !$.contains( this.element[0], this.document[0].activeElement ) ) {\\n\\t\\t\\t\\t\\t\\tthis.collapseAll( event );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\tkeydown: \"_keydown\"\\n\\t\\t});\\n\\n\\t\\tthis.refresh();\\n\\n\\t\\t// Clicks outside of a menu collapse any open menus\\n\\t\\tthis._on( this.document, {\\n\\t\\t\\tclick: function( event ) {\\n\\t\\t\\t\\tif ( !$( event.target ).closest( \".ui-menu\" ).length ) {\\n\\t\\t\\t\\t\\tthis.collapseAll( event );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Reset the mouseHandled flag\\n\\t\\t\\t\\tthis.mouseHandled = false;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t_destroy: function() {\\n\\t\\t// Destroy (sub)menus\\n\\t\\tthis.element\\n\\t\\t\\t.removeAttr( \"aria-activedescendant\" )\\n\\t\\t\\t.find( \".ui-menu\" ).addBack()\\n\\t\\t\\t\\t.removeClass( \"ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons\" )\\n\\t\\t\\t\\t.removeAttr( \"role\" )\\n\\t\\t\\t\\t.removeAttr( \"tabIndex\" )\\n\\t\\t\\t\\t.removeAttr( \"aria-labelledby\" )\\n\\t\\t\\t\\t.removeAttr( \"aria-expanded\" )\\n\\t\\t\\t\\t.removeAttr( \"aria-hidden\" )\\n\\t\\t\\t\\t.removeAttr( \"aria-disabled\" )\\n\\t\\t\\t\\t.removeUniqueId()\\n\\t\\t\\t\\t.show();\\n\\n\\t\\t// Destroy menu items\\n\\t\\tthis.element.find( \".ui-menu-item\" )\\n\\t\\t\\t.removeClass( \"ui-menu-item\" )\\n\\t\\t\\t.removeAttr( \"role\" )\\n\\t\\t\\t.removeAttr( \"aria-disabled\" )\\n\\t\\t\\t.children( \"a\" )\\n\\t\\t\\t\\t.removeUniqueId()\\n\\t\\t\\t\\t.removeClass( \"ui-corner-all ui-state-hover\" )\\n\\t\\t\\t\\t.removeAttr( \"tabIndex\" )\\n\\t\\t\\t\\t.removeAttr( \"role\" )\\n\\t\\t\\t\\t.removeAttr( \"aria-haspopup\" )\\n\\t\\t\\t\\t.children().each( function() {\\n\\t\\t\\t\\t\\tvar elem = $( this );\\n\\t\\t\\t\\t\\tif ( elem.data( \"ui-menu-submenu-carat\" ) ) {\\n\\t\\t\\t\\t\\t\\telem.remove();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\n\\t\\t// Destroy menu dividers\\n\\t\\tthis.element.find( \".ui-menu-divider\" ).removeClass( \"ui-menu-divider ui-widget-content\" );\\n\\t},\\n\\n\\t_keydown: function( event ) {\\n\\t\\tvar match, prev, character, skip, regex,\\n\\t\\t\\tpreventDefault = true;\\n\\n\\t\\tfunction escape( value ) {\\n\\t\\t\\treturn value.replace( /[\\\\-\\\\[\\\\]{}()*+?.,\\\\\\\\\\\\^$|#\\\\s]/g, \"\\\\\\\\$&\" );\\n\\t\\t}\\n\\n\\t\\tswitch ( event.keyCode ) {\\n\\t\\tcase $.ui.keyCode.PAGE_UP:\\n\\t\\t\\tthis.previousPage( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.PAGE_DOWN:\\n\\t\\t\\tthis.nextPage( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.HOME:\\n\\t\\t\\tthis._move( \"first\", \"first\", event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.END:\\n\\t\\t\\tthis._move( \"last\", \"last\", event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.UP:\\n\\t\\t\\tthis.previous( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.DOWN:\\n\\t\\t\\tthis.next( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.LEFT:\\n\\t\\t\\tthis.collapse( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.RIGHT:\\n\\t\\t\\tif ( this.active && !this.active.is( \".ui-state-disabled\" ) ) {\\n\\t\\t\\t\\tthis.expand( event );\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.ENTER:\\n\\t\\tcase $.ui.keyCode.SPACE:\\n\\t\\t\\tthis._activate( event );\\n\\t\\t\\tbreak;\\n\\t\\tcase $.ui.keyCode.ESCAPE:\\n\\t\\t\\tthis.collapse( event );\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tpreventDefault = false;\\n\\t\\t\\tprev = this.previousFilter || \"\";\\n\\t\\t\\tcharacter = String.fromCharCode( event.keyCode );\\n\\t\\t\\tskip = false;\\n\\n\\t\\t\\tclearTimeout( this.filterTimer );\\n\\n\\t\\t\\tif ( character === prev ) {\\n\\t\\t\\t\\tskip = true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcharacter = prev + character;\\n\\t\\t\\t}\\n\\n\\t\\t\\tregex = new RegExp( \"^\" + escape( character ), \"i\" );\\n\\t\\t\\tmatch = this.activeMenu.children( \".ui-menu-item\" ).filter(function() {\\n\\t\\t\\t\\treturn regex.test( $( this ).children( \"a\" ).text() );\\n\\t\\t\\t});\\n\\t\\t\\tmatch = skip && match.index( this.active.next() ) !== -1 ?\\n\\t\\t\\t\\tthis.active.nextAll( \".ui-menu-item\" ) :\\n\\t\\t\\t\\tmatch;\\n\\n\\t\\t\\t// If no matches on the current filter, reset to the last character pressed\\n\\t\\t\\t// to move down the menu to the first item that starts with that character\\n\\t\\t\\tif ( !match.length ) {\\n\\t\\t\\t\\tcharacter = String.fromCharCode( event.keyCode );\\n\\t\\t\\t\\tregex = new RegExp( \"^\" + escape( character ), \"i\" );\\n\\t\\t\\t\\tmatch = this.activeMenu.children( \".ui-menu-item\" ).filter(function() {\\n\\t\\t\\t\\t\\treturn regex.test( $( this ).children( \"a\" ).text() );\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( match.length ) {\\n\\t\\t\\t\\tthis.focus( event, match );\\n\\t\\t\\t\\tif ( match.length > 1 ) {\\n\\t\\t\\t\\t\\tthis.previousFilter = character;\\n\\t\\t\\t\\t\\tthis.filterTimer = this._delay(function() {\\n\\t\\t\\t\\t\\t\\tdelete this.previousFilter;\\n\\t\\t\\t\\t\\t}, 1000 );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdelete this.previousFilter;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdelete this.previousFilter;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( preventDefault ) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t}\\n\\t},\\n\\n\\t_activate: function( event ) {\\n\\t\\tif ( !this.active.is( \".ui-state-disabled\" ) ) {\\n\\t\\t\\tif ( this.active.children( \"a[aria-haspopup=\\'true\\']\" ).length ) {\\n\\t\\t\\t\\tthis.expand( event );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.select( event );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\trefresh: function() {\\n\\t\\tvar menus,\\n\\t\\t\\ticon = this.options.icons.submenu,\\n\\t\\t\\tsubmenus = this.element.find( this.options.menus );\\n\\n\\t\\tthis.element.toggleClass( \"ui-menu-icons\", !!this.element.find( \".ui-icon\" ).length );\\n\\n\\t\\t// Initialize nested menus\\n\\t\\tsubmenus.filter( \":not(.ui-menu)\" )\\n\\t\\t\\t.addClass( \"ui-menu ui-widget ui-widget-content ui-corner-all\" )\\n\\t\\t\\t.hide()\\n\\t\\t\\t.attr({\\n\\t\\t\\t\\trole: this.options.role,\\n\\t\\t\\t\\t\"aria-hidden\": \"true\",\\n\\t\\t\\t\\t\"aria-expanded\": \"false\"\\n\\t\\t\\t})\\n\\t\\t\\t.each(function() {\\n\\t\\t\\t\\tvar menu = $( this ),\\n\\t\\t\\t\\t\\titem = menu.prev( \"a\" ),\\n\\t\\t\\t\\t\\tsubmenuCarat = $( \"<span>\" )\\n\\t\\t\\t\\t\\t\\t.addClass( \"ui-menu-icon ui-icon \" + icon )\\n\\t\\t\\t\\t\\t\\t.data( \"ui-menu-submenu-carat\", true );\\n\\n\\t\\t\\t\\titem\\n\\t\\t\\t\\t\\t.attr( \"aria-haspopup\", \"true\" )\\n\\t\\t\\t\\t\\t.prepend( submenuCarat );\\n\\t\\t\\t\\tmenu.attr( \"aria-labelledby\", item.attr( \"id\" ) );\\n\\t\\t\\t});\\n\\n\\t\\tmenus = submenus.add( this.element );\\n\\n\\t\\t// Don\\'t refresh list items that are already adapted\\n\\t\\tmenus.children( \":not(.ui-menu-item):has(a)\" )\\n\\t\\t\\t.addClass( \"ui-menu-item\" )\\n\\t\\t\\t.attr( \"role\", \"presentation\" )\\n\\t\\t\\t.children( \"a\" )\\n\\t\\t\\t\\t.uniqueId()\\n\\t\\t\\t\\t.addClass( \"ui-corner-all\" )\\n\\t\\t\\t\\t.attr({\\n\\t\\t\\t\\t\\ttabIndex: -1,\\n\\t\\t\\t\\t\\trole: this._itemRole()\\n\\t\\t\\t\\t});\\n\\n\\t\\t// Initialize unlinked menu-items containing spaces and/or dashes only as dividers\\n\\t\\tmenus.children( \":not(.ui-menu-item)\" ).each(function() {\\n\\t\\t\\tvar item = $( this );\\n\\t\\t\\t// hyphen, em dash, en dash\\n\\t\\t\\tif ( !/[^\\\\-\\\\u2014\\\\u2013\\\\s]/.test( item.text() ) ) {\\n\\t\\t\\t\\titem.addClass( \"ui-widget-content ui-menu-divider\" );\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\t// Add aria-disabled attribute to any disabled menu item\\n\\t\\tmenus.children( \".ui-state-disabled\" ).attr( \"aria-disabled\", \"true\" );\\n\\n\\t\\t// If the active item has been removed, blur the menu\\n\\t\\tif ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {\\n\\t\\t\\tthis.blur();\\n\\t\\t}\\n\\t},\\n\\n\\t_itemRole: function() {\\n\\t\\treturn {\\n\\t\\t\\tmenu: \"menuitem\",\\n\\t\\t\\tlistbox: \"option\"\\n\\t\\t}[ this.options.role ];\\n\\t},\\n\\n\\t_setOption: function( key, value ) {\\n\\t\\tif ( key === \"icons\" ) {\\n\\t\\t\\tthis.element.find( \".ui-menu-icon\" )\\n\\t\\t\\t\\t.removeClass( this.options.icons.submenu )\\n\\t\\t\\t\\t.addClass( value.submenu );\\n\\t\\t}\\n\\t\\tthis._super( key, value );\\n\\t},\\n\\n\\tfocus: function( event, item ) {\\n\\t\\tvar nested, focused;\\n\\t\\tthis.blur( event, event && event.type === \"focus\" );\\n\\n\\t\\tthis._scrollIntoView( item );\\n\\n\\t\\tthis.active = item.first();\\n\\t\\tfocused = this.active.children( \"a\" ).addClass( \"ui-state-focus\" );\\n\\t\\t// Only update aria-activedescendant if there\\'s a role\\n\\t\\t// otherwise we assume focus is managed elsewhere\\n\\t\\tif ( this.options.role ) {\\n\\t\\t\\tthis.element.attr( \"aria-activedescendant\", focused.attr( \"id\" ) );\\n\\t\\t}\\n\\n\\t\\t// Highlight active parent menu item, if any\\n\\t\\tthis.active\\n\\t\\t\\t.parent()\\n\\t\\t\\t.closest( \".ui-menu-item\" )\\n\\t\\t\\t.children( \"a:first\" )\\n\\t\\t\\t.addClass( \"ui-state-active\" );\\n\\n\\t\\tif ( event && event.type === \"keydown\" ) {\\n\\t\\t\\tthis._close();\\n\\t\\t} else {\\n\\t\\t\\tthis.timer = this._delay(function() {\\n\\t\\t\\t\\tthis._close();\\n\\t\\t\\t}, this.delay );\\n\\t\\t}\\n\\n\\t\\tnested = item.children( \".ui-menu\" );\\n\\t\\tif ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {\\n\\t\\t\\tthis._startOpening(nested);\\n\\t\\t}\\n\\t\\tthis.activeMenu = item.parent();\\n\\n\\t\\tthis._trigger( \"focus\", event, { item: item } );\\n\\t},\\n\\n\\t_scrollIntoView: function( item ) {\\n\\t\\tvar borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\\n\\t\\tif ( this._hasScroll() ) {\\n\\t\\t\\tborderTop = parseFloat( $.css( this.activeMenu[0], \"borderTopWidth\" ) ) || 0;\\n\\t\\t\\tpaddingTop = parseFloat( $.css( this.activeMenu[0], \"paddingTop\" ) ) || 0;\\n\\t\\t\\toffset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\\n\\t\\t\\tscroll = this.activeMenu.scrollTop();\\n\\t\\t\\telementHeight = this.activeMenu.height();\\n\\t\\t\\titemHeight = item.height();\\n\\n\\t\\t\\tif ( offset < 0 ) {\\n\\t\\t\\t\\tthis.activeMenu.scrollTop( scroll + offset );\\n\\t\\t\\t} else if ( offset + itemHeight > elementHeight ) {\\n\\t\\t\\t\\tthis.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\tblur: function( event, fromFocus ) {\\n\\t\\tif ( !fromFocus ) {\\n\\t\\t\\tclearTimeout( this.timer );\\n\\t\\t}\\n\\n\\t\\tif ( !this.active ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.active.children( \"a\" ).removeClass( \"ui-state-focus\" );\\n\\t\\tthis.active = null;\\n\\n\\t\\tthis._trigger( \"blur\", event, { item: this.active } );\\n\\t},\\n\\n\\t_startOpening: function( submenu ) {\\n\\t\\tclearTimeout( this.timer );\\n\\n\\t\\t// Don\\'t open if already open fixes a Firefox bug that caused a .5 pixel\\n\\t\\t// shift in the submenu position when mousing over the carat icon\\n\\t\\tif ( submenu.attr( \"aria-hidden\" ) !== \"true\" ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.timer = this._delay(function() {\\n\\t\\t\\tthis._close();\\n\\t\\t\\tthis._open( submenu );\\n\\t\\t}, this.delay );\\n\\t},\\n\\n\\t_open: function( submenu ) {\\n\\t\\tvar position = $.extend({\\n\\t\\t\\tof: this.active\\n\\t\\t}, this.options.position );\\n\\n\\t\\tclearTimeout( this.timer );\\n\\t\\tthis.element.find( \".ui-menu\" ).not( submenu.parents( \".ui-menu\" ) )\\n\\t\\t\\t.hide()\\n\\t\\t\\t.attr( \"aria-hidden\", \"true\" );\\n\\n\\t\\tsubmenu\\n\\t\\t\\t.show()\\n\\t\\t\\t.removeAttr( \"aria-hidden\" )\\n\\t\\t\\t.attr( \"aria-expanded\", \"true\" )\\n\\t\\t\\t.position( position );\\n\\t},\\n\\n\\tcollapseAll: function( event, all ) {\\n\\t\\tclearTimeout( this.timer );\\n\\t\\tthis.timer = this._delay(function() {\\n\\t\\t\\t// If we were passed an event, look for the submenu that contains the event\\n\\t\\t\\tvar currentMenu = all ? this.element :\\n\\t\\t\\t\\t$( event && event.target ).closest( this.element.find( \".ui-menu\" ) );\\n\\n\\t\\t\\t// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\\n\\t\\t\\tif ( !currentMenu.length ) {\\n\\t\\t\\t\\tcurrentMenu = this.element;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._close( currentMenu );\\n\\n\\t\\t\\tthis.blur( event );\\n\\t\\t\\tthis.activeMenu = currentMenu;\\n\\t\\t}, this.delay );\\n\\t},\\n\\n\\t// With no arguments, closes the currently active menu - if nothing is active\\n\\t// it closes all menus.  If passed an argument, it will search for menus BELOW\\n\\t_close: function( startMenu ) {\\n\\t\\tif ( !startMenu ) {\\n\\t\\t\\tstartMenu = this.active ? this.active.parent() : this.element;\\n\\t\\t}\\n\\n\\t\\tstartMenu\\n\\t\\t\\t.find( \".ui-menu\" )\\n\\t\\t\\t\\t.hide()\\n\\t\\t\\t\\t.attr( \"aria-hidden\", \"true\" )\\n\\t\\t\\t\\t.attr( \"aria-expanded\", \"false\" )\\n\\t\\t\\t.end()\\n\\t\\t\\t.find( \"a.ui-state-active\" )\\n\\t\\t\\t\\t.removeClass( \"ui-state-active\" );\\n\\t},\\n\\n\\tcollapse: function( event ) {\\n\\t\\tvar newItem = this.active &&\\n\\t\\t\\tthis.active.parent().closest( \".ui-menu-item\", this.element );\\n\\t\\tif ( newItem && newItem.length ) {\\n\\t\\t\\tthis._close();\\n\\t\\t\\tthis.focus( event, newItem );\\n\\t\\t}\\n\\t},\\n\\n\\texpand: function( event ) {\\n\\t\\tvar newItem = this.active &&\\n\\t\\t\\tthis.active\\n\\t\\t\\t\\t.children( \".ui-menu \" )\\n\\t\\t\\t\\t.children( \".ui-menu-item\" )\\n\\t\\t\\t\\t.first();\\n\\n\\t\\tif ( newItem && newItem.length ) {\\n\\t\\t\\tthis._open( newItem.parent() );\\n\\n\\t\\t\\t// Delay so Firefox will not hide activedescendant change in expanding submenu from AT\\n\\t\\t\\tthis._delay(function() {\\n\\t\\t\\t\\tthis.focus( event, newItem );\\n\\t\\t\\t});\\n\\t\\t}\\n\\t},\\n\\n\\tnext: function( event ) {\\n\\t\\tthis._move( \"next\", \"first\", event );\\n\\t},\\n\\n\\tprevious: function( event ) {\\n\\t\\tthis._move( \"prev\", \"last\", event );\\n\\t},\\n\\n\\tisFirstItem: function() {\\n\\t\\treturn this.active && !this.active.prevAll( \".ui-menu-item\" ).length;\\n\\t},\\n\\n\\tisLastItem: function() {\\n\\t\\treturn this.active && !this.active.nextAll( \".ui-menu-item\" ).length;\\n\\t},\\n\\n\\t_move: function( direction, filter, event ) {\\n\\t\\tvar next;\\n\\t\\tif ( this.active ) {\\n\\t\\t\\tif ( direction === \"first\" || direction === \"last\" ) {\\n\\t\\t\\t\\tnext = this.active\\n\\t\\t\\t\\t\\t[ direction === \"first\" ? \"prevAll\" : \"nextAll\" ]( \".ui-menu-item\" )\\n\\t\\t\\t\\t\\t.eq( -1 );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnext = this.active\\n\\t\\t\\t\\t\\t[ direction + \"All\" ]( \".ui-menu-item\" )\\n\\t\\t\\t\\t\\t.eq( 0 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif ( !next || !next.length || !this.active ) {\\n\\t\\t\\tnext = this.activeMenu.children( \".ui-menu-item\" )[ filter ]();\\n\\t\\t}\\n\\n\\t\\tthis.focus( event, next );\\n\\t},\\n\\n\\tnextPage: function( event ) {\\n\\t\\tvar item, base, height;\\n\\n\\t\\tif ( !this.active ) {\\n\\t\\t\\tthis.next( event );\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( this.isLastItem() ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( this._hasScroll() ) {\\n\\t\\t\\tbase = this.active.offset().top;\\n\\t\\t\\theight = this.element.height();\\n\\t\\t\\tthis.active.nextAll( \".ui-menu-item\" ).each(function() {\\n\\t\\t\\t\\titem = $( this );\\n\\t\\t\\t\\treturn item.offset().top - base - height < 0;\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.focus( event, item );\\n\\t\\t} else {\\n\\t\\t\\tthis.focus( event, this.activeMenu.children( \".ui-menu-item\" )\\n\\t\\t\\t\\t[ !this.active ? \"first\" : \"last\" ]() );\\n\\t\\t}\\n\\t},\\n\\n\\tpreviousPage: function( event ) {\\n\\t\\tvar item, base, height;\\n\\t\\tif ( !this.active ) {\\n\\t\\t\\tthis.next( event );\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( this.isFirstItem() ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( this._hasScroll() ) {\\n\\t\\t\\tbase = this.active.offset().top;\\n\\t\\t\\theight = this.element.height();\\n\\t\\t\\tthis.active.prevAll( \".ui-menu-item\" ).each(function() {\\n\\t\\t\\t\\titem = $( this );\\n\\t\\t\\t\\treturn item.offset().top - base + height > 0;\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.focus( event, item );\\n\\t\\t} else {\\n\\t\\t\\tthis.focus( event, this.activeMenu.children( \".ui-menu-item\" ).first() );\\n\\t\\t}\\n\\t},\\n\\n\\t_hasScroll: function() {\\n\\t\\treturn this.element.outerHeight() < this.element.prop( \"scrollHeight\" );\\n\\t},\\n\\n\\tselect: function( event ) {\\n\\t\\t// TODO: It should never be possible to not have an active item at this\\n\\t\\t// point, but the tests don\\'t trigger mouseenter before click.\\n\\t\\tthis.active = this.active || $( event.target ).closest( \".ui-menu-item\" );\\n\\t\\tvar ui = { item: this.active };\\n\\t\\tif ( !this.active.has( \".ui-menu\" ).length ) {\\n\\t\\t\\tthis.collapseAll( event, true );\\n\\t\\t}\\n\\t\\tthis._trigger( \"select\", event, ui );\\n\\t}\\n});\\n\\n}( jQuery ));\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery-ui/menu.js\\n// module id = 426\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/jquery-ui/menu.js?')},function(module,exports,__webpack_require__){eval('var jQuery = __webpack_require__(3);\\n\\n/*!\\n * jQuery UI Position 1.10.4\\n * http://jqueryui.com\\n *\\n * Copyright 2014 jQuery Foundation and other contributors\\n * Released under the MIT license.\\n * http://jquery.org/license\\n *\\n * http://api.jqueryui.com/position/\\n */\\n(function( $, undefined ) {\\n\\n$.ui = $.ui || {};\\n\\nvar cachedScrollbarWidth,\\n\\tmax = Math.max,\\n\\tabs = Math.abs,\\n\\tround = Math.round,\\n\\trhorizontal = /left|center|right/,\\n\\trvertical = /top|center|bottom/,\\n\\troffset = /[\\\\+\\\\-]\\\\d+(\\\\.[\\\\d]+)?%?/,\\n\\trposition = /^\\\\w+/,\\n\\trpercent = /%$/,\\n\\t_position = $.fn.position;\\n\\nfunction getOffsets( offsets, width, height ) {\\n\\treturn [\\n\\t\\tparseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),\\n\\t\\tparseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )\\n\\t];\\n}\\n\\nfunction parseCss( element, property ) {\\n\\treturn parseInt( $.css( element, property ), 10 ) || 0;\\n}\\n\\nfunction getDimensions( elem ) {\\n\\tvar raw = elem[0];\\n\\tif ( raw.nodeType === 9 ) {\\n\\t\\treturn {\\n\\t\\t\\twidth: elem.width(),\\n\\t\\t\\theight: elem.height(),\\n\\t\\t\\toffset: { top: 0, left: 0 }\\n\\t\\t};\\n\\t}\\n\\tif ( $.isWindow( raw ) ) {\\n\\t\\treturn {\\n\\t\\t\\twidth: elem.width(),\\n\\t\\t\\theight: elem.height(),\\n\\t\\t\\toffset: { top: elem.scrollTop(), left: elem.scrollLeft() }\\n\\t\\t};\\n\\t}\\n\\tif ( raw.preventDefault ) {\\n\\t\\treturn {\\n\\t\\t\\twidth: 0,\\n\\t\\t\\theight: 0,\\n\\t\\t\\toffset: { top: raw.pageY, left: raw.pageX }\\n\\t\\t};\\n\\t}\\n\\treturn {\\n\\t\\twidth: elem.outerWidth(),\\n\\t\\theight: elem.outerHeight(),\\n\\t\\toffset: elem.offset()\\n\\t};\\n}\\n\\n$.position = {\\n\\tscrollbarWidth: function() {\\n\\t\\tif ( cachedScrollbarWidth !== undefined ) {\\n\\t\\t\\treturn cachedScrollbarWidth;\\n\\t\\t}\\n\\t\\tvar w1, w2,\\n\\t\\t\\tdiv = $( \"<div style=\\'display:block;position:absolute;width:50px;height:50px;overflow:hidden;\\'><div style=\\'height:100px;width:auto;\\'></div></div>\" ),\\n\\t\\t\\tinnerDiv = div.children()[0];\\n\\n\\t\\t$( \"body\" ).append( div );\\n\\t\\tw1 = innerDiv.offsetWidth;\\n\\t\\tdiv.css( \"overflow\", \"scroll\" );\\n\\n\\t\\tw2 = innerDiv.offsetWidth;\\n\\n\\t\\tif ( w1 === w2 ) {\\n\\t\\t\\tw2 = div[0].clientWidth;\\n\\t\\t}\\n\\n\\t\\tdiv.remove();\\n\\n\\t\\treturn (cachedScrollbarWidth = w1 - w2);\\n\\t},\\n\\tgetScrollInfo: function( within ) {\\n\\t\\tvar overflowX = within.isWindow || within.isDocument ? \"\" :\\n\\t\\t\\t\\twithin.element.css( \"overflow-x\" ),\\n\\t\\t\\toverflowY = within.isWindow || within.isDocument ? \"\" :\\n\\t\\t\\t\\twithin.element.css( \"overflow-y\" ),\\n\\t\\t\\thasOverflowX = overflowX === \"scroll\" ||\\n\\t\\t\\t\\t( overflowX === \"auto\" && within.width < within.element[0].scrollWidth ),\\n\\t\\t\\thasOverflowY = overflowY === \"scroll\" ||\\n\\t\\t\\t\\t( overflowY === \"auto\" && within.height < within.element[0].scrollHeight );\\n\\t\\treturn {\\n\\t\\t\\twidth: hasOverflowY ? $.position.scrollbarWidth() : 0,\\n\\t\\t\\theight: hasOverflowX ? $.position.scrollbarWidth() : 0\\n\\t\\t};\\n\\t},\\n\\tgetWithinInfo: function( element ) {\\n\\t\\tvar withinElement = $( element || window ),\\n\\t\\t\\tisWindow = $.isWindow( withinElement[0] ),\\n\\t\\t\\tisDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;\\n\\t\\treturn {\\n\\t\\t\\telement: withinElement,\\n\\t\\t\\tisWindow: isWindow,\\n\\t\\t\\tisDocument: isDocument,\\n\\t\\t\\toffset: withinElement.offset() || { left: 0, top: 0 },\\n\\t\\t\\tscrollLeft: withinElement.scrollLeft(),\\n\\t\\t\\tscrollTop: withinElement.scrollTop(),\\n\\t\\t\\twidth: isWindow ? withinElement.width() : withinElement.outerWidth(),\\n\\t\\t\\theight: isWindow ? withinElement.height() : withinElement.outerHeight()\\n\\t\\t};\\n\\t}\\n};\\n\\n$.fn.position = function( options ) {\\n\\tif ( !options || !options.of ) {\\n\\t\\treturn _position.apply( this, arguments );\\n\\t}\\n\\n\\t// make a copy, we don\\'t want to modify arguments\\n\\toptions = $.extend( {}, options );\\n\\n\\tvar atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\\n\\t\\ttarget = $( options.of ),\\n\\t\\twithin = $.position.getWithinInfo( options.within ),\\n\\t\\tscrollInfo = $.position.getScrollInfo( within ),\\n\\t\\tcollision = ( options.collision || \"flip\" ).split( \" \" ),\\n\\t\\toffsets = {};\\n\\n\\tdimensions = getDimensions( target );\\n\\tif ( target[0].preventDefault ) {\\n\\t\\t// force left top to allow flipping\\n\\t\\toptions.at = \"left top\";\\n\\t}\\n\\ttargetWidth = dimensions.width;\\n\\ttargetHeight = dimensions.height;\\n\\ttargetOffset = dimensions.offset;\\n\\t// clone to reuse original targetOffset later\\n\\tbasePosition = $.extend( {}, targetOffset );\\n\\n\\t// force my and at to have valid horizontal and vertical positions\\n\\t// if a value is missing or invalid, it will be converted to center\\n\\t$.each( [ \"my\", \"at\" ], function() {\\n\\t\\tvar pos = ( options[ this ] || \"\" ).split( \" \" ),\\n\\t\\t\\thorizontalOffset,\\n\\t\\t\\tverticalOffset;\\n\\n\\t\\tif ( pos.length === 1) {\\n\\t\\t\\tpos = rhorizontal.test( pos[ 0 ] ) ?\\n\\t\\t\\t\\tpos.concat( [ \"center\" ] ) :\\n\\t\\t\\t\\trvertical.test( pos[ 0 ] ) ?\\n\\t\\t\\t\\t\\t[ \"center\" ].concat( pos ) :\\n\\t\\t\\t\\t\\t[ \"center\", \"center\" ];\\n\\t\\t}\\n\\t\\tpos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : \"center\";\\n\\t\\tpos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : \"center\";\\n\\n\\t\\t// calculate offsets\\n\\t\\thorizontalOffset = roffset.exec( pos[ 0 ] );\\n\\t\\tverticalOffset = roffset.exec( pos[ 1 ] );\\n\\t\\toffsets[ this ] = [\\n\\t\\t\\thorizontalOffset ? horizontalOffset[ 0 ] : 0,\\n\\t\\t\\tverticalOffset ? verticalOffset[ 0 ] : 0\\n\\t\\t];\\n\\n\\t\\t// reduce to just the positions without the offsets\\n\\t\\toptions[ this ] = [\\n\\t\\t\\trposition.exec( pos[ 0 ] )[ 0 ],\\n\\t\\t\\trposition.exec( pos[ 1 ] )[ 0 ]\\n\\t\\t];\\n\\t});\\n\\n\\t// normalize collision option\\n\\tif ( collision.length === 1 ) {\\n\\t\\tcollision[ 1 ] = collision[ 0 ];\\n\\t}\\n\\n\\tif ( options.at[ 0 ] === \"right\" ) {\\n\\t\\tbasePosition.left += targetWidth;\\n\\t} else if ( options.at[ 0 ] === \"center\" ) {\\n\\t\\tbasePosition.left += targetWidth / 2;\\n\\t}\\n\\n\\tif ( options.at[ 1 ] === \"bottom\" ) {\\n\\t\\tbasePosition.top += targetHeight;\\n\\t} else if ( options.at[ 1 ] === \"center\" ) {\\n\\t\\tbasePosition.top += targetHeight / 2;\\n\\t}\\n\\n\\tatOffset = getOffsets( offsets.at, targetWidth, targetHeight );\\n\\tbasePosition.left += atOffset[ 0 ];\\n\\tbasePosition.top += atOffset[ 1 ];\\n\\n\\treturn this.each(function() {\\n\\t\\tvar collisionPosition, using,\\n\\t\\t\\telem = $( this ),\\n\\t\\t\\telemWidth = elem.outerWidth(),\\n\\t\\t\\telemHeight = elem.outerHeight(),\\n\\t\\t\\tmarginLeft = parseCss( this, \"marginLeft\" ),\\n\\t\\t\\tmarginTop = parseCss( this, \"marginTop\" ),\\n\\t\\t\\tcollisionWidth = elemWidth + marginLeft + parseCss( this, \"marginRight\" ) + scrollInfo.width,\\n\\t\\t\\tcollisionHeight = elemHeight + marginTop + parseCss( this, \"marginBottom\" ) + scrollInfo.height,\\n\\t\\t\\tposition = $.extend( {}, basePosition ),\\n\\t\\t\\tmyOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );\\n\\n\\t\\tif ( options.my[ 0 ] === \"right\" ) {\\n\\t\\t\\tposition.left -= elemWidth;\\n\\t\\t} else if ( options.my[ 0 ] === \"center\" ) {\\n\\t\\t\\tposition.left -= elemWidth / 2;\\n\\t\\t}\\n\\n\\t\\tif ( options.my[ 1 ] === \"bottom\" ) {\\n\\t\\t\\tposition.top -= elemHeight;\\n\\t\\t} else if ( options.my[ 1 ] === \"center\" ) {\\n\\t\\t\\tposition.top -= elemHeight / 2;\\n\\t\\t}\\n\\n\\t\\tposition.left += myOffset[ 0 ];\\n\\t\\tposition.top += myOffset[ 1 ];\\n\\n\\t\\t// if the browser doesn\\'t support fractions, then round for consistent results\\n\\t\\tif ( !$.support.offsetFractions ) {\\n\\t\\t\\tposition.left = round( position.left );\\n\\t\\t\\tposition.top = round( position.top );\\n\\t\\t}\\n\\n\\t\\tcollisionPosition = {\\n\\t\\t\\tmarginLeft: marginLeft,\\n\\t\\t\\tmarginTop: marginTop\\n\\t\\t};\\n\\n\\t\\t$.each( [ \"left\", \"top\" ], function( i, dir ) {\\n\\t\\t\\tif ( $.ui.position[ collision[ i ] ] ) {\\n\\t\\t\\t\\t$.ui.position[ collision[ i ] ][ dir ]( position, {\\n\\t\\t\\t\\t\\ttargetWidth: targetWidth,\\n\\t\\t\\t\\t\\ttargetHeight: targetHeight,\\n\\t\\t\\t\\t\\telemWidth: elemWidth,\\n\\t\\t\\t\\t\\telemHeight: elemHeight,\\n\\t\\t\\t\\t\\tcollisionPosition: collisionPosition,\\n\\t\\t\\t\\t\\tcollisionWidth: collisionWidth,\\n\\t\\t\\t\\t\\tcollisionHeight: collisionHeight,\\n\\t\\t\\t\\t\\toffset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],\\n\\t\\t\\t\\t\\tmy: options.my,\\n\\t\\t\\t\\t\\tat: options.at,\\n\\t\\t\\t\\t\\twithin: within,\\n\\t\\t\\t\\t\\telem : elem\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tif ( options.using ) {\\n\\t\\t\\t// adds feedback as second argument to using callback, if present\\n\\t\\t\\tusing = function( props ) {\\n\\t\\t\\t\\tvar left = targetOffset.left - position.left,\\n\\t\\t\\t\\t\\tright = left + targetWidth - elemWidth,\\n\\t\\t\\t\\t\\ttop = targetOffset.top - position.top,\\n\\t\\t\\t\\t\\tbottom = top + targetHeight - elemHeight,\\n\\t\\t\\t\\t\\tfeedback = {\\n\\t\\t\\t\\t\\t\\ttarget: {\\n\\t\\t\\t\\t\\t\\t\\telement: target,\\n\\t\\t\\t\\t\\t\\t\\tleft: targetOffset.left,\\n\\t\\t\\t\\t\\t\\t\\ttop: targetOffset.top,\\n\\t\\t\\t\\t\\t\\t\\twidth: targetWidth,\\n\\t\\t\\t\\t\\t\\t\\theight: targetHeight\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\telement: {\\n\\t\\t\\t\\t\\t\\t\\telement: elem,\\n\\t\\t\\t\\t\\t\\t\\tleft: position.left,\\n\\t\\t\\t\\t\\t\\t\\ttop: position.top,\\n\\t\\t\\t\\t\\t\\t\\twidth: elemWidth,\\n\\t\\t\\t\\t\\t\\t\\theight: elemHeight\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\thorizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\\n\\t\\t\\t\\t\\t\\tvertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\tif ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {\\n\\t\\t\\t\\t\\tfeedback.horizontal = \"center\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {\\n\\t\\t\\t\\t\\tfeedback.vertical = \"middle\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {\\n\\t\\t\\t\\t\\tfeedback.important = \"horizontal\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfeedback.important = \"vertical\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\toptions.using.call( this, props, feedback );\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\telem.offset( $.extend( position, { using: using } ) );\\n\\t});\\n};\\n\\n$.ui.position = {\\n\\tfit: {\\n\\t\\tleft: function( position, data ) {\\n\\t\\t\\tvar within = data.within,\\n\\t\\t\\t\\twithinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\\n\\t\\t\\t\\touterWidth = within.width,\\n\\t\\t\\t\\tcollisionPosLeft = position.left - data.collisionPosition.marginLeft,\\n\\t\\t\\t\\toverLeft = withinOffset - collisionPosLeft,\\n\\t\\t\\t\\toverRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\\n\\t\\t\\t\\tnewOverRight;\\n\\n\\t\\t\\t// element is wider than within\\n\\t\\t\\tif ( data.collisionWidth > outerWidth ) {\\n\\t\\t\\t\\t// element is initially over the left side of within\\n\\t\\t\\t\\tif ( overLeft > 0 && overRight <= 0 ) {\\n\\t\\t\\t\\t\\tnewOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\\n\\t\\t\\t\\t\\tposition.left += overLeft - newOverRight;\\n\\t\\t\\t\\t// element is initially over right side of within\\n\\t\\t\\t\\t} else if ( overRight > 0 && overLeft <= 0 ) {\\n\\t\\t\\t\\t\\tposition.left = withinOffset;\\n\\t\\t\\t\\t// element is initially over both left and right sides of within\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif ( overLeft > overRight ) {\\n\\t\\t\\t\\t\\t\\tposition.left = withinOffset + outerWidth - data.collisionWidth;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tposition.left = withinOffset;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t// too far left -> align with left edge\\n\\t\\t\\t} else if ( overLeft > 0 ) {\\n\\t\\t\\t\\tposition.left += overLeft;\\n\\t\\t\\t// too far right -> align with right edge\\n\\t\\t\\t} else if ( overRight > 0 ) {\\n\\t\\t\\t\\tposition.left -= overRight;\\n\\t\\t\\t// adjust based on position and margin\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tposition.left = max( position.left - collisionPosLeft, position.left );\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\ttop: function( position, data ) {\\n\\t\\t\\tvar within = data.within,\\n\\t\\t\\t\\twithinOffset = within.isWindow ? within.scrollTop : within.offset.top,\\n\\t\\t\\t\\touterHeight = data.within.height,\\n\\t\\t\\t\\tcollisionPosTop = position.top - data.collisionPosition.marginTop,\\n\\t\\t\\t\\toverTop = withinOffset - collisionPosTop,\\n\\t\\t\\t\\toverBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\\n\\t\\t\\t\\tnewOverBottom;\\n\\n\\t\\t\\t// element is taller than within\\n\\t\\t\\tif ( data.collisionHeight > outerHeight ) {\\n\\t\\t\\t\\t// element is initially over the top of within\\n\\t\\t\\t\\tif ( overTop > 0 && overBottom <= 0 ) {\\n\\t\\t\\t\\t\\tnewOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\\n\\t\\t\\t\\t\\tposition.top += overTop - newOverBottom;\\n\\t\\t\\t\\t// element is initially over bottom of within\\n\\t\\t\\t\\t} else if ( overBottom > 0 && overTop <= 0 ) {\\n\\t\\t\\t\\t\\tposition.top = withinOffset;\\n\\t\\t\\t\\t// element is initially over both top and bottom of within\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif ( overTop > overBottom ) {\\n\\t\\t\\t\\t\\t\\tposition.top = withinOffset + outerHeight - data.collisionHeight;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tposition.top = withinOffset;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t// too far up -> align with top\\n\\t\\t\\t} else if ( overTop > 0 ) {\\n\\t\\t\\t\\tposition.top += overTop;\\n\\t\\t\\t// too far down -> align with bottom edge\\n\\t\\t\\t} else if ( overBottom > 0 ) {\\n\\t\\t\\t\\tposition.top -= overBottom;\\n\\t\\t\\t// adjust based on position and margin\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tposition.top = max( position.top - collisionPosTop, position.top );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\tflip: {\\n\\t\\tleft: function( position, data ) {\\n\\t\\t\\tvar within = data.within,\\n\\t\\t\\t\\twithinOffset = within.offset.left + within.scrollLeft,\\n\\t\\t\\t\\touterWidth = within.width,\\n\\t\\t\\t\\toffsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\\n\\t\\t\\t\\tcollisionPosLeft = position.left - data.collisionPosition.marginLeft,\\n\\t\\t\\t\\toverLeft = collisionPosLeft - offsetLeft,\\n\\t\\t\\t\\toverRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\\n\\t\\t\\t\\tmyOffset = data.my[ 0 ] === \"left\" ?\\n\\t\\t\\t\\t\\t-data.elemWidth :\\n\\t\\t\\t\\t\\tdata.my[ 0 ] === \"right\" ?\\n\\t\\t\\t\\t\\t\\tdata.elemWidth :\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\tatOffset = data.at[ 0 ] === \"left\" ?\\n\\t\\t\\t\\t\\tdata.targetWidth :\\n\\t\\t\\t\\t\\tdata.at[ 0 ] === \"right\" ?\\n\\t\\t\\t\\t\\t\\t-data.targetWidth :\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\toffset = -2 * data.offset[ 0 ],\\n\\t\\t\\t\\tnewOverRight,\\n\\t\\t\\t\\tnewOverLeft;\\n\\n\\t\\t\\tif ( overLeft < 0 ) {\\n\\t\\t\\t\\tnewOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\\n\\t\\t\\t\\tif ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {\\n\\t\\t\\t\\t\\tposition.left += myOffset + atOffset + offset;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if ( overRight > 0 ) {\\n\\t\\t\\t\\tnewOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\\n\\t\\t\\t\\tif ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {\\n\\t\\t\\t\\t\\tposition.left += myOffset + atOffset + offset;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\ttop: function( position, data ) {\\n\\t\\t\\tvar within = data.within,\\n\\t\\t\\t\\twithinOffset = within.offset.top + within.scrollTop,\\n\\t\\t\\t\\touterHeight = within.height,\\n\\t\\t\\t\\toffsetTop = within.isWindow ? within.scrollTop : within.offset.top,\\n\\t\\t\\t\\tcollisionPosTop = position.top - data.collisionPosition.marginTop,\\n\\t\\t\\t\\toverTop = collisionPosTop - offsetTop,\\n\\t\\t\\t\\toverBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\\n\\t\\t\\t\\ttop = data.my[ 1 ] === \"top\",\\n\\t\\t\\t\\tmyOffset = top ?\\n\\t\\t\\t\\t\\t-data.elemHeight :\\n\\t\\t\\t\\t\\tdata.my[ 1 ] === \"bottom\" ?\\n\\t\\t\\t\\t\\t\\tdata.elemHeight :\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\tatOffset = data.at[ 1 ] === \"top\" ?\\n\\t\\t\\t\\t\\tdata.targetHeight :\\n\\t\\t\\t\\t\\tdata.at[ 1 ] === \"bottom\" ?\\n\\t\\t\\t\\t\\t\\t-data.targetHeight :\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\toffset = -2 * data.offset[ 1 ],\\n\\t\\t\\t\\tnewOverTop,\\n\\t\\t\\t\\tnewOverBottom;\\n\\t\\t\\tif ( overTop < 0 ) {\\n\\t\\t\\t\\tnewOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\\n\\t\\t\\t\\tif ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {\\n\\t\\t\\t\\t\\tposition.top += myOffset + atOffset + offset;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if ( overBottom > 0 ) {\\n\\t\\t\\t\\tnewOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\\n\\t\\t\\t\\tif ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {\\n\\t\\t\\t\\t\\tposition.top += myOffset + atOffset + offset;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\tflipfit: {\\n\\t\\tleft: function() {\\n\\t\\t\\t$.ui.position.flip.left.apply( this, arguments );\\n\\t\\t\\t$.ui.position.fit.left.apply( this, arguments );\\n\\t\\t},\\n\\t\\ttop: function() {\\n\\t\\t\\t$.ui.position.flip.top.apply( this, arguments );\\n\\t\\t\\t$.ui.position.fit.top.apply( this, arguments );\\n\\t\\t}\\n\\t}\\n};\\n\\n// fraction support test\\n(function () {\\n\\tvar testElement, testElementParent, testElementStyle, offsetLeft, i,\\n\\t\\tbody = document.getElementsByTagName( \"body\" )[ 0 ],\\n\\t\\tdiv = document.createElement( \"div\" );\\n\\n\\t//Create a \"fake body\" for testing based on method used in jQuery.support\\n\\ttestElement = document.createElement( body ? \"div\" : \"body\" );\\n\\ttestElementStyle = {\\n\\t\\tvisibility: \"hidden\",\\n\\t\\twidth: 0,\\n\\t\\theight: 0,\\n\\t\\tborder: 0,\\n\\t\\tmargin: 0,\\n\\t\\tbackground: \"none\"\\n\\t};\\n\\tif ( body ) {\\n\\t\\t$.extend( testElementStyle, {\\n\\t\\t\\tposition: \"absolute\",\\n\\t\\t\\tleft: \"-1000px\",\\n\\t\\t\\ttop: \"-1000px\"\\n\\t\\t});\\n\\t}\\n\\tfor ( i in testElementStyle ) {\\n\\t\\ttestElement.style[ i ] = testElementStyle[ i ];\\n\\t}\\n\\ttestElement.appendChild( div );\\n\\ttestElementParent = body || document.documentElement;\\n\\ttestElementParent.insertBefore( testElement, testElementParent.firstChild );\\n\\n\\tdiv.style.cssText = \"position: absolute; left: 10.7432222px;\";\\n\\n\\toffsetLeft = $( div ).offset().left;\\n\\t$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;\\n\\n\\ttestElement.innerHTML = \"\";\\n\\ttestElementParent.removeChild( testElement );\\n})();\\n\\n}( jQuery ) );\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery-ui/position.js\\n// module id = 427\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/jquery-ui/position.js?');\n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';\\n\\n/*\\tjQuery.flexMenu 1.1.1\\r\\n https://github.com/352Media/flexMenu\\r\\n Description: If a list is too long for all items to fit on one line, display a popup menu instead.\\r\\n Dependencies: jQuery, Modernizr (optional). Without Modernizr, the menu can only be shown on click (not hover). */\\n\\n(function ($) {\\n    var flexObjects = [],\\n        // Array of all flexMenu objects\\n    resizeTimeout;\\n    // When the page is resized, adjust the flexMenus.\\n    function adjustFlexMenu() {\\n        $(flexObjects).each(function () {\\n            $(this).flexMenu({\\n                'undo': true\\n            }).flexMenu(this.options);\\n        });\\n    }\\n    function collapseAllExcept($menuToAvoid) {\\n        var $activeMenus, $menusToCollapse;\\n        $activeMenus = $('li.flexMenu-viewMore.active');\\n        $menusToCollapse = $activeMenus.not($menuToAvoid);\\n        $menusToCollapse.removeClass('active').find('> ul').hide();\\n    }\\n    $(window).resize(function () {\\n        clearTimeout(resizeTimeout);\\n        resizeTimeout = setTimeout(function () {\\n            adjustFlexMenu();\\n        }, 200);\\n    });\\n    $.fn.flexMenu = function (options) {\\n        var checkFlexObject,\\n            s = $.extend({\\n            'threshold': 2, // [integer] If there are this many items or fewer in the list, we will not display a \\\"View More\\\" link and will instead let the list break to the next line. This is useful in cases where adding a \\\"view more\\\" link would actually cause more things to break  to the next line.\\n            'cutoff': 2, // [integer] If there is space for this many or fewer items outside our \\\"more\\\" popup, just move everything into the more menu. In that case, also use linkTextAll and linkTitleAll instead of linkText and linkTitle. To disable this feature, just set this value to 0.\\n            'linkText': 'More', // [string] What text should we display on the \\\"view more\\\" link?\\n            'linkTitle': 'View More', // [string] What should the title of the \\\"view more\\\" button be?\\n            'linkTextAll': 'Menu', // [string] If we hit the cutoff, what text should we display on the \\\"view more\\\" link?\\n            'linkTitleAll': 'Open/Close Menu', // [string] If we hit the cutoff, what should the title of the \\\"view more\\\" button be?\\n            'showOnHover': true, // [boolean] Should we we show the menu on hover? If not, we'll require a click. If we're on a touch device - or if Modernizr is not available - we'll ignore this setting and only show the menu on click. The reason for this is that touch devices emulate hover events in unpredictable ways, causing some taps to do nothing.\\n            'popupAbsolute': true, // [boolean] Should we absolutely position the popup? Usually this is a good idea. That way, the popup can appear over other content and spill outside a parent that has overflow: hidden set. If you want to do something different from this in CSS, just set this option to false.\\n            'undo': false // [boolean] Move the list items back to where they were before, and remove the \\\"View More\\\" link.\\n        }, options);\\n        this.options = s; // Set options on object\\n        checkFlexObject = $.inArray(this, flexObjects); // Checks if this object is already in the flexObjects array\\n        if (checkFlexObject >= 0) {\\n            flexObjects.splice(checkFlexObject, 1); // Remove this object if found\\n        } else {\\n            flexObjects.push(this); // Add this object to the flexObjects array\\n        }\\n        return this.each(function () {\\n            var $this = $(this),\\n                $items = $this.find('> li'),\\n                $self = $this,\\n                $firstItem = $items.first(),\\n                $lastItem = $items.last(),\\n                numItems = $this.find('li').length,\\n                firstItemTop = Math.floor($firstItem.offset().top),\\n                firstItemHeight = Math.floor($firstItem.outerHeight(true)),\\n                $lastChild,\\n                keepLooking,\\n                $moreItem,\\n                $moreLink,\\n                numToRemove,\\n                allInPopup = false,\\n                $menu,\\n                i;\\n            function needsMenu($itemOfInterest) {\\n                var result = Math.ceil($itemOfInterest.offset().top) >= firstItemTop + firstItemHeight ? true : false;\\n                // Values may be calculated from em and give us something other than round numbers. Browsers may round these inconsistently. So, let's round numbers to make it easier to trigger flexMenu.\\n                return result;\\n            }\\n            if (needsMenu($lastItem) && numItems > s.threshold && !s.undo && $this.is(':visible')) {\\n                var $popup = $('<ul class=\\\"flexMenu-popup\\\" style=\\\"display:none;' + (s.popupAbsolute ? ' position: absolute;' : '') + '\\\"></ul>'),\\n\\n                // Move all list items after the first to this new popup ul\\n                firstItemOffset = $firstItem.offset().top;\\n                for (i = numItems; i > 1; i--) {\\n                    // Find all of the list items that have been pushed below the first item. Put those items into the popup menu. Put one additional item into the popup menu to cover situations where the last item is shorter than the \\\"more\\\" text.\\n                    $lastChild = $this.find('> li:last-child');\\n                    keepLooking = needsMenu($lastChild);\\n                    $lastChild.appendTo($popup);\\n                    // If there only a few items left in the navigation bar, move them all to the popup menu.\\n                    if (i - 1 <= s.cutoff) {\\n                        // We've removed the ith item, so i - 1 gives us the number of items remaining.\\n                        $($this.children().get().reverse()).appendTo($popup);\\n                        allInPopup = true;\\n                        break;\\n                    }\\n                    if (!keepLooking) {\\n                        break;\\n                    }\\n                }\\n                if (allInPopup) {\\n                    $this.append('<li class=\\\"flexMenu-viewMore flexMenu-allInPopup\\\"><a href=\\\"#\\\" title=\\\"' + s.linkTitleAll + '\\\">' + s.linkTextAll + '</a></li>');\\n                } else {\\n                    $this.append('<li class=\\\"flexMenu-viewMore\\\"><a href=\\\"#\\\" title=\\\"' + s.linkTitle + '\\\">' + s.linkText + '</a></li>');\\n                }\\n                $moreItem = $this.find('> li.flexMenu-viewMore');\\n                /// Check to see whether the more link has been pushed down. This might happen if the link immediately before it is especially wide.\\n                if (needsMenu($moreItem)) {\\n                    $this.find('> li:nth-last-child(2)').appendTo($popup);\\n                }\\n                // Our popup menu is currently in reverse order. Let's fix that.\\n                $popup.children().each(function (i, li) {\\n                    $popup.prepend(li);\\n                });\\n                $moreItem.append($popup);\\n                $moreLink = $this.find('> li.flexMenu-viewMore > a');\\n                $moreLink.click(function (e) {\\n                    // Collapsing any other open flexMenu\\n                    collapseAllExcept($moreItem);\\n                    //Open and Set active the one being interacted with.\\n                    $popup.toggle();\\n                    $moreItem.toggleClass('active');\\n                    e.preventDefault();\\n                });\\n                if (s.showOnHover && typeof Modernizr !== 'undefined' && !Modernizr.touch) {\\n                    // If requireClick is false AND touch is unsupported, then show the menu on hover. If Modernizr is not available, assume that touch is unsupported. Through the magic of lazy evaluation, we can check for Modernizr and start using it in the same if statement. Reversing the order of these variables would produce an error.\\n                    $moreItem.hover(function () {\\n                        $popup.show();\\n                        $(this).addClass('active');\\n                    }, function () {\\n                        $popup.hide();\\n                        $(this).removeClass('active');\\n                    });\\n                }\\n            } else if (s.undo && $this.find('ul.flexMenu-popup')) {\\n                $menu = $this.find('ul.flexMenu-popup');\\n                numToRemove = $menu.find('li').length;\\n                for (i = 1; i <= numToRemove; i++) {\\n                    $menu.find('> li:first-child').appendTo($this);\\n                }\\n                $menu.remove();\\n                $this.find('> li.flexMenu-viewMore').remove();\\n            }\\n        });\\n    };\\n})(jQuery);\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/lib/flexmenu.js\\n// module id = 778\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/lib/flexmenu.js?\")},,function(module,exports){eval('\"use strict\";\\n\\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\\n\\n/*! modernizr 3.2.0 (Custom Build) | MIT *\\n * http://modernizr.com/download/?-video !*/\\n!function (e, n, o) {\\n  function a(e, n) {\\n    return (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === n;\\n  }function t() {\\n    var e, n, o, t, s, i, l;for (var p in c) {\\n      if (c.hasOwnProperty(p)) {\\n        if (e = [], n = c[p], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (o = 0; o < n.options.aliases.length; o++) {\\n          e.push(n.options.aliases[o].toLowerCase());\\n        }for (t = a(n.fn, \"function\") ? n.fn() : n.fn, s = 0; s < e.length; s++) {\\n          i = e[s], l = i.split(\".\"), 1 === l.length ? Modernizr[l[0]] = t : (!Modernizr[l[0]] || Modernizr[l[0]] instanceof Boolean || (Modernizr[l[0]] = new Boolean(Modernizr[l[0]])), Modernizr[l[0]][l[1]] = t), r.push((t ? \"\" : \"no-\") + l.join(\"-\"));\\n        }\\n      }\\n    }\\n  }function s() {\\n    return \"function\" != typeof n.createElement ? n.createElement(arguments[0]) : p ? n.createElementNS.call(n, \"http://www.w3.org/2000/svg\", arguments[0]) : n.createElement.apply(n, arguments);\\n  }var c = [],\\n      i = { _version: \"3.2.0\", _config: { classPrefix: \"\", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function on(e, n) {\\n      var o = this;setTimeout(function () {\\n        n(o[e]);\\n      }, 0);\\n    }, addTest: function addTest(e, n, o) {\\n      c.push({ name: e, fn: n, options: o });\\n    }, addAsyncTest: function addAsyncTest(e) {\\n      c.push({ name: null, fn: e });\\n    } },\\n      Modernizr = function Modernizr() {};Modernizr.prototype = i, Modernizr = new Modernizr();var r = [],\\n      l = n.documentElement,\\n      p = \"svg\" === l.nodeName.toLowerCase();Modernizr.addTest(\"video\", function () {\\n    var e = s(\"video\"),\\n        n = !1;try {\\n      (n = !!e.canPlayType) && (n = new Boolean(n), n.ogg = e.canPlayType(\\'video/ogg; codecs=\"theora\"\\').replace(/^no$/, \"\"), n.h264 = e.canPlayType(\\'video/mp4; codecs=\"avc1.42E01E\"\\').replace(/^no$/, \"\"), n.webm = e.canPlayType(\\'video/webm; codecs=\"vp8, vorbis\"\\').replace(/^no$/, \"\"), n.vp9 = e.canPlayType(\\'video/webm; codecs=\"vp9\"\\').replace(/^no$/, \"\"), n.hls = e.canPlayType(\\'application/x-mpegURL; codecs=\"avc1.42E01E\"\\').replace(/^no$/, \"\"));\\n    } catch (o) {}return n;\\n  }), t(), delete i.addTest, delete i.addAsyncTest;for (var f = 0; f < Modernizr._q.length; f++) {\\n    Modernizr._q[f]();\\n  }e.Modernizr = Modernizr;\\n}(window, document);\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/lib/modernizr.js\\n// module id = 780\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/lib/modernizr.js?')},function(module,exports){eval('\"use strict\";\\n\\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\\n\\n/*global PushStream WebSocketWrapper EventSourceWrapper EventSource*/\\n/*jshint evil: true, plusplus: false, regexp: false */\\n/**\\n * Copyright (C) 2010-2012 Wandenberg Peixoto <wandenberg@gmail.com>, Rogério Carvalho Schneider <stockrt@gmail.com>\\n *\\n * This file is part of Nginx Push Stream Module.\\n *\\n * Nginx Push Stream Module is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * Nginx Push Stream Module is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with Nginx Push Stream Module.  If not, see <http://www.gnu.org/licenses/>.\\n *\\n *\\n * pushstream.js\\n *\\n * Created: Nov 01, 2011\\n * Authors: Wandenberg Peixoto <wandenberg@gmail.com>, Rogério Carvalho Schneider <stockrt@gmail.com>\\n */\\n(function (window, document, undefined) {\\n  \"use strict\";\\n\\n  /* prevent duplicate declaration */\\n\\n  if (window.PushStream) {\\n    return;\\n  }\\n\\n  var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\\n  var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\\n\\n  var valueToTwoDigits = function valueToTwoDigits(value) {\\n    return (value < 10 ? \\'0\\' : \\'\\') + value;\\n  };\\n\\n  var dateToUTCString = function dateToUTCString(date) {\\n    var time = valueToTwoDigits(date.getUTCHours()) + \\':\\' + valueToTwoDigits(date.getUTCMinutes()) + \\':\\' + valueToTwoDigits(date.getUTCSeconds());\\n    return days[date.getUTCDay()] + \\', \\' + valueToTwoDigits(date.getUTCDate()) + \\' \\' + months[date.getUTCMonth()] + \\' \\' + date.getUTCFullYear() + \\' \\' + time + \\' GMT\\';\\n  };\\n\\n  var extend = function extend() {\\n    var object = arguments[0] || {};\\n    for (var i = 0; i < arguments.length; i++) {\\n      var settings = arguments[i];\\n      for (var attr in settings) {\\n        if (!settings.hasOwnProperty || settings.hasOwnProperty(attr)) {\\n          object[attr] = settings[attr];\\n        }\\n      }\\n    }\\n    return object;\\n  };\\n\\n  var validChars = /^[\\\\],:{}\\\\s]*$/,\\n      validEscape = /\\\\\\\\(?:[\"\\\\\\\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\\n      validTokens = /\"[^\"\\\\\\\\\\\\n\\\\r]*\"|true|false|null|-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?/g,\\n      validBraces = /(?:^|:|,)(?:\\\\s*\\\\[)+/g;\\n\\n  var trim = function trim(value) {\\n    return value.replace(/^\\\\s*/, \"\").replace(/\\\\s*$/, \"\");\\n  };\\n\\n  var parseJSON = function parseJSON(data) {\\n    if (!data || !isString(data)) {\\n      return null;\\n    }\\n\\n    // Make sure leading/trailing whitespace is removed (IE can\\'t handle it)\\n    data = trim(data);\\n\\n    // Attempt to parse using the native JSON parser first\\n    if (window.JSON && window.JSON.parse) {\\n      try {\\n        return window.JSON.parse(data);\\n      } catch (e) {\\n        throw \"Invalid JSON: \" + data;\\n      }\\n    }\\n\\n    // Make sure the incoming data is actual JSON\\n    // Logic borrowed from http://json.org/json2.js\\n    if (validChars.test(data.replace(validEscape, \"@\").replace(validTokens, \"]\").replace(validBraces, \"\"))) {\\n      return new Function(\"return \" + data)();\\n    }\\n\\n    throw \"Invalid JSON: \" + data;\\n  };\\n\\n  var currentTimestampParam = function currentTimestampParam() {\\n    return { \"_\": new Date().getTime() };\\n  };\\n\\n  var objectToUrlParams = function objectToUrlParams(settings) {\\n    var params = settings;\\n    if ((typeof settings === \"undefined\" ? \"undefined\" : _typeof(settings)) === \\'object\\') {\\n      params = \\'\\';\\n      for (var attr in settings) {\\n        if (!settings.hasOwnProperty || settings.hasOwnProperty(attr)) {\\n          params += \\'&\\' + attr + \\'=\\' + window.escape(settings[attr]);\\n        }\\n      }\\n      params = params.substring(1);\\n    }\\n\\n    return params || \\'\\';\\n  };\\n\\n  var addParamsToUrl = function addParamsToUrl(url, params) {\\n    return url + (url.indexOf(\\'?\\') < 0 ? \\'?\\' : \\'&\\') + objectToUrlParams(params);\\n  };\\n\\n  var isArray = Array.isArray || function (obj) {\\n    return Object.prototype.toString.call(obj) === \\'[object Array]\\';\\n  };\\n\\n  var isString = function isString(obj) {\\n    return Object.prototype.toString.call(obj) === \\'[object String]\\';\\n  };\\n\\n  var Log4js = {\\n    logger: null,\\n    debug: function debug() {\\n      if (PushStream.LOG_LEVEL === \\'debug\\') {\\n        Log4js._log.apply(Log4js._log, arguments);\\n      }\\n    },\\n    info: function info() {\\n      if (PushStream.LOG_LEVEL === \\'info\\' || PushStream.LOG_LEVEL === \\'debug\\') {\\n        Log4js._log.apply(Log4js._log, arguments);\\n      }\\n    },\\n    error: function error() {\\n      Log4js._log.apply(Log4js._log, arguments);\\n    },\\n    _log: function _log() {\\n      if (!Log4js.logger) {\\n        var console = window.console;\\n        if (console && console.log) {\\n          if (console.log.apply) {\\n            Log4js.logger = console.log;\\n          } else if (_typeof(console.log) === \"object\" && Function.prototype.bind) {\\n            Log4js.logger = Function.prototype.bind.call(console.log, console);\\n          } else if (_typeof(console.log) === \"object\" && Function.prototype.call) {\\n            Log4js.logger = function () {\\n              Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));\\n            };\\n          }\\n        }\\n      }\\n\\n      if (Log4js.logger) {\\n        Log4js.logger.apply(window.console, arguments);\\n      }\\n\\n      var logElement = document.getElementById(PushStream.LOG_OUTPUT_ELEMENT_ID);\\n      if (logElement) {\\n        var str = \\'\\';\\n        for (var i = 0; i < arguments.length; i++) {\\n          str += arguments[i] + \" \";\\n        }\\n        logElement.innerHTML += str + \\'\\\\n\\';\\n\\n        var lines = logElement.innerHTML.split(\\'\\\\n\\');\\n        if (lines.length > 100) {\\n          logElement.innerHTML = lines.slice(-100).join(\\'\\\\n\\');\\n        }\\n      }\\n    }\\n  };\\n\\n  var Ajax = {\\n    _getXHRObject: function _getXHRObject() {\\n      var xhr = false;\\n      try {\\n        xhr = new window.XMLHttpRequest();\\n      } catch (e1) {\\n        try {\\n          xhr = new window.XDomainRequest();\\n        } catch (e2) {\\n          try {\\n            xhr = new window.ActiveXObject(\"Msxml2.XMLHTTP\");\\n          } catch (e3) {\\n            try {\\n              xhr = new window.ActiveXObject(\"Microsoft.XMLHTTP\");\\n            } catch (e4) {\\n              xhr = false;\\n            }\\n          }\\n        }\\n      }\\n      return xhr;\\n    },\\n\\n    _send: function _send(settings, post) {\\n      settings = settings || {};\\n      settings.timeout = settings.timeout || 30000;\\n      var xhr = Ajax._getXHRObject();\\n      if (!xhr || !settings.url) {\\n        return;\\n      }\\n\\n      Ajax.clear(settings);\\n\\n      xhr.onreadystatechange = function () {\\n        if (xhr.readyState === 4) {\\n          Ajax.clear(settings);\\n          if (settings.afterReceive) {\\n            settings.afterReceive(xhr);\\n          }\\n          if (xhr.status === 200) {\\n            if (settings.success) {\\n              settings.success(xhr.responseText);\\n            }\\n          } else {\\n            if (settings.error) {\\n              settings.error(xhr.status);\\n            }\\n          }\\n        }\\n      };\\n\\n      if (settings.beforeOpen) {\\n        settings.beforeOpen(xhr);\\n      }\\n\\n      var params = {};\\n      var body = null;\\n      var method = \"GET\";\\n      if (post) {\\n        body = objectToUrlParams(settings.data);\\n        method = \"POST\";\\n      } else {\\n        params = settings.data || {};\\n      }\\n\\n      xhr.open(method, addParamsToUrl(settings.url, extend({}, params, currentTimestampParam())), true);\\n\\n      if (settings.beforeSend) {\\n        settings.beforeSend(xhr);\\n      }\\n\\n      var onerror = function onerror() {\\n        try {\\n          xhr.abort();\\n        } catch (e) {/* ignore error on closing */}\\n        Ajax.clear(settings);\\n        settings.error(304);\\n      };\\n\\n      if (post) {\\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\\n      } else {\\n        settings.timeoutId = window.setTimeout(onerror, settings.timeout + 2000);\\n      }\\n\\n      xhr.send(body);\\n      return xhr;\\n    },\\n\\n    _clear_script: function _clear_script(script) {\\n      // Handling memory leak in IE, removing and dereference the script\\n      if (script) {\\n        script.onerror = script.onload = script.onreadystatechange = null;\\n        if (script.parentNode) {\\n          script.parentNode.removeChild(script);\\n        }\\n      }\\n    },\\n\\n    _clear_timeout: function _clear_timeout(settings) {\\n      if (settings.timeoutId) {\\n        settings.timeoutId = window.clearTimeout(settings.timeoutId);\\n      }\\n    },\\n\\n    clear: function clear(settings) {\\n      Ajax._clear_timeout(settings);\\n      Ajax._clear_script(document.getElementById(settings.scriptId));\\n    },\\n\\n    jsonp: function jsonp(settings) {\\n      settings.timeout = settings.timeout || 30000;\\n      Ajax.clear(settings);\\n\\n      var head = document.head || document.getElementsByTagName(\"head\")[0];\\n      var script = document.createElement(\"script\");\\n      var startTime = new Date().getTime();\\n\\n      var onerror = function onerror() {\\n        Ajax.clear(settings);\\n        var endTime = new Date().getTime();\\n        settings.error(endTime - startTime > settings.timeout / 2 ? 304 : 0);\\n      };\\n\\n      var onload = function onload() {\\n        Ajax.clear(settings);\\n        settings.load();\\n      };\\n\\n      script.onerror = onerror;\\n      script.onload = script.onreadystatechange = function (eventLoad) {\\n        if (!script.readyState || /loaded|complete/.test(script.readyState)) {\\n          onload();\\n        }\\n      };\\n\\n      if (settings.beforeOpen) {\\n        settings.beforeOpen({});\\n      }\\n      if (settings.beforeSend) {\\n        settings.beforeSend({});\\n      }\\n\\n      settings.timeoutId = window.setTimeout(onerror, settings.timeout + 2000);\\n      settings.scriptId = settings.scriptId || new Date().getTime();\\n\\n      script.setAttribute(\"src\", addParamsToUrl(settings.url, extend({}, settings.data, currentTimestampParam())));\\n      script.setAttribute(\"async\", \"async\");\\n      script.setAttribute(\"id\", settings.scriptId);\\n\\n      // Use insertBefore instead of appendChild to circumvent an IE6 bug.\\n      head.insertBefore(script, head.firstChild);\\n    },\\n\\n    load: function load(settings) {\\n      return Ajax._send(settings, false);\\n    },\\n\\n    post: function post(settings) {\\n      return Ajax._send(settings, true);\\n    }\\n  };\\n\\n  var escapeText = function escapeText(text) {\\n    return text ? window.escape(text) : \\'\\';\\n  };\\n\\n  var unescapeText = function unescapeText(text) {\\n    return text ? window.unescape(text) : \\'\\';\\n  };\\n\\n  var parseMessage = function parseMessage(messageText, keys) {\\n    var msg = messageText;\\n    if (isString(messageText)) {\\n      msg = parseJSON(messageText);\\n    }\\n\\n    var message = {\\n      id: msg[keys.jsonIdKey],\\n      channel: msg[keys.jsonChannelKey],\\n      data: isString(msg[keys.jsonDataKey]) ? unescapeText(msg[keys.jsonDataKey]) : msg[keys.jsonDataKey],\\n      tag: msg[keys.jsonTagKey],\\n      time: msg[keys.jsonTimeKey],\\n      eventid: msg[keys.jsonEventIdKey] || \"\"\\n    };\\n\\n    return message;\\n  };\\n\\n  var getBacktrack = function getBacktrack(options) {\\n    return options.backtrack ? \".b\" + Number(options.backtrack) : \"\";\\n  };\\n\\n  var getChannelsPath = function getChannelsPath(channels) {\\n    var path = \\'\\';\\n    for (var channelName in channels) {\\n      if (!channels.hasOwnProperty || channels.hasOwnProperty(channelName)) {\\n        path += \"/\" + channelName + getBacktrack(channels[channelName]);\\n      }\\n    }\\n    return path;\\n  };\\n\\n  var getSubscriberUrl = function getSubscriberUrl(pushstream, prefix, extraParams) {\\n    var websocket = pushstream.wrapper.type === WebSocketWrapper.TYPE;\\n    var useSSL = pushstream.useSSL;\\n    var url = websocket ? useSSL ? \"wss://\" : \"ws://\" : useSSL ? \"https://\" : \"http://\";\\n    url += pushstream.host;\\n    url += !useSSL && pushstream.port === 80 || useSSL && pushstream.port === 443 ? \"\" : \":\" + pushstream.port;\\n    url += prefix;\\n\\n    var channels = getChannelsPath(pushstream.channels);\\n    if (pushstream.channelsByArgument) {\\n      var channelParam = {};\\n      channelParam[pushstream.channelsArgument] = channels.substring(1);\\n      extraParams = extend({}, extraParams, channelParam);\\n    } else {\\n      url += channels;\\n    }\\n    return addParamsToUrl(url, extraParams);\\n  };\\n\\n  var getPublisherUrl = function getPublisherUrl(pushstream) {\\n    var channel = \"\";\\n    var url = pushstream.useSSL ? \"https://\" : \"http://\";\\n    url += pushstream.host;\\n    url += pushstream.port !== 80 && pushstream.port !== 443 ? \":\" + pushstream.port : \"\";\\n    url += pushstream.urlPrefixPublisher;\\n    for (var channelName in pushstream.channels) {\\n      if (!pushstream.channels.hasOwnProperty || pushstream.channels.hasOwnProperty(channelName)) {\\n        channel = channelName;\\n        break;\\n      }\\n    }\\n    url += \"?id=\" + channel;\\n    return url;\\n  };\\n\\n  var extract_xss_domain = function extract_xss_domain(domain) {\\n    // if domain is an ip address return it, else return ate least the last two parts of it\\n    if (domain.match(/^(\\\\d{1,3}\\\\.){3}\\\\d{1,3}$/)) {\\n      return domain;\\n    }\\n\\n    var domainParts = domain.split(\\'.\\');\\n    // if the domain ends with 3 chars or 2 chars preceded by more than 4 chars,\\n    // we can keep only 2 parts, else we have to keep at least 3 (or all domain name)\\n    var keepNumber = Math.max(domainParts.length - 1, domain.match(/(\\\\w{4,}\\\\.\\\\w{2}|\\\\.\\\\w{3,})$/) ? 2 : 3);\\n\\n    return domainParts.slice(-1 * keepNumber).join(\\'.\\');\\n  };\\n\\n  var linker = function linker(method, instance) {\\n    return function () {\\n      return method.apply(instance, arguments);\\n    };\\n  };\\n\\n  var clearTimer = function clearTimer(timer) {\\n    if (timer) {\\n      clearTimeout(timer);\\n    }\\n    return null;\\n  };\\n\\n  /* common callbacks */\\n  var onmessageCallback = function onmessageCallback(event) {\\n    Log4js.info(\"[\" + this.type + \"] message received\", arguments);\\n    var message = parseMessage(event.data, this.pushstream);\\n    this.pushstream._onmessage(message.data, message.id, message.channel, message.eventid, true);\\n  };\\n\\n  var onopenCallback = function onopenCallback() {\\n    this.pushstream._onopen();\\n    Log4js.info(\"[\" + this.type + \"] connection opened\");\\n  };\\n\\n  var onerrorCallback = function onerrorCallback(event) {\\n    Log4js.info(\"[\" + this.type + \"] error (disconnected by server):\", event);\\n    if (this.pushstream.readyState === PushStream.OPEN && this.type === EventSourceWrapper.TYPE && event.type === \\'error\\' && this.connection.readyState === EventSource.CONNECTING) {\\n      // EventSource already has a reconection function using the last-event-id header\\n      return;\\n    }\\n    this._closeCurrentConnection();\\n    this.pushstream._onerror({ type: event && event.type === \"load\" || this.pushstream.readyState === PushStream.CONNECTING ? \"load\" : \"timeout\" });\\n  };\\n\\n  /* wrappers */\\n\\n  var WebSocketWrapper = function WebSocketWrapper(pushstream) {\\n    if (!window.WebSocket && !window.MozWebSocket) {\\n      throw \"WebSocket not supported\";\\n    }\\n    this.type = WebSocketWrapper.TYPE;\\n    this.pushstream = pushstream;\\n    this.connection = null;\\n  };\\n\\n  WebSocketWrapper.TYPE = \"WebSocket\";\\n\\n  WebSocketWrapper.prototype = {\\n    connect: function connect() {\\n      this._closeCurrentConnection();\\n      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam());\\n      var url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixWebsocket, params);\\n      this.connection = window.WebSocket ? new window.WebSocket(url) : new window.MozWebSocket(url);\\n      this.connection.onerror = linker(onerrorCallback, this);\\n      this.connection.onclose = linker(onerrorCallback, this);\\n      this.connection.onopen = linker(onopenCallback, this);\\n      this.connection.onmessage = linker(onmessageCallback, this);\\n      Log4js.info(\"[WebSocket] connecting to:\", url);\\n    },\\n\\n    disconnect: function disconnect() {\\n      if (this.connection) {\\n        Log4js.debug(\"[WebSocket] closing connection to:\", this.connection.URL);\\n        this.connection.onclose = null;\\n        this._closeCurrentConnection();\\n        this.pushstream._onclose();\\n      }\\n    },\\n\\n    _closeCurrentConnection: function _closeCurrentConnection() {\\n      if (this.connection) {\\n        try {\\n          this.connection.close();\\n        } catch (e) {/* ignore error on closing */}\\n        this.connection = null;\\n      }\\n    },\\n\\n    sendMessage: function sendMessage(message) {\\n      if (this.connection) {\\n        this.connection.send(message);\\n      }\\n    }\\n  };\\n\\n  var EventSourceWrapper = function EventSourceWrapper(pushstream) {\\n    if (!window.EventSource) {\\n      throw \"EventSource not supported\";\\n    }\\n    this.type = EventSourceWrapper.TYPE;\\n    this.pushstream = pushstream;\\n    this.connection = null;\\n  };\\n\\n  EventSourceWrapper.TYPE = \"EventSource\";\\n\\n  EventSourceWrapper.prototype = {\\n    connect: function connect() {\\n      this._closeCurrentConnection();\\n      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam());\\n      var url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixEventsource, params);\\n      this.connection = new window.EventSource(url);\\n      this.connection.onerror = linker(onerrorCallback, this);\\n      this.connection.onopen = linker(onopenCallback, this);\\n      this.connection.onmessage = linker(onmessageCallback, this);\\n      Log4js.info(\"[EventSource] connecting to:\", url);\\n    },\\n\\n    disconnect: function disconnect() {\\n      if (this.connection) {\\n        Log4js.debug(\"[EventSource] closing connection to:\", this.connection.URL);\\n        this._closeCurrentConnection();\\n        this.pushstream._onclose();\\n      }\\n    },\\n\\n    _closeCurrentConnection: function _closeCurrentConnection() {\\n      if (this.connection) {\\n        try {\\n          this.connection.close();\\n        } catch (e) {/* ignore error on closing */}\\n        this.connection = null;\\n      }\\n    }\\n  };\\n\\n  var StreamWrapper = function StreamWrapper(pushstream) {\\n    this.type = StreamWrapper.TYPE;\\n    this.pushstream = pushstream;\\n    this.connection = null;\\n    this.url = null;\\n    this.frameloadtimer = null;\\n    this.pingtimer = null;\\n    this.iframeId = \"PushStreamManager_\" + pushstream.id;\\n  };\\n\\n  StreamWrapper.TYPE = \"Stream\";\\n\\n  StreamWrapper.prototype = {\\n    connect: function connect() {\\n      this._closeCurrentConnection();\\n      var domain = extract_xss_domain(this.pushstream.host);\\n      try {\\n        document.domain = domain;\\n      } catch (e) {\\n        Log4js.error(\"[Stream] (warning) problem setting document.domain = \" + domain + \" (OBS: IE8 does not support set IP numbers as domain)\");\\n      }\\n      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam(), { \"streamid\": this.pushstream.id });\\n      this.url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixStream, params);\\n      Log4js.debug(\"[Stream] connecting to:\", this.url);\\n      this.loadFrame(this.url);\\n    },\\n\\n    disconnect: function disconnect() {\\n      if (this.connection) {\\n        Log4js.debug(\"[Stream] closing connection to:\", this.url);\\n        this._closeCurrentConnection();\\n        this.pushstream._onclose();\\n      }\\n    },\\n\\n    _clear_iframe: function _clear_iframe() {\\n      var oldIframe = document.getElementById(this.iframeId);\\n      if (oldIframe) {\\n        oldIframe.onload = null;\\n        if (oldIframe.parentNode) {\\n          oldIframe.parentNode.removeChild(oldIframe);\\n        }\\n      }\\n    },\\n\\n    _closeCurrentConnection: function _closeCurrentConnection() {\\n      this._clear_iframe();\\n      if (this.connection) {\\n        this.pingtimer = clearTimer(this.pingtimer);\\n        this.frameloadtimer = clearTimer(this.frameloadtimer);\\n        this.connection = null;\\n        this.transferDoc = null;\\n        if (typeof window.CollectGarbage === \\'function\\') {\\n          window.CollectGarbage();\\n        }\\n      }\\n    },\\n\\n    loadFrame: function loadFrame(url) {\\n      this._clear_iframe();\\n      try {\\n        var transferDoc = new window.ActiveXObject(\"htmlfile\");\\n        transferDoc.open();\\n        transferDoc.write(\"<html><script>document.domain=\\\\\"\" + document.domain + \"\\\\\";</script></html>\");\\n        transferDoc.parentWindow.PushStream = PushStream;\\n        transferDoc.close();\\n        var ifrDiv = transferDoc.createElement(\"div\");\\n        transferDoc.appendChild(ifrDiv);\\n        ifrDiv.innerHTML = \"<iframe src=\\\\\"\" + url + \"\\\\\"></iframe>\";\\n        this.connection = ifrDiv.getElementsByTagName(\"IFRAME\")[0];\\n        this.connection.onload = linker(onerrorCallback, this);\\n        this.transferDoc = transferDoc;\\n      } catch (e) {\\n        var ifr = document.createElement(\"IFRAME\");\\n        ifr.style.width = \"1px\";\\n        ifr.style.height = \"1px\";\\n        ifr.style.border = \"none\";\\n        ifr.style.position = \"absolute\";\\n        ifr.style.top = \"-10px\";\\n        ifr.style.marginTop = \"-10px\";\\n        ifr.style.zIndex = \"-20\";\\n        ifr.PushStream = PushStream;\\n        document.body.appendChild(ifr);\\n        ifr.setAttribute(\"src\", url);\\n        ifr.onload = linker(onerrorCallback, this);\\n        this.connection = ifr;\\n      }\\n      this.connection.setAttribute(\"id\", this.iframeId);\\n      this.frameloadtimer = window.setTimeout(linker(onerrorCallback, this), this.pushstream.timeout);\\n    },\\n\\n    register: function register(iframeWindow) {\\n      this.frameloadtimer = clearTimer(this.frameloadtimer);\\n      iframeWindow.p = linker(this.process, this);\\n      this.connection.onload = linker(this._onframeloaded, this);\\n      this.pushstream._onopen();\\n      this.setPingTimer();\\n      Log4js.info(\"[Stream] frame registered\");\\n    },\\n\\n    process: function process(id, channel, data, eventid) {\\n      this.pingtimer = clearTimer(this.pingtimer);\\n      Log4js.info(\"[Stream] message received\", arguments);\\n      this.pushstream._onmessage(unescapeText(data), id, channel, eventid, true);\\n      this.setPingTimer();\\n    },\\n\\n    _onframeloaded: function _onframeloaded() {\\n      Log4js.info(\"[Stream] frame loaded (disconnected by server)\");\\n      this.connection.onload = null;\\n      this.disconnect();\\n    },\\n\\n    setPingTimer: function setPingTimer() {\\n      if (this.pingtimer) {\\n        clearTimer(this.pingtimer);\\n      }\\n      this.pingtimer = window.setTimeout(linker(onerrorCallback, this), this.pushstream.pingtimeout);\\n    }\\n  };\\n\\n  var LongPollingWrapper = function LongPollingWrapper(pushstream) {\\n    this.type = LongPollingWrapper.TYPE;\\n    this.pushstream = pushstream;\\n    this.connection = null;\\n    this.lastModified = null;\\n    this.etag = 0;\\n    this.connectionEnabled = false;\\n    this.opentimer = null;\\n    this.messagesQueue = [];\\n    this._linkedInternalListen = linker(this._internalListen, this);\\n    this.xhrSettings = {\\n      timeout: this.pushstream.longPollingTimeout,\\n      data: {},\\n      url: null,\\n      success: linker(this.onmessage, this),\\n      error: linker(this.onerror, this),\\n      load: linker(this.onload, this),\\n      beforeOpen: linker(this.beforeOpen, this),\\n      beforeSend: linker(this.beforeSend, this),\\n      afterReceive: linker(this.afterReceive, this)\\n    };\\n  };\\n\\n  LongPollingWrapper.TYPE = \"LongPolling\";\\n\\n  LongPollingWrapper.prototype = {\\n    connect: function connect() {\\n      this.messagesQueue = [];\\n      this._closeCurrentConnection();\\n      this.connectionEnabled = true;\\n      this.xhrSettings.url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixLongpolling);\\n      var domain = extract_xss_domain(this.pushstream.host);\\n      var currentDomain = extract_xss_domain(window.location.hostname);\\n      var port = this.pushstream.port;\\n      var currentPort = window.location.port || (this.pushstream.useSSL ? 443 : 80);\\n      this.useJSONP = domain !== currentDomain || port !== currentPort || this.pushstream.longPollingUseJSONP;\\n      this.xhrSettings.scriptId = \"PushStreamManager_\" + this.pushstream.id;\\n      if (this.useJSONP) {\\n        this.pushstream.longPollingByHeaders = false;\\n        this.xhrSettings.data.callback = \"PushStreamManager[\" + this.pushstream.id + \"].wrapper.onmessage\";\\n      }\\n      this._internalListen();\\n      this.opentimer = window.setTimeout(linker(onopenCallback, this), 5000);\\n      Log4js.info(\"[LongPolling] connecting to:\", this.xhrSettings.url);\\n    },\\n\\n    _listen: function _listen() {\\n      if (this._internalListenTimeout) {\\n        clearTimer(this._internalListenTimeout);\\n      }\\n      this._internalListenTimeout = window.setTimeout(this._linkedInternalListen, this.pushstream.longPollingInterval);\\n    },\\n\\n    _internalListen: function _internalListen() {\\n      if (this.connectionEnabled) {\\n        this.xhrSettings.data = extend({}, this.pushstream.extraParams(), this.xhrSettings.data);\\n        if (this.useJSONP) {\\n          Ajax.jsonp(this.xhrSettings);\\n        } else if (!this.connection) {\\n          this.connection = Ajax.load(this.xhrSettings);\\n        }\\n      }\\n    },\\n\\n    disconnect: function disconnect() {\\n      this.connectionEnabled = false;\\n      if (this.connection) {\\n        Log4js.debug(\"[LongPolling] closing connection to:\", this.xhrSettings.url);\\n        this._closeCurrentConnection();\\n        this.pushstream._onclose();\\n      }\\n    },\\n\\n    _closeCurrentConnection: function _closeCurrentConnection() {\\n      this.opentimer = clearTimer(this.opentimer);\\n      if (this.connection) {\\n        try {\\n          this.connection.abort();\\n        } catch (e) {/* ignore error on closing */}\\n        this.connection = null;\\n        this.lastModified = null;\\n        this.xhrSettings.url = null;\\n      }\\n    },\\n\\n    beforeOpen: function beforeOpen(xhr) {\\n      if (this.lastModified === null) {\\n        var date = new Date();\\n        if (this.pushstream.secondsAgo) {\\n          date.setTime(date.getTime() - this.pushstream.secondsAgo * 1000);\\n        }\\n        this.lastModified = dateToUTCString(date);\\n      }\\n\\n      if (!this.pushstream.longPollingByHeaders) {\\n        this.xhrSettings.data[this.pushstream.longPollingTagArgument] = this.etag;\\n        this.xhrSettings.data[this.pushstream.longPollingTimeArgument] = this.lastModified;\\n      }\\n    },\\n\\n    beforeSend: function beforeSend(xhr) {\\n      if (this.pushstream.longPollingByHeaders) {\\n        xhr.setRequestHeader(\"If-None-Match\", this.etag);\\n        xhr.setRequestHeader(\"If-Modified-Since\", this.lastModified);\\n      }\\n    },\\n\\n    afterReceive: function afterReceive(xhr) {\\n      if (this.pushstream.longPollingByHeaders) {\\n        this.etag = xhr.getResponseHeader(\\'Etag\\');\\n        this.lastModified = xhr.getResponseHeader(\\'Last-Modified\\');\\n      }\\n      this.connection = null;\\n    },\\n\\n    onerror: function onerror(status) {\\n      if (this.connectionEnabled) {\\n        /* abort(), called by disconnect(), call this callback, but should be ignored */\\n        if (status === 304) {\\n          this._listen();\\n        } else {\\n          Log4js.info(\"[LongPolling] error (disconnected by server):\", status);\\n          this._closeCurrentConnection();\\n          this.pushstream._onerror({ type: status === 403 ? \"load\" : \"timeout\" });\\n        }\\n      }\\n    },\\n\\n    onload: function onload() {\\n      this._listen();\\n    },\\n\\n    onmessage: function onmessage(responseText) {\\n      Log4js.info(\"[LongPolling] message received\", responseText);\\n      var lastMessage = null;\\n      var messages = isArray(responseText) ? responseText : responseText.split(\"\\\\r\\\\n\");\\n      for (var i = 0; i < messages.length; i++) {\\n        if (messages[i]) {\\n          lastMessage = parseMessage(messages[i], this.pushstream);\\n          this.messagesQueue.push(lastMessage);\\n          if (!this.pushstream.longPollingByHeaders && lastMessage.time) {\\n            this.etag = lastMessage.tag;\\n            this.lastModified = lastMessage.time;\\n          }\\n        }\\n      }\\n\\n      this._listen();\\n\\n      while (this.messagesQueue.length > 0) {\\n        var message = this.messagesQueue.shift();\\n        this.pushstream._onmessage(message.data, message.id, message.channel, message.eventid, this.messagesQueue.length === 0);\\n      }\\n    }\\n  };\\n\\n  /* mains class */\\n\\n  var PushStreamManager = [];\\n\\n  var PushStream = function PushStream(settings) {\\n    settings = settings || {};\\n\\n    this.id = PushStreamManager.push(this) - 1;\\n\\n    this.useSSL = settings.useSSL || false;\\n    this.host = settings.host || window.location.hostname;\\n    this.port = settings.port || (this.useSSL ? 443 : 80);\\n\\n    this.timeout = settings.timeout || 15000;\\n    this.pingtimeout = settings.pingtimeout || 30000;\\n    this.reconnecttimeout = settings.reconnecttimeout || 3000;\\n    this.checkChannelAvailabilityInterval = settings.checkChannelAvailabilityInterval || 60000;\\n\\n    this.secondsAgo = Number(settings.secondsAgo);\\n    this.longPollingByHeaders = settings.longPollingByHeaders === undefined ? true : settings.longPollingByHeaders;\\n    this.longPollingTagArgument = settings.longPollingTagArgument || \\'tag\\';\\n    this.longPollingTimeArgument = settings.longPollingTimeArgument || \\'time\\';\\n    this.longPollingUseJSONP = settings.longPollingUseJSONP || false;\\n    this.longPollingTimeout = settings.longPollingTimeout || 30000;\\n    this.longPollingInterval = settings.longPollingInterval || 100;\\n\\n    this.reconnecttimer = null;\\n\\n    this.urlPrefixPublisher = settings.urlPrefixPublisher || \\'/pub\\';\\n    this.urlPrefixStream = settings.urlPrefixStream || \\'/sub\\';\\n    this.urlPrefixEventsource = settings.urlPrefixEventsource || \\'/ev\\';\\n    this.urlPrefixLongpolling = settings.urlPrefixLongpolling || \\'/lp\\';\\n    this.urlPrefixWebsocket = settings.urlPrefixWebsocket || \\'/ws\\';\\n\\n    this.jsonIdKey = settings.jsonIdKey || \\'id\\';\\n    this.jsonChannelKey = settings.jsonChannelKey || \\'channel\\';\\n    this.jsonDataKey = settings.jsonDataKey || \\'text\\';\\n    this.jsonTagKey = settings.jsonTagKey || \\'tag\\';\\n    this.jsonTimeKey = settings.jsonTimeKey || \\'time\\';\\n    this.jsonEventIdKey = settings.jsonEventIdKey || \\'eventid\\';\\n\\n    this.modes = (settings.modes || \\'eventsource|websocket|stream|longpolling\\').split(\\'|\\');\\n    this.wrappers = [];\\n    this.wrapper = null;\\n\\n    this.onopen = null;\\n    this.onmessage = null;\\n    this.onerror = null;\\n    this.onstatuschange = null;\\n\\n    this.channels = {};\\n    this.channelsCount = 0;\\n    this.channelsByArgument = settings.channelsByArgument || false;\\n    this.channelsArgument = settings.channelsArgument || \\'channels\\';\\n\\n    this.extraParams = settings.extraParams || this.extraParams;\\n\\n    for (var i = 0; i < this.modes.length; i++) {\\n      try {\\n        var wrapper = null;\\n        switch (this.modes[i]) {\\n          case \"websocket\":\\n            wrapper = new WebSocketWrapper(this);break;\\n          case \"eventsource\":\\n            wrapper = new EventSourceWrapper(this);break;\\n          case \"longpolling\":\\n            wrapper = new LongPollingWrapper(this);break;\\n          case \"stream\":\\n            wrapper = new StreamWrapper(this);break;\\n        }\\n        this.wrappers[this.wrappers.length] = wrapper;\\n      } catch (e) {\\n        Log4js.info(e);\\n      }\\n    }\\n\\n    this._setState(0);\\n  };\\n\\n  /* constants */\\n  PushStream.LOG_LEVEL = \\'error\\'; /* debug, info, error */\\n  PushStream.LOG_OUTPUT_ELEMENT_ID = \\'Log4jsLogOutput\\';\\n\\n  /* status codes */\\n  PushStream.CLOSED = 0;\\n  PushStream.CONNECTING = 1;\\n  PushStream.OPEN = 2;\\n\\n  /* main code */\\n  PushStream.prototype = {\\n    extraParams: function extraParams() {\\n      return {};\\n    },\\n\\n    addChannel: function addChannel(channel, options) {\\n      if (escapeText(channel) !== channel) {\\n        throw \"Invalid channel name! Channel has to be a set of [a-zA-Z0-9]\";\\n      }\\n      Log4js.debug(\"entering addChannel\");\\n      if (typeof this.channels[channel] !== \"undefined\") {\\n        throw \"Cannot add channel \" + channel + \": already subscribed\";\\n      }\\n      options = options || {};\\n      Log4js.info(\"adding channel\", channel, options);\\n      this.channels[channel] = options;\\n      this.channelsCount++;\\n      if (this.readyState !== PushStream.CLOSED) {\\n        this.connect();\\n      }\\n      Log4js.debug(\"leaving addChannel\");\\n    },\\n\\n    removeChannel: function removeChannel(channel) {\\n      if (this.channels[channel]) {\\n        Log4js.info(\"removing channel\", channel);\\n        delete this.channels[channel];\\n        this.channelsCount--;\\n      }\\n    },\\n\\n    removeAllChannels: function removeAllChannels() {\\n      Log4js.info(\"removing all channels\");\\n      this.channels = {};\\n      this.channelsCount = 0;\\n    },\\n\\n    _setState: function _setState(state) {\\n      if (this.readyState !== state) {\\n        Log4js.info(\"status changed\", state);\\n        this.readyState = state;\\n        if (this.onstatuschange) {\\n          this.onstatuschange(this.readyState);\\n        }\\n      }\\n    },\\n\\n    connect: function connect() {\\n      Log4js.debug(\"entering connect\");\\n      if (!this.host) {\\n        throw \"PushStream host not specified\";\\n      }\\n      if (isNaN(this.port)) {\\n        throw \"PushStream port not specified\";\\n      }\\n      if (!this.channelsCount) {\\n        throw \"No channels specified\";\\n      }\\n      if (this.wrappers.length === 0) {\\n        throw \"No available support for this browser\";\\n      }\\n\\n      this._keepConnected = true;\\n      this._lastUsedMode = 0;\\n      this._connect();\\n\\n      Log4js.debug(\"leaving connect\");\\n    },\\n\\n    disconnect: function disconnect() {\\n      Log4js.debug(\"entering disconnect\");\\n      this._keepConnected = false;\\n      this._disconnect();\\n      this._setState(PushStream.CLOSED);\\n      Log4js.info(\"disconnected\");\\n      Log4js.debug(\"leaving disconnect\");\\n    },\\n\\n    _connect: function _connect() {\\n      this._disconnect();\\n      this._setState(PushStream.CONNECTING);\\n      this.wrapper = this.wrappers[this._lastUsedMode++ % this.wrappers.length];\\n\\n      try {\\n        this.wrapper.connect();\\n      } catch (e) {\\n        //each wrapper has a cleanup routine at disconnect method\\n        if (this.wrapper) {\\n          this.wrapper.disconnect();\\n        }\\n      }\\n    },\\n\\n    _disconnect: function _disconnect() {\\n      this.reconnecttimer = clearTimer(this.reconnecttimer);\\n      if (this.wrapper) {\\n        this.wrapper.disconnect();\\n      }\\n    },\\n\\n    _onopen: function _onopen() {\\n      this.reconnecttimer = clearTimer(this.reconnecttimer);\\n      this._setState(PushStream.OPEN);\\n      if (this._lastUsedMode > 0) {\\n        this._lastUsedMode--; //use same mode on next connection\\n      }\\n    },\\n\\n    _onclose: function _onclose() {\\n      this.reconnecttimer = clearTimer(this.reconnecttimer);\\n      this._setState(PushStream.CLOSED);\\n      this._reconnect(this.reconnecttimeout);\\n    },\\n\\n    _onmessage: function _onmessage(data, id, channel, eventid, isLastMessageFromBatch) {\\n      Log4js.debug(\"message\", data, id, channel, eventid, isLastMessageFromBatch);\\n      if (id === -2) {\\n        if (this.onchanneldeleted) {\\n          this.onchanneldeleted(channel);\\n        }\\n      } else if (id > 0 && typeof this.channels[channel] !== \"undefined\") {\\n        if (this.onmessage) {\\n          this.onmessage(data, id, channel, eventid, isLastMessageFromBatch);\\n        }\\n      }\\n    },\\n\\n    _onerror: function _onerror(error) {\\n      this._setState(PushStream.CLOSED);\\n      this._reconnect(error.type === \"timeout\" ? this.reconnecttimeout : this.checkChannelAvailabilityInterval);\\n      if (this.onerror) {\\n        this.onerror(error);\\n      }\\n    },\\n\\n    _reconnect: function _reconnect(timeout) {\\n      if (this._keepConnected && !this.reconnecttimer && this.readyState !== PushStream.CONNECTING) {\\n        Log4js.info(\"trying to reconnect in\", timeout);\\n        this.reconnecttimer = window.setTimeout(linker(this._connect, this), timeout);\\n      }\\n    },\\n\\n    sendMessage: function sendMessage(message, successCallback, errorCallback) {\\n      message = escapeText(message);\\n      if (this.wrapper.type === WebSocketWrapper.TYPE) {\\n        this.wrapper.sendMessage(message);\\n        if (successCallback) {\\n          successCallback();\\n        }\\n      } else {\\n        Ajax.post({ url: getPublisherUrl(this), data: message, success: successCallback, error: errorCallback });\\n      }\\n    }\\n  };\\n\\n  PushStream.sendMessage = function (url, message, successCallback, errorCallback) {\\n    Ajax.post({ url: url, data: escapeText(message), success: successCallback, error: errorCallback });\\n  };\\n\\n  // to make server header template more clear, it calls register and\\n  // by a url parameter we find the stream wrapper instance\\n  PushStream.register = function (iframe) {\\n    var matcher = iframe.window.location.href.match(/streamid=([0-9]*)&?/);\\n    if (matcher[1] && PushStreamManager[matcher[1]]) {\\n      PushStreamManager[matcher[1]].wrapper.register(iframe);\\n    }\\n  };\\n\\n  PushStream.unload = function () {\\n    for (var i = 0; i < PushStreamManager.length; i++) {\\n      try {\\n        PushStreamManager[i].disconnect();\\n      } catch (e) {}\\n    }\\n  };\\n\\n  /* make class public */\\n  window.PushStream = PushStream;\\n  window.PushStreamManager = PushStreamManager;\\n\\n  if (window.attachEvent) {\\n    window.attachEvent(\"onunload\", PushStream.unload);\\n  }\\n  if (window.addEventListener) {\\n    window.addEventListener.call(window, \"unload\", PushStream.unload, false);\\n  }\\n})(window, document);\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/lib/pushstream.js\\n// module id = 781\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/lib/pushstream.js?');\n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/*\\n Controller for apps page http://9gag.com/apps\\n\\n */\\nvar AppsController = $.extend({}, new _base2.default(), {\\n\\n    init: function init() {\\n        this.bindElements();\\n    },\\n\\n    selectors: {},\\n\\n    bindElements: function bindElements() {\\n        if (!_page2.default.isAppsPage()) return;\\n\\n        this.bindScreenshot();\\n    },\\n\\n    bindScreenshot: function bindScreenshot() {\\n        $('#jsid-jcarousel').jcarousel({\\n            wrap: 'circular'\\n        }).jcarouselAutoscroll({\\n            interval: 3000,\\n            target: '+=1',\\n            autostart: true\\n        });\\n    }\\n\\n});\\n\\nmodule.exports = AppsController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/apps.js\\n// module id = 841\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/apps.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheController = $.extend({}, new _base2.default(), {\\n    // DOM cache controller, intended to reduce DOM parsing and entry-by-entry lookup\\n\\n    _dataMap: {},\\n    _updateQueue: [],\\n    _entryUpdateQueue: [],\\n\\n    init: function init() {\\n        this._dataMap['entryInfo'] = {};\\n    },\\n\\n    keys: {\\n        ENTRY_LIST: 'entryList',\\n        ENTRY_INFO: 'entryInfo',\\n        FEATURED_LIST: 'featuredList',\\n        FEATURED_INFO: 'featuredInfo'\\n    },\\n\\n    getValue: function getValue(cacheKey) {\\n        return this._dataMap[cacheKey];\\n    },\\n\\n    setValue: function setValue(cacheKey, value) {\\n        this._dataMap[cacheKey] = value;\\n    },\\n\\n    invalidate: function invalidate(cacheKey) {\\n        delete this._dataMap[cacheKey];\\n    },\\n\\n    reset: function reset() {\\n        this._dataMap = {};\\n    },\\n\\n    notifyForCacheUpdate: function notifyForCacheUpdate(cacheKey) {\\n        this._updateQueue.push(cacheKey);\\n    },\\n\\n    isUpdateNeeded: function isUpdateNeeded(cacheKey) {\\n        return $.inArray(cacheKey, this._updateQueue) >= 0;\\n    },\\n\\n    notifyForCacheUpdateCompleted: function notifyForCacheUpdateCompleted(cacheKey) {\\n        var index = $.inArray(cacheKey, this._updateQueue);\\n        if (index >= 0) {\\n            this._updateQueue.splice(index, 1);\\n        }\\n    },\\n\\n    setList: function setList(value, list) {\\n        if (value instanceof Array) {\\n            this._dataMap[list] = value;\\n        }\\n    },\\n\\n    getList: function getList(list) {\\n        if (!this._dataMap[list]) {\\n            this._dataMap[list] = [];\\n        }\\n        return this._dataMap[list];\\n    },\\n\\n    addItemsToList: function addItemsToList(items, list) {\\n        for (var i = 0; i < items.length; i++) {\\n            if ($.inArray(items[i], this.getList(list)) === false) {\\n                this.getList(list).push(items[i]);\\n            }\\n        };\\n    },\\n\\n    setItemInfoForList: function setItemInfoForList(itemId, itemInfo, list) {\\n        this.getList(list)[itemId] = itemInfo;\\n    },\\n\\n    getItemInfoForList: function getItemInfoForList(itemId, list) {\\n        if (!this.getList(list)) {\\n            this.getList(list)[itemId] = {};\\n        }\\n        return this.getList(list)[itemId];\\n    },\\n\\n    getItemInfoForKeyInList: function getItemInfoForKeyInList(itemId, key, list) {\\n        if (this.getItemInfoForList(itemId, list)) {\\n            return this.getItemInfoForList(itemId, list)[key];\\n        } else {\\n            return null;\\n        }\\n    },\\n\\n    handlers: {\\n\\n        /*\\n         * @param container // Div entry container\\n         */\\n        getEntryInfoFromDOM: function getEntryInfoFromDOM(container) {\\n            var entryInfo = {\\n                'offset': $(container).offset(),\\n                'height': $(container).height(),\\n                'outerHeight': $(container).outerHeight()\\n            };\\n\\n            return entryInfo;\\n        },\\n\\n        getFeaturedItemInfoFromDOM: function getFeaturedItemInfoFromDOM(container) {\\n            var itemInfo = {\\n                'top': $(container).offset().top,\\n                'height': $(container).height()\\n            };\\n\\n            return itemInfo;\\n        },\\n\\n        featuredItemHandler: {\\n\\n            /* Featured Item Cache Start - Featured Sidebar specific shortcut */\\n            setFeaturedList: function setFeaturedList(value) {\\n                var _self = CacheController;\\n                _self.setList(value, _self.keys.FEATURED_LIST);\\n            },\\n\\n            getFeaturedList: function getFeaturedList() {\\n                var _self = CacheController;\\n                return _self.getList(_self.keys.FEATURED_LIST);\\n            },\\n\\n            addFeaturedItemsToList: function addFeaturedItemsToList(items) {\\n                var _self = CacheController;\\n                _self.addItemsToList(items, _self.keys.FEATURED_LIST);\\n            },\\n\\n            setFeaturedItemInfo: function setFeaturedItemInfo(itemId, itemInfo) {\\n                var _self = CacheController;\\n                _self.setItemInfoForList(itemId, itemInfo, _self.keys.FEATURED_INFO);\\n            },\\n\\n            getFeaturedItemInfo: function getFeaturedItemInfo(itemId) {\\n                var _self = CacheController;\\n                return _self.getItemInfoForList(itemId, _self.keys.FEATURED_INFO);\\n            },\\n\\n            getFeaturedItemInfoForKey: function getFeaturedItemInfoForKey(itemId, key) {\\n                var _self = CacheController;\\n                return _self.getItemInfoForKeyInList(itemId, key, _self.keys.FEATURED_INFO);\\n            }\\n        },\\n\\n        entryHandler: {\\n\\n            __self: CacheController,\\n\\n            /* Entry Item Cache Start - Entry specific shortcut */\\n            setEntryList: function setEntryList(value) {\\n                var _self = CacheController;\\n                _self.setList(value, _self.keys.ENTRY_LIST);\\n            },\\n\\n            getEntryList: function getEntryList() {\\n                var _self = CacheController;\\n                return _self.getList(_self.keys.ENTRY_LIST);\\n            },\\n\\n            addEntriesToList: function addEntriesToList(entries) {\\n                var _self = CacheController;\\n                _self.addItemsToList(entries, _self.keys.ENTRY_LIST);\\n            },\\n\\n            setEntryInfo: function setEntryInfo(entryId, entryInfo) {\\n                var _self = CacheController;\\n                _self.setItemInfoForList(entryId, entryInfo, _self.keys.ENTRY_INFO);\\n            },\\n\\n            getEntryInfo: function getEntryInfo(entryId) {\\n                var _self = CacheController;\\n                return _self.getItemInfoForList(entryId, _self.keys.ENTRY_INFO);\\n            },\\n\\n            getEntryInfoForKey: function getEntryInfoForKey(entryId, key) {\\n                var _self = CacheController;\\n                return _self.getItemInfoForKeyInList(entryId, key, _self.keys.ENTRY_INFO);\\n            }\\n        }\\n\\n    },\\n\\n    getFeaturedItemHandler: function getFeaturedItemHandler() {\\n        var _self = CacheController;\\n        return _self.handlers.featuredItemHandler;\\n    },\\n\\n    getEntryHandler: function getEntryHandler() {\\n        var _self = CacheController;\\n        return _self.handlers.entryHandler;\\n    },\\n\\n    /////////\\n    parseEntryInfo: function parseEntryInfo() {\\n        var _self = CacheController;\\n        var entryAry = [];\\n        $(ModuleFactory.ListController.selectors.ENTRY_CONTAINER).each(function () {\\n            var entryId = $(this).data('entry-id');\\n            entryAry.push(entryId);\\n\\n            // DOM info\\n            var entryInfo = _self.handlers.getEntryInfoFromDOM($(this));\\n            _self.handlers.entryHandler.setEntryInfo(entryId, entryInfo);\\n        });\\n\\n        _self.handlers.entryHandler.setEntryList(entryAry);\\n    },\\n    /* Entry Item Cache End */\\n\\n    /*\\n     * @param Array of entryId\\n     */\\n    updateEntryInfoForEntryIds: function updateEntryInfoForEntryIds(entryIds) {\\n        for (var i = 0; i < entryIds.length; i++) {\\n            var container = $('#jsid-entry-entity-' + entryIds[i]);\\n            if (container && container.length == 1) {\\n                this.handlers.getEntryInfoFromDOM(container);\\n            }\\n        };\\n    }\\n\\n});\\n\\nmodule.exports = CacheController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cache.js\\n// module id = 842\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cache.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _userPreference = __webpack_require__(865);\\n\\nvar _userPreference2 = _interopRequireDefault(_userPreference);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserPreferenceController = $.extend({}, new _base2.default(), {\\n\\n    controllerName: 'userPreference',\\n\\n    selectors: {},\\n\\n    handler: null,\\n    remoteHandler: null,\\n\\n    init: function init(remoteHandler) {\\n        this.handler = _userPreference2.default;\\n        this.remoteHandler = remoteHandler;\\n\\n        return this;\\n    },\\n\\n    process: function process() {\\n\\n        // e.g. listen dom ready\\n\\n        var data = this.handler.get();\\n        // ask remote handler help\\n        if (!data) {\\n            this.remoteHandler.addToQueue(this.controllerName, this.handler.formatRemoteParams(), 'responseCallback');\\n        }\\n    },\\n\\n    responseCallback: function responseCallback(data) {\\n        if (data['user-preference'] != undefined) {\\n            var preference = data['user-preference'];\\n\\n            this._updateCookies(preference);\\n            this._updateUI();\\n\\n            this.handler.updateCache(preference);\\n        }\\n    },\\n\\n    _updateCookies: function _updateCookies(preference) {\\n        var options = _page2.default.getCookieOptions();\\n        options.domain = Configs.get('page.cookie_domain');\\n\\n        if (preference.isSafeModeOn !== undefined) {\\n            $.cookie(ModuleFactory.PageController._safeModeCookieKey, preference.isSafeModeOn ? '1' : '0', options);\\n        }\\n    },\\n\\n    _updateUI: function _updateUI() {\\n        // This update the UI using the value in cookie, because sometimes the safe mode settings in cookie is more\\n        // up-to-date than the local storage settings\\n    }\\n\\n});\\n\\nmodule.exports = CacheableUserPreferenceController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-user-preference.js\\n// module id = 843\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-user-preference.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, LogUtils) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _upload = __webpack_require__(184);\\n\\nvar _upload2 = _interopRequireDefault(_upload);\\n\\nvar _userQuota = __webpack_require__(866);\\n\\nvar _userQuota2 = _interopRequireDefault(_userQuota);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserQuotaController = $.extend({}, new _base2.default(), {\\n\\n    controllerName: 'userQuota',\\n\\n    handler: null,\\n    remoteHandler: null,\\n\\n    init: function init(remoteHandler) {\\n        this.handler = _userQuota2.default;\\n        this.remoteHandler = remoteHandler;\\n\\n        return this;\\n    },\\n\\n    process: function process() {\\n        var data = this.handler.get();\\n\\n        if (data) {\\n            Configs._configs['user']['showCaptcha'] = data['restricted'] !== false; // so undefined would give true\\n            this.updateUI();\\n        } else {\\n            // ask remote handler help\\n            LogUtils.log(\\\"empty cacheUserQuota. try to retrieve from server\\\");\\n            this.remoteHandler.addToQueue(this.controllerName, this.handler.formatRemoteParams(), 'responseCallback');\\n        }\\n    },\\n\\n    responseCallback: function responseCallback(data) {\\n        if (data['user-quota'] != undefined) {\\n            this.handler.updateCache(data['user-quota']);\\n            Configs._configs['user']['showCaptcha'] = data['user-quota']['restricted'] !== false;\\n            this.updateUI();\\n        }\\n    },\\n\\n    updateUI: function updateUI(data) {\\n        _upload2.default.initialize();\\n    }\\n\\n});\\n\\nmodule.exports = CacheableUserQuotaController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(10)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-user-quota.js\\n// module id = 844\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-user-quota.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, LogUtils) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _userUpload = __webpack_require__(420);\\n\\nvar _userUpload2 = _interopRequireDefault(_userUpload);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserUploadController = $.extend({}, new _base2.default(), {\\n\\n    controllerName: 'userUpload',\\n\\n    selectors: {\\n        ENTRY_INFO: '.badge-entry-info',\\n        DELETE_SEPARATOR: '.badge-item-delete-dot',\\n        DELETE_LINK: '.badge-item-delete',\\n        REPORT_SEPARATOR: '.badge-item-report-dot',\\n        REPORT_LINK: '.badge-item-report',\\n        ARTICLE: '#individual-post article'\\n    },\\n\\n    handler: null,\\n    remoteHandler: null,\\n\\n    init: function init(remoteHandler) {\\n        this.handler = _userUpload2.default;\\n        this.remoteHandler = remoteHandler;\\n\\n        return this;\\n    },\\n\\n    process: function process() {\\n        if (Configs.get('page.page_key') == 'Post') {\\n            var data = this.handler.get();\\n\\n            if (data) {\\n                LogUtils.log('found cacheUserUpload. update ui');\\n                this.updateUI(data);\\n            }\\n\\n            // ask remote handler help\\n            if (!data) {\\n                LogUtils.log(\\\"empty cacheUserUpload. try to retrieve from server\\\");\\n                this.remoteHandler.addToQueue(this.controllerName, this.handler.formatRemoteParams(), 'responseCallback');\\n            }\\n        }\\n    },\\n\\n    responseCallback: function responseCallback(data) {\\n        if (data['user-upload'] != undefined) {\\n            this.handler.updateCache(data['user-upload']);\\n            this.updateUI(data['user-upload']);\\n        }\\n    },\\n\\n    updateUI: function updateUI(data) {\\n        // find entry elements and update UI if exist in data\\n        var _self = this;\\n        var entryId = $(_self.selectors.ARTICLE).data('entry-id');\\n        if (data.indexOf(entryId) != -1) {\\n            // $(_self.selectors.DELETE_SEPARATOR).removeClass( \\\"hide\\\" );\\n            $(_self.selectors.DELETE_LINK).removeClass(\\\"hide\\\");\\n            $(_self.selectors.REPORT_SEPARATOR).addClass(\\\"hide\\\");\\n            $(_self.selectors.REPORT_LINK).addClass(\\\"hide\\\");\\n\\n            if ($(_self.selectors.ENTRY_INFO).text().match(/ ago/)) {\\n                $(_self.selectors.REPORT_SEPARATOR).removeClass(\\\"hide\\\");\\n            }\\n        }\\n    }\\n\\n});\\n\\nmodule.exports = CacheableUserUploadController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(10)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-user-upload.js\\n// module id = 845\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-user-upload.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils, ModuleFactory, Configs) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _upload = __webpack_require__(184);\\n\\nvar _upload2 = _interopRequireDefault(_upload);\\n\\nvar _samplingFeature = __webpack_require__(857);\\n\\nvar _samplingFeature2 = _interopRequireDefault(_samplingFeature);\\n\\nvar _user = __webpack_require__(867);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _user3 = __webpack_require__(93);\\n\\nvar _user4 = _interopRequireDefault(_user3);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserController = $.extend({}, new _base2.default(), {\\n\\n    controllerName: 'user',\\n\\n    selectors: {},\\n\\n    handler: null,\\n    remoteHandler: null,\\n    _unverifiedCookieKey: 'unverified',\\n\\n    init: function init(remoteHandler) {\\n        this.handler = _user2.default;\\n        this.remoteHandler = remoteHandler;\\n\\n        return this;\\n    },\\n\\n    process: function process() {\\n\\n        // e.g. listen dom ready\\n        //  Looking up user\\n\\n        var data = this.handler.get();\\n\\n        if (data) {\\n            LogUtils.log(\\\"found cache cachedUser. update ui\\\");\\n            this.updateUI(data);\\n        }\\n\\n        // ask remote handler help\\n        if (!data) {\\n            LogUtils.log(\\\"empty cache cachedUser. try to retrieve from server\\\");\\n            this.remoteHandler.addToQueue(this.controllerName, this.handler.formatRemoteParams(), 'responseCallback');\\n        }\\n    },\\n\\n    responseCallback: function responseCallback(data) {\\n        if (data['user'] != undefined) {\\n\\n            // update to cache\\n            var cachedUser = this.handler.getFromCache();\\n            if (cachedUser == null) {\\n                cachedUser = {};\\n            }\\n            $.each(data['user'], function (i, v) {\\n                cachedUser[i] = v;\\n            });\\n\\n            this.handler.updateCache(cachedUser);\\n\\n            this.updateUI(data);\\n        } else {\\n            ModuleFactory.PageController.initUserFunction();\\n        }\\n    },\\n\\n    updateUI: function updateUI(data) {\\n        // find user elements and update UI if exist in data\\n        if (data['user']) {\\n            var user = data['user'];\\n        } else {\\n            var user = data;\\n        }\\n        var username = user['username'];\\n        var user_id = user['userId'];\\n        var account_id = user['accountId'];\\n        var avatar = user['avatar'];\\n        var noti = user['notiOptions'];\\n        var comment_auth = user['commentSso'];\\n        var hashId = user['hashId'];\\n        var authUrl = user['authUrl'];\\n\\n        Configs._configs['user']['username'] = username;\\n        Configs._configs['user']['id'] = user_id;\\n        Configs._configs['user']['account_id'] = account_id;\\n        Configs._configs['user']['avatar'] = avatar;\\n        Configs._configs['user']['noti'] = noti;\\n        Configs._configs['user']['comment_auth'] = comment_auth;\\n        Configs._configs['user']['hashId'] = hashId;\\n        Configs._configs['user']['acs_url'] = authUrl;\\n        _user4.default.init();\\n        ModuleFactory.PageController.initUserFunction();\\n        if ($.cookie(this._unverifiedCookieKey) == 1) {\\n            ModuleFactory.PageController.showConfirmEmailBanner(username);\\n        }\\n        if (username) {\\n            if (document.getElementById('jsid-my-profile')) {\\n                var myprofile = document.getElementById('jsid-my-profile');\\n                myprofile.href = \\\"/u/\\\" + username;\\n            }\\n        }\\n\\n        if (avatar) {\\n            $('#jsid-avatar').attr('src', avatar);\\n            _upload2.default.updateMyProfileOnlyIcon(avatar);\\n        }\\n        _samplingFeature2.default.updateUI(user['samplingFeatures']);\\n    }\\n});\\n\\nmodule.exports = CacheableUserController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(26), __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-user.js\\n// module id = 846\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-user.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _vote = __webpack_require__(250);\\n\\nvar _vote2 = _interopRequireDefault(_vote);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableVoteController = $.extend({}, new _base2.default(), {\\n\\n    controllerName: 'vote',\\n\\n    selectors: {\\n        ENTRY: 'article[data-entry-id]'\\n    },\\n\\n    handler: null,\\n    remoteHandler: null,\\n\\n    init: function init(remoteHandler) {\\n        this.handler = _vote2.default;\\n        this.remoteHandler = remoteHandler;\\n\\n        return this;\\n    },\\n\\n    process: function process() {\\n\\n        var data = this.handler.get();\\n\\n        if (data) {\\n            LogUtils.log(\\\"found cache. update ui\\\");\\n            this.updateUI(data);\\n        }\\n\\n        // ask remote handler help\\n        if (!data) {\\n            LogUtils.log(\\\"empty cache. try to retrieve from server\\\");\\n            this.remoteHandler.addToQueue(this.controllerName, this.handler.formatRemoteParams(), 'responseCallback');\\n        }\\n    },\\n\\n    responseCallback: function responseCallback(data) {\\n\\n        if (data['vote'] != undefined) {\\n\\n            // update to cache\\n            var cachedEntryVotes = this.handler.getFromCache();\\n            if (cachedEntryVotes == null) {\\n                cachedEntryVotes = {};\\n            }\\n            $.each(data['vote'], function (entryKey, score) {\\n                cachedEntryVotes[entryKey] = parseInt(score);\\n            });\\n\\n            this.handler.updateCache(cachedEntryVotes);\\n\\n            this.updateUI(data['vote']);\\n        }\\n    },\\n\\n    updateUI: function updateUI(data) {\\n\\n        // find entry elements and update UI if exist in data\\n        $(this.selectors.ENTRY).each(function (i, v) {\\n\\n            var entryId = $(v).data('entry-id');\\n            if (data[entryId] != undefined) {\\n\\n                var score = parseInt(data[entryId]);\\n                if (score > 0) {\\n                    ModuleFactory.PostController.handlers.likeHandler(entryId);\\n                } else if (score < 0) {\\n                    ModuleFactory.PostController.handlers.dislikeHandler(entryId);\\n                } else {\\n                    ModuleFactory.PostController.handlers.unlikeHandler(entryId);\\n                }\\n            }\\n        });\\n    }\\n\\n});\\n\\nmodule.exports = CacheableVoteController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable-vote.js\\n// module id = 847\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable-vote.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, CacheableControllerFactory, Configs, LogUtils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _cacheableVote = __webpack_require__(847);\\n\\nvar _cacheableVote2 = _interopRequireDefault(_cacheableVote);\\n\\nvar _cacheableUser = __webpack_require__(846);\\n\\nvar _cacheableUser2 = _interopRequireDefault(_cacheableUser);\\n\\nvar _cacheableUserPreference = __webpack_require__(843);\\n\\nvar _cacheableUserPreference2 = _interopRequireDefault(_cacheableUserPreference);\\n\\nvar _cacheableUserUpload = __webpack_require__(845);\\n\\nvar _cacheableUserUpload2 = _interopRequireDefault(_cacheableUserUpload);\\n\\nvar _cacheableUserQuota = __webpack_require__(844);\\n\\nvar _cacheableUserQuota2 = _interopRequireDefault(_cacheableUserQuota);\\n\\nvar _remoteHandler = __webpack_require__(864);\\n\\nvar _remoteHandler2 = _interopRequireDefault(_remoteHandler);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableController = $.extend({}, new _base2.default(), {\\n\\n    cacheableControllersOrderedList: ['vote', 'user', 'userPreference', 'userUpload', 'userQuota'],\\n\\n    cacheableControllers: {\\n        'vote': _cacheableVote2.default,\\n        'user': _cacheableUser2.default,\\n        'userPreference': _cacheableUserPreference2.default,\\n        'userUpload': _cacheableUserUpload2.default,\\n        'userQuota': _cacheableUserQuota2.default\\n    },\\n\\n    clearCookieKey: 'cacheableClear',\\n    remoteHandler: null,\\n\\n    selectors: {\\n        BTN_LOGOUT: '.badge-logout-btn'\\n    },\\n\\n    init: function init() {\\n\\n        this.remoteHandler = _remoteHandler2.default;\\n        var _self = this;\\n\\n        $.each(this.cacheableControllersOrderedList, function (i, controllerName) {\\n\\n            var controller = _self.cacheableControllers[controllerName].init(_self.remoteHandler);\\n            CacheableControllerFactory.setController(controllerName, controller);\\n        });\\n\\n        // clear localstorge if server side want\\n        var isClearCache = $.cookie(this.clearCookieKey);\\n        if (isClearCache) {\\n            this.clearAllCache();\\n\\n            /*\\n             * https and http has different copies for localStorage.  Keep the \\\"clear flag\\\" for http.\\n             * assume not so many page using HTTPS so that to keep clearing localCache and retrieve from remote\\n             */\\n            if (!this.isHttps()) {\\n                $.cookie(this.clearCookieKey, 0, { domain: Configs.get('page.cookie_domain'), expires: -1, path: '/' });\\n            }\\n        }\\n\\n        if (!this.remoteHandler.issetPhpSessionId() || this.remoteHandler.isInGracePeriod()) {\\n            if (!this.remoteHandler.issetPhpSessionId()) {\\n                LogUtils.log('CacheableRemoteHandler php session id is not set. Bye!!');\\n            }\\n            if (this.remoteHandler.isInGracePeriod()) {\\n                LogUtils.log('CacheableRemoteHandler is in grace period. Bye!!');\\n            }\\n            ModuleFactory.PageController.initUserFunction();\\n            return;\\n        } else {\\n            LogUtils.log('calling cacheable');\\n        }\\n\\n        this.bindDomReady();\\n        this.bindLogoutBtn();\\n    },\\n\\n    clearAllCache: function clearAllCache() {\\n        LogUtils.log('CacheableController clear all cache');\\n        $.each(this.cacheableControllersOrderedList, function (i, controllerName) {\\n            CacheableControllerFactory.getController(controllerName).handler.clearCache();\\n        });\\n        ModuleFactory.PageController.initUserFunction();\\n    },\\n\\n    bindDomReady: function bindDomReady() {\\n\\n        var _self = this;\\n        // ask all cache controller update when page load\\n        $(function () {\\n\\n            $.each(_self.cacheableControllersOrderedList, function (i, controllerName) {\\n                CacheableControllerFactory.getController(controllerName).process();\\n            });\\n\\n            _self.remoteHandler.processQueue();\\n        });\\n    },\\n\\n    bindLogoutBtn: function bindLogoutBtn() {\\n        var _self = this;\\n        $(this.selectors.BTN_LOGOUT).on('click', function (e) {\\n            _self.clearAllCache();\\n        });\\n    },\\n\\n    isHttps: function isHttps() {\\n        return location.protocol == 'https:';\\n    }\\n\\n}); /**\\n     * Handles page cacheable\\n     *\\n     * Each cacheable type should have its own controller and model. Update cat.sh needed (ordering is a matter).\\n     * controller:\\n     *  - declare mode (handler) and parse HTML and pass parameters to handler.\\n     *  - implement a callback for AJAX response\\n     *\\n     * model:\\n     *  - declare cache key and its ttl\\n     *  - formatting remote params for ajax call\\n     *  - manipulating cache if needed\\n     *\\n     * @type {*}\\n     */\\n\\n\\nmodule.exports = CacheableController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(181), __webpack_require__(18), __webpack_require__(10), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/cacheable.js\\n// module id = 848\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/cacheable.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _facebook = __webpack_require__(251);\\n\\nvar _facebook2 = _interopRequireDefault(_facebook);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar FacebookController = $.extend({}, new _base2.default(), function () {\\n\\n    var _self = {\\n\\n        BADGE_FACEBOOK_RENDER: '.badge_facebook_render',\\n        FB_RENDER_PREFIX: 'jsid-fb-render',\\n\\n        _pushFbElementsToQueue: function _pushFbElementsToQueue() {\\n\\n            /* Find all FB elements to be rendered on page load */\\n            $(_self.BADGE_FACEBOOK_RENDER).each(function (index, item) {\\n                var domId = $(item).attr('id');\\n                if (!domId) {\\n                    /* Assign DOM id for rendering */\\n                    domId = ModuleFactory.PageController.getUniqueDomId(FacebookController.FB_RENDER_PREFIX);\\n                    $(item).attr('id', domId);\\n                }\\n                //LogUtils.log('pushing page item to queue ' + domId);\\n                _facebook2.default.renderElement(domId);\\n            });\\n        },\\n\\n        _bindAddToTimelineButtons: function _bindAddToTimelineButtons() {\\n            $('.badge-add-fb-timeline').on('click', function (e) {\\n                e.preventDefault();\\n\\n                var turnOff = $(this).hasClass('switch_on');\\n                if (turnOff) {\\n                    FacebookController.enableFbTimelineAck(false);\\n                    return;\\n                }\\n\\n                var perm = 'email';\\n                try {\\n                    FB.login(function (response) {\\n                        var granted = response.authResponse ? true : false;\\n                        FacebookController.enableFbTimelineAck(granted);\\n                    }, { scope: perm });\\n                } catch (e) {}\\n            });\\n        }\\n\\n    };\\n\\n    return {\\n\\n        init: function init() {\\n            _self._pushFbElementsToQueue();\\n            _self._bindAddToTimelineButtons();\\n        },\\n        enableFbTimelineAck: function enableFbTimelineAck(enable) {\\n            var apiUrl = '/member/facebook-timeline';\\n            var params = {\\n                'platform': 'facebook'\\n            };\\n            if (!enable) {\\n                apiUrl = '/connect/unlink';\\n            }\\n\\n            $.ajax({\\n                type: 'POST',\\n                dataType: 'json',\\n                url: apiUrl,\\n                data: params,\\n                success: function success(json) {\\n                    window.location.reload();\\n                }\\n            });\\n        }\\n    };\\n}());\\n\\nmodule.exports = FacebookController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/facebook.js\\n// module id = 849\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/facebook.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _gplus = __webpack_require__(421);\\n\\nvar _gplus2 = _interopRequireDefault(_gplus);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar GPlusController = $.extend({}, new _base2.default(), {\\n    init: function init() {\\n        this._bindElements();\\n        this._bindSocialTransfer();\\n    },\\n\\n    _bindProfile: function _bindProfile(authResult) {\\n        if (_gplus2.default.btnClicked != 'profile') {\\n            return;\\n        }\\n\\n        if (authResult['access_token']) {\\n            var code = authResult['code'];\\n            var params = { 'platform': 'google-plus' };\\n            if (code) {\\n                params['code'] = code;\\n            }\\n\\n            $.ajax({\\n                url: '/connect/social',\\n                type: 'POST',\\n                dataType: 'json',\\n                data: params,\\n                success: function success(json) {\\n                    window.location.reload();\\n                },\\n                error: function error(json) {\\n                    LogUtils.log(json);\\n                }\\n            });\\n        }\\n    },\\n\\n    _bindSocialTransfer: function _bindSocialTransfer() {\\n        var transferForm = $('#social-transfer form');\\n        if (transferForm.length == 0) return;\\n        _gplus2.default.renderButton('jsid-confirm-transfer', function (authResult) {\\n            if (_gplus2.default.btnClicked != 'transfer') {\\n                return;\\n            }\\n\\n            if (authResult['access_token']) {\\n                $('input[name=code]', transferForm).val(authResult['code']);\\n                transferForm.submit();\\n            } else {\\n                window.location.reload();\\n            }\\n        });\\n    },\\n\\n    _doLogin: function _doLogin(authResult) {\\n        if (_gplus2.default.btnClicked != 'login') {\\n            return;\\n        }\\n\\n        if (authResult['access_token']) {\\n            var code = authResult['code'];\\n            var url = 'https://' + _page2.default.getDomain() + '/connect/google-plus-callback?code=' + encodeURIComponent(code);\\n            window.location.href = url;\\n        }\\n    },\\n\\n    _bindElements: function _bindElements() {\\n        _gplus2.default.renderButton('jsid-gplus-btn-settings', this._bindProfile);\\n        $('.badge-gplus-connect').each(function (index, item) {\\n            var btn = $(item);\\n            var domId = btn.attr('id');\\n            if (!domId) {\\n                domId = ModuleFactory.PageController.getUniqueDomId('gplus');\\n                btn.attr('id', domId);\\n            }\\n            _gplus2.default.renderButton(domId, GPlusController._doLogin);\\n        });\\n\\n        $('.badge-gplus-connect-btn').click(function () {\\n            _gplus2.default.btnClicked = $(this).data('type') || 'login';\\n        });\\n    }\\n});\\n\\nmodule.exports = GPlusController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/gplus.js\\n// module id = 850\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/gplus.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar HeadbarController = $.extend({}, new _base2.default(), function () {\\n\\n    var _self = {\\n        _bindElements: function _bindElements() {\\n            _self._bindSearchIcon();\\n        },\\n\\n        _bindSearchIcon: function _bindSearchIcon() {\\n            var searchIcon = $('#jsid-search-icon');\\n            searchIcon.on('click', function (e) {\\n                e.preventDefault();\\n                _self._toggleSearchBar();\\n            });\\n        },\\n\\n        SLIDE_DURATION: 300,\\n        _toggleSearchBar: function _toggleSearchBar() {\\n            var searchBar = $('#header_searchbar');\\n            searchBar.slideToggle(_self.SLIDE_DURATION);\\n        }\\n    };\\n\\n    return {\\n        init: function init() {\\n            _self._bindElements();\\n\\n            var navWrapper = $('.nav-wrap');\\n            var header = navWrapper.find('h1');\\n            var headerItems = navWrapper.find('.headbar-items');\\n            var moreButton = headerItems.find('#jsid-header-funny-menu').parent();\\n\\n            var moreMenu = $('#jsid-header-funny-menu-items');\\n        }\\n    };\\n}());\\n\\nmodule.exports = HeadbarController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/headbar.js\\n// module id = 851\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/headbar.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, ModuleFactory) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _listScroll = __webpack_require__(249);\\n\\nvar _listScroll2 = _interopRequireDefault(_listScroll);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _track = __webpack_require__(186);\\n\\nvar _track2 = _interopRequireDefault(_track);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/* \\n    Controller for 6.0 list view\\n    Features provided:\\n    - adding 'badge-in-view' class to entries that are in-view (completely or partially)\\n    - adding 'badge-in-view-focus' class to entries that are likely to be the reader's focus (at least N pixels in-view, N defined in variable)\\n    - upon adding/removing 'badge-in-view-focus' class, will fire 'inviewfocusset'/'inviewfocusunset' custom event\\n    - providing scrollToNext/scrollToPrevious function calls for keyboard controller\\n    - sticky entry action bar\\n*/\\nvar ListController = $.extend({}, new _base2.default(), {\\n\\n    _scrollDuration: 100, // scroll duration for scrollToNextEntry etc.\\n\\n    _focusMinimumInViewPortion: 150, // at least this amount of pixel the entry must be in-view for the entry to be regarded as \\\"badge-in-view-focus\\\"\\n    _entryReadTimeout: 800, // an entry has to be in-focus for at least this amount to be regarded as read (i.e. to receive the 'entryRead' event)\\n    _playGifTimeout: 300, // an entry has to be in-focus for at least this amount to trigger the play GIF event\\n    _scrollFaultTolerance: 20, // When checking \\\"whether i'm scrolled to that point\\\", sometimes browsers introduce some errors for a few pixels. This is the tolerance level\\n    _lastScrolledTop: -500, // set to negative, so that when first load, we will trigger 'in view calculation' immediately\\n    _scrollAutoPlayGifTimeoutObject: false,\\n    _scrollAutoPlayGifRatio: 0.6,\\n\\n    selectors: {\\n        LIST_VIEW: '.badge-list-view-element',\\n        ENTRY_CONTAINER: '.badge-entry-container',\\n        IN_VIEW_ELEMENTS: '.badge-in-view',\\n        IN_FOCUS_ELEMENTS: '.badge-in-view-focus',\\n        IN_VIEW_CLASS: 'badge-in-view',\\n        IN_FOCUS_CLASS: 'badge-in-view-focus',\\n        ENTRY_CONTAINER_ID_PREFIX: '#jsid-entry-entity-'\\n    },\\n\\n    customEvents: {\\n        IN_FOCUS_SET: 'inViewFocusSet',\\n        IN_FOCUS_UNSET: 'inViewFocusUnset',\\n        ENTRY_READ: 'entryRead'\\n    },\\n\\n    init: function init() {\\n        this.bindElements();\\n\\n        $.proxy(this.handlers.listViewScrollHandler, this)();\\n    },\\n\\n    bindElements: function bindElements() {\\n        this.bindInViewTrackerEvents();\\n        this._bindViewHistoryTrackingEvents();\\n    },\\n\\n    handlers: {\\n        /*\\n         * Recalculate in-view entries with cached DOM info\\n         */\\n        recalculateInViewEntries: function recalculateInViewEntries() {\\n            var _self = ListController;\\n            var scrollTop = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n            var scrollBottom = scrollTop + $(window).height();\\n\\n            _self._lastScrolledTop = scrollTop;\\n\\n            var cache = ModuleFactory.CacheController;\\n            var entryCacheHandler = cache.getEntryHandler();\\n            var entryList = entryCacheHandler.getEntryList();\\n\\n            if (!entryList || entryList.length == 0 || cache.isUpdateNeeded(cache.keys.ENTRY_LIST)) {\\n                // Cache miss, going to get data from DOM\\n                cache.parseEntryInfo();\\n                entryList = entryCacheHandler.getEntryList();\\n            }\\n\\n            var inViewEntries = [];\\n            var inFocusViewEntries = [];\\n            for (var i = 0; i < entryList.length; i++) {\\n                var entryId = entryList[i];\\n                var top = entryCacheHandler.getEntryInfoForKey(entryId, 'offset').top - ModuleFactory.PageController._topStickyElementHeight;\\n                var height = entryCacheHandler.getEntryInfoForKey(entryId, 'outerHeight');\\n\\n                if (top < scrollBottom && top + height > scrollTop) {\\n                    inViewEntries.push(entryId);\\n\\n                    // further determine if it is focused\\n                    if (top + height >= scrollTop + _self._focusMinimumInViewPortion && top + _self._focusMinimumInViewPortion <= scrollBottom) {\\n                        inFocusViewEntries.push(entryId);\\n                    }\\n                }\\n            };\\n            // the param is not the delta, it is the whole set\\n            _self._updateEntriesInView(inViewEntries);\\n            _self._updateEntriesInViewFocus(inFocusViewEntries);\\n\\n            if (!_page2.default.isPostPage() && ModuleFactory.PageController.getScrollAutoPlayMp4State() > 0) {\\n                _self.scrollAutoPlayGifHandler(inFocusViewEntries);\\n            }\\n        },\\n\\n        /**\\n         * In-View Tracker on scroll\\n         */\\n        listViewScrollHandler: function listViewScrollHandler(event) {\\n            var _self = this;\\n            var scrollTop = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n\\n            if (Math.abs(scrollTop - _self._lastScrolledTop) > 200) {\\n                _self.handlers.recalculateInViewEntries();\\n            }\\n        }\\n\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * step 1 - Binds on window scroll event and add badge-in-view class if it's in view\\n     * step 2 - Binds on entry inviewfocusset event and trigger read event accordingly\\n     * See also this.findCurrentlyInViewEntries()\\n     */\\n    bindInViewTrackerEvents: function bindInViewTrackerEvents() {\\n        $(window).on('scroll resize', null, null, $.proxy(this.handlers.listViewScrollHandler, this));\\n\\n        // When an entry is in focus, set a timeout where it will trigger entryRead event after the timeout\\n        $('body').on(this.customEvents.IN_FOCUS_SET, this.selectors.ENTRY_CONTAINER, null, $.proxy(function (e) {\\n            var entry = $(e.target);\\n            //LogUtils.log($(entry).data('entry-id') + ' in focus');\\n            //$(entry).css('outline','solid 1px #ff9900');\\n\\n            var timeout = setTimeout($.proxy(function () {\\n                $(entry).trigger($.Event(this.customEvents.ENTRY_READ));\\n            }, this), this._entryReadTimeout);\\n            $(entry).data('entry-read-timeout-object', timeout);\\n        }, this));\\n\\n        // When an entry is no longer in focus, cancel the timeout\\n        $('body').on(this.customEvents.IN_FOCUS_UNSET, this.selectors.ENTRY_CONTAINER, null, $.proxy(function (e) {\\n            var entry = $(e.target);\\n            //LogUtils.log($(entry).data('entry-id') + ' out focus');\\n            //$(entry).css('outline','');\\n            clearTimeout($(entry).data('entry-read-timeout-object'));\\n        }, this));\\n    },\\n\\n    /**\\n     * Handle the scrolling and list of currently in focus IDs\\n     */\\n    scrollAutoPlayGifHandler: function scrollAutoPlayGifHandler(entryIds) {\\n        if (this._scrollAutoPlayGifTimeoutObject) {\\n            clearTimeout(this._scrollAutoPlayGifTimeoutObject);\\n        }\\n        var timeout = setTimeout($.proxy(function () {\\n            this.autoPlayFocusedVideos(entryIds);\\n        }, this), this._playGifTimeout);\\n        this._scrollAutoPlayGifTimeoutObject = timeout;\\n    },\\n\\n    /**\\n     * Given a list of entry IDs, go through their location and size to calculate visible ratio\\n     * For entries meeting the threshold, they should be auto played\\n     */\\n    autoPlayFocusedVideos: function autoPlayFocusedVideos(entryIds) {\\n        var selected = [];\\n        var cache = ModuleFactory.CacheController;\\n        var entryCacheHandler = cache.getEntryHandler();\\n        var visibleTop = ModuleFactory.PageController.getWindowEffectiveScrollTop();\\n        var visibleBottom = $(window).scrollTop() + $(window).height();\\n        var scrollAutoPlayState = ModuleFactory.PageController.getScrollAutoPlayMp4State();\\n        var maxVisibleRatio = -1.0;\\n\\n        for (var i = 0; i < entryIds.length; i++) {\\n            var entryId = entryIds[i];\\n            var top = entryCacheHandler.getEntryInfoForKey(entryId, 'offset').top;\\n            var bottom = top + entryCacheHandler.getEntryInfoForKey(entryId, 'outerHeight');\\n            var visibleHeight = 0;\\n\\n            if (top < visibleTop && bottom > visibleBottom) {\\n                visibleHeight = visibleBottom - visibleTop;\\n            } else if (top > visibleTop && bottom < visibleBottom) {\\n                visibleHeight = bottom - top;\\n            } else if (top < visibleTop && bottom > visibleTop) {\\n                // bottom is visible\\n                visibleHeight = bottom - visibleTop;\\n            } else if (top < visibleBottom && top > visibleTop) {\\n                // top is visible\\n                visibleHeight = visibleBottom - top;\\n            }\\n\\n            var visibleRatio = visibleHeight / (bottom - top);\\n            // @read ModuleFactory.PageController.getScrollAutoPlayMp4State()\\n            if (scrollAutoPlayState == 1) {\\n                if (visibleRatio > maxVisibleRatio) {\\n                    maxVisibleRatio = visibleRatio;\\n                    selected = [entryId];\\n                }\\n            } else if (scrollAutoPlayState == 2) {\\n                if (this._scrollAutoPlayGifRatio < visibleRatio) {\\n                    selected.push(entryId);\\n                }\\n            }\\n        }\\n\\n        ModuleFactory.PostController.playVideosAndPauseOthersByEntryIds(selected);\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * In addition to setting/unsetting the focus class\\n     * Will also fire a custom JS event 'inviewfocus' to the entry container for other's use\\n     */\\n    _updateEntriesInView: function _updateEntriesInView(entryIds) {\\n        var _self = ListController;\\n        var targetClass = _self.selectors.IN_VIEW_CLASS;\\n        _self._unsetEntriesInViewInFocus(targetClass, entryIds, false);\\n        _self._setEntriesInViewInFocus(targetClass, entryIds, false);\\n    },\\n\\n    _updateEntriesInViewFocus: function _updateEntriesInViewFocus(entryIds) {\\n        var _self = ListController;\\n        var targetClass = _self.selectors.IN_FOCUS_CLASS;\\n        _self._unsetEntriesInViewInFocus(targetClass, entryIds, true);\\n        _self._setEntriesInViewInFocus(targetClass, entryIds, true);\\n    },\\n\\n    _unsetEntriesInViewInFocus: function _unsetEntriesInViewInFocus(targetClass, entryIds, isFocused) {\\n        var _self = ListController;\\n        $(\\\".\\\" + targetClass).each(function () {\\n            var entryId = $(this).data('entry-id');\\n            var index = $.inArray(entryId, entryIds);\\n            if (index < 0) {\\n                $(this).removeClass(targetClass);\\n                if (isFocused) {\\n                    $(this).trigger($.Event(_self.customEvents.IN_FOCUS_UNSET));\\n                }\\n            }\\n        });\\n    },\\n\\n    _setEntriesInViewInFocus: function _setEntriesInViewInFocus(targetClass, entryIds, isFocused) {\\n        var _self = ListController;\\n        var selector = [];\\n        for (var i = 0; i < entryIds.length; i++) {\\n            selector.push(_self.selectors.ENTRY_CONTAINER_ID_PREFIX + entryIds[i]);\\n        };\\n\\n        // Add badge-in-view class\\n        $(selector.join(\\\", \\\")).each(function () {\\n            $(this).addClass(targetClass);\\n            if (isFocused === true) {\\n                $(this).trigger($.Event(_self.customEvents.IN_FOCUS_SET));\\n            }\\n        });\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * Returns the first in-view entry. Note that partially in-view is also considered as in-view\\n     */\\n    findCurrentlyInViewEntries: function findCurrentlyInViewEntries() {\\n        return $(this.selectors.IN_VIEW_ELEMENTS);\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * Returns the first in-view entry. Note that partially in-view is also considered as in-view\\n     */\\n    findCurrentlyInViewEntry: function findCurrentlyInViewEntry() {\\n        return this.findCurrentlyInViewEntries().first();\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * Returns the first in-focus entry. Such entry must be at least N pixels in-view where N is defined in this class\\n     */\\n    findCurrentlyInFocusEntries: function findCurrentlyInFocusEntries() {\\n        return $(this.selectors.IN_FOCUS_ELEMENTS);\\n    },\\n\\n    /**\\n     * In-View Tracker\\n     * Returns the first in-focus entry. Such entry must be at least N pixels in-view where N is defined in this class\\n     */\\n    findCurrentlyInFocusEntry: function findCurrentlyInFocusEntry() {\\n        return this.findCurrentlyInFocusEntries().first();\\n    },\\n\\n    /**\\n     * Scrolls to the next entry in the list view\\n     * @param currentEntry The entry element of \\\"current entry\\\". If omitted, will use the first in-view element\\n     */\\n    scrollToNextEntry: function scrollToNextEntry(currentEntry) {\\n        if (typeof currentEntry == 'undefined') currentEntry = this.findCurrentlyInViewEntry();\\n\\n        var _self = ListController;\\n\\n        var collection = $(this.selectors.ENTRY_CONTAINER);\\n        var currentIndex = collection.index(currentEntry);\\n        var targetIndex = currentIndex + 1 >= collection.length ? currentIndex : currentIndex + 1;\\n        var targetEntry = $(collection[targetIndex]);\\n\\n        // Go to next page if user scrolled to last item and pressed next button\\n        if (currentIndex + 1 >= collection.length) {\\n            var listscroll = _listScroll2.default;\\n            if (listscroll._loadedCount >= listscroll._loadCountMax) {\\n                var loadMoreBut = $(listscroll.selectors.LOAD_MORE_BUTTON);\\n                if (loadMoreBut && loadMoreBut.length > 0) {\\n                    loadMoreBut[0].click();\\n                }\\n            }\\n        }\\n\\n        if (!targetEntry.offset()) return;\\n\\n        $('html,body').animate({\\n            scrollTop: targetEntry.offset().top - ModuleFactory.PageController._topStickyElementHeight\\n        }, this._scrollDuration, 'swing', function () {\\n            // Recalculate in-view entries after scroll animation\\n            _self.handlers.recalculateInViewEntries();\\n        });\\n    },\\n    /**\\n     * Scrolls to the next entry in the list view\\n     * @param currentEntry The entry element of \\\"current entry\\\". If omitted, will use the first in-view element\\n     */\\n    scrollToPrevEntry: function scrollToPrevEntry(currentEntry) {\\n        var _self = ListController;\\n\\n        if (typeof currentEntry == 'undefined') currentEntry = this.findCurrentlyInViewEntry();\\n\\n        if ($(window).scrollTop() == 0) {\\n            return;\\n        }\\n\\n        if (!currentEntry.offset()) return;\\n\\n        var targetEntry = $(currentEntry);\\n        var isFirstEntry = false;\\n        if (Math.abs(currentEntry.offset().top - ModuleFactory.PageController.getWindowEffectiveScrollTop()) < this._scrollFaultTolerance) {\\n            var collection = $(this.selectors.ENTRY_CONTAINER);\\n            var currentIndex = collection.index(currentEntry);\\n            var targetIndex = currentIndex - 1 < 0 ? 0 : currentIndex - 1;\\n            targetEntry = $(collection[targetIndex]);\\n            isFirstEntry = targetIndex == 0;\\n        }\\n\\n        if (!targetEntry.offset()) return;\\n        $('html,body').animate({\\n            scrollTop: !isFirstEntry ? targetEntry.offset().top - ModuleFactory.PageController._topStickyElementHeight : 0\\n        }, this._scrollDuration, 'swing', function () {\\n            // Recalculate in-view entries after scroll animation\\n            _self.handlers.recalculateInViewEntries();\\n        });\\n    },\\n\\n    _readIds: {}, // hold all ids of entries which have been read\\n    _readIdsBuffer: [], // batch ids for unique views requests\\n    _readIdsBufferFlushThreshold: 5,\\n\\n    /**\\n     * Binds onto entryread for setting timeout to trigger unique view etc.\\n     */\\n    _bindViewHistoryTrackingEvents: function _bindViewHistoryTrackingEvents() {\\n        // When an entry is read, save into cookie and/or send out ajax saving\\n        $('body').on(this.customEvents.ENTRY_READ, this.selectors.ENTRY_CONTAINER, null, $.proxy(function (e) {\\n            var entry = $(e.target);\\n            var entryId = $(entry).data('entry-id');\\n            //LogUtils.log(entryId + ' is READ!');\\n            //$(entry).css('backgroundColor','#ffcccc');\\n\\n            if (!this._readIds[entryId]) {\\n                this._readIds[entryId] = 1;\\n                this._readIdsBuffer.push(entryId);\\n\\n                // Flush bufferred read ids for unique views tracking\\n                if (this._readIdsBuffer.length >= this._readIdsBufferFlushThreshold) {\\n                    var options = {\\n                        label: '',\\n                        labelValue: '',\\n                        platform: 'd',\\n                        entry: this._readIdsBuffer.join(','),\\n                        view: 'l'\\n                    };\\n                    _track2.default.uniqueViewed(options);\\n                    this._readIdsBuffer = [];\\n                }\\n            }\\n        }, this));\\n    }\\n});\\n\\nmodule.exports = ListController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(26)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/list.js\\n// module id = 852\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/list.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, Utils, GA) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _cacheFactory = __webpack_require__(185);\\n\\nvar _cacheFactory2 = _interopRequireDefault(_cacheFactory);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar MilestoneController = $.extend({}, new _base2.default(), {\\n\\n    selectors: {\\n        SIDEBAR_MILESTONE_CONTAINER: '#jsid-milestone-notice',\\n        AVATAR: '.badge-avatar',\\n        MESSAGE: '.badge-message',\\n        LINK: '.badge-link',\\n        WRAPPER: '.badge-notice-wrap'\\n    },\\n\\n    _endPointHost: '',\\n    _endPoint: '/read/ajax-milestone-notice',\\n    _items: [],\\n    _isItemLoaded: false,\\n\\n    init: function init() {\\n\\n        var _self = this;\\n\\n        this._endPointHost = Configs.get('configs.endPoint');\\n        this._endPointHost = Utils.formatProtocolForUrl(this._endPointHost);\\n        this._endPoint = this._endPointHost + this._endPoint;\\n\\n        this.bindElements();\\n\\n        if ($(this.selectors.SIDEBAR_MILESTONE_CONTAINER).length > 0) {\\n            _self.showNextItem(); // initial call\\n            setInterval(function () {\\n                _self.showNextItem();\\n            }, 5000);\\n        }\\n    },\\n\\n    bindElements: function bindElements() {\\n        var _self = this;\\n\\n        $('body').on('click', _self.selectors.SIDEBAR_MILESTONE_CONTAINER + ' ' + _self.selectors.LINK, function (e) {\\n            GA.track('Milestone', 'TapMilestone', Page.getPageKey(), '', { Element: 'Sidebar', Url: $(this).attr('href') });\\n        });\\n    },\\n\\n    showNextItem: function showNextItem() {\\n\\n        var _self = this;\\n\\n        if (!this._isItemLoaded) {\\n            _self.loadItems();\\n        }\\n\\n        if (_self._items.length == 0) {\\n            return;\\n        }\\n\\n        $(_self.selectors.WRAPPER).fadeOut(1000, function () {\\n            var item = _self._items[Math.floor(Math.random() * _self._items.length)];\\n            $(_self.selectors.SIDEBAR_MILESTONE_CONTAINER).find(_self.selectors.LINK).attr('href', item.objectUrl);\\n            $(_self.selectors.SIDEBAR_MILESTONE_CONTAINER).find(_self.selectors.AVATAR).attr('src', item.avatarUrl);\\n            $(_self.selectors.SIDEBAR_MILESTONE_CONTAINER).find(_self.selectors.MESSAGE).html(item.text);\\n            $(_self.selectors.SIDEBAR_MILESTONE_CONTAINER).css('opacity', '1');\\n            $(_self.selectors.WRAPPER).fadeIn(1000);\\n        });\\n    },\\n\\n    loadItems: function loadItems() {\\n\\n        var _self = this;\\n\\n        if (!_cacheFactory2.default.sessionStorageImpl || !_cacheFactory2.default.sessionStorageImpl.getItem(_self._endPoint)) {\\n\\n            $.ajax({\\n                type: \\\"GET\\\",\\n                crossDomain: true,\\n                dataType: \\\"jsonp\\\",\\n                jsonpCallback: \\\"milestoneCallback\\\",\\n                cache: \\\"true\\\",\\n                url: _self._endPoint,\\n                success: function success(data) {\\n\\n                    if (data && data.okay && data.result && data.result.length > 0) {\\n                        _self._items = data.result; // this stores the full list of featured items returned from AJAX\\n\\n                        if (_cacheFactory2.default.sessionStorageImpl) {\\n                            _cacheFactory2.default.sessionStorageImpl.setItem(_self._endPoint, JSON.stringify(_self._items));\\n                        }\\n                    }\\n                },\\n                error: function error() {}\\n            });\\n        } else {\\n            _self._items = JSON.parse(_cacheFactory2.default.sessionStorageImpl.getItem(this._endPoint));\\n        }\\n        _self._isItemLoaded = true;\\n    }\\n\\n});\\n\\nmodule.exports = MilestoneController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(80), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/milestone.js\\n// module id = 853\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/milestone.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Validator, ModuleFactory, Configs, GA, jQuery, Piwik, LocalStorageUtils, LocaleUtils) {'use strict';\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _toast = __webpack_require__(423);\\n\\nvar _toast2 = _interopRequireDefault(_toast);\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _track = __webpack_require__(186);\\n\\nvar _track2 = _interopRequireDefault(_track);\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _overlay = __webpack_require__(128);\\n\\nvar _overlay2 = _interopRequireDefault(_overlay);\\n\\nvar _push = __webpack_require__(416);\\n\\nvar _push2 = _interopRequireDefault(_push);\\n\\nvar _featured = __webpack_require__(182);\\n\\nvar _featured2 = _interopRequireDefault(_featured);\\n\\nvar _rcfgAds = __webpack_require__(183);\\n\\nvar _rcfgAds2 = _interopRequireDefault(_rcfgAds);\\n\\nvar _account = __webpack_require__(247);\\n\\nvar _account2 = _interopRequireDefault(_account);\\n\\nvar _keyboard = __webpack_require__(248);\\n\\nvar _keyboard2 = _interopRequireDefault(_keyboard);\\n\\nvar _upload = __webpack_require__(184);\\n\\nvar _upload2 = _interopRequireDefault(_upload);\\n\\nvar _notificationsScroll = __webpack_require__(415);\\n\\nvar _notificationsScroll2 = _interopRequireDefault(_notificationsScroll);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar PageController = $.extend({}, new _base2.default(), {\\n\\n    docTitle: \\\"\\\",\\n\\n    init: function init() {\\n        this.showLocaleSections();\\n        this.bindElements();\\n        this.injectEntryImageOnError();\\n        this.updateTimeZoneOffset();\\n        this.updateSignUpReferrer();\\n        this.showStickyButton();\\n        this.loadAnimatedGif();\\n        this.removeUnusedCookies();\\n\\n        this.docTitle = document.title;\\n    },\\n\\n    getUniqueDomId: function getUniqueDomId(prefix) {\\n        var domId;\\n\\n        while (!domId || document.getElementById(domId)) {\\n            domId = (prefix ? prefix : 'jsid_dom') + '_' + parseInt(Math.random() * 999999, 10);\\n        }\\n\\n        return domId;\\n    },\\n\\n    _toastFadeDuration: 500, // duration for FadeIn and FadeOut animation\\n    _showFooterNavAfter: 600, // \\\"footer navigation\\\" (key shortcut) link will show after the page has been scrolled by this amount\\n    _sidebarStickyElementMarginTop: 20, // sidebar sticky <div> will leave this amount of space from the top nav\\n    _sidebarStickyHeight: 0,\\n\\n    // These values are automatically calculated. No need to manually enter. See calculateHeights()\\n    _topVolatileElementHeight: 0, // height of top \\\"big promotion\\\" above nav bar, for sticky calculation.\\n    _topStickyElementHeight: 0, // i.e. top nav, top banner etc. that will persist during scrolling, scroll-related functions will read this\\n\\n    // Autocomplete default values\\n    _autoCompleteMinLength: 2,\\n    _autoCompleteMaxResult: 10,\\n\\n    _isNotificationShown: false,\\n    _lastNotificationUpdateTs: false,\\n    _isUpdatingNotification: false,\\n    _isMarkingNotificationAsRead: false,\\n    _notificationLoadCount: 0,\\n\\n    _CLASS_STICKY: 'sticked',\\n    _CLASS_SHOW_BACK_TO_TOP: 'show',\\n\\n    _signUpReferrerCookieKey: 'sign_up_referer',\\n    _safeModeCookieKey: 'safemode',\\n    _stickyPromoteButtonCookieKey: 'sticky_button',\\n    _dismissStickyPromoteButtonCookieKey: 'dismiss_sticky',\\n    _syncAccountSessionCookieKey: '__ssid',\\n\\n    _unusedCookies: ['undefined'],\\n\\n    _idlePopupTimer: null,\\n    _idlePopupDataFetchTimer: null,\\n    _isIdlePopupShow: false,\\n    _isIdlePopupDataFetched: false,\\n\\n    _pageViewTracked: false,\\n\\n    selectors: {\\n        THEME_FILES: '.badge-theme-file',\\n\\n        FOOTER_NAV: 'a.badge-scroll-to-top',\\n        SCROLL_TO_TOP: 'a.badge-scroll-to-top',\\n        HEADER_TOP_NAV: '.badge-sticky-nav',\\n        HEADER_TOP_BANNER: '.badge-volatile-banner',\\n        HEADER_USER_FUNCTION_PLACEHOLDER: '.badge-user-function-placeholder',\\n        HEADER_USER_FUNCTION: '#jsid-user-function',\\n        HEADER_VISITOR_FUNCTION: '#jsid-visitor-function',\\n        HEADER_USER_MENU: '#jsid-header-user-menu',\\n        HEADER_USER_ITEM: '#jsid-header-user-menu-items',\\n\\n        HEADER_BANNER_CONFIRM_EMAIL: '#jsid-banner-confirm-email',\\n        HEADER_BANNER_CONFIRM_EMAIL_USERNAME: '#jsid-banner-confirm-email-username',\\n\\n        HEADER_FUNNY_MENU: '#jsid-header-funny-menu',\\n        HEADER_FUNNY_ITEM: '#jsid-header-funny-menu-items',\\n        HEADER_SECTION_MENU_ITEMS: '.badge-section-menu-items',\\n\\n        HEADER_NOTIFICATION_MENU: '#jsid-header-notification-menu',\\n        HEADER_NOTIFICATION_UNREAD_COUNT: '#jsid-notification-unread-count',\\n        HEADER_NOTIFICATION_ITEM: '#jsid-header-notification-items',\\n        HEADER_NOTIFICATION_CONTAINER: '#jsid-header-notification-items-container',\\n        HEADER_NOTIFICATION_SEE_ALL: '#jsid-header-notification-see-all',\\n\\n        HEADER_UPLOAD_BTN: '#jsid-upload-btn',\\n\\n        HEADER_SEARCH_BTN: '#jsid-header-search-btn',\\n        HEADER_SEARCH_DROPDOWN: '#jsid-header-search-dropdown',\\n        HEADER_SEARCH: '.badge-header-search',\\n        HEADER_SEARCH_INPUT: '#jsid-search-input',\\n        HEADER_SEARCH_SUGGEST: '#jsid-headbar-search-suggest',\\n\\n        HEADER_TOAST: '.badge-toast-container',\\n        HEADER_TOAST_MESSAGE: '.badge-toast-message',\\n        HEADER_TOAST_CLOSE: '.badge-toast-close',\\n\\n        NOTIFICATION_LIST_ITEMS: '.badge-notification-item',\\n\\n        SUBNAV_STICKY_STATIC: '.badge-sticky-subnav-static',\\n\\n        CONTAINTER: '#container',\\n        PAGE: '.badge-page',\\n        CLICK_EVENT_SELECTOR: '.badge-evt, .badge-track',\\n        CLICK_EVENT_NOFOLLOW_SELECTOR: '.badge-track-no-follow',\\n\\n        STICKY_BUTTON: '.badge-sticky-button',\\n        IDLE_POPUP_AD_CONTAINER: '#jsid-idle-ads-container'\\n    },\\n\\n    onScroll: function onScroll() {\\n        this.checkFooterNavElements();\\n    },\\n\\n    bindElements: function bindElements() {\\n\\n        this.calculateHeights();\\n\\n        this.bindStickyNav();\\n        this.bindFooterNavElements();\\n        this.bindUploadElements();\\n        this.bindUserSettingElements();\\n        this.bindGroupElements();\\n        this.bindSearchElements();\\n        this.bindToastElements();\\n        this.bindEventTracking();\\n        this.bindContactElements();\\n\\n        this.bindPopupMenu();\\n        this.bindIdlePopup();\\n        this.bindNotificationItem();\\n    },\\n\\n    /**\\n     * This function calculates the height of various HTML elements for sticky purpose\\n     */\\n    calculateHeights: function calculateHeights() {\\n        var self = this;\\n\\n        this._topStickyElementHeight = $(this.selectors.HEADER_TOP_NAV).height();\\n\\n        this._topVolatileElementHeight = 0;\\n        $(this.selectors.HEADER_TOP_BANNER).each(function () {\\n            if (!$(this).hasClass('hide')) {\\n                self._topVolatileElementHeight += $(this).height();\\n            }\\n        });\\n    },\\n\\n    bindContactElements: function bindContactElements() {\\n        if (!_page2.default.isContactPage()) return;\\n\\n        $('#jsid-contact-form').on('submit', $.proxy(function () {\\n\\n            if (!$('#jsid-interaction-name').val().length) {\\n                $('#jsid-contact-name-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-name-error').addClass('hide');\\n            }\\n\\n            if (!Validator.isValidEmail($('#jsid-interaction-email').val())) {\\n                $('#jsid-contact-email-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-email-error').addClass('hide');\\n            }\\n\\n            if ($('#jsid-email-category').val() == 0) {\\n                $('#jsid-contact-category-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-category-error').addClass('hide');\\n            }\\n\\n            if (!$('#jsid-email-subject').val().length) {\\n                $('#jsid-contact-subject-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-subject-error').addClass('hide');\\n            }\\n\\n            if (!$('#jsid-email-message').val().length) {\\n                $('#jsid-contact-message-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-message-error').addClass('hide');\\n            }\\n\\n            if (!$('[name=g-recaptcha-response]', '#jsid-contact-form').val().length) {\\n                $('#jsid-contact-captcha-error').removeClass('hide');\\n                return false;\\n            } else {\\n                $('#jsid-contact-captcha-error').addClass('hide');\\n            }\\n\\n            var isValid = true; // FIXME: do some client side checking\\n            if (!isValid) {\\n                event.preventDefault();\\n                return false;\\n            }\\n\\n            return true;\\n        }, this));\\n    },\\n\\n    bindSearchElements: function bindSearchElements() {\\n        var _self = this;\\n        var headerSearchBtn = $(this.selectors.HEADER_SEARCH_BTN);\\n        var headerSearchDropdown = $(this.selectors.HEADER_SEARCH_DROPDOWN);\\n        var headerSearch = $(this.selectors.HEADER_SEARCH);\\n        var headerSearchInput = $(this.selectors.HEADER_SEARCH_INPUT);\\n        var headerSearchInputId = headerSearchInput.attr('id');\\n        $('body').on('mousedown', function (event) {\\n            if (event.target.id !== headerSearchInputId && $(event.target).parents(_self.selectors.HEADER_TOP_NAV).find(_self.selectors.HEADER_SEARCH).length == 0 && !headerSearchDropdown.hasClass('hide')) {\\n                headerSearchDropdown.addClass('hide');\\n                headerSearchInput.removeAttr('placeholder');\\n            }\\n        });\\n\\n        headerSearchBtn.on(\\\"click\\\", function (event) {\\n            if (headerSearchDropdown.hasClass('hide')) {\\n                headerSearchDropdown.removeClass('hide');\\n                headerSearchInput.attr('placeholder', headerSearchInput.data('placeholder')).focus();\\n                return false;\\n            }\\n        });\\n\\n        if (headerSearchInput.length) {\\n            var options = {\\n                'url': '/tags/suggest',\\n                'appendTo': this.selectors.HEADER_SEARCH_SUGGEST,\\n                'menuClass': ''\\n            };\\n            this.loadAutoComplete(this.selectors.HEADER_SEARCH_INPUT, options);\\n        }\\n    },\\n\\n    loadAutoComplete: function loadAutoComplete(selector, options) {\\n        var _self = this;\\n        var param = {\\n            'url': typeof options.url === \\\"undefined\\\" ? '' : options.url,\\n            'appendTo': typeof options.appendTo === \\\"undefined\\\" ? '' : options.appendTo,\\n            'minLength': typeof options.minLength === \\\"undefined\\\" ? this._autoCompleteMinLength : options.minLength,\\n            'maxResult': typeof options.maxResult === \\\"undefined\\\" ? this._autoCompleteMaxResult : options.maxResult,\\n            'menuClass': typeof options.menuClass === \\\"undefined\\\" ? '' : options.menuClass\\n        };\\n\\n        $(selector).autocomplete({\\n            source: function source(request, response) {\\n                $.ajax({\\n                    url: param['url'],\\n                    dataType: \\\"json\\\",\\n                    data: {\\n                        tag: request.term\\n                    },\\n                    success: function success(data) {\\n                        var result = data.slice(0, param['maxResult']);\\n                        var highlight = '<strong>' + request.term + '</strong>';\\n                        response($.map(result, function (item) {\\n                            return {\\n                                label: highlight + item.substr(request.term.length),\\n                                value: item\\n                            };\\n                        }));\\n                        $('.ui-helper-hidden-accessible').addClass('hide');\\n                        $(_self.selectors.HEADER_SEARCH_SUGGEST).find('ul').first().removeAttr('style');\\n                    }\\n                });\\n            },\\n            minLength: param['minLength'],\\n            appendTo: param['appendTo'],\\n            open: function open() {\\n                var list = $('.ui-autocomplete');\\n                list.removeAttr('class').addClass(param['menuClass']).removeAttr('style');\\n                $('.ui-helper-hidden-accessible').addClass('hide');\\n            },\\n            select: function select(e) {\\n                var target = $(e.currentTarget);\\n\\n                $(_self.selectors.HEADER_SEARCH_INPUT).val(target.find('.ui-state-focus').first().text());\\n                target.closest('form').submit();\\n            }\\n        }).data(\\\"ui-autocomplete\\\")._renderItem = function (ul, item) {\\n            return $(\\\"<li></li>\\\").data(\\\"ui-autocomplete-item\\\", item).append(\\\"<a>\\\" + item.label + \\\"</a>\\\").appendTo(ul);\\n        };\\n    },\\n\\n    toggleMenu: function toggleMenu(selector) {\\n        return !$(selector).toggleClass('hide').hasClass('hide');\\n    },\\n\\n    showMenu: function showMenu(selector) {\\n        $(selector).removeClass('hide');\\n    },\\n\\n    hideMenu: function hideMenu(selector) {\\n        $(selector).addClass('hide');\\n        //setTimeout(function(){$(selector).addClass('hide');}, 200);\\n    },\\n\\n    bindStickyNav: function bindStickyNav() {\\n        if (!_page2.default.isPostPage()) {\\n            $(window).scroll($.proxy(function () {\\n                var nav = $(this.selectors.HEADER_TOP_NAV);\\n                $(this.selectors.SUBNAV_STICKY_STATIC).height(nav.height() + 0);\\n                if ($(window).scrollTop() > this._topVolatileElementHeight && !nav.hasClass(this._CLASS_STICKY)) {\\n                    // Don't use getWindowEffectiveScrollTop() here, the problem of egg-first-chicken-first is here\\n                    nav.css({ 'top': 0, 'position': 'fixed', 'z-index': 3 });\\n                    nav.addClass(this._CLASS_STICKY);\\n                } else if ($(window).scrollTop() <= this._topVolatileElementHeight && nav.hasClass(this._CLASS_STICKY)) {\\n                    nav.removeClass(this._CLASS_STICKY);\\n                    nav.removeAttr('style');\\n                }\\n            }, this));\\n        }\\n    },\\n\\n    bindUserSettingElements: function bindUserSettingElements() {\\n        $(this.selectors.HEADER_USER_MENU + ', ' + this.selectors.HEADER_USER_ITEM).click($.proxy(function (e) {\\n            e.stopPropagation();\\n            var on = this.toggleMenu(this.selectors.HEADER_USER_ITEM);\\n            this.hidePopupMenu(on ? this.selectors.HEADER_USER_ITEM : null);\\n        }, this));\\n    },\\n\\n    hidePopupMenu: function hidePopupMenu(exclude) {\\n        var popupsSelectors = [this.selectors.HEADER_FUNNY_ITEM, this.selectors.HEADER_USER_ITEM, this.selectors.HEADER_NOTIFICATION_ITEM, ModuleFactory.PostController.selectors.MORE_SHARE_MENU];\\n\\n        var map = {};\\n        map[this.selectors.HEADER_FUNNY_ITEM] = this.selectors.HEADER_FUNNY_MENU;\\n        map[this.selectors.HEADER_USER_ITEM] = this.selectors.HEADER_USER_MENU;\\n        map[this.selectors.HEADER_NOTIFICATION_ITEM] = this.selectors.HEADER_NOTIFICATION_MENU;\\n        map[ModuleFactory.PostController.selectors.MORE_SHARE_MENU] = ModuleFactory.PostController.selectors.MORE_SHARE_BUTTON;\\n\\n        if (exclude != this.selectors.HEADER_NOTIFICATION_ITEM) {\\n            this._isNotificationShown = false;\\n        }\\n        popupsSelectors = $.grep(popupsSelectors, function (value) {\\n            return value != exclude;\\n        });\\n        $(popupsSelectors.join(',')).addClass('hide');\\n\\n        /* Cater menu class change inconsistency... */\\n        for (var itemKey in map) {\\n\\n            var selector = map[itemKey];\\n            var addedClass = '';\\n            switch (itemKey) {\\n                case this.selectors.HEADER_FUNNY_ITEM:\\n                    addedClass = 'selected-alt';\\n                    break;\\n                case this.selectors.HEADER_USER_ITEM:\\n                    addedClass = 'selected';\\n                    selector = selector + ' a';\\n                    break;\\n                case this.selectors.HEADER_NOTIFICATION_ITEM:\\n                    addedClass = 'selected';\\n                    selector = selector + ' a';\\n                    break;\\n            }\\n\\n            if (itemKey != exclude) {\\n                $(selector).removeClass('selected-alt').removeClass('selected');\\n            } else {\\n                $(selector).addClass(addedClass);\\n            }\\n        }\\n    },\\n\\n    bindPopupMenu: function bindPopupMenu() {\\n        $('body').on('click', $.proxy(function (e) {\\n            // will disable hiding notification menu if (wither ctrl or cmd btn is pressed ) && ( clicked dom is in the noti dropdown menu )\\n            if ((e.ctrlKey || e.metaKey) && $(e.target).parents(this.selectors.HEADER_NOTIFICATION_ITEM).length > 0) {\\n                this.hidePopupMenu(this.selectors.HEADER_NOTIFICATION_ITEM);\\n            } else {\\n                this.hidePopupMenu();\\n            }\\n        }, this));\\n    },\\n\\n    idlePopupCountdown: function idlePopupCountdown() {\\n        // ensure we fetch data\\n        this.idlePopupDataFetchCountdown();\\n\\n        clearTimeout(this._idlePopupTimer);\\n        if (this._isIdlePopupShow) {\\n            _overlay2.default.hideOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_IDLE_POPUP);\\n            this._isIdlePopupShow = false;\\n        }\\n        var _self = this;\\n        this._idlePopupTimer = setTimeout(function () {\\n            if (!_overlay2.default.isAnyOverlayShown()) {\\n                _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_IDLE_POPUP, true);\\n                _self._isIdlePopupShow = true;\\n\\n                // Also initialize the ad at this time\\n                if (!$(_self.selectors.IDLE_POPUP_AD_CONTAINER).hasClass('badge-gag-ads-container')) {\\n                    $(_self.selectors.IDLE_POPUP_AD_CONTAINER).addClass('badge-gag-ads-container');\\n                } else {\\n                    $(_self.selectors.IDLE_POPUP_AD_CONTAINER).html('');\\n                }\\n\\n                var isHouseAd = _page2.default.isNsfwPostPage() || _page2.default.isHouseAdPostPage() || _page2.default.isFreshPostPage() || _page2.default.isFreshOrSectionFreshPage();\\n                _rcfgAds2.default.renderIdlePopupAds(isHouseAd);\\n\\n                // #7006 reduce GA event\\n                // GA.track('Idle-popup', 'show', Page.getPageKey(), 1, true);\\n            }\\n        }, Configs.get('configs.idlePopupIdleTime'));\\n    },\\n\\n    idlePopupDataFetchCountdown: function idlePopupDataFetchCountdown() {\\n        clearTimeout(this._idlePopupDataFetchTimer);\\n        var _self = this;\\n\\n        if (this._isIdlePopupDataFetched) {\\n            return;\\n        }\\n\\n        this._idlePopupDataFetchTimer = setTimeout(function () {\\n            $.ajax({\\n                type: \\\"GET\\\",\\n                crossDomain: true,\\n                dataType: \\\"jsonp\\\",\\n                jsonpCallback: \\\"idlePopupData\\\",\\n                cache: \\\"true\\\",\\n                url: _featured2.default._endPoint + \\\"/read/ajax-comment?type=comment&index=0&length=20&timerange=24\\\",\\n                success: function success(data) {\\n                    var template = '';\\n                    var start = 0;\\n                    var count = 0;\\n                    if (data.result.length > 4) {\\n                        start = Math.floor(Math.random() * (data.result.length - 4));\\n                    }\\n                    $.each(data.result, function (i, post) {\\n                        if (i >= start && count < 4) {\\n                            template += '<li>\\\\\\n                                <a href=\\\"' + post.entryUrl + '?ref=idlePopup\\\" target=\\\"_blank\\\">\\\\\\n                                    <div class=\\\"thumbnail\\\">\\\\\\n                                        <img src=\\\"' + post.imageUrl + '\\\" />\\\\\\n                                    </div>\\\\\\n                                    <div class=\\\"info\\\">\\\\\\n                                        <h3>' + post.title + '</h3>\\\\\\n                                    </div><!-- / into -->\\\\\\n                                </a>\\\\\\n                            </li>';\\n                            count++;\\n                        }\\n                    });\\n                    $('#jsid-idle-popup-posts').html(template);\\n                    _self._isIdlePopupDataFetched = true;\\n                },\\n                error: function error() {}\\n            });\\n        }, Configs.get('configs.idlePopupIdleTime') - 15000); // 15 sec before\\n    },\\n\\n    bindIdlePopup: function bindIdlePopup() {\\n        this.idlePopupCountdown();\\n\\n        var _self = this;\\n        $(_overlay2.default.selectors.OVERLAY_COMPONENT_IDLE_POPUP + \\\" .badge-btn-close\\\").click(function () {\\n            GA.track('IdleOverlay', 'TapDismiss');\\n            _self.idlePopupCountdown();\\n        });\\n\\n        $(\\\"body\\\").click(function () {\\n            // #7006 reduce GA event\\n            //if (_self._isIdlePopupShow) {\\n            //    GA.track('Idle-popup', 'dismiss', 'click', 1, true);\\n            //}\\n            _self.idlePopupCountdown();\\n        });\\n\\n        $(window).scroll(function () {\\n            // #7006 reduce GA event\\n            //if (_self._isIdlePopupShow) {\\n            //    GA.track('Idle-popup', 'dismiss', 'scroll', 1, true);\\n            //}\\n            _self.idlePopupCountdown();\\n        });\\n\\n        $(document).keyup(function (e) {\\n            // #7006 reduce GA event\\n            //if (_self._isIdlePopupShow) {\\n            //    GA.track('Idle-popup', 'dismiss', 'keyup', 1, true);\\n            //}\\n            _self.idlePopupCountdown();\\n        });\\n\\n        $('.overview').on('mousewheel DOMMouseScroll', function () {\\n            _self.idlePopupCountdown();\\n        });\\n    },\\n\\n    bindGroupElements: function bindGroupElements() {\\n        $(this.selectors.HEADER_FUNNY_MENU + ', ' + this.selectors.HEADER_FUNNY_ITEM).click($.proxy(function (e) {\\n            e.stopPropagation();\\n            var on = this.toggleMenu(this.selectors.HEADER_FUNNY_ITEM, this.selectors.HEADER_FUNNY_MENU);\\n            this.hidePopupMenu(on ? this.selectors.HEADER_FUNNY_ITEM : null);\\n        }, this));\\n    },\\n\\n    bindNotificationElements: function bindNotificationElements() {\\n        var _self = this;\\n\\n        //if (!Configs.get('user.id')) return;\\n\\n        // GA event is binded to #container only\\n        $(this.selectors.HEADER_NOTIFICATION_ITEM).on('click', this.selectors.CLICK_EVENT_SELECTOR, $.proxy(this._handelClickEventTracking, this));\\n\\n        this.bindNotificationScrollbar();\\n        this.getNotifications();\\n\\n        // click everywhere to hide notification menu\\n        $(document).click($.proxy(function (e) {\\n            if (_self._isNotificationShown) {\\n                _self._isNotificationShown = !_self._isNotificationShown;\\n                // will disable hiding notification menu if (wither ctrl or cmd btn is pressed ) && ( clicked dom is in the noti dropdown menu )\\n                if (!((e.ctrlKey || e.metaKey) && $(e.target).parents(this.selectors.HEADER_NOTIFICATION_ITEM).length > 0)) {\\n                    this.hideMenu(this.selectors.HEADER_NOTIFICATION_ITEM);\\n                    $(this.selectors.HEADER_NOTIFICATION_MENU).removeClass('menu');\\n                    $(this.selectors.HEADER_NOTIFICATION_MENU + ' a').removeClass('selected');\\n                }\\n            }\\n        }, this));\\n\\n        // click unread badge to show or hide menu\\n        $(this.selectors.HEADER_NOTIFICATION_MENU).click($.proxy(function (e) {\\n            e.stopPropagation();\\n            e.preventDefault();\\n\\n            if (_self._isNotificationShown) {\\n                this.hideMenu(this.selectors.HEADER_NOTIFICATION_ITEM);\\n                $(this.selectors.HEADER_NOTIFICATION_MENU).removeClass('menu');\\n                $(this.selectors.HEADER_NOTIFICATION_MENU + ' a').removeClass('selected');\\n                this._handelClickEventTracking(e);\\n            } else {\\n                this.showMenu(this.selectors.HEADER_NOTIFICATION_ITEM);\\n                $(this.selectors.HEADER_NOTIFICATION_MENU).addClass('menu');\\n                $(this.selectors.HEADER_NOTIFICATION_MENU + ' a').addClass('selected');\\n                $(this.selectors.HEADER_NOTIFICATION_UNREAD_COUNT).removeClass('new');\\n                $(this.selectors.HEADER_NOTIFICATION_UNREAD_COUNT).text('');\\n                _self.bindNotificationScrollbar();\\n                _self.markNotificationsAsRead();\\n                this._handelClickEventTracking(e);\\n                this.hidePopupMenu(this.selectors.HEADER_NOTIFICATION_ITEM);\\n            }\\n            _self._isNotificationShown = !_self._isNotificationShown;\\n        }, this));\\n\\n        // notification page list items\\n        $(this.selectors.NOTIFICATION_LIST_ITEMS).click($.proxy(function (e) {\\n            var el = $(e.currentTarget);\\n            var url = $(el).attr('data-url');\\n            var actionType = $(el).attr('data-type');\\n            GA.track('Noti', 'TapLink', '', '', { Type: actionType, ObjectUrl: url });\\n        }, this));\\n    },\\n\\n    bindNotificationScrollbar: function bindNotificationScrollbar() {\\n        var _self = this;\\n\\n        var data = $(this.selectors.HEADER_NOTIFICATION_ITEM).data('plugin_tinyscrollbar');\\n        if (data) {\\n            $(this.selectors.HEADER_NOTIFICATION_ITEM).data('plugin_tinyscrollbar').update(\\\"relative\\\");\\n        } else {\\n            $(this.selectors.HEADER_NOTIFICATION_ITEM).tinyscrollbar({ invertscroll: true });\\n            $(this.selectors.HEADER_NOTIFICATION_ITEM).bind(\\\"move\\\", function () {\\n                _self.bindNotificationLoadMore();\\n            });\\n        }\\n    },\\n\\n    bindNotificationLoadMore: function bindNotificationLoadMore() {\\n        var scrollbarData = $(this.selectors.HEADER_NOTIFICATION_ITEM).data(\\\"plugin_tinyscrollbar\\\");\\n\\n        // The threshold will enable us to start loading the text before we reach the end.\\n        //\\n        var threshold = 0.9;\\n        var positionCurrent = scrollbarData.contentPosition + scrollbarData.viewportSize;\\n        var positionEnd = scrollbarData.contentSize * threshold;\\n        var template = '';\\n\\n        var container = $(this.selectors.HEADER_NOTIFICATION_CONTAINER);\\n        var didEndOfList = container.data('didEndOfList');\\n\\n        if (!didEndOfList && !this._isUpdatingNotification && positionCurrent >= positionEnd) {\\n            GA.track('Noti', 'LoadNotiMenuList', _page2.default.getPageKey(), '', { LoadedCount: ++this._notificationLoadCount });\\n            this.getNotifications(container.data('nextKey'));\\n        }\\n    },\\n\\n    bindUploadElements: function bindUploadElements() {\\n        // show upload overlay\\n        $(this.selectors.HEADER_UPLOAD_BTN).on('click', function (e) {\\n            e.preventDefault();\\n            _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_UPLOAD, false);\\n            _upload2.default.showUploadStep(_upload2.default.selectors.UPLOAD_FILE_STEP);\\n        });\\n    },\\n\\n    /* Footer buttons */\\n    bindFooterNavElements: function bindFooterNavElements() {\\n        var scrollToTopBtns = $(this.selectors.SCROLL_TO_TOP);\\n        scrollToTopBtns.on('click', function (e) {\\n            e.preventDefault();\\n            _keyboard2.default.scrollToTop();\\n        });\\n    },\\n\\n    checkFooterNavElements: function checkFooterNavElements() {\\n        var windowTop = $(window).scrollTop();\\n        if (windowTop > this._showFooterNavAfter && !$(this.selectors.FOOTER_NAV).hasClass(this._CLASS_SHOW_BACK_TO_TOP)) {\\n            $(this.selectors.FOOTER_NAV).addClass(this._CLASS_SHOW_BACK_TO_TOP);\\n        } else if (windowTop <= this._showFooterNavAfter && $(this.selectors.FOOTER_NAV).hasClass(this._CLASS_SHOW_BACK_TO_TOP)) {\\n            $(this.selectors.FOOTER_NAV).removeClass(this._CLASS_SHOW_BACK_TO_TOP);\\n        }\\n    },\\n\\n    bindToastElements: function bindToastElements() {\\n        if ($(this.selectors.HEADER_TOAST).is(':hidden')) {\\n            var toastMessage = _toast2.default.getToast();\\n            if (!jQuery.isEmptyObject(toastMessage)) {\\n                this.showToast(toastMessage.text, toastMessage.color, 5000);\\n            }\\n        }\\n    },\\n\\n    _trackGaEvent: function _trackGaEvent(el) {\\n        var eventData = el.attr('data-evt');\\n        if (!eventData) return;\\n        eventData += \\\"\\\";\\n\\n        var gaValues = eventData.split(',');\\n        var category = '',\\n            action = '',\\n            label = '',\\n            value = '',\\n            element = '';\\n        category = gaValues.shift();\\n        action = gaValues.shift();\\n        label = gaValues.shift();\\n        value = gaValues.shift();\\n        element = gaValues.shift();\\n\\n        var customVariables = {};\\n        var entryKey = el.attr('data-entry-id');\\n        if (entryKey) {\\n            customVariables['PostKey'] = entryKey;\\n        }\\n\\n        var position = el.attr('data-position');\\n        if (position) {\\n            customVariables['Position'] = position;\\n        }\\n\\n        if (element) {\\n            customVariables['Element'] = element;\\n        }\\n\\n        GA.track(category, action, label, value, customVariables);\\n    },\\n\\n    _trackEvent: function _trackEvent(el) {\\n        var eventData = el.attr('data-track');\\n        if (!eventData || eventData == undefined) return;\\n        eventData += \\\"\\\";\\n\\n        var values = eventData.split(',');\\n        var action = values.shift();\\n        var value = values.shift();\\n        var label = values.shift();\\n        var labelValue = values.shift();\\n        var platform = values.shift();\\n        var entry = values.shift();\\n        var view = values.shift();\\n\\n        var params = {\\n            label: label,\\n            labelValue: labelValue,\\n            platform: platform,\\n            entry: entry,\\n            view: view\\n        };\\n\\n        _track2.default.event(action, value, params);\\n    },\\n\\n    _handelClickEventTracking: function _handelClickEventTracking(event) {\\n        var el = $(event.currentTarget);\\n        this._trackGaEvent(el);\\n        this._trackEvent(el);\\n\\n        var tagName = el.prop(\\\"tagName\\\");\\n        var href = el.attr('href') + \\\"\\\";\\n        var openInNewTab = el.attr('target');\\n        var suppressFollowing = el.is(this.selectors.CLICK_EVENT_NOFOLLOW_SELECTOR);\\n\\n        /* Delay link redirection and trigger event logging */\\n        if (!suppressFollowing && tagName == 'A' && (href.indexOf('http') === 0 || href.indexOf('/') === 0) && !openInNewTab) {\\n            if (event) event.preventDefault();\\n\\n            var redirect = \\\"window.location.href = '\\\" + href + \\\"';\\\";\\n            window.setTimeout(redirect, 100);\\n        }\\n    },\\n\\n    bindEventTracking: function bindEventTracking() {\\n\\n        /* Be careful to avoid binding the same event more than once */\\n\\n        // binding GA/Event tracking on list view #content container \\n        $(this.selectors.CONTAINTER).on('click', this.selectors.CLICK_EVENT_SELECTOR, $.proxy(this._handelClickEventTracking, this));\\n    },\\n\\n    /**\\n     * @param toast toast jQuery element\\n     * @private\\n     */\\n    _cleanToastColor: function _cleanToastColor(toast) {\\n        toast = $(toast);\\n        var classes = toast.attr('class').split(/\\\\s+/);\\n        for (var i = 0; i < classes.length; i++) {\\n            if (classes[i].substr(0, 12) == 'toast-color-') {\\n                toast.removeClass(classes[i]);\\n            }\\n        }\\n    },\\n\\n    //////// Public Methods\\n\\n    /**\\n     * Portal to assign page title, unread count based on PushController\\n     * @param title\\n     * @returns {void}\\n     */\\n    setPageTitle: function setPageTitle(title) {\\n        this.docTitle = title; // save the title without unread count\\n        var unreadCount = _push2.default.unreadCount;\\n        var titlePreStr = unreadCount > 0 ? '(' + unreadCount + ') ' : '';\\n        document.title = titlePreStr + title;\\n    },\\n\\n    /**\\n     * Wrapper of setPageTitle but handles special char\\n     * @param title\\n     * @returns {void}\\n     */\\n    setPageTitleWithSpecialChars: function setPageTitleWithSpecialChars(title) {\\n        // decode the encoded pageTitle from fast post view\\n        // reference: http://stackoverflow.com/questions/3700326/decode-amp-back-to-in-javascript\\n        var div = document.createElement('div');\\n        div.innerHTML = title;\\n        this.setPageTitle(div.firstChild.nodeValue);\\n    },\\n\\n    /**\\n     * Refresh title with current docTitle and unread count of PushController\\n     * @returns {void}\\n     */\\n    refreshPageTitle: function refreshPageTitle() {\\n        this.setPageTitle(this.docTitle);\\n    },\\n\\n    /**\\n     * Gets the offset-y of the bottom of the nav bar, which is effectively the actual \\\"scrollTop\\\" taken into account of all sticky top elements\\n     * @returns {*}\\n     */\\n    getWindowEffectiveScrollTop: function getWindowEffectiveScrollTop() {\\n        // takes into account of top nav bar sticky element height\\n        if ($(window).scrollTop() < this._topVolatileElementHeight) return this._topVolatileElementHeight + this._topStickyElementHeight;\\n        return $(window).scrollTop() + this._topStickyElementHeight;\\n    },\\n\\n    /**\\n     * Scrolls the page to the top\\n     */\\n    scrollToTop: function scrollToTop() {\\n        $('html, body').animate({ scrollTop: 0 }, 300);\\n    },\\n\\n    /**\\n     * Checks if the user is logged in. If not, calls promptUserLogin and return false\\n     * Otherwise, return true.\\n     * This is especially good for using like this in other controller:\\n     * if(PageController.ensureLoggedIn()){\\n     * }\\n     * @param nextUrl string the URL that the login page should redirect the user to\\n     */\\n    ensureLoggedIn: function ensureLoggedIn(nextUrl) {\\n        if (_user2.default.isLoggedIn()) {\\n            return true;\\n        } else {\\n            _account2.default.presentSignupForm(nextUrl);\\n            return false;\\n        }\\n    },\\n\\n    isMp4AutoPlay: function isMp4AutoPlay() {\\n        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\\n        var isFirefox = typeof InstallTrigger !== 'undefined';\\n        var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\\n        var isChrome = !!window.chrome && !isOpera;\\n        var isIE = /*@cc_on!@*/false || !!document.documentMode;\\n        var ua = navigator.userAgent.toLowerCase();\\n        var isAndroid = ua.indexOf(\\\"android\\\") > -1;\\n        var isAndroidMobile = ua.indexOf(\\\"android\\\") > -1 && ua.indexOf(\\\"mobile\\\");\\n        var isiPad = navigator.userAgent.match(/iPad/i) != null;\\n        var isiPhone = navigator.userAgent.match(/iPhone/i) != null || navigator.userAgent.match(/iPod/i) != null;\\n\\n        if (isChrome && !isAndroid) {\\n            return true;\\n        }\\n        if (isFirefox) {\\n            return true;\\n        }\\n        if (isIE) {\\n            return true;\\n        }\\n        if (isOpera) {\\n            return true;\\n        }\\n        return false;\\n    },\\n\\n    /**\\n     * Return 0 if should not auto play\\n     * Return 1 if should only play 1 video\\n     * Return 2 if can play multiple video\\n     */\\n    getScrollAutoPlayMp4State: function getScrollAutoPlayMp4State() {\\n        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\\n        var isFirefox = typeof InstallTrigger !== 'undefined';\\n        var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\\n        var isChrome = !!window.chrome && !isOpera;\\n        var isIE = /*@cc_on!@*/false || !!document.documentMode;\\n        var ua = navigator.userAgent.toLowerCase();\\n        var isAndroid = ua.indexOf(\\\"android\\\") > -1;\\n        var isAndroidMobile = ua.indexOf(\\\"android\\\") > -1 && ua.indexOf(\\\"mobile\\\");\\n        var isiPad = navigator.userAgent.match(/iPad/i) != null;\\n        var isiPhone = navigator.userAgent.match(/iPhone/i) != null || navigator.userAgent.match(/iPod/i) != null;\\n\\n        // iOS devices only allow video to be auto-played after user has actually click on the video\\n        if (isiPad || isiPhone || isAndroid) {\\n            return 0;\\n        }\\n        // Safari would lag if multiple video is played\\n        if (isSafari) {\\n            return 1;\\n        }\\n        if (isChrome && !isAndroid) {\\n            return 2;\\n        }\\n        if (isFirefox) {\\n            return 2;\\n        }\\n        if (isIE) {\\n            return 2;\\n        }\\n        if (isOpera) {\\n            return 2;\\n        }\\n        return 0;\\n    },\\n\\n    /**\\n     * Check the cookie value for whether safe mode is enabled by user\\n     */\\n    isSafeModeEnabled: function isSafeModeEnabled() {\\n        return $.cookie(this._safeModeCookieKey) !== '0';\\n    },\\n\\n    /**\\n     * Trigger GIF loading if the cookie value tells us auto play GIF is on\\n     */\\n    loadAnimatedGif: function loadAnimatedGif() {\\n        if (_page2.default.isPostPage() && this.isMp4AutoPlay()) {\\n            $(ModuleFactory.PostController.selectors.ENTRY_ANIMATED_COVER).each(function () {\\n                // we need to make sure we only click once\\n                if (!$(this).hasClass('badge-auto-clicked')) {\\n                    $(this).click();\\n                    $(this).addClass('badge-auto-clicked');\\n                }\\n            });\\n        } else {\\n            $(ModuleFactory.PostController.selectors.ENTRY_ANIMATED_PLAY_BUTTON).each(function () {\\n                // we need to make sure we only do this once (i.e. on element first load)\\n                if (!$(this).hasClass('badge-auto-clicked')) {\\n                    // show the hidden play button to non auto play user\\n                    $(this).removeClass('hide');\\n                    $(this).addClass('badge-auto-clicked');\\n                }\\n            });\\n        }\\n    },\\n    /** display Confirm email banner when call\\n     *\\n     * @param (string) userName\\n     **/\\n    showConfirmEmailBanner: function showConfirmEmailBanner(userName) {\\n        $(this.selectors.HEADER_BANNER_CONFIRM_EMAIL_USERNAME).text(userName);\\n        $(this.selectors.HEADER_BANNER_CONFIRM_EMAIL).removeClass('hide');\\n        // call to re-caclulate sticky\\n        this.calculateHeights();\\n    },\\n\\n    /**\\n     * Present a toast message for some duration.\\n     * @param message string Message text to show\\n     * @param color string color of the toast message (consult CSS to see what's available)\\n     * @param duration int milliseconds for the toast to automatically dismiss. If blank, the toast stays there\\n     * @param position string fixed or absolute(default)\\n     */\\n    showToast: function showToast(message, color, duration, position) {\\n        var toast = $(this.selectors.HEADER_TOAST);\\n        toast.hide();\\n        this._cleanToastColor(toast);\\n        $(this.selectors.HEADER_TOAST).addClass('toast-color-' + color);\\n        $(this.selectors.HEADER_TOAST_MESSAGE).html(message);\\n        // on click dismiss\\n        $(this.selectors.HEADER_TOAST_CLOSE).click($.proxy(function (event) {\\n            event.preventDefault();\\n            this.hideToast();\\n        }, this));\\n\\n        $(this.selectors.HEADER_TOAST).css('position', position == undefined ? 'absolute' : position);\\n        $(this.selectors.HEADER_TOAST).fadeIn(this._toastFadeDuration);\\n        if (typeof duration != 'undefined') {\\n            setTimeout($.proxy(function () {\\n                this.hideToast();\\n            }, this), duration);\\n        }\\n    },\\n\\n    /**\\n     * Hides a toast message\\n     */\\n    hideToast: function hideToast() {\\n        $(this.selectors.HEADER_TOAST).fadeOut(this._toastFadeDuration);\\n    },\\n\\n    /**\\n     * Get latest notification\\n     */\\n    getNotifications: function getNotifications(refKey) {\\n        var _self = this;\\n\\n        if (this._isUpdatingNotification) return;\\n\\n        this._isUpdatingNotification = true;\\n\\n        // add loading state\\n        var loading = '<li class=\\\"loading badge-notification-loader\\\"><a class=\\\"btn spin\\\">Loading </a></li>';\\n        $(this.selectors.HEADER_NOTIFICATION_CONTAINER).append(loading);\\n        this.bindNotificationScrollbar();\\n\\n        var url = '/notifications';\\n        var data = {};\\n        // This value is set after the read state has been called from client, in such case we don't need read state in notifications.json\\n        if (!_push2.default._lastBadgetTs) {\\n            data['includeReadState'] = 1;\\n        }\\n        if (refKey) {\\n            data['refKey'] = refKey;\\n        }\\n        var req = $.ajax({\\n            url: url,\\n            data: data,\\n            dataType: 'json',\\n            success: function success(data) {\\n                _self._isUpdatingNotification = false;\\n                _self._lastNotificationUpdateTs = new Date().getTime();\\n                _self.updateNotification(data);\\n\\n                // Update read-state count if the response has embedded this number\\n                if (data['read-state']) {\\n                    _push2.default.getNsReadStateCb({\\n                        'status': 'OK',\\n                        'payload': data['read-state'],\\n                        'error': ''\\n                    });\\n                }\\n            },\\n            error: function error(data) {\\n                _self._isUpdatingNotification = false;\\n            },\\n            complete: function complete(data) {\\n                $(_self.selectors.HEADER_NOTIFICATION_CONTAINER).find('.badge-notification-loader').remove();\\n                _self.bindNotificationScrollbar();\\n            }\\n        });\\n    },\\n\\n    /**\\n     * Mark notifications as read\\n     */\\n    markNotificationsAsRead: function markNotificationsAsRead() {\\n        var _self = this;\\n\\n        if (this._isMarkingNotificationAsRead) return;\\n\\n        this._isMarkingNotificationAsRead = true;\\n        var notiUrl = Configs.get('user.noti.read_state_url');\\n        var notiParams = Configs.get('user.noti.read_state_params');\\n        var req = $.ajax({\\n            url: notiUrl,\\n            data: notiParams,\\n            dataType: 'json',\\n            type: 'POST',\\n            success: function success(data) {\\n                _self._isMarkingNotificationAsRead = false;\\n                if (data.status == \\\"OK\\\") {\\n                    _push2.default.updateNotificationUnreadCount(0);\\n                }\\n            },\\n            error: function error(data) {\\n                _self._isMarkingNotificationAsRead = false;\\n            }\\n        });\\n    },\\n\\n    /**\\n     * Mark individual notification item as read\\n     */\\n    markNotificationItemAsRead: function markNotificationItemAsRead(target, actionType, objectId) {\\n        if ($(target).data('markedRead')) return;\\n        $.ajax({\\n            url: '/notifications/mark-item',\\n            data: { actionType: actionType, objectId: objectId, state: 1 },\\n            dataType: 'json',\\n            type: 'POST',\\n            success: function success(data) {\\n                if (data.status == \\\"OK\\\") {\\n                    $(target).data('markedRead', true).removeClass('new');\\n                }\\n            },\\n            error: function error(data) {}\\n        });\\n    },\\n\\n    /*\\n    * bind the onclick action on notification item\\n     */\\n    bindNotificationItem: function bindNotificationItem() {\\n        var _self = this;\\n\\n        var selectors = this.selectors.HEADER_NOTIFICATION_CONTAINER + ',' + _notificationsScroll2.default.selectors.NOTIFICATION_LIST;\\n        $(selectors).on('click', '.badge-unread-notification-item', function () {\\n            _self.markNotificationItemAsRead(this, $(this).data('actiontype'), $(this).data('objectid'));\\n        });\\n    },\\n\\n    /**\\n     * Render new updated notifications\\n     */\\n    updateNotification: function updateNotification(data) {\\n        var container = $(this.selectors.HEADER_NOTIFICATION_CONTAINER);\\n        //        container.empty();\\n        // clear empty state\\n        container.find('.empty').remove();\\n        if (data.status == \\\"OK\\\") {\\n            // append each items into notification menu\\n            if (data.items.length > 0) {\\n                for (var i = 0; i < data.items.length; i++) {\\n                    container.append(data.items[i]['message']);\\n                }\\n                if (_push2.default.unreadCount > 20) {\\n                    $(this.selectors.HEADER_NOTIFICATION_SEE_ALL).text('See ' + (_push2.default.unreadCount - 20) + ' more');\\n                } else {\\n                    $(this.selectors.HEADER_NOTIFICATION_SEE_ALL).text('See all');\\n                }\\n\\n                container.data('didEndOfList', data.didEndOfList);\\n                container.data('nextKey', data.nextKey);\\n\\n                // only show message if there are no notifications\\n            } else {\\n                if (container.find('.badge-evt').length == 0) {\\n                    container.append(data.message);\\n                }\\n                container.data('didEndOfList', 1);\\n            }\\n        } else {\\n\\n            container.append(data.message);\\n            container.data('didEndOfList', 1);\\n        }\\n        this.bindNotificationScrollbar();\\n    },\\n\\n    updateTimeZoneOffset: function updateTimeZoneOffset() {\\n        var timezoneOffset = new Date().getTimezoneOffset() / -60;\\n        $.cookie('gag_tz', timezoneOffset, { domain: Configs.get('page.cookie_domain'), expires: 365, path: '/' });\\n    },\\n\\n    syncAccountSystemSession: function syncAccountSystemSession() {\\n        if (_user2.default.isLoggedIn()) {\\n            var syncCount = $.cookie(this._syncAccountSessionCookieKey);\\n            if (syncCount <= 0) return;\\n            var sessionImageUrl = Configs.get('user.acs_url');\\n            if (sessionImageUrl) {\\n                var img = new Image();\\n                img.src = sessionImageUrl;\\n                $.cookie(this._syncAccountSessionCookieKey, syncCount - 1, { domain: Configs.get('page.cookie_domain'), expires: 1, path: '/' });\\n            }\\n        }\\n    },\\n\\n    /**\\n     * Triggers Piwik PageView tracking. Need to do here because we need to wait for the userId\\n     */\\n    trackPageView: function trackPageView() {\\n        if (this._pageViewTracked) {\\n            // do not track duplicate\\n            return;\\n        }\\n\\n        var accountId = _user2.default.getAccountId();\\n        if (accountId > 0) {\\n            Piwik.setUserId(accountId);\\n        }\\n        Piwik.trackPageView();\\n\\n        this._pageViewTracked = true;\\n    },\\n\\n    removeUnusedCookies: function removeUnusedCookies() {\\n        $.each(this._unusedCookies, function (i, key) {\\n            $.cookie(key, 0, { expires: -1, path: '/' });\\n        });\\n    },\\n\\n    initUserFunction: function initUserFunction() {\\n        $(this.selectors.HEADER_USER_FUNCTION_PLACEHOLDER).addClass('hide');\\n        if (_user2.default.isLoggedIn()) {\\n            // make sure it only binds once\\n            if ($(this.selectors.HEADER_USER_FUNCTION).hasClass('hide')) {\\n                this.bindNotificationElements();\\n            }\\n            $(this.selectors.HEADER_VISITOR_FUNCTION).addClass('hide');\\n            $(this.selectors.HEADER_USER_FUNCTION).removeClass('hide');\\n        } else {\\n            $(this.selectors.HEADER_USER_FUNCTION).addClass('hide');\\n            $(this.selectors.HEADER_VISITOR_FUNCTION).removeClass('hide');\\n        }\\n        ModuleFactory.PostController.renderPendingComment();\\n        this.syncAccountSystemSession();\\n\\n        this.trackPageView();\\n    },\\n\\n    /**\\n     * add cookie to client for refer URL to keep track the sign-up channel\\n     */\\n    updateSignUpReferrer: function updateSignUpReferrer() {\\n        if (!_user2.default.isLoggedIn() && $.cookie(this._signUpReferrerCookieKey) == null) {\\n            $.cookie(this._signUpReferrerCookieKey, document.referrer, { domain: Configs.get('page.cookie_domain'), expires: 365, path: '/' });\\n        }\\n    },\\n\\n    showStickyButton: function showStickyButton() {\\n        if ($.cookie(this._dismissStickyPromoteButtonCookieKey)) {\\n            return false;\\n        }\\n\\n        this.updateStickyCookie();\\n\\n        var stickies = Configs.get('sticky.buttons');\\n        var currentDate = new Date();\\n        var cookieStickyObj = {};\\n        var largeTs = 9999999999999;\\n        var stickyToShow = '';\\n        var store = LocalStorageUtils.getStore();\\n\\n        if (store.getItem(this._stickyPromoteButtonCookieKey)) {\\n            cookieStickyObj = JSON.parse(store.getItem(this._stickyPromoteButtonCookieKey));\\n        }\\n\\n        $.each(cookieStickyObj, function (url, expireTs) {\\n            if (expireTs > currentDate.getTime() && expireTs < largeTs) {\\n                largeTs = expireTs;\\n                stickyToShow = url;\\n            }\\n        });\\n\\n        stickies.forEach(function (sticky) {\\n            if ($('.badge-sticky-button').hasClass('hide')) {\\n                if (sticky[1] == stickyToShow) {\\n                    $('.badge-sticky-button').html('<a href=\\\"' + sticky[1] + '\\\" target=\\\"_blank\\\" style=\\\"font-weight:bold;color:#ffffff;\\\" onclick=\\\"GAG.GA.track(\\\\'StickyPromote\\\\', \\\\'TapLink\\\\', \\\\'' + _page2.default.getPageKey() + '\\\\', \\\\'\\\\', {Url : \\\\'' + sticky[1] + '\\\\'});\\\">' + sticky[0] + '</a><a class=\\\"btn-close badge-toast-close\\\" href=\\\"javascript:void(0);\\\" data-sticky=\\\"' + sticky[1] + '\\\" style=\\\"padding-left:5px;color:#ffffff;\\\">✖</a>');\\n                    $('.badge-sticky-button .badge-toast-close').click(function () {\\n                        PageController.dismissSticky($(this).data('sticky'));\\n                    });\\n                    $('.badge-sticky-button').removeClass('hide');\\n                }\\n            }\\n        });\\n    },\\n\\n    updateStickyCookie: function updateStickyCookie() {\\n        var stickies = Configs.get('sticky.buttons');\\n        var currentDate = new Date();\\n        var expiryDate = new Date();\\n        var cookieStickyObj = {};\\n        var newStickyObj = {};\\n        var url = '';\\n        var lastExpiryTime = currentDate.getTime();\\n        var store = LocalStorageUtils.getStore();\\n\\n        if (!store.getItem(this._stickyPromoteButtonCookieKey)) {\\n            stickies.forEach(function (sticky) {\\n                url = sticky[1];\\n                expiryDate.setTime(expiryDate.getTime() + sticky[2] * 60 * 60 * 1000);\\n                newStickyObj[url] = expiryDate.getTime();\\n            });\\n        } else {\\n            cookieStickyObj = JSON.parse(store.getItem(this._stickyPromoteButtonCookieKey));\\n\\n            $.each(cookieStickyObj, function (url) {\\n                $.each(stickies, function (index, sticky) {\\n                    if (url == sticky[1]) {\\n                        // if not expired, keep its expiry time\\n                        if (cookieStickyObj[url] > currentDate.getTime()) {\\n                            newStickyObj[url] = cookieStickyObj[url];\\n                            if (cookieStickyObj[url] > lastExpiryTime) {\\n                                lastExpiryTime = cookieStickyObj[url];\\n                            }\\n                        }\\n                    }\\n                });\\n            });\\n\\n            //handle newly added or already expired stickies\\n            stickies.forEach(function (sticky) {\\n                url = sticky[1];\\n                if (!(url in cookieStickyObj)) {\\n                    expiryDate.setTime(lastExpiryTime + sticky[2] * 60 * 60 * 1000);\\n                    newStickyObj[url] = expiryDate.getTime();\\n                    lastExpiryTime = expiryDate.getTime();\\n                }\\n            });\\n        }\\n\\n        store.setItem(this._stickyPromoteButtonCookieKey, JSON.stringify(newStickyObj));\\n    },\\n\\n    dismissSticky: function dismissSticky(dismissUrl) {\\n        $('.badge-sticky-button').addClass('hide');\\n\\n        var dismiss = Configs.get('sticky.dismiss');\\n        var noAd = Configs.get('sticky.noAd');\\n        var stickyObj = {};\\n\\n        var expiryDate = new Date();\\n        expiryDate.setTime(expiryDate.getTime() + noAd * 60 * 60 * 1000);\\n\\n        $.cookie(this._dismissStickyPromoteButtonCookieKey, 1, { domain: Configs.get('page.cookie_domain'), expires: expiryDate, path: '/' });\\n\\n        GA.track('StickyPromote', 'Dismiss', '', '', { Url: dismissUrl });\\n\\n        var store = LocalStorageUtils.getStore();\\n        if (store.getItem(this._stickyPromoteButtonCookieKey)) {\\n            stickyObj = JSON.parse(store.getItem(this._stickyPromoteButtonCookieKey));\\n        }\\n\\n        $.each(stickyObj, function (url) {\\n            if (url == dismissUrl) {\\n                stickyObj[url] += (noAd + dismiss) * 60 * 60 * 1000;\\n            } else {\\n                stickyObj[url] += noAd * 60 * 60 * 1000;\\n            }\\n        });\\n\\n        store.setItem(this._stickyPromoteButtonCookieKey, JSON.stringify(stickyObj));\\n    },\\n\\n    injectEntryImageOnError: function injectEntryImageOnError() {\\n        var entryContainer = $(ModuleFactory.PostController.selectors.ENTRY_CONTAINER);\\n        var entryImage = entryContainer.find('.badge-item-img');\\n\\n        $(entryImage).one(\\\"error\\\", function () {\\n            var src = $(this).attr('src');\\n            _track2.default.downloadFail(src);\\n        });\\n    },\\n\\n    onRecaptchaLoaded: function onRecaptchaLoaded() {\\n        var totalRetry = 5;\\n        var interval = 1000;\\n\\n        for (var i = 0; i < totalRetry; i++) {\\n            setTimeout(function () {\\n                var captchaDivList = $('.badge-g-recaptcha');\\n                $.each(captchaDivList, function (key, div) {\\n                    if (!$(div).html().length) {\\n                        grecaptcha.render(div, {\\n                            'sitekey': Configs.get('configs.captchaPublicKey')\\n                        });\\n                    }\\n                });\\n            }, interval * i);\\n        }\\n    },\\n\\n    showLocaleSections: function showLocaleSections() {\\n        var _self = this;\\n        $(_self.selectors.HEADER_FUNNY_ITEM).find(_self.selectors.HEADER_SECTION_MENU_ITEMS).each(function () {\\n            var locales = $(this).data('locales');\\n            if (typeof locales === 'string') {\\n                locales = locales.split(',');\\n                if (locales.length > 0) {\\n                    if (LocaleUtils.isMatchAnyLocales(locales)) {\\n                        $(this).removeClass('hide');\\n                    }\\n                }\\n            }\\n        });\\n    }\\n}); /* \\n        General controller for handling common page element actions\\n        e.g. ScrollToTop\\n    */\\n\\n\\nwindow.onCaptchaLoadedCallback = PageController.onRecaptchaLoaded;\\n\\nmodule.exports = PageController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(419), __webpack_require__(26), __webpack_require__(18), __webpack_require__(40), __webpack_require__(3), __webpack_require__(116), __webpack_require__(112), __webpack_require__(174)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/page.js\\n// module id = 854\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/page.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Configs, GA, ComScore, jQuery, ModuleFactory, Utils, CacheableControllerFactory, Piwik) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _overlay = __webpack_require__(128);\\n\\nvar _overlay2 = _interopRequireDefault(_overlay);\\n\\nvar _featured = __webpack_require__(182);\\n\\nvar _featured2 = _interopRequireDefault(_featured);\\n\\nvar _rcfgAds = __webpack_require__(183);\\n\\nvar _rcfgAds2 = _interopRequireDefault(_rcfgAds);\\n\\nvar _account = __webpack_require__(247);\\n\\nvar _account2 = _interopRequireDefault(_account);\\n\\nvar _keyboard = __webpack_require__(248);\\n\\nvar _keyboard2 = _interopRequireDefault(_keyboard);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _track = __webpack_require__(186);\\n\\nvar _track2 = _interopRequireDefault(_track);\\n\\nvar _vote = __webpack_require__(424);\\n\\nvar _vote2 = _interopRequireDefault(_vote);\\n\\nvar _entry = __webpack_require__(868);\\n\\nvar _entry2 = _interopRequireDefault(_entry);\\n\\nvar _vote3 = __webpack_require__(250);\\n\\nvar _vote4 = _interopRequireDefault(_vote3);\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar PostController = $.extend({}, new _base2.default(), {\\n\\n    _entryStickyElementMarginTop: 20, // keep this amount of space from the top of the viewport\\n\\n    _entryStickyElementMarginTopProfile: 20,\\n\\n    _reportInProgress: false,\\n    _voteUp: 'up',\\n    _voteDown: 'down',\\n\\n    _fastInitLoad: true,\\n\\n    _domReady: false,\\n    _commentInited: false,\\n\\n    CLASS_STICKY: 'sticked',\\n\\n    init: function init() {\\n        this._domReady = true;\\n\\n        this.bindElements();\\n        // As of 17-12-2014, this is not used\\n        // this.renderPostFooterLike();\\n\\n        this.trackPostUV();\\n    },\\n\\n    availableCallbacks: ['postWillArchive', 'postDidArchive', 'postWillRestore', 'postDidRestore'],\\n\\n    selectors: {\\n        CONTAINER: 'div#container',\\n\\n        ENTRY_CONTAINER: '.badge-entry-container', // container should be the DOM container for styling/positioning/DOM walking etc.\\n        ENTRY_CONTAINER_RAW: 'badge-entry-container',\\n        ENTRY_ENTITY: '.badge-entry-entity', // entity stores the valuable information like data-entry-id , data-entry-url etc.\\n        ENTRY_ALBUM_ITEM_ENTITY: '.badge-album-item-entity',\\n        // ENTRY_POST_FOOTER_LIKE_ID: 'jsid-footer-facebook-like-plugin',  // As of 17-12-2014, this is not used\\n        ENTRY_STICKY_ELEMENTS: '.badge-entry-sticky', // the actual element that sticks\\n        ENTRY_STICKY_ELEMENTS_SHADOW: '.badge-entry-sticky-shadow', // this is needed for script to record the original position of the sticky element\\n\\n        /*\\n        ENTRY_SECONDARY_LINKS:'.badge-entry-secondary-links',\\n        ENTRY_SECONDARY_LINKS_AUTOHIDE:'.badge-entry-secondary-links.badge-autohide',\\n        */\\n        ENTRY_TITLE: '.badge-item-title',\\n        ENTRY_DESCRIPTION: '.badge-item-description',\\n        ENTRY_IMG: '.badge-item-img',\\n        ENTRY_LOVE_COUNT: '.badge-item-love-count',\\n        ENTRY_COMMENT_COUNT: '.badge-item-comment-count',\\n        ENTRY_SHARE_COUNT: '.badge-item-share-count',\\n        ENTRY_SHARE: '.badge-item-share',\\n        ENTRY_SHARE_MENU: '.badge-item-share-menu',\\n        ENTRY_FB_SHARE: '.badge-facebook-share',\\n        ENTRY_FB_BOT_SHARE: '.badge-facebook-bot-share',\\n        ENTRY_TW_SHARE: '.badge-twitter-share',\\n        ENTRY_TW_BOT_SHARE: '.badge-twitter-bot-share',\\n        ENTRY_GPLUS_SHARE: '.badge-gplus-share',\\n        ENTRY_PIN_SHARE: '.badge-pinterest-share',\\n        ENTRY_EMAIL_SHARE: '.badge-email-share',\\n        ENTRY_NSFW_COVER: '.badge-nsfw-entry-cover',\\n        ENTRY_VIDEO_CONTAINER: '.badge-video-container',\\n        ENTRY_VIDEO_COVER: '.badge-video-cover',\\n        ENTRY_ANIMATED_COVER: '.badge-animated-cover',\\n        ENTRY_ANIMATED_CONTAINER_ANIMATED: '.badge-animated-container-animated',\\n        ENTRY_ANIMATED_VIDEO_PLAYER: 'video',\\n        ENTRY_ANIMATED_CONTAINER_STATIC: '.badge-animated-container-static',\\n        ENTRY_ANIMATED_SPINNER: '.gif-spinner',\\n        ENTRY_ANIMATED_PLAY_BUTTON: '.badge-gif-play',\\n        ENTRY_ANIMATED_PLAYING: 'badge-gif-playing',\\n\\n        ENTRY_NEXT_POST_ENTRY: '.badge-next-post-entry',\\n        ENTRY_PREV_POST_ENTRY: '.badge-prev-post-entry',\\n        ENTRY_POST_GRID_ENTRY: '.badge-post-grid-entry',\\n        ENTRY_CONTENT: '.badge-entry-content',\\n        ENTRY_INFO: '.badge-entry-info',\\n\\n        ENTRY_UPVOTE_BUTTON: '.badge-item-vote-up',\\n        ENTRY_DOWNVOTE_BUTTON: '.badge-item-vote-down',\\n        ENTRY_COMMENT_BUTTON: '.badge-item-comment',\\n        ENTRY_VOTE_CONTAINER: '.badge-item-vote-container',\\n        ENTRY_COMMENT_SYS: '#jsid-comment-sys',\\n        ENTRY_POST_ZOOM: '.badge-post-zoom',\\n        ENTRY_POST_CONTAINER: '.badge-post-container',\\n\\n        COMMENT_SWITCH_9GAG: '.badge-comment-switch-9gag',\\n\\n        MODAL_POST_ZOOM_CONTAINER: '#jsid-modal-post-zoom',\\n\\n        SEARCH_ENTRY_ENTITY: '.badge-search-entry-entity',\\n\\n        // the report container does not necessarily shares the same selector as the overlay container\\n        // that's why it is present in this controller as well as in the overlay controller\\n        MODAL_REPORT_CONTAINER: '.badge-overlay-report',\\n        MODAL_REPORT_TYPE: 'input[name=radio-report]',\\n        MODAL_REPORT_SUBMIT: '.badge-report-submit-btn',\\n        REPORT_LINK: '.badge-item-report',\\n\\n        MORE_SHARE_BUTTON: '.badge-more-share-button',\\n        MORE_SHARE_MENU: '.badge-more-share-menu',\\n        POST_SOCIAL_FOOTER: 'badge-social-footer',\\n        GROUP_TW_SHARE: 'twitter-post-share',\\n        GROUP_GPLUS_SHARE: 'gplus-post-share',\\n        ENTRY_TOOLBAR_PRE: '.badge-toolbar-pre',\\n        ENTRY_TOOLBAR_STICKY: '.badge-entry-toolbar-sticky',\\n        ENTRY_TOOLBAR_BOTTOM: '.badge-share-bar',\\n        FEATURED_SIDEBAR_BOTTOM_ADS: '#jsid-featured-sidebar-ad .img-container',\\n        SCRIPT_POST_CONTAINER: '.badge-script-post'\\n    },\\n\\n    bindElements: function bindElements() {\\n        this.bindScriptIframeResize();\\n        this.bindVoteUpElements();\\n        this.bindVoteDownElements();\\n        this.bindCommentElements();\\n        this.bindToggleShareMenu();\\n        this.bindReportElements();\\n        this.bindEntryCoverElements(); // video, nsfw\\n        //this.bindShowHideReportLinkEvents();\\n        this.bindStickyEntryBars();\\n        this.bindZoomElements();\\n        this.bindSearchResultElements();\\n        this.bindFastElements();\\n    },\\n\\n    _fastItems: null,\\n    _fastEntryIds: [],\\n    _fastCurrentEntryKey: null,\\n    _fastLastEntryKey: null,\\n    _fastForwardDirection: true,\\n    _fastTriggerLoadThreshold: 9,\\n    _fastPostGridSize: 6,\\n    _fastTimer: null,\\n    _fastReloadAdsThreshold: 5,\\n    _fastReloadAdsCount: 1,\\n    _fastSkipBackward: [],\\n    _fastSkipForward: [],\\n    _fastForwardByButton: false,\\n\\n    // init load dataKey['fast_entries'] from post page\\n    initLoadFastEntries: function initLoadFastEntries() {\\n        var data = Configs.get('data');\\n\\n        this._fastCurrentEntryKey = $(this.selectors.ENTRY_ENTITY).data('entry-id');\\n        if (data['fast_entries'] != null) {\\n            this.extractFastEntries(data['fast_entries']);\\n        }\\n    },\\n\\n    // Get neighbour entries from Url\\n    getFastEntriesJson: function getFastEntriesJson(requestUrl) {\\n        var direction = 'next';\\n        if (!this._fastForwardDirection) {\\n            var direction = 'prev';\\n        }\\n        requestUrl = requestUrl + '?direction=' + direction + '&c=13'; // get next 2 page plus 1 offset\\n\\n        if (Configs.get('configs').from_section && Configs.get('configs').section_url) {\\n            requestUrl += '&sc=' + Configs.get('configs').section_url;\\n        }\\n\\n        $.getJSON(requestUrl, null, $.proxy(this.extractFastEntries, this));\\n    },\\n\\n    // Extract Json Data\\n    extractFastEntries: function extractFastEntries(data) {\\n        if (!data.okay) return; // some error has occured\\n\\n        var gridsToFill = 0;\\n\\n        // Extend our list of _fastItems\\n        if (this._fastItems == null) {\\n            this._fastItems = data.items;\\n        } else {\\n            $.extend(this._fastItems, data.items);\\n\\n            // Code for filling fast grid with new item\\n            /*var showingItems = $('.badge-post-grid li:not(.hide)');\\n            if (showingItems.length < this._fastPostGridSize) { // if show not fill grids\\n                gridsToFill = this._fastPostGridSize - showingItems.length;\\n            }*/\\n        }\\n\\n        // Reverse the list if prev direction\\n        var tempEntryIds = data.entryIds;\\n        if (!this._fastForwardDirection) {\\n            tempEntryIds.reverse();\\n        }\\n\\n        var updateCount = 0;\\n        // If NEXT direction will insert to last, else if PREV direction will insert from beginning.\\n        for (var i = 0; i < tempEntryIds.length; i++) {\\n            if ($.inArray(tempEntryIds[i], this._fastEntryIds) < 0) {\\n                if (this._fastForwardDirection) {\\n                    this._fastEntryIds.push(tempEntryIds[i]);\\n                } else {\\n                    this._fastEntryIds.unshift(tempEntryIds[i]);\\n                }\\n                updateCount++;\\n                //this.renderPostGrid(this._fastItems[tempEntryIds[i]], (updateCount <= gridsToFill)); // mark isShow if this new item within gridsToFill\\n            }\\n        }\\n\\n        var index = $.inArray(this._fastCurrentEntryKey, this._fastEntryIds);\\n        this.updatePrevNextButtons(index);\\n\\n        // Skip if no data update\\n        if (tempEntryIds.length > 0 && updateCount == 0) {\\n            if (this._fastForwardDirection) {\\n                this._fastSkipForward.push(data.entryIds[0]);\\n            } else {\\n                this._fastSkipBackward.push(data.entryIds[0]);\\n            }\\n        }\\n    },\\n\\n    fastEntriesMapElements: function fastEntriesMapElements(entryKey, url) {\\n        if (this._fastItems[entryKey] != null) {\\n            var currentEntry = this._fastItems[entryKey];\\n            this.mapPostContent(currentEntry);\\n\\n            /*\\n            // If Post Grid Current Entry is Visible, no need to refresh post grid\\n            if($(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+entryKey+']:visible').length){\\n                $(this.selectors.ENTRY_POST_GRID_ENTRY).removeClass('selected');\\n                $(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+entryKey+']').addClass('selected');\\n            }else{\\n                this.refreshPostGrid();\\n            }*/\\n\\n            // Google Ads\\n            if (this._fastReloadAdsCount >= this._fastReloadAdsThreshold) {\\n                // re-render ads\\n                _rcfgAds2.default.reRenderAds();\\n                this._fastReloadAdsCount = 1;\\n            } else {\\n                this._fastReloadAdsCount++;\\n            }\\n        } else {\\n            // Load page if cannot find item from the list.\\n            window.location.href = url;\\n        }\\n    },\\n    /*\\n    refreshPostGrid : function(){\\n        var entryKey = this._fastCurrentEntryKey;\\n        var tempEntryIds = $.makeArray(this._fastEntryIds);\\n         // Show post grid from thej start if index current index is smaller than Post Grid size\\n        var index = $.inArray(this._fastCurrentEntryKey, tempEntryIds);\\n         $(this.selectors.ENTRY_POST_GRID_ENTRY).parent().addClass('hide');\\n        $(this.selectors.ENTRY_POST_GRID_ENTRY).removeClass('selected');\\n         if(this._fastForwardDirection){\\n            for (var i = index; i < index + this._fastPostGridSize; i++) {\\n                var showEntryKey = tempEntryIds[i];\\n                 $(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+showEntryKey+']').parent().removeClass('hide');\\n            }\\n        }else{\\n            if(index < this._fastPostGridSize){\\n                index = this._fastPostGridSize - 1;\\n            }\\n            for (var i = index; i >= index - this._fastPostGridSize + 1; i--) {\\n                var showEntryKey = tempEntryIds[i];\\n                $(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+showEntryKey+']').parent().removeClass('hide');\\n            };\\n        }\\n        $(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+entryKey+']').addClass('selected');\\n    },\\n     renderPostGrid : function(entryData, isShow){\\n        if($(this.selectors.ENTRY_POST_GRID_ENTRY + '[data-entry-key='+entryData.entryId+']').length <= 0){\\n            var li = $('<li class=\\\"hide\\\"></li>');\\n            if (isShow) li.removeClass('hide');\\n            var anchor = $('<a class=\\\"badge-fast-entry badge-post-grid-entry\\\" data-entry-key=\\\"\\\" href=\\\"\\\"></a>');\\n            var img = $('<img>');\\n             anchor.attr('data-entry-key', entryData.entryId);\\n            anchor.attr('href', entryData.entryRelativeUrl);\\n             img.attr('alt', entryData.title);\\n             anchor.append(img);\\n            li.append(anchor);\\n             if(this._fastForwardDirection){\\n                $('.badge-post-grid').append(li);\\n            }else{\\n                $('.badge-post-grid').prepend(li);\\n            }   \\n        }\\n    },\\n    */\\n    bindFastElements: function bindFastElements() {\\n        if (!_page2.default.isPostPage()) return;\\n\\n        this.initLoadFastEntries();\\n\\n        $(this.selectors.CONTAINER).on('click', '.badge-fast-entry', $.proxy(function (e) {\\n            e.preventDefault();\\n\\n            //clearTimeout(this._fastTimer);\\n\\n            var target = $(e.currentTarget);\\n            if (target.hasClass('disabled')) return;\\n\\n            var entryKey = target.data('entry-key');\\n            var requestUrl = target.attr('href');\\n            var eventAction = '';\\n            if (target.hasClass('badge-next-post-entry')) {\\n                eventAction = 'NextPost';\\n                this._fastForwardDirection = true;\\n            } else if (target.hasClass('badge-prev-post-entry')) {\\n                eventAction = 'PrevPost';\\n                this._fastForwardDirection = false;\\n            }\\n\\n            this._fastLastEntryKey = this._fastCurrentEntryKey;\\n            this._fastCurrentEntryKey = entryKey;\\n            this._fastForwardByButton = true;\\n\\n            if (requestUrl) {\\n\\n                // Do everything like map content, change post grid etc.\\n                this.fastEntriesMapElements(entryKey, requestUrl);\\n\\n                // Trigger Ajax if current index has hitted Threshold (eg. 5 < current Index > 9 )\\n                var index = $.inArray(this._fastCurrentEntryKey, this._fastEntryIds);\\n                var minTrigger = this._fastTriggerLoadThreshold;\\n                var maxTrigger = this._fastEntryIds.length - this._fastTriggerLoadThreshold;\\n                var tempEntryIds = $.makeArray(this._fastEntryIds);\\n                if (!this._fastForwardDirection && index <= minTrigger) {\\n                    // Moving backward and current position earlier than min threshold\\n                    var minTiggerEntryKey = tempEntryIds[1]; // Get second min index entry, due to might not be able to get prev or next entry\\n                    if ($.inArray(minTiggerEntryKey, this._fastSkipBackward) < 0) {\\n                        // skip request if already in skip list\\n                        requestUrl = this._fastItems[minTiggerEntryKey].entryRelativeUrl;\\n                        this.getFastEntriesJson(requestUrl);\\n                    }\\n                } else if (this._fastForwardDirection && index >= maxTrigger) {\\n                    // Moving forward and current position later than max threshold\\n                    var maxTiggerEntryKey = tempEntryIds[tempEntryIds.length - 2]; // Get second max index entry, due to might not be able to get prev or next entry\\n                    if ($.inArray(maxTiggerEntryKey, this._fastSkipForward) < 0) {\\n                        // skip request if already in skip list\\n                        requestUrl = this._fastItems[maxTiggerEntryKey].entryRelativeUrl;\\n                        this.getFastEntriesJson(requestUrl);\\n                    }\\n                }\\n\\n                // GA Tracking\\n                if (eventAction) {\\n                    GA.track('PostAction', eventAction, this._fastLastEntryKey);\\n                    ComScore.firePageviewCandidate();\\n                }\\n\\n                // t. tracking\\n                var options = {\\n                    label: '',\\n                    labelValue: '',\\n                    platform: 'd',\\n                    entry: entryKey,\\n                    view: 'p'\\n                };\\n                _track2.default.uniqueViewed(options);\\n            }\\n        }, this));\\n\\n        if (_page2.default.isPostPage()) {\\n            window.onpopstate = $.proxy(function (e) {\\n\\n                this.trackPostUV();\\n                var url = window.location.href;\\n                var urlArray = url.split('/');\\n\\n                if (jQuery.inArray('gag', urlArray) >= 0) {\\n                    if (!this._fastInitLoad) {\\n                        var entryKey = urlArray[jQuery.inArray('gag', urlArray) + 1];\\n                        var hasAnchor = window.location.hash && window.location.hash.length > 0;\\n\\n                        if (!hasAnchor) {\\n                            this.fastEntriesMapElements(entryKey, url);\\n                        }\\n                    } else {\\n                        this._fastInitLoad = false;\\n                    }\\n                }\\n            }, this);\\n        }\\n    },\\n\\n    updatePrevNextButtons: function updatePrevNextButtons(index) {\\n\\n        // Reset featured sidebar back to top when changing post\\n        _featured2.default.handlers.resetSidebarToTop();\\n        this.handlers.resetEntryStickyToolbar();\\n\\n        // Next\\n        var nextEntry = this._fastItems[this._fastEntryIds[index + 1]];\\n        $(this.selectors.ENTRY_NEXT_POST_ENTRY).removeData('entry-key');\\n\\n        if (typeof nextEntry != 'undefined') {\\n\\n            $(this.selectors.ENTRY_NEXT_POST_ENTRY).removeClass('disabled');\\n            $(this.selectors.ENTRY_NEXT_POST_ENTRY).data('entry-key', nextEntry.entryId);\\n            $(this.selectors.ENTRY_NEXT_POST_ENTRY).attr('href', nextEntry.entryRelativeUrl);\\n        } else {\\n            $(this.selectors.ENTRY_NEXT_POST_ENTRY).addClass('disabled');\\n            $(this.selectors.ENTRY_NEXT_POST_ENTRY).attr('href', '');\\n        }\\n\\n        // Prev\\n        var prevEntry = this._fastItems[this._fastEntryIds[index - 1]];\\n\\n        $(this.selectors.ENTRY_PREV_POST_ENTRY).removeData('entry-key');\\n\\n        if (typeof prevEntry != 'undefined') {\\n\\n            $(this.selectors.ENTRY_PREV_POST_ENTRY).removeClass('disabled');\\n            $(this.selectors.ENTRY_PREV_POST_ENTRY).data('entry-key', prevEntry.entryId);\\n            $(this.selectors.ENTRY_PREV_POST_ENTRY).attr('href', prevEntry.entryRelativeUrl);\\n        } else {\\n            $(this.selectors.ENTRY_PREV_POST_ENTRY).addClass('disabled');\\n            $(this.selectors.ENTRY_PREV_POST_ENTRY).attr('href', '');\\n        }\\n    },\\n\\n    mapPostContent: function mapPostContent(entryData) {\\n        $('html, body').animate({ scrollTop: 0 }, 0);\\n\\n        var entry = $(this.selectors.ENTRY_ENTITY);\\n        var index = $.inArray(entryData.entryId, this._fastEntryIds);\\n\\n        this._fastCurrentEntryKey = entryData.entryId.toString();\\n\\n        if (!this._fastForwardByButton) {\\n            // Handle for history back\\n            var tempEntryIds = $.makeArray(this._fastEntryIds);\\n            for (var i = 0; i < tempEntryIds.length; i++) {\\n                tempEntryIds[i] = tempEntryIds[i].toString();\\n            }var oldEntry = entry.data('entry-id').toString();\\n            this._fastForwardDirection = tempEntryIds.indexOf(oldEntry) > tempEntryIds.indexOf(this._fastCurrentEntryKey) ? false : true;\\n        } else {\\n            // Push read entry to history\\n            if (this._fastLastEntryKey) {\\n                this.replacePostUrl(this._fastLastEntryKey);\\n                this.updatePostUrl(this._fastCurrentEntryKey);\\n            }\\n        }\\n\\n        this._fastForwardByButton = false;\\n\\n        entry.removeData('entry-id');\\n        entry.removeData('entry-url');\\n        entry.removeData('entry-votes');\\n        entry.removeData('entry-comments');\\n        entry.attr('id', 'jsid-entry-entity-' + entryData.entryId);\\n\\n        // Mapping Entry Content\\n        entry.attr('data-entry-id', entryData.entryId);\\n        entry.data('entry-id', entryData.entryId);\\n        entry.data('entry-url', entryData.entryUrl);\\n        entry.data('entry-votes', entryData.votes);\\n        entry.data('entry-comments', entryData.comments);\\n\\n        // Title\\n        $(this.selectors.ENTRY_TITLE).text(entryData.title);\\n        ModuleFactory.PageController.setPageTitleWithSpecialChars(entryData.pageTitle);\\n\\n        // Description\\n        $(this.selectors.ENTRY_DESCRIPTION).html(entryData.description);\\n\\n        // Menu Bar\\n        var counter = $(this.selectors.ENTRY_LOVE_COUNT).parent().attr('id', 'love-count-' + entryData.entryId);\\n        $(this.selectors.ENTRY_LOVE_COUNT, counter).text(Utils.formatNumber(entryData.votes));\\n        $(this.selectors.ENTRY_COMMENT_COUNT).text(entryData.comments);\\n\\n        $(this.selectors.ENTRY_TOOLBAR_STICKY).find('.badge-evt').attr('data-entry-id', entryData.entryId);\\n        $(this.selectors.ENTRY_TOOLBAR_BOTTOM).find('.badge-evt').attr('data-entry-id', entryData.entryId);\\n        $(this.selectors.ENTRY_SHARE).attr('data-entry-id', entryData.entryId);\\n        $(this.selectors.ENTRY_SHARE_MENU).attr('id', 'share-menu-' + entryData.entryId);\\n\\n        // Content\\n        $(this.selectors.ENTRY_CONTENT).html(entryData.entryContent);\\n\\n        this.bindScriptIframeResize();\\n\\n        // Vote \\n        if (entryData.currentVote == 1) {\\n            this.handlers.likeHandler(entryData.entryId);\\n        } else if (entryData.currentVote == -1) {\\n            this.handlers.dislikeHandler(entryData.entryId);\\n        } else {\\n            this.handlers.unlikeHandler(entryData.entryId);\\n        }\\n        // Load Vote from localstorage /  remote\\n        CacheableControllerFactory.getController('vote').process();\\n        CacheableControllerFactory.getController('vote').remoteHandler.processQueue();\\n\\n        // special logic from link post\\n        if (entryData.entryType == 'link') {\\n            $(this.selectors.ENTRY_CONTENT).addClass('with-button');\\n        } else {\\n            $(this.selectors.ENTRY_CONTENT).removeClass('with-button');\\n        }\\n\\n        // Info\\n        $(this.selectors.ENTRY_INFO).html(entryData.entryInfo);\\n\\n        this.updatePrevNextButtons(index);\\n\\n        // Header Meta\\n        $('link[rel=image_src]').attr('href', entryData.entryUrl);\\n        $('link[rel=canonical]').attr('href', entryData.entryUrl);\\n        $('meta[name=title]').attr('href', entryData.title);\\n\\n        // Share \\n        // Total Share\\n        $(this.selectors.ENTRY_SHARE_COUNT).text(entryData.totalShares);\\n\\n        // FB Share\\n        $(this.selectors.ENTRY_FB_SHARE).removeAttr('data-track').attr('data-track', entryData.fbTrack);\\n        $(this.selectors.ENTRY_FB_SHARE).removeAttr('data-evt').attr('data-evt', entryData.fbEvt);\\n        $(this.selectors.ENTRY_FB_SHARE).removeAttr('data-share').attr('data-share', entryData.fbShare);\\n        $(this.selectors.ENTRY_FB_BOT_SHARE).removeAttr('data-evt').attr('data-evt', entryData.fbBotEvt);\\n\\n        // Twitter Share\\n        $(this.selectors.ENTRY_TW_SHARE).removeAttr('data-track').attr('data-track', entryData.twTrack);\\n        $(this.selectors.ENTRY_TW_SHARE).removeAttr('data-evt').attr('data-evt', entryData.twEvt);\\n        $(this.selectors.ENTRY_TW_SHARE).removeAttr('data-title').attr('data-title', entryData.twTitle);\\n        $(this.selectors.ENTRY_TW_SHARE).removeAttr('data-share').attr('data-share', entryData.twShare);\\n        $(this.selectors.ENTRY_TW_BOT_SHARE).removeAttr('data-evt').attr('data-evt', entryData.twBotEvt);\\n\\n        // GPlus Share\\n        $(this.selectors.ENTRY_GPLUS_SHARE).removeAttr('data-track').attr('data-track', entryData.gPlusTrack);\\n        $(this.selectors.ENTRY_GPLUS_SHARE).removeAttr('data-evt').attr('data-evt', entryData.gPlusEvt);\\n        $(this.selectors.ENTRY_GPLUS_SHARE).removeAttr('data-share').attr('data-share', entryData.gPlusShare);\\n\\n        // Pinterest Share\\n        $(this.selectors.ENTRY_PIN_SHARE).removeAttr('data-track').attr('data-track', entryData.pinTrack);\\n        $(this.selectors.ENTRY_PIN_SHARE).removeAttr('data-evt').attr('data-evt', entryData.pinEvt);\\n        $(this.selectors.ENTRY_PIN_SHARE).removeAttr('data-title').attr('data-title', entryData.pinTitle);\\n        $(this.selectors.ENTRY_PIN_SHARE).removeAttr('data-share').attr('data-share', entryData.pinShare);\\n        $(this.selectors.ENTRY_PIN_SHARE).removeAttr('data-img').attr('data-img', entryData.pinImg);\\n\\n        // Email Share\\n        $(this.selectors.ENTRY_EMAIL_SHARE).attr('href', entryData.emailHref);\\n        $(this.selectors.ENTRY_EMAIL_SHARE).removeAttr('data-track').attr('data-track', entryData.emailTrack);\\n        $(this.selectors.ENTRY_EMAIL_SHARE).removeAttr('data-evt').attr('data-evt', entryData.emailEvt);\\n\\n        this.renderCommentElement(entryData.entryUrl, entryData.entryId, this._currentCommentType, entryData.commentOpClientId, entryData.commentOpSignature);\\n\\n        // Admin Meta\\n        if (entryData.entryAdminMeta != 'undefined') {\\n            $('#jsid-admin-meta').html(entryData.entryAdminMeta);\\n        }\\n        // End Mapping Entry Content\\n\\n        ModuleFactory.PageController.loadAnimatedGif();\\n    },\\n\\n    renderPendingComment: function renderPendingComment() {\\n        if (window.pendingComment != null) {\\n            this.renderCommentElement(window.pendingComment['url'], window.pendingComment['postKey'], window.pendingComment['commentType'], window.pendingComment['opClientId'], window.pendingComment['opSignature']);\\n        }\\n    },\\n\\n    renderCommentElement: function renderCommentElement(entryUrl, entryId, commentType, opClientId, opSignature) {\\n        commentType = commentType || Configs.get('page.default_comment_type');\\n        var auth = Configs.get('user.comment_auth') || '';\\n\\n        if (this._currentEntryUrl == entryUrl && this._currentCommentType == commentType && this._currentAuth == auth) {\\n            return;\\n        }\\n\\n        window.pendingComment.url = entryUrl;\\n        window.pendingComment.postKey = entryId;\\n        window.pendingComment.commentType = commentType;\\n        window.pendingComment.opClientId = opClientId;\\n        window.pendingComment.opSignature = opSignature;\\n        window.pendingComment.auth = auth;\\n        window.pendingComment.loginUrl = 'https://' + Configs.get('page.domain') + '/login?next=' + encodeURIComponent(entryUrl) + '#comment';\\n\\n        this._currentCommentOptions = window.pendingComment;\\n        this._currentEntryUrl = entryUrl;\\n        this._currentCommentType = commentType;\\n        this._currentAuth = auth;\\n\\n        if (commentType == '9gag') {\\n            $('.badge-comment').removeAttr('data-href').attr('data-href', entryUrl);\\n            window.CS3.init(this._currentCommentOptions);\\n            $('.badge-comment').show();\\n        }\\n\\n        // bind comment system with GA check\\n        $(this.selectors.CONTAINER).one('mouseenter', this.selectors.ENTRY_COMMENT_SYS, null, $.proxy(function (e) {\\n            GA.track(\\\"CommentAction\\\", \\\"OpenComment\\\", '');\\n        }, this));\\n\\n        if (!this._commentInited) {\\n            var urlHash = window.location.hash;\\n            if (urlHash && urlHash.length > 0 && urlHash.indexOf('comment') !== -1) {\\n                this.scrollToComment();\\n            }\\n            this._commentInited = true;\\n        }\\n    },\\n\\n    // As of 17-12-2014, this is not used\\n    // renderPostFooterLike : function() {\\n    //     var href = $('#'+this.selectors.ENTRY_POST_FOOTER_LIKE_ID).data('href');\\n    //     Facebook.renderLike(this.selectors.ENTRY_POST_FOOTER_LIKE_ID, function(){}, {\\n    //         'data-href':href\\n    //     });\\n    // },\\n\\n    handlers: {\\n        likeHandler: function likeHandler(entryId) {\\n            ModuleFactory.PostController.handlers.loveHandler(entryId, 1);\\n        },\\n\\n        dislikeHandler: function dislikeHandler(entryId) {\\n            ModuleFactory.PostController.handlers.loveHandler(entryId, -1);\\n        },\\n\\n        unlikeHandler: function unlikeHandler(entryId) {\\n            ModuleFactory.PostController.handlers.loveHandler(entryId, 0);\\n        },\\n\\n        loveHandler: function loveHandler(entryId, score) {\\n\\n            var entity = $('#jsid-entry-entity-' + entryId);\\n            var vote = entity.find(ModuleFactory.PostController.selectors.ENTRY_VOTE_CONTAINER);\\n            var downvote = entity.find(ModuleFactory.PostController.selectors.ENTRY_DOWNVOTE_BUTTON);\\n            var upvote = entity.find(ModuleFactory.PostController.selectors.ENTRY_UPVOTE_BUTTON);\\n\\n            vote.removeClass(ModuleFactory.PostController._voteDown);\\n            vote.removeClass(ModuleFactory.PostController._voteUp);\\n            downvote.removeClass('active');\\n            upvote.removeClass('active');\\n\\n            if (score > 0) {\\n                vote.addClass(ModuleFactory.PostController._voteUp);\\n                upvote.addClass('active');\\n            } else if (score < 0) {\\n                vote.addClass(ModuleFactory.PostController._voteDown);\\n                downvote.addClass('active');\\n            }\\n\\n            // update for fast post list entry\\n            ModuleFactory.PostController.updateFastItem(entryId, 'currentVote', score);\\n        },\\n\\n        reportHandler: function reportHandler(event) {\\n            if (!_user2.default.isLoggedIn()) {\\n                event.preventDefault();\\n                _account2.default.presentSignupForm();\\n                return;\\n            }\\n\\n            $(ModuleFactory.PostController.selectors.MODAL_REPORT_CONTAINER).data('entry-id', $(event.currentTarget).closest(ModuleFactory.PostController.selectors.ENTRY_ENTITY).data('entry-id'));\\n            _overlay2.default.showOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_REPORT, false);\\n        },\\n\\n        reportSubmitHandler: function reportSubmitHandler(event) {\\n            var _self = ModuleFactory.PostController;\\n\\n            if (!_self._reportInProgress) {\\n                _self._reportInProgress = true;\\n                var reportButton = $(event.currentTarget);\\n                var reportContainer = $(_self.selectors.MODAL_REPORT_CONTAINER);\\n                var entryKey = reportContainer.data('entry-id');\\n                var radioCheckbox = $(_self.selectors.MODAL_REPORT_TYPE + ':checked', reportContainer);\\n                var reportType = radioCheckbox.val();\\n                var reportLink = $('#jsid-repost-link').val();\\n\\n                reportButton.data('text-normal', reportButton.val());\\n                reportButton.val(reportButton.data('text-loading'));\\n\\n                _entry2.default.report(entryKey, reportType, reportLink, $.proxy(function () {\\n                    // success\\n                    reportButton.val(reportButton.data('text-normal'));\\n                    _overlay2.default.hideOverlay(_overlay2.default.selectors.OVERLAY_COMPONENT_REPORT);\\n                    radioCheckbox.prop('checked', false);\\n                    _self._reportInProgress = false;\\n                }, this), $.proxy(function () {\\n                    // failed\\n                    reportButton.val(reportButton.data('text-normal'));\\n                    alert('Something went wrong, please try again');\\n                    _self._reportInProgress = false;\\n                }, this));\\n            }\\n        },\\n        /*\\n        entryMouseOverShowSecondaryLinkHandler : function(event) { // currentTarget is the entry div\\n            $(event.currentTarget).find(this.selectors.ENTRY_SECONDARY_LINKS_AUTOHIDE).removeClass('hide');\\n        },\\n        entryMouseOutHideSecondaryLinkHandler : function(event) { // currentTarget is the entry div\\n            $(event.currentTarget).find(this.selectors.ENTRY_SECONDARY_LINKS_AUTOHIDE).addClass('hide');\\n        },\\n        */\\n\\n        resetEntryStickyToolbar: function resetEntryStickyToolbar() {\\n            var _self = ModuleFactory.PostController;\\n            var entryToolbar = $(_self.selectors.ENTRY_TOOLBAR_STICKY);\\n            if (entryToolbar && entryToolbar.length > 0) {\\n                entryToolbar.css({ 'position': '', 'z-index': '', 'top': '' });\\n                entryToolbar.removeClass('sticked');\\n            }\\n        },\\n\\n        entryStickyToolbarHandler: function entryStickyToolbarHandler() {\\n            var _self = ModuleFactory.PostController;\\n\\n            var currentPos = $(window).scrollTop();\\n            var winH = $(window).height();\\n            var entry = $(_self.selectors.ENTRY_CONTAINER);\\n\\n            var entryToolbarContainer = entry.find(_self.selectors.ENTRY_TOOLBAR_PRE);\\n            var entryToolbar = entry.find(_self.selectors.ENTRY_TOOLBAR_STICKY);\\n            if (entryToolbar && entryToolbar.length > 0) {\\n                var containerTop = entryToolbarContainer.offset().top;\\n                var containerHeight = entryToolbar.height();\\n\\n                var entryActionBarHeight = entryToolbar.height();\\n                var entryActionBarPadding = 10;\\n\\n                var postContainer = $(_self.selectors.ENTRY_POST_CONTAINER);\\n                var bottom = postContainer.offset().top + postContainer.height() - containerHeight - entryActionBarPadding * 2;\\n\\n                if (currentPos < containerTop && entryToolbar.hasClass('sticked')) {\\n                    _self.handlers.resetEntryStickyToolbar();\\n                } else if (currentPos >= containerTop && currentPos <= bottom && !entryToolbar.hasClass('sticked')) {\\n                    entryToolbar.css({ 'position': 'fixed', 'z-index': '3', 'top': '0' });\\n                    entryToolbar.addClass('sticked');\\n                }\\n            }\\n        },\\n\\n        entryStickElementHandler: function entryStickElementHandler(event) {\\n            var _self = ModuleFactory.PostController;\\n            var cache = ModuleFactory.CacheController;\\n            var list = ModuleFactory.ListController;\\n\\n            var currentPos = $(window).scrollTop();\\n            var winH = $(window).height();\\n\\n            var entryCacheHandler = cache.getEntryHandler();\\n            var entryList = entryCacheHandler.getEntryList();\\n\\n            if (!entryList || entryList.length == 0 || cache.isUpdateNeeded(cache.keys.ENTRY_LIST)) {\\n                // Cache miss, going to get data from DOM\\n                cache.parseEntryInfo();\\n                entryList = entryCacheHandler.getEntryList();\\n                cache.notifyForCacheUpdateCompleted(cache.keys.ENTRY_LIST);\\n            }\\n\\n            var tempStickedItems = [];\\n\\n            // Calculate sticky elements for onscreen entries\\n            for (var i = 0; i < entryList.length; i++) {\\n                var entryId = entryList[i];\\n                var h = entryCacheHandler.getEntryInfoForKey(entryId, 'height');\\n                var off = entryCacheHandler.getEntryInfoForKey(entryId, 'offset');\\n                var top = off.top;\\n                var bottom = off.top + h;\\n\\n                if (bottom >= currentPos - winH - h && top <= currentPos + winH + h) {\\n\\n                    // Sticky Entry Actions\\n                    var entry = $(list.selectors.ENTRY_CONTAINER_ID_PREFIX + entryId);\\n                    var shadow = entry.find(_self.selectors.ENTRY_STICKY_ELEMENTS_SHADOW);\\n                    var stickyActionBar = entry.find(_self.selectors.ENTRY_STICKY_ELEMENTS);\\n\\n                    if (shadow && shadow.length > 0 && stickyActionBar && stickyActionBar.length > 0) {\\n                        var shadowTop = shadow.offset().top;\\n                        var stickyActionBarHeight = stickyActionBar.height() || stickyActionBar.outerHeight();\\n\\n                        // case 1: entry hasn't reached the top of viewport\\n                        if (shadowTop - _self._entryStickyElementMarginTop >= ModuleFactory.PageController.getWindowEffectiveScrollTop()) {\\n                            stickyActionBar.css({ 'position': 'relative', 'z-index': 1, 'top': '' });\\n                            stickyActionBar.removeClass(_self.CLASS_STICKY);\\n                        }\\n                        // case 2: in the middle of stickiness\\n                        else if (shadowTop - _self._entryStickyElementMarginTop < ModuleFactory.PageController.getWindowEffectiveScrollTop() && top + h + parseFloat(entry.css('paddingTop')) - stickyActionBarHeight - _self._entryStickyElementMarginTop > ModuleFactory.PageController.getWindowEffectiveScrollTop()) {\\n                                var stickyTop = ModuleFactory.PageController._topStickyElementHeight + _self._entryStickyElementMarginTop + 'px';\\n                                stickyActionBar.css({ 'position': 'fixed', 'z-index': 2, 'top': stickyTop });\\n                                stickyActionBar.addClass(_self.CLASS_STICKY);\\n                                tempStickedItems.push(entryId);\\n                            }\\n                            // case 3: end of stickiness\\n                            else {\\n                                    var stickyTop = h + parseFloat(entry.css('paddingTop')) - (shadowTop - top) - stickyActionBarHeight + 'px';\\n                                    stickyActionBar.css({ 'position': 'relative', 'z-index': 2, 'top': stickyTop });\\n                                    stickyActionBar.removeClass(_self.CLASS_STICKY);\\n                                }\\n                    }\\n                }\\n            }\\n\\n            // Cache sticked items\\n            var needRecalc = false;\\n            var stickedItemCacheKey = \\\"entrySticked\\\";\\n            var prevStickedItems = cache.getValue(stickedItemCacheKey);\\n            if (prevStickedItems && prevStickedItems.length > 0) {\\n                for (var i = 0; i < prevStickedItems.length; i++) {\\n                    if ($.inArray(prevStickedItems[i], tempStickedItems) < 0) {\\n                        var entryId = prevStickedItems[i];\\n                        var entry = $(list.selectors.ENTRY_CONTAINER_ID_PREFIX + entryId);\\n                        var stickyActionBar = entry.find(_self.selectors.ENTRY_STICKY_ELEMENTS);\\n\\n                        if (stickyActionBar.hasClass(_self.CLASS_STICKY)) {\\n                            stickyActionBar.css({ 'position': '', 'z-index': '', 'top': '' });\\n                            stickyActionBar.removeClass(_self.CLASS_STICKY);\\n                            needUpdate = true;\\n                        }\\n                    }\\n                };\\n            }\\n\\n            cache.setValue(stickedItemCacheKey, tempStickedItems);\\n\\n            if (needRecalc) {\\n                _self.handlers.entryStickElementHandler();\\n            }\\n        }\\n\\n    },\\n\\n    onVoteUp: function onVoteUp(e) {\\n        var btn = $(e.currentTarget);\\n        var entryId = btn.closest(this.selectors.ENTRY_ENTITY).data('entry-id');\\n        var entryUrl = btn.closest(this.selectors.ENTRY_ENTITY).data('entry-url');\\n        var vote = btn.closest(this.selectors.ENTRY_VOTE_CONTAINER);\\n\\n        if (ModuleFactory.PageController.ensureLoggedIn(entryUrl)) {\\n            var upVoted = vote.hasClass(this._voteUp) || btn.hasClass('up active');\\n            var downVoted = vote.hasClass(this._voteDown) || btn.hasClass('down active');\\n\\n            if (downVoted) {\\n                this.addLoveCount(entryId);\\n            }\\n\\n            var cacheData = {};\\n            if (upVoted) {\\n                _vote2.default.unlike(entryId, function () {}, function () {});\\n                this.minusLoveCount(entryId);\\n                this.handlers.unlikeHandler(entryId);\\n\\n                cacheData[entryId] = 0;\\n\\n                if (_page2.default.isPostPage()) {\\n                    Piwik.trackEvent(\\\"PostAction\\\", \\\"UnvotePost\\\", entryId);\\n                } else {\\n                    Piwik.trackEvent(\\\"PostList\\\", \\\"UnvotePost\\\", _page2.default.getPageKey(), '', { PostKey: entryId });\\n                }\\n            } else {\\n                _vote2.default.like(entryId, function () {}, function () {});\\n                this.addLoveCount(entryId);\\n                this.handlers.likeHandler(entryId);\\n\\n                cacheData[entryId] = 1;\\n\\n                if (_page2.default.isPostPage()) {\\n                    Piwik.trackEvent(\\\"PostAction\\\", \\\"UpvotePost\\\", entryId);\\n                } else {\\n                    Piwik.trackEvent(\\\"PostList\\\", \\\"UpvotePost\\\", _page2.default.getPageKey(), '', { PostKey: entryId });\\n                }\\n            }\\n\\n            _vote4.default.addToCache(cacheData);\\n        }\\n    },\\n\\n    onVoteDown: function onVoteDown(e) {\\n        var btn = $(e.currentTarget);\\n        var entryId = btn.closest(this.selectors.ENTRY_ENTITY).data('entry-id');\\n        var entryUrl = btn.closest(this.selectors.ENTRY_ENTITY).data('entry-url');\\n        var vote = btn.closest(this.selectors.ENTRY_VOTE_CONTAINER);\\n        if (ModuleFactory.PageController.ensureLoggedIn(entryUrl)) {\\n            var selected = vote.hasClass(this._voteDown);\\n\\n            if (vote.hasClass(this._voteUp)) {\\n                this.minusLoveCount(entryId);\\n            }\\n\\n            var cacheData = {};\\n            if (selected) {\\n                _vote2.default.unlike(entryId, function () {}, function () {});\\n                this.addLoveCount(entryId);\\n                this.handlers.unlikeHandler(entryId);\\n\\n                cacheData[entryId] = 0;\\n\\n                if (_page2.default.isPostPage()) {\\n                    Piwik.trackEvent('PostAction', \\\"UnvotePost\\\", entryId);\\n                } else {\\n                    Piwik.trackEvent('PostList', \\\"UnvotePost\\\", _page2.default.getPageKey(), '', { PostKey: entryId });\\n                }\\n            } else {\\n                _vote2.default.dislike(entryId, function () {}, function () {});\\n                this.minusLoveCount(entryId);\\n                this.handlers.dislikeHandler(entryId);\\n\\n                cacheData[entryId] = -1;\\n\\n                if (_page2.default.isPostPage()) {\\n                    Piwik.trackEvent('PostAction', \\\"DownvotePost\\\", entryId);\\n                } else {\\n                    Piwik.trackEvent('PostList', \\\"DownvotePost\\\", _page2.default.getPageKey(), '', { PostKey: entryId });\\n                }\\n            }\\n\\n            _vote4.default.addToCache(cacheData);\\n        }\\n    },\\n\\n    addLoveCount: function addLoveCount(entryId) {\\n        var counter = this.getLoveCounter(entryId);\\n        var entity = $('#jsid-entry-entity-' + entryId);\\n        var curr = parseInt(entity.data('entry-votes')); //parseInt(counter.text(), 10);\\n        if (isNaN(curr)) return;\\n        curr++;\\n        $(this.selectors.ENTRY_LOVE_COUNT, counter).text(Utils.formatNumber(curr));\\n        entity.data('entry-votes', curr);\\n\\n        // update for fast post list entry\\n        this.updateFastItem(entryId, 'votes', curr);\\n    },\\n\\n    minusLoveCount: function minusLoveCount(entryId) {\\n        var counter = this.getLoveCounter(entryId);\\n        var entity = $('#jsid-entry-entity-' + entryId);\\n        var curr = parseInt(entity.data('entry-votes'));\\n        if (isNaN(curr)) return;\\n        curr--;\\n        $(this.selectors.ENTRY_LOVE_COUNT, counter).text(Utils.formatNumber(curr));\\n\\n        entity.data('entry-votes', curr);\\n\\n        // update for fast post list entry\\n        this.updateFastItem(entryId, 'votes', curr);\\n    },\\n\\n    updateFastItem: function updateFastItem(entryId, attr, value) {\\n        if (this._fastItems != null) {\\n            if (this._fastItems[entryId] != 'undefined') {\\n                this._fastItems[entryId][attr] = value;\\n            }\\n        }\\n    },\\n\\n    getLoveCounter: function getLoveCounter(entryId) {\\n        return $('#love-count-' + entryId);\\n    },\\n\\n    // Make a call to Track.uniqueViewed if this is a post rather than a list or other pages\\n    trackPostUV: function trackPostUV() {\\n        if (_page2.default.isPostPage()) {\\n            var entryKey = $(this.selectors.ENTRY_ENTITY).data('entry-id');\\n\\n            var options = {\\n                label: '',\\n                labelValue: '',\\n                platform: 'd',\\n                entry: entryKey,\\n                view: 'p'\\n            };\\n            _track2.default.uniqueViewed(options);\\n        }\\n    },\\n\\n    bindStickyEntryBars: function bindStickyEntryBars() {\\n        if (_page2.default.isPostPage()) {\\n            $(window).on('scroll resize', null, null, $.proxy(this.handlers.entryStickyToolbarHandler, this));\\n        } else {\\n            if (_page2.default.isProfilePage()) {\\n                this._entryStickyElementMarginTop = this._entryStickyElementMarginTopProfile;\\n            }\\n            $(window).on('scroll resize', null, null, $.proxy(this.handlers.entryStickElementHandler, this));\\n        }\\n    },\\n\\n    /*\\n    bindShowHideReportLinkEvents : function() {\\n        $(this.selectors.CONTAINER).on('mouseover',this.selectors.ENTRY_CONTAINER,null, $.proxy(this.handlers.entryMouseOverShowSecondaryLinkHandler,this));\\n        $(this.selectors.CONTAINER).on('mouseout',this.selectors.ENTRY_CONTAINER,null, $.proxy(this.handlers.entryMouseOutHideSecondaryLinkHandler,this));\\n    },\\n    */\\n\\n    bindVoteUpElements: function bindVoteUpElements() {\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_UPVOTE_BUTTON, $.proxy(this.onVoteUp, this));\\n    },\\n\\n    bindVoteDownElements: function bindVoteDownElements() {\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_DOWNVOTE_BUTTON, $.proxy(this.onVoteDown, this));\\n    },\\n\\n    _currentCommentType: '',\\n    _currentEntryUrl: '',\\n    _currentAuth: '',\\n    _currentCommentOptions: '',\\n\\n    bindCommentElements: function bindCommentElements() {\\n        var self = this;\\n        setTimeout(function () {\\n            self.renderPendingComment();\\n        }, 10000);\\n    },\\n\\n    bindSearchResultElements: function bindSearchResultElements() {\\n\\n        var handleClickEntity = function handleClickEntity(entity, element) {\\n\\n            var entityUrl = entity.data('entry-url');\\n            var entityId = entity.data('entry-id');\\n            var position = entity.data('position');\\n\\n            GA.track('PostList', 'TapPost', _page2.default.getPageKey(), '', { PostKey: entityId, Element: element, Position: position });\\n\\n            window.open(entityUrl, '_blank');\\n        };\\n\\n        $(this.selectors.CONTAINER).on('click', this.selectors.SEARCH_ENTRY_ENTITY + ' ' + this.selectors.ENTRY_TITLE, null, $.proxy(function (e) {\\n            e.preventDefault();\\n            var entity = $(e.currentTarget);\\n            handleClickEntity(entity, 'PostTitle');\\n        }, this));\\n\\n        $(this.selectors.CONTAINER).on('click', this.selectors.SEARCH_ENTRY_ENTITY + ' ' + this.selectors.ENTRY_IMG, null, $.proxy(function (e) {\\n            e.preventDefault();\\n            var entity = $(e.currentTarget);\\n            handleClickEntity(entity, 'PostImage');\\n        }, this));\\n\\n        // Only for the nsfw cover inside search list view, do not propagate click event up.\\n        // We don't want to trigger the above click handler when user clicks on the mask.\\n        $(this.selectors.CONTAINER).on('click', this.selectors.SEARCH_ENTRY_ENTITY + ' ' + this.selectors.ENTRY_NSFW_COVER, null, $.proxy(function (e) {\\n            e.stopPropagation();\\n        }, this));\\n    },\\n\\n    bindEntryCoverElements: function bindEntryCoverElements() {\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_NSFW_COVER, null, $.proxy(function (e) {\\n            e.preventDefault();\\n            var entryURL = $(e.currentTarget).parents(this.selectors.ENTRY_ENTITY).data('entry-url');\\n            if (!entryURL) {\\n                // This method is shared by normal list view and the list view in search result,\\n                // so try to look for a different parent class in search page.\\n                entryURL = $(e.currentTarget).parents(this.selectors.SEARCH_ENTRY_ENTITY).data('entry-url');\\n            }\\n            _account2.default.setSafeMode(0, entryURL);\\n        }, this));\\n\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_VIDEO_COVER, null, $.proxy(function (e) {\\n            e.preventDefault();\\n\\n            //<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"http://www.youtube.com/embed/9bZkp7q19f0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n            // TODO: check for video source instead of assuming YouTube\\n            var target = $(e.currentTarget);\\n            var entity = target.closest(this.selectors.ENTRY_ENTITY);\\n            var container = $(e.currentTarget).parents(this.selectors.ENTRY_VIDEO_CONTAINER);\\n            var width = '500';\\n            var height = '277';\\n\\n            // NOTE: May need to change video size\\n            // var width = '700';\\n            // var height = '430';\\n\\n            if (entity.hasClass('post-page')) {\\n                var width = '600';\\n                var height = '340';\\n            }\\n\\n            var content = '<iframe width=\\\"' + width + '\\\" height=\\\"' + height + '\\\" src=\\\"http://www.youtube.com/embed/' + container.data('video-id') + '?autoplay=1&controls=1&iv_load_policy=3\\\" frameborder=\\\"0\\\" marginwidth=\\\"0\\\" marginheight=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen></iframe>';\\n\\n            container.html(content);\\n        }, this));\\n\\n        // #5339 hover to play GIF\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_ANIMATED_COVER, null, $.proxy(function (e) {\\n            e.preventDefault();\\n\\n            var _self = this;\\n            var target = $(e.currentTarget);\\n            if (target.data('web-post') != undefined && target.data('web-post') == '1') {\\n                return false;\\n            }\\n            var coverContainer = target.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n            var animatedContainer = target.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED);\\n            var videoPlayer = target.find(_self.selectors.ENTRY_ANIMATED_VIDEO_PLAYER);\\n            var container = coverContainer.parent();\\n            var gifImage = animatedContainer.find('video');\\n            var coverImage = coverContainer.find('.badge-item-img');\\n\\n            if (gifImage.length == 0) {\\n                // #4319 max gif height. get staic image style and apply to image\\n                var coverStyle = coverContainer.find('img').attr('style');\\n                var videoStyle = 'width:' + container.css('width') + '; height:' + container.css('height') + ';';\\n                if (Modernizr.video) {\\n                    animatedContainer.append('<video preload=\\\"none\\\" poster=\\\"' + coverImage[0].src + '\\\" style=\\\"' + videoStyle + '\\\" loop muted><source src=\\\"' + animatedContainer.data('mp4') + '\\\" type=\\\"video/mp4\\\"><source src=\\\"' + animatedContainer.data('webm') + '\\\" type=\\\"video/webm\\\"><div class=\\\"badge-item-animated-img\\\"></div></video>');\\n                } else {\\n                    animatedContainer.append('<img src=\\\"' + animatedContainer.data('image') + '\\\" style=\\\"' + coverStyle + '\\\"/>');\\n                }\\n                animatedContainer.removeData('image');\\n                animatedContainer.attr('data-image', '');\\n                animatedContainer.removeData('mp4');\\n                animatedContainer.attr('data-mp4', '');\\n                animatedContainer.removeData('webm');\\n                animatedContainer.attr('data-webm', '');\\n\\n                _self.bindImageLoadedEvent(container);\\n            } else {\\n                // Ignore play/pause action if image is loading or user clicked more than 1 play/pause within 0.3 sec\\n                if (!coverContainer.hasClass('loading') && (coverContainer.hasClass('presenting') || coverContainer.hasClass('hide'))) {\\n                    if (e && e.type === 'click') {\\n                        if ($(videoPlayer)[0].paused && (coverContainer.hasClass('presenting') || coverContainer.hasClass('hide'))) {\\n                            $(videoPlayer)[0].play();\\n                            container.addClass(_self.selectors.ENTRY_ANIMATED_PLAYING); // for easier retrieval for scroll auto play function\\n                            coverContainer.addClass('hide');\\n                            coverContainer.removeClass('presenting');\\n                        } else {\\n                            $(videoPlayer)[0].pause();\\n                            container.removeClass(_self.selectors.ENTRY_ANIMATED_PLAYING);\\n                            coverContainer.removeClass('hide');\\n                            coverContainer.addClass('presenting');\\n                            coverImage.css('visibility', 'hidden');\\n                        }\\n                    }\\n                }\\n\\n                if (!coverContainer.hasClass('presenting')) {\\n                    var gifElement = animatedContainer.find('img');\\n                    gifElement.prop('src', gifElement.prop('src')); // reset GIF\\n                } else {\\n                    // If isAutoAnimatedGifEnabled, the \\\"GIF\\\" span element is hidden by default\\n                    // in that case, setting presenting in the coverContainer does not reveal it\\n                    // so we need to remove the hidden state here\\n                    $(this.selectors.ENTRY_ANIMATED_PLAY_BUTTON).removeClass('hide');\\n                }\\n            }\\n        }, this));\\n\\n        /*\\n        // Close animated tips popup\\n        $('.badge-animated-tips-got-it').click($.proxy(function(){\\n            $.cookie(this._animatedFirstClickCookieKey, '1', Page.getCookieOptions());\\n            $('.badge-animated-tips').addClass('hide');\\n        }, this));\\n        */\\n    },\\n\\n    bindImageLoadedEvent: function bindImageLoadedEvent(container) {\\n        var _self = this;\\n        var coverContainer = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n        var animatedContainer = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED);\\n        var coverImage = container.find('.badge-item-img');\\n        animatedContainer.find('img').load(function () {\\n            coverContainer.removeClass(\\\"loading\\\");\\n            coverContainer.addClass(\\\"hide\\\");\\n            coverContainer.removeClass(\\\"presenting\\\");\\n            animatedContainer.removeClass(\\\"hide\\\");\\n\\n            if (Modernizr.video) {\\n                coverContainer.css('padding-left', coverImage.css('padding-left'));\\n                coverImage.css('padding-left', '');\\n                coverImage.css('visibility', 'hidden');\\n            }\\n            var gifElement = $(this);\\n            gifElement.prop('src', gifElement.prop('src')); // reset GIF\\n\\n            // Unbind load listener for IE\\n            animatedContainer.find('img').unbind();\\n        }).each(function () {\\n            if (this.complete) $(this).load();\\n        });\\n    },\\n\\n    /*\\n    _animatedFirstClickCookieKey : 'animated_first_click',\\n    initAnimatedWizard : function() {\\n        var isRevisit = $.cookie(this._animatedFirstClickCookieKey) == '1';\\n        if (isRevisit) return;\\n        $('.badge-animated-tips').removeClass('hide');\\n    },\\n    */\\n\\n    bindReportElements: function bindReportElements() {\\n        $(this.selectors.CONTAINER).on('click', this.selectors.REPORT_LINK, null, $.proxy(this.handlers.reportHandler, this));\\n        $(this.selectors.MODAL_REPORT_SUBMIT).on('click', null, null, $.proxy(this.handlers.reportSubmitHandler, this));\\n    },\\n\\n    bindToggleShareMenu: function bindToggleShareMenu() {\\n\\n        $(this.selectors.CONTAINER).on('click', this.selectors.MORE_SHARE_BUTTON, $.proxy(function (e) {\\n\\n            e.stopPropagation();\\n            var triggerElement = $(e.currentTarget);\\n            var entity = triggerElement.closest(this.selectors.ENTRY_ENTITY);\\n            var toggleShareMenu = entity.find('.badge-more-share-menu');\\n\\n            if (toggleShareMenu.hasClass('hide')) {\\n                ModuleFactory.PageController.hidePopupMenu(this.selectors.MORE_SHARE_MENU);\\n                toggleShareMenu.removeClass('hide');\\n                GA.track(\\\"PostAction\\\", \\\"OpenShareMenu\\\", Utils.getCurrentEntryId());\\n            } else {\\n                ModuleFactory.PageController.hidePopupMenu();\\n                GA.track(\\\"PostAction\\\", \\\"CloseShareMenu\\\", Utils.getCurrentEntryId());\\n            }\\n        }, this));\\n    },\\n\\n    bindShortcutKeys: function bindShortcutKeys() {\\n        _keyboard2.default.bindAction('l', $.proxy(this.onVoteUp, this));\\n        _keyboard2.default.bindAction('h', $.proxy(this.onVoteDown, this));\\n    },\\n\\n    bindZoomElements: function bindZoomElements() {\\n        // Post Img Click\\n        $(this.selectors.CONTAINER).on('click', this.selectors.ENTRY_POST_ZOOM, $.proxy(function (e) {\\n            e.preventDefault();\\n            var target = $(e.currentTarget);\\n            // find closest album container\\n            var entity = target.closest(this.selectors.ENTRY_ENTITY + ', ' + this.selectors.ENTRY_ALBUM_ITEM_ENTITY);\\n            this.showPostZoomOverlay(entity);\\n        }, this));\\n    },\\n\\n    replacePostUrl: function replacePostUrl(entryId) {\\n        var url = 'http://' + document.location.hostname + \\\"/gag/\\\" + entryId;\\n        if (typeof window.history.pushState != \\\"undefined\\\") {\\n            window.history.pushState({}, '', url);\\n        }\\n    },\\n\\n    updatePostUrl: function updatePostUrl(entryId) {\\n        var url = 'http://' + document.location.hostname + \\\"/gag/\\\" + entryId;\\n        if (typeof window.history.replaceState != \\\"undefined\\\") {\\n            window.history.replaceState({}, '', url);\\n        }\\n    },\\n\\n    recoverOrginialUrl: function recoverOrginialUrl() {\\n        window.history.go(-1);\\n    },\\n\\n    showPostZoomOverlay: function showPostZoomOverlay(entity) {\\n        var content = entity.find('img').first().clone().removeAttr('class');\\n\\n        // Load content        \\n        $(this.selectors.MODAL_POST_ZOOM_CONTAINER).find('.badge-post-zoom-img').html('').append(content);\\n\\n        _overlay2.default.showOverlay(this.selectors.MODAL_POST_ZOOM_CONTAINER, false);\\n    },\\n\\n    hidePostZoomOverlay: function hidePostZoomOverlay() {\\n        $(this.selectors.MODAL_POST_ZOOM_CONTAINER).addClass('hide');\\n        $('body').removeClass(\\\"no-scroll\\\");\\n    },\\n\\n    scrollToComment: function scrollToComment() {\\n        var comment = $('#comment');\\n        $('html,body').animate({ scrollTop: comment.offset().top }, 100);\\n    },\\n\\n    pauseAllVideos: function pauseAllVideos() {\\n        var _self = this;\\n        var videoPlayer = document.getElementsByTagName('video');\\n        var coverContainer = '';\\n        for (var i = 0; i < videoPlayer.length; i++) {\\n            videoPlayer[i].pause();\\n            coverContainer.closest('.' + _self.selectors.ENTRY_ANIMATED_PLAYING).removeClass(_self.selectors.ENTRY_ANIMATED_PLAYING);\\n            coverContainer = $(videoPlayer[i]).parent().parent().find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n            coverContainer.removeClass('hide');\\n            coverContainer.addClass('presenting');\\n            coverContainer.find('.badge-item-img').css('visibility', 'hidden');\\n        }\\n    },\\n\\n    /**\\n     * Given a list of entry IDs, start playing the videos (if not already playing), pause others\\n     */\\n    playVideosAndPauseOthersByEntryIds: function playVideosAndPauseOthersByEntryIds(entryIds) {\\n        var _self = this;\\n        var alreadyPlayingEntryIds = [];\\n\\n        // Check whether currently playing videos should be paused\\n        $('.' + _self.selectors.ENTRY_ANIMATED_PLAYING).each(function () {\\n            var entryId = $(this).closest('article').data('entry-id');\\n            if ($.inArray(entryId, entryIds) < 0) {\\n                var video = $(this).find('video');\\n                if (video && video.length > 0) {\\n                    video[0].pause();\\n                }\\n\\n                var coverContainer = $(this).find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n                coverContainer.removeClass('hide');\\n                coverContainer.addClass('presenting');\\n                coverContainer.find('.badge-item-img').css('visibility', 'hidden');\\n\\n                $(this).removeClass(_self.selectors.ENTRY_ANIMATED_PLAYING);\\n            } else {\\n                alreadyPlayingEntryIds.push(entryId);\\n            }\\n        });\\n\\n        // Play the videos that are not being played now (using a JS click)\\n        ModuleFactory.ListController.findCurrentlyInFocusEntries().each(function () {\\n            var entryId = $(this).closest('article').data('entry-id');\\n            if ($.inArray(entryId, entryIds) >= 0 && $.inArray(entryId, alreadyPlayingEntryIds) < 0) {\\n                $(this).find(_self.selectors.ENTRY_ANIMATED_COVER).click();\\n            }\\n        });\\n    },\\n\\n    //////////// Public Methods\\n\\n    /**\\n     * Upvotes an entry by passing the container of the entry. Mostly for external controller calls\\n     * @param container\\n     */\\n    upvoteEntry: function upvoteEntry(container) {\\n        $(container).find(this.selectors.ENTRY_UPVOTE_BUTTON).first().click();\\n    },\\n    downvoteEntry: function downvoteEntry(container) {\\n        $(container).find(this.selectors.ENTRY_DOWNVOTE_BUTTON).first().click();\\n    },\\n    commentEntry: function commentEntry(container) {\\n        var entity = $(container).first();\\n\\n        // scroll to comment if post page entry\\n        if (_page2.default.isPostPage()) {\\n            this.scrollToComment();\\n        } else {\\n            if (container.length > 0) {\\n                var commentBtn = $(container).find(this.selectors.ENTRY_COMMENT_BUTTON).first();\\n                commentBtn.click();\\n                window.open(commentBtn.attr('href'), '_blank');\\n            }\\n        }\\n    },\\n\\n    playEntry: function playEntry(container) {\\n        var entity = $(container).first();\\n        var videoCover = entity.find(this.selectors.ENTRY_VIDEO_COVER);\\n        var animatedCover = entity.find(this.selectors.ENTRY_ANIMATED_COVER);\\n\\n        if (videoCover.length) {\\n            videoCover.click();\\n        } else if (animatedCover.length) {\\n            animatedCover.click();\\n        }\\n    },\\n\\n    prevEntry: function prevEntry() {\\n        $(this.selectors.ENTRY_PREV_POST_ENTRY).click();\\n    },\\n\\n    nextEntry: function nextEntry() {\\n        $(this.selectors.ENTRY_NEXT_POST_ENTRY).click();\\n    },\\n\\n    postCallback: function postCallback(type, container) {\\n        var _self = this;\\n        if ($.inArray(type, _self.availableCallbacks) >= 0) {\\n            _self[type](container);\\n        }\\n    },\\n\\n    postWillArchive: function postWillArchive(container) {\\n        var _self = this;\\n        if (container.hasClass(_self.selectors.ENTRY_CONTAINER_RAW)) {\\n            var coverContainer = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n            if (coverContainer && coverContainer.length > 0) {\\n                var gifImage = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED + ' img');\\n                var videoImage = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED + ' video');\\n                if (gifImage && gifImage.length > 0) {\\n                    // Unbind onload listener for loading GIF\\n                    gifImage.unbind();\\n                }\\n                if (videoImage && videoImage.length > 0) {\\n                    videoImage.attr('preload', 'none');\\n                    // Unbind onload listener for loading GIF\\n                    videoImage.unbind();\\n                }\\n            }\\n        }\\n    },\\n\\n    postDidArchive: function postDidArchive(container) {},\\n\\n    postWillRestore: function postWillRestore(container) {},\\n\\n    postDidRestore: function postDidRestore(container) {\\n        var _self = this;\\n\\n        if (container.hasClass(_self.selectors.ENTRY_CONTAINER_RAW)) {\\n            // Somtime spinner remove logic will be triggered when entry was archived, so we try to remove spinner for loaded image\\n            var coverContainer = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_STATIC);\\n            var animatedContainer = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED);\\n            var gifImage = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED + \\\" img\\\");\\n            var videoImage = container.find(_self.selectors.ENTRY_ANIMATED_CONTAINER_ANIMATED + \\\" video\\\");\\n            var gifExist = gifImage && gifImage.length > 0;\\n            var videoExist = videoImage && videoImage.length > 0;\\n            if (gifExist && gifImage[0].complete && coverContainer.hasClass(\\\"loading\\\")) {\\n                coverContainer.removeClass(\\\"loading\\\");\\n                coverContainer.removeClass(\\\"presenting\\\");\\n                coverContainer.addClass(\\\"hide\\\");\\n            } else if (gifExist && !gifImage[0].complete && coverContainer.hasClass(\\\"loading\\\")) {\\n                coverContainer.addClass(\\\"loading\\\");\\n                coverContainer.removeClass(\\\"presenting\\\");\\n                _self.bindImageLoadedEvent(container);\\n            }\\n\\n            if (videoExist) {\\n                coverContainer.removeClass(\\\"loading\\\");\\n                coverContainer.removeClass(\\\"hide\\\");\\n                coverContainer.addClass(\\\"presenting\\\");\\n            }\\n        }\\n    },\\n\\n    bindScriptIframeResize: function bindScriptIframeResize() {\\n        $(this.selectors.SCRIPT_POST_CONTAINER + ' iframe').iFrameResize();\\n    }\\n});\\n\\nmodule.exports = PostController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(18), __webpack_require__(40), __webpack_require__(418), __webpack_require__(3), __webpack_require__(26), __webpack_require__(80), __webpack_require__(181), __webpack_require__(116)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/post.js\\n// module id = 855\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/post.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, GA) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar ProfileSettingController = $.extend({}, new _base2.default(), {\\n\\n    init: function init() {\\n        this.bindElements();\\n    },\\n\\n    selectors: {\\n        SETTING_SOCIAL_UNLINK_BTNS: '.badge-social-unbind',\\n\\n        PROFILE_AVATAR_IMAGE: '#jsid-profile-avatar',\\n        PROFILE_AVATAR_UPLOAD: 'input[name=avatar]',\\n        PROFILE_DEFAULT_AVATAR: 'input[name=default_avatar]',\\n        PROFILE_COLOR_BTN: '.badge-profile-color',\\n        PROFILE_COLOR: 'input[name=profile_color]',\\n        RANDOM_AVATAR_BTN: '#jsid-random-avatar-btn'\\n    },\\n\\n    _bindSocialUnlinkButtons: function _bindSocialUnlinkButtons() {\\n        $(this.selectors.SETTING_SOCIAL_UNLINK_BTNS).on('click', function (e) {\\n            var btn = $(this);\\n            var platform = btn.attr('data-platform');\\n\\n            $.ajax({\\n                url: '/connect/unlink',\\n                data: { 'platform': platform },\\n                dataType: 'json',\\n                success: function success(json) {\\n                    if (json && json.okay) {\\n                        window.location.reload();\\n                    }\\n                },\\n                error: function error(json) {}\\n            });\\n        });\\n    },\\n\\n    _bindRandomAvatarButton: function _bindRandomAvatarButton() {\\n        var profileAvatarImage = $(this.selectors.PROFILE_AVATAR_IMAGE);\\n        var profileDefaultAvatar = $(this.selectors.PROFILE_DEFAULT_AVATAR);\\n        var randomAvatarBtn = $(this.selectors.RANDOM_AVATAR_BTN);\\n        $(randomAvatarBtn).click($.proxy(function () {\\n            var path = randomAvatarBtn.data('path');\\n            var max = randomAvatarBtn.data('max');\\n            var random = Math.floor(Math.random() * max + 1);\\n            var src = path.replace('%random%', random);\\n            if (profileAvatarImage.attr('src') != src) {\\n                profileAvatarImage.attr('src', src);\\n                profileDefaultAvatar.val(random);\\n                // clear file upload\\n                var profileAvatarUpload = $(this.selectors.PROFILE_AVATAR_UPLOAD);\\n                profileAvatarUpload.replaceWith(profileAvatarUpload.clone());\\n            } else {\\n                // if same as current path random again\\n                randomAvatarBtn.click();\\n            }\\n            return false;\\n        }, this));\\n        $(document).on('change', this.selectors.PROFILE_AVATAR_UPLOAD, function () {\\n            profileDefaultAvatar.val('');\\n        });\\n    },\\n\\n    _bindProfileColorButton: function _bindProfileColorButton() {\\n        $(this.selectors.PROFILE_COLOR_BTN).click(function (e) {\\n            $(ProfileSettingController.selectors.PROFILE_COLOR_BTN).removeClass('selected');\\n            $(this).addClass('selected');\\n            $(ProfileSettingController.selectors.PROFILE_COLOR).val($(this).data('color'));\\n            GA.track('ProfileAction', 'ChangeColor', '', '', { Color: $(this).data('color') });\\n            e.preventDefault();\\n        });\\n    },\\n\\n    bindElements: function bindElements() {\\n        this._bindSocialUnlinkButtons();\\n        this._bindRandomAvatarButton();\\n        this._bindProfileColorButton();\\n    }\\n\\n}); /* \\n     Controller for 6.0 Profile Page\\n     */\\n\\n\\nmodule.exports = ProfileSettingController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/profile-setting.js\\n// module id = 856\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/profile-setting.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar SamplingFeatureController = $.extend({}, new _base2.default(), {\\n\\n    updateUI: function updateUI(featureMap) {}\\n});\\n\\nmodule.exports = SamplingFeatureController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/sampling-feature.js\\n// module id = 857\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/sampling-feature.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar ShareController = $.extend({}, new _base2.default(), function () {\\n\\n    var _self = {\\n\\n        selectors: {\\n            CLICK_EVENT_SELECTOR_DELEGATE: '#container'\\n        },\\n\\n        _openFacebookShareDialog: function _openFacebookShareDialog(e) {\\n            e.preventDefault();\\n            var btn = $(this);\\n            var entryUrl = btn.attr('data-share');\\n            var url = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(entryUrl);\\n            _self._openWindow(url);\\n        },\\n\\n        _openTwitterShareDialog: function _openTwitterShareDialog(e) {\\n            e.preventDefault();\\n            var btn = $(this);\\n            var entryUrl = btn.attr('data-share');\\n            var label = btn.attr('data-title');\\n            var url = 'https://twitter.com/intent/tweet?via=9GAG&source=tweetbutton&original_referer=' + encodeURIComponent(entryUrl) + '&text=' + label + '&url=' + encodeURIComponent(entryUrl);\\n            _self._openWindow(url);\\n        },\\n\\n        _openGPlusShareDialog: function _openGPlusShareDialog(e) {\\n            e.preventDefault();\\n            var btn = $(this);\\n            var entryUrl = btn.attr('data-share');\\n            var label = btn.attr('data-title');\\n            var url = 'https://plus.google.com/share?url=' + encodeURIComponent(entryUrl);\\n            _self._openWindow(url);\\n        },\\n\\n        _openPinterestShareDialog: function _openPinterestShareDialog(e) {\\n            e.preventDefault();\\n            var btn = $(this);\\n            var entryUrl = btn.attr('data-share');\\n            var imageUrl = btn.attr('data-img');\\n            var label = btn.attr('data-title');\\n            var url = '//pinterest.com/pin/create/button/?url=' + encodeURIComponent(entryUrl) + '&media=' + encodeURIComponent(imageUrl) + '&description=' + label;\\n            _self._openWindow(url);\\n        },\\n\\n        _openWindow: function _openWindow(url) {\\n            var w = 640;var h = 460;var sTop = window.screen.height / 2 - h / 2;var sLeft = window.screen.width / 2 - w / 2;\\n            var sharer = window.open(url, \\\"Share\\\", \\\"status=1,height=\\\" + h + \\\",width=\\\" + w + \\\",top=\\\" + sTop + \\\",left=\\\" + sLeft + \\\",resizable=0\\\");\\n        },\\n\\n        _bindElements: function _bindElements() {\\n            $(_self.selectors.CLICK_EVENT_SELECTOR_DELEGATE).on('click', '.badge-facebook-share', _self._openFacebookShareDialog);\\n            $(_self.selectors.CLICK_EVENT_SELECTOR_DELEGATE).on('click', '.badge-twitter-share', _self._openTwitterShareDialog);\\n            $(_self.selectors.CLICK_EVENT_SELECTOR_DELEGATE).on('click', '.badge-gplus-share', _self._openGPlusShareDialog);\\n            $(_self.selectors.CLICK_EVENT_SELECTOR_DELEGATE).on('click', '.badge-pinterest-share', _self._openPinterestShareDialog);\\n        }\\n    };\\n\\n    return {\\n        init: function init() {\\n            _self._bindElements();\\n        }\\n    };\\n}());\\n\\nmodule.exports = ShareController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/share.js\\n// module id = 858\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/share.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, GA) {'use strict';\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar TwitterController = $.extend({}, new _base2.default(), {\\n\\n    init: function init() {\\n        this._bindClickFollowButtonEvent();\\n    },\\n\\n    _bindClickFollowButtonEvent: function _bindClickFollowButtonEvent() {\\n        $('#twitter-wbjs').load(function () {\\n            if (window.twttr) {\\n                window.twttr.events.bind('follow', function (event) {\\n                    GA.track('Social', 'LikeTwitter', _page2.default.getPageKey());\\n                });\\n            }\\n        });\\n    }\\n});\\n\\nmodule.exports = TwitterController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(40)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/twitter.js\\n// module id = 859\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/twitter.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _base = __webpack_require__(12);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/*\\n Controller for World polling leaderboard page\\n\\n */\\nvar WorldController = $.extend({}, new _base2.default(), {\\n\\n    init: function init() {\\n        this.bindElements();\\n    },\\n\\n    selectors: {},\\n\\n    bindElements: function bindElements() {\\n        if (!_page2.default.isWorldPage()) return;\\n\\n        this.bindLeaderboardNavButton();\\n    },\\n\\n    bindLeaderboardNavButton: function bindLeaderboardNavButton() {\\n\\n        $('.badge-tabbar a').on('click', function (e) {\\n            e.preventDefault();\\n            $('.badge-tabbar a').toggleClass(\\\"selected\\\");\\n            $('.badge-leaderboard ol').toggle();\\n        });\\n    }\\n\\n});\\n\\nmodule.exports = WorldController;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/controllers/world.js\\n// module id = 860\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/controllers/world.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(Configs) {'use strict';\\n\\n/**\\n * Send events to GA, not to be used directly, use the wrapper GAG.GA instead.\\n */\\nvar GA_real = {\\n    track: function track(category, action, label) {\\n        try {\\n            if (!Configs.get('configs').gaEventEnabled) {\\n                return;\\n            }\\n\\n            // #7006 event stop double write to master if in bucket\\n            if (window['_ga'] == undefined) {\\n                ga('send', 'event', category, action, label);\\n            }\\n\\n            if (window['_ga'] && window['_ga'] instanceof Array) {\\n                for (var i = 0; i < window['_ga'].length; i++) {\\n                    var prefix = window['_ga'][i];\\n                    ga(prefix + '.send', 'event', category, action, label);\\n                }\\n            }\\n        } catch (e) {}\\n    }\\n};\\n\\nmodule.exports = GA_real;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/GA_real.js\\n// module id = 861\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/GA_real.js?\")},function(module,exports){eval(\"'use strict';\\n\\n// Ref. http://www.mattytemple.com/projects/shortcut-js/\\n// Ref. https://github.com/mattytemple/Code-Scraps/blob/master/shortcut.js\\nvar shortcut = {\\n    'all_shortcuts': {}, //All the shortcuts are stored in this array\\n    'commandMode': false,\\n    'add': function add(shortcut_combination, callback, opt) {\\n        //Provide a set of default options\\n        var default_options = {\\n            'type': 'keydown',\\n            'propagate': false,\\n            'disable_in_input': false,\\n            'require_command_mode': true,\\n            'target': document,\\n            'keycode': false\\n        };\\n        if (!opt) opt = default_options;else {\\n            for (var dfo in default_options) {\\n                if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];\\n            }\\n        }\\n\\n        var ele = opt.target;\\n        if (typeof opt.target == 'string') ele = document.getElementById(opt.target);\\n        var ths = this;\\n        shortcut_combination = shortcut_combination.toLowerCase();\\n\\n        //The function to be called at keypress\\n        var func = function func(e) {\\n\\n            // GH-15 Fix var not initialized in strict mode\\n            var code, k;\\n\\n            e = e || window.event;\\n\\n            if (opt['disable_in_input']) {\\n                //Don't enable shortcut keys in Input, Textarea fields\\n                var element;\\n                if (e.target) element = e.target;else if (e.srcElement) element = e.srcElement;\\n                if (element.nodeType == 3) element = element.parentNode;\\n\\n                if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;\\n            }\\n\\n            if (opt['require_command_mode'] && !ths.commandMode) {\\n                //Don't enable shortcut key unless we are in command mode\\n                return;\\n            }\\n\\n            //Find Which key is pressed\\n            if (e.keyCode) code = e.keyCode;else if (e.which) code = e.which;\\n            var character = String.fromCharCode(code).toLowerCase();\\n\\n            if (code == 188) character = \\\",\\\"; //If the user presses , when the type is onkeydown\\n            if (code == 190) character = \\\".\\\"; //If the user presses , when the type is onkeydown\\n\\n            var keys = shortcut_combination.split(\\\"+\\\");\\n            //Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked\\n            var kp = 0;\\n\\n            //Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken\\n            var shift_nums = {\\n                \\\"`\\\": \\\"~\\\",\\n                \\\"1\\\": \\\"!\\\",\\n                \\\"2\\\": \\\"@\\\",\\n                \\\"3\\\": \\\"#\\\",\\n                \\\"4\\\": \\\"$\\\",\\n                \\\"5\\\": \\\"%\\\",\\n                \\\"6\\\": \\\"^\\\",\\n                \\\"7\\\": \\\"&\\\",\\n                \\\"8\\\": \\\"*\\\",\\n                \\\"9\\\": \\\"(\\\",\\n                \\\"0\\\": \\\")\\\",\\n                \\\"-\\\": \\\"_\\\",\\n                \\\"=\\\": \\\"+\\\",\\n                \\\";\\\": \\\":\\\",\\n                \\\"'\\\": \\\"\\\\\\\"\\\",\\n                \\\",\\\": \\\"<\\\",\\n                \\\".\\\": \\\">\\\",\\n                \\\"/\\\": \\\"?\\\",\\n                \\\"\\\\\\\\\\\": \\\"|\\\"\\n            };\\n            //Special Keys - and their codes\\n            var special_keys = {\\n                'esc': 27,\\n                'escape': 27,\\n                'tab': 9,\\n                'space': 32,\\n                'return': 13,\\n                'enter': 13,\\n                'backspace': 8,\\n\\n                'scrolllock': 145,\\n                'scroll_lock': 145,\\n                'scroll': 145,\\n                'capslock': 20,\\n                'caps_lock': 20,\\n                'caps': 20,\\n                'numlock': 144,\\n                'num_lock': 144,\\n                'num': 144,\\n\\n                'pause': 19,\\n                'break': 19,\\n\\n                'insert': 45,\\n                'home': 36,\\n                'delete': 46,\\n                'end': 35,\\n\\n                'pageup': 33,\\n                'page_up': 33,\\n                'pu': 33,\\n\\n                'pagedown': 34,\\n                'page_down': 34,\\n                'pd': 34,\\n\\n                'left': 37,\\n                'up': 38,\\n                'right': 39,\\n                'down': 40,\\n\\n                'f1': 112,\\n                'f2': 113,\\n                'f3': 114,\\n                'f4': 115,\\n                'f5': 116,\\n                'f6': 117,\\n                'f7': 118,\\n                'f8': 119,\\n                'f9': 120,\\n                'f10': 121,\\n                'f11': 122,\\n                'f12': 123\\n            };\\n\\n            var modifiers = {\\n                shift: { wanted: false, pressed: false },\\n                ctrl: { wanted: false, pressed: false },\\n                alt: { wanted: false, pressed: false },\\n                meta: { wanted: false, pressed: false } //Meta is Mac specific\\n            };\\n\\n            if (e.ctrlKey) modifiers.ctrl.pressed = true;\\n            if (e.shiftKey) modifiers.shift.pressed = true;\\n            if (e.altKey) modifiers.alt.pressed = true;\\n            if (e.metaKey) modifiers.meta.pressed = true;\\n\\n            for (var i = 0; k = keys[i], i < keys.length; i++) {\\n                //Modifiers\\n                if (k == 'ctrl' || k == 'control') {\\n                    kp++;\\n                    modifiers.ctrl.wanted = true;\\n                } else if (k == 'shift') {\\n                    kp++;\\n                    modifiers.shift.wanted = true;\\n                } else if (k == 'alt') {\\n                    kp++;\\n                    modifiers.alt.wanted = true;\\n                } else if (k == 'meta') {\\n                    kp++;\\n                    modifiers.meta.wanted = true;\\n                } else if (k.length > 1) {\\n                    //If it is a special key\\n                    if (special_keys[k] == code) kp++;\\n                } else if (opt['keycode']) {\\n                    if (opt['keycode'] == code) kp++;\\n                } else {\\n                    //The special keys did not match\\n                    if (character == k) kp++;else {\\n                        if (shift_nums[character] && e.shiftKey) {\\n                            //Stupid Shift key bug created by using lowercase\\n                            character = shift_nums[character];\\n                            if (character == k) kp++;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if (kp == keys.length && modifiers.ctrl.pressed == modifiers.ctrl.wanted && modifiers.shift.pressed == modifiers.shift.wanted && modifiers.alt.pressed == modifiers.alt.wanted && modifiers.meta.pressed == modifiers.meta.wanted) {\\n                callback(e);\\n\\n                if (!opt['propagate']) {\\n                    //Stop the event\\n                    //e.cancelBubble is supported by IE - this will kill the bubbling process.\\n                    e.cancelBubble = true;\\n                    e.returnValue = false;\\n\\n                    //e.stopPropagation works in Firefox.\\n                    if (e.stopPropagation) {\\n                        e.stopPropagation();\\n                        e.preventDefault();\\n                    }\\n                    return false;\\n                }\\n            }\\n        };\\n        this.all_shortcuts[shortcut_combination] = {\\n            'callback': func,\\n            'target': ele,\\n            'event': opt['type']\\n        };\\n        //Attach the function with the event\\n        if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);else ele['on' + opt['type']] = func;\\n    },\\n\\n    //Remove the shortcut - just specify the shortcut and I will remove the binding\\n    'remove': function remove(shortcut_combination) {\\n        shortcut_combination = shortcut_combination.toLowerCase();\\n        var binding = this.all_shortcuts[shortcut_combination];\\n        delete this.all_shortcuts[shortcut_combination];\\n        if (!binding) return;\\n        var type = binding['event'];\\n        var ele = binding['target'];\\n        var callback = binding['callback'];\\n\\n        if (ele.detachEvent) ele.detachEvent('on' + type, callback);else if (ele.removeEventListener) ele.removeEventListener(type, callback, false);else ele['on' + type] = false;\\n    },\\n    'commandModeListener': null,\\n    'toggleCommandMode': function toggleCommandMode() {\\n        this.commandMode = !this.commandMode;\\n\\n        if (this.commandModeListener != null) this.commandModeListener();\\n    }\\n};\\n\\nmodule.exports = shortcut;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/helpers/shortcut.js\\n// module id = 862\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/helpers/shortcut.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(ModuleFactory, GA, Piwik, $) {'use strict';\\n\\nvar _cacheFactory = __webpack_require__(185);\\n\\nvar _cacheFactory2 = _interopRequireDefault(_cacheFactory);\\n\\nvar _configs = __webpack_require__(18);\\n\\nvar _configs2 = _interopRequireDefault(_configs);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nvar _toast = __webpack_require__(423);\\n\\nvar _toast2 = _interopRequireDefault(_toast);\\n\\nvar _track = __webpack_require__(186);\\n\\nvar _track2 = _interopRequireDefault(_track);\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _facebook = __webpack_require__(251);\\n\\nvar _facebook2 = _interopRequireDefault(_facebook);\\n\\nvar _gplus = __webpack_require__(421);\\n\\nvar _gplus2 = _interopRequireDefault(_gplus);\\n\\nvar _vote = __webpack_require__(424);\\n\\nvar _vote2 = _interopRequireDefault(_vote);\\n\\nvar _account = __webpack_require__(247);\\n\\nvar _account2 = _interopRequireDefault(_account);\\n\\nvar _cache = __webpack_require__(842);\\n\\nvar _cache2 = _interopRequireDefault(_cache);\\n\\nvar _cacheable = __webpack_require__(848);\\n\\nvar _cacheable2 = _interopRequireDefault(_cacheable);\\n\\nvar _facebook3 = __webpack_require__(849);\\n\\nvar _facebook4 = _interopRequireDefault(_facebook3);\\n\\nvar _featured = __webpack_require__(182);\\n\\nvar _featured2 = _interopRequireDefault(_featured);\\n\\nvar _gplus3 = __webpack_require__(850);\\n\\nvar _gplus4 = _interopRequireDefault(_gplus3);\\n\\nvar _headbar = __webpack_require__(851);\\n\\nvar _headbar2 = _interopRequireDefault(_headbar);\\n\\nvar _keyboard = __webpack_require__(248);\\n\\nvar _keyboard2 = _interopRequireDefault(_keyboard);\\n\\nvar _list = __webpack_require__(852);\\n\\nvar _list2 = _interopRequireDefault(_list);\\n\\nvar _listScroll = __webpack_require__(249);\\n\\nvar _listScroll2 = _interopRequireDefault(_listScroll);\\n\\nvar _milestone = __webpack_require__(853);\\n\\nvar _milestone2 = _interopRequireDefault(_milestone);\\n\\nvar _notificationsScroll = __webpack_require__(415);\\n\\nvar _notificationsScroll2 = _interopRequireDefault(_notificationsScroll);\\n\\nvar _overlay = __webpack_require__(128);\\n\\nvar _overlay2 = _interopRequireDefault(_overlay);\\n\\nvar _post = __webpack_require__(855);\\n\\nvar _post2 = _interopRequireDefault(_post);\\n\\nvar _page3 = __webpack_require__(854);\\n\\nvar _page4 = _interopRequireDefault(_page3);\\n\\nvar _profileSetting = __webpack_require__(856);\\n\\nvar _profileSetting2 = _interopRequireDefault(_profileSetting);\\n\\nvar _push = __webpack_require__(416);\\n\\nvar _push2 = _interopRequireDefault(_push);\\n\\nvar _rcfgAds = __webpack_require__(183);\\n\\nvar _rcfgAds2 = _interopRequireDefault(_rcfgAds);\\n\\nvar _share = __webpack_require__(858);\\n\\nvar _share2 = _interopRequireDefault(_share);\\n\\nvar _twitter = __webpack_require__(859);\\n\\nvar _twitter2 = _interopRequireDefault(_twitter);\\n\\nvar _upload = __webpack_require__(184);\\n\\nvar _upload2 = _interopRequireDefault(_upload);\\n\\nvar _webNoti = __webpack_require__(417);\\n\\nvar _webNoti2 = _interopRequireDefault(_webNoti);\\n\\nvar _world = __webpack_require__(860);\\n\\nvar _world2 = _interopRequireDefault(_world);\\n\\nvar _apps = __webpack_require__(841);\\n\\nvar _apps2 = _interopRequireDefault(_apps);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// prevent circular dependency\\n\\n\\n// import controllers\\nModuleFactory.PageController = _page4.default; // import models\\n\\nModuleFactory.CacheController = _cache2.default;\\nModuleFactory.ListController = _list2.default;\\nModuleFactory.PostController = _post2.default;\\n\\nvar GAG = GAG || {};\\n\\n// helper functions for external uses directly\\nGAG.GA = GA;\\nGAG.Piwik = Piwik;\\n\\n/*\\n    The application object to initiate models/controllers and dispatch events to controller handlers\\n*/\\nGAG.App = function () {\\n\\n    var _self = {\\n        _data: {},\\n        _models: {},\\n        _controllers: {},\\n\\n        /* Bind all essential document and window events to setup models and controllers */\\n        init: function init() {\\n            var app = _self;\\n\\n            $(document).ready(function () {\\n                app._onDomReady();\\n            });\\n\\n            $(window).on('load', function () {\\n                app._onWindowLoad();\\n            });\\n\\n            $(window).on('scroll', function (e) {\\n                app._runOnControllers('onScroll');\\n            });\\n\\n            $(window).on('resize', function (e) {\\n                app._runOnControllers('onResize');\\n            });\\n        },\\n\\n        _onDomReady: function _onDomReady() {\\n            _self._runOnModels('init');\\n            _self._runOnControllers('init');\\n        },\\n\\n        _onWindowLoad: function _onWindowLoad() {\\n            _self._runOnModels('onWindowLoad');\\n            _self._runOnControllers('onWindowLoad');\\n        },\\n\\n        /* Call specific method on given objects */\\n        _runOnObjects: function _runOnObjects(objects, method) {\\n            if (!objects instanceof Object) return;\\n\\n            $.each(objects, function (objectName, object) {\\n\\n                if (object[method] && typeof object[method] == 'function') {\\n                    object[method]();\\n                }\\n            });\\n        },\\n\\n        _runOnModels: function _runOnModels(method) {\\n            _self._runOnObjects(_self._models, method);\\n        },\\n\\n        _runOnControllers: function _runOnControllers(method) {\\n            _self._runOnObjects(_self._controllers, method);\\n        },\\n\\n        /* Public methods */\\n        addModel: function addModel(models) {\\n\\n            _self._models = models;\\n            return this;\\n        },\\n\\n        addController: function addController(controllers) {\\n\\n            _self._controllers = controllers;\\n            return this;\\n        },\\n\\n        setData: function setData(key, data) {\\n            _self._data[key] = data;\\n        },\\n\\n        _scriptMap: {\\n            'facebook': '//connect.facebook.net/en_US/sdk.js',\\n            'twitter': '//platform.twitter.com/widgets.js',\\n            'gplus': 'https://apis.google.com/js/platform.js',\\n            'recaptcha': 'https://www.google.com/recaptcha/api.js?onload=onCaptchaLoadedCallback&render=explicit&hl=en'\\n        },\\n\\n        _loadAsyncScript: function _loadAsyncScript(scriptId, script) {\\n            return function () {\\n                var ga = document.createElement('script');ga.type = 'text/javascript';ga.async = true;\\n                ga.src = script;\\n                ga.async = true;\\n                ga.id = scriptId;\\n                var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga, s);\\n            }();\\n        },\\n\\n        loadAsynScripts: function loadAsynScripts(scripts) {\\n            for (var i = 0; i < scripts.length; i++) {\\n                if (_self._scriptMap[scripts[i]]) {\\n\\n                    var scriptId = scripts[i] + '-wbjs';\\n                    var script = _self._scriptMap[scripts[i]];\\n\\n                    if (scripts[i] == 'twitter') {\\n                        window.twttr = _self._loadAsyncScript(scriptId, script);\\n                    } else {\\n                        _self._loadAsyncScript(scriptId, script);\\n                    }\\n                }\\n            }\\n        },\\n\\n        loadConfigs: function loadConfigs(configs) {\\n            _configs2.default.load(configs);\\n            return this;\\n        }\\n\\n    };\\n\\n    return {\\n        init: _self.init,\\n        loadConfigs: _self.loadConfigs,\\n        loadAsynScripts: _self.loadAsynScripts,\\n        addModel: _self.addModel,\\n        addController: _self.addController\\n    };\\n}();\\n\\nvar models = {\\n    CacheFactory: _cacheFactory2.default,\\n    User: _user2.default,\\n    Configs: _configs2.default,\\n    Page: _page2.default,\\n    Toast: _toast2.default,\\n    Track: _track2.default,\\n    Facebook: _facebook2.default,\\n    GPlus: _gplus2.default,\\n    Vote: _vote2.default\\n};\\n\\nvar controllers = {\\n    RcfgAdsController: _rcfgAds2.default,\\n    AccountController: _account2.default,\\n    CacheController: ModuleFactory.CacheController,\\n    CacheableController: _cacheable2.default,\\n    FacebookController: _facebook4.default,\\n    FeaturedController: _featured2.default,\\n    GPlusController: _gplus4.default,\\n    HeadbarController: _headbar2.default,\\n    KeyboardController: _keyboard2.default,\\n    ListController: ModuleFactory.ListController,\\n    ListScrollingController: _listScroll2.default,\\n    MilestoneController: _milestone2.default,\\n    NotificationsScrollingController: _notificationsScroll2.default,\\n    OverlayController: _overlay2.default,\\n    PostController: ModuleFactory.PostController,\\n    PageController: ModuleFactory.PageController,\\n    ProfileSettingController: _profileSetting2.default,\\n    PushController: _push2.default,\\n    ShareController: _share2.default,\\n    TwitterController: _twitter2.default,\\n    UploadController: _upload2.default,\\n    WebNotiController: _webNoti2.default,\\n    WorldController: _world2.default,\\n    AppsController: _apps2.default\\n};\\n\\nGAG.App.addModel(models).addController(controllers).init();\\n\\n/* responsive UI */\\n$('ul.menu.flex').flexMenu({\\n    linkText: 'More <span class=\\\"caret\\\"></span>'\\n});\\n\\nmodule.exports = GAG;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26), __webpack_require__(40), __webpack_require__(116), __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/init.js\\n// module id = 863\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/init.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, LogUtils, CacheableControllerFactory) {'use strict';\\n\\nvar _base = __webpack_require__(129);\\n\\nvar _base2 = _interopRequireDefault(_base);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableRemoteHandler = $.extend({}, new _base2.default(), {\\n\\n    remoteUrl: '/cacheable',\\n    queue: [],\\n    graceCookieKey: 'cacheableGrace',\\n\\n    addToQueue: function addToQueue(controllerName, item, callback) {\\n        this.queue.push({ controllerName: controllerName, params: item, callback: callback });\\n    },\\n\\n    processQueue: function processQueue() {\\n        var _self = this;\\n\\n        if (this.queue.length == 0) {\\n            LogUtils.log('Skip call remoteUrl. Reason: empty queue');\\n            return;\\n        }\\n\\n        if (!this.issetPhpSessionId() || this.isInGracePeriod()) {\\n            if (!this.issetPhpSessionId()) {\\n                LogUtils.log('CacheableRemoteHandler php session id is not set. Bye!!');\\n            }\\n            if (this.isInGracePeriod()) {\\n                LogUtils.log('CacheableRemoteHandler is in grace period. Bye!!');\\n            }\\n            return;\\n        } else {\\n            LogUtils.log('calling cacheable');\\n        }\\n\\n        var data = [];\\n        var controllerNames = [];\\n        var callbacks = [];\\n        $.each(this.queue, function (i, obj) {\\n            data[i] = obj.params;\\n            controllerNames[i] = obj.controllerName;\\n            callbacks[i] = obj.callback;\\n        });\\n\\n        /**\\n         * Expected response data format:\\n         * {\\n         *      \\\"vote\\\"    : { ... },\\n         *      \\\"profile\\\" : { ... }\\n         * }\\n         */\\n        $.ajax({\\n            url: _self.remoteUrl,\\n            type: 'POST',\\n            dataType: \\\"json\\\",\\n            data: { json: JSON.stringify(data) },\\n            success: function success(json) {\\n\\n                $.each(callbacks, function (i, callback) {\\n                    CacheableControllerFactory.getController(controllerNames[i])[callback](json);\\n                });\\n            },\\n            error: function error() {\\n\\n                $.each(callbacks, function (i, callback) {\\n                    CacheableControllerFactory.getController(controllerNames[i])[callback](json);\\n                });\\n            }\\n        });\\n\\n        this.queue = []; // clear queue\\n    },\\n\\n    isInGracePeriod: function isInGracePeriod() {\\n        return $.cookie(this.graceCookieKey);\\n    },\\n\\n    issetPhpSessionId: function issetPhpSessionId() {\\n        return $.cookie('PHPSESSID');\\n    }\\n\\n});\\n\\nmodule.exports = CacheableRemoteHandler;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(181)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/remote-handler.js\\n// module id = 864\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/remote-handler.js?\");\n},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _abstract = __webpack_require__(130);\\n\\nvar _abstract2 = _interopRequireDefault(_abstract);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserPreferenceModel = $.extend({}, _abstract2.default, {\\n\\n    cacheKey: 'cacheableUserPreference',\\n    cacheTTL: 1800,\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        return { action: 'user-preference', params: {} };\\n    },\\n\\n    /**\\n     * @param username {username}\\n     */\\n    get: function get() {\\n        return this.getFromCache();\\n    },\\n\\n    addToCache: function addToCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    }\\n}); /* \\n        A model for handling AJAX user ui elements between client and server\\n    */\\n\\n\\nmodule.exports = CacheableUserPreferenceModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/user-preference.js\\n// module id = 865\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/user-preference.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _abstract = __webpack_require__(130);\\n\\nvar _abstract2 = _interopRequireDefault(_abstract);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserQuotaModel = $.extend({}, _abstract2.default, {\\n\\n    cacheKey: 'cacheableUserQuota',\\n    cacheTTL: 1800,\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        return { action: 'user-quota', params: {} };\\n    },\\n\\n    /**\\n     * @param username {username}\\n     */\\n    get: function get() {\\n        return this.getFromCache();\\n    },\\n\\n    addToCache: function addToCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    }\\n});\\n\\nmodule.exports = CacheableUserQuotaModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/user-quota.js\\n// module id = 866\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/user-quota.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($) {'use strict';\\n\\nvar _abstract = __webpack_require__(130);\\n\\nvar _abstract2 = _interopRequireDefault(_abstract);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar CacheableUserModel = $.extend({}, _abstract2.default, {\\n\\n    cacheKey: 'cacheableUser',\\n    cacheTTL: 1800,\\n\\n    formatRemoteParams: function formatRemoteParams(options) {\\n        return { action: 'user', params: {} };\\n    },\\n\\n    /**\\n     */\\n    get: function get() {\\n        var value = this.getFromCache();\\n        if (value === null) {\\n            return value;\\n        }\\n\\n        return value;\\n    },\\n\\n    addToCache: function addToCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    },\\n\\n    removeFromCache: function removeFromCache(data) {\\n        /**\\n         * to be implement from subclass\\n         */\\n        return false;\\n    }\\n}); /* \\n        A model for handling AJAX user elements between client and server\\n    */\\n\\n\\nmodule.exports = CacheableUserModel;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/cacheable/user.js\\n// module id = 867\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/cacheable/user.js?\")},function(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function($, Utils, Piwik) {'use strict';\\n\\nvar _user = __webpack_require__(93);\\n\\nvar _user2 = _interopRequireDefault(_user);\\n\\nvar _page = __webpack_require__(23);\\n\\nvar _page2 = _interopRequireDefault(_page);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar Entry = function () {\\n\\n    var _self = {\\n        API: {\\n            REPORT_ENTRY_URI: '/report-post'\\n        },\\n\\n        init: function init() {},\\n\\n        _isRequesting: false,\\n\\n        /**\\n         * Entry.report will submit the ajax call to report an entry\\n         * This function silently quits if:\\n         * - the user is not logged in\\n         * - another report ajax call is being sent\\n         * @param entryId\\n         * @param reportType\\n         * @param loadingHandler This function will be called when the ajax call is fired\\n         * @param okHandler This function will be called when a proper succes return message is received\\n         * @param failHandler This function will be called when the http request fail, or returned with non-success status\\n         */\\n        report: function report(entryId, reportType, reportLink, okHandler, failHandler) {\\n            if (!_user2.default.isLoggedIn(true, _page2.default.getBackUrl())) return;\\n            if (_self._isRequesting) return;\\n\\n            var params = { 'entryId': entryId, 'type': reportType, 'link': reportLink };\\n            var url = _self.API.REPORT_ENTRY_URI;\\n\\n            $.ajax({\\n                type: 'POST',\\n                url: url,\\n                data: params,\\n                beforeSend: function beforeSend() {\\n                    Entry._isRequesting = true;\\n                },\\n                complete: function complete() {\\n                    Entry._isRequesting = false;\\n                },\\n                success: function success(jsonText) {\\n                    var json = Utils.parseJsonString(jsonText);\\n                    if (json.okay) {\\n                        okHandler(entryId);\\n                        Piwik.trackEvent('PostAction', 'ReportPost', entryId, '', { ReportType: reportType, Success: true });\\n                    } else {\\n                        failHandler(entryId);\\n                        Piwik.trackEvent('PostAction', 'ReportPost', entryId, '', { ReportType: reportType, Success: false });\\n                    }\\n                },\\n                error: function error(json) {\\n                    failHandler(entryId);\\n                }\\n\\n            });\\n        }\\n    };\\n\\n    return {\\n        init: _self.init,\\n        report: _self.report\\n    };\\n}();\\n\\nmodule.exports = Entry;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(80), __webpack_require__(116)))\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/entry.js\\n// module id = 868\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/entry.js?\")},function(module,exports){eval(\"'use strict';\\n\\nvar Response = function Response() {\\n    this._isSuccess = false;\\n    this._keys = {};\\n    this.setKey(this.Constants.RESPONSE_MESSAGE, '');\\n};\\nResponse.Constants = {\\n    RESPONSE_MESSAGE: 'RESPONSE_MESSAGE',\\n    RESPONSE_CODE: 'RESPONSE_CODE',\\n    RESPONSE_DATA: 'RESPONSE_DATA'\\n};\\nResponse.prototype.succeeded = function (msg) {\\n    this._isSuccess = true;\\n    this.setKey(this.Constants.RESPONSE_MESSAGE, msg);\\n    return this;\\n};\\nResponse.prototype.failed = function (msg) {\\n    this._isSuccess = false;\\n    this.setKey(this.Constants.RESPONSE_MESSAGE, msg);\\n    return this;\\n};\\nResponse.prototype.isSuccess = function () {\\n    return this._isSuccess;\\n};\\nResponse.prototype.setKey = function (key, value) {\\n    this._keys[key] = value;\\n    return this;\\n};\\nResponse.prototype.getKey = function (key) {\\n    return this._keys[key];\\n};\\nResponse.prototype.setCode = function (value) {\\n    this.setKey(this.Constants.RESPONSE_CODE, value);\\n    return this;\\n};\\nResponse.prototype.getCode = function () {\\n    return this.getKey(this.Constants.RESPONSE_CODE);\\n};\\nResponse.prototype.setData = function (value) {\\n    this.setKey(this.Constants.RESPONSE_DATA, value);\\n    return this;\\n};\\nResponse.prototype.getData = function () {\\n    return this.getKey(this.Constants.RESPONSE_DATA);\\n};\\nResponse.prototype.setMessage = function (value) {\\n    this.setKey(this.Constants.RESPONSE_MESSAGE, value);\\n    return this;\\n};\\nResponse.prototype.getMessage = function () {\\n    return this.getKey(this.Constants.RESPONSE_MESSAGE);\\n};\\n\\nmodule.exports = Response;\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./static/main/web6/src/js/modules/models/response.js\\n// module id = 869\\n// module chunks = 1\\n//# sourceURL=webpack:///./static/main/web6/src/js/modules/models/response.js?\")},,function(module,exports){eval('/*! iFrame Resizer (iframeSizer.min.js ) - v3.5.8 - 2017-01-17\\n *  Desc: Force cross domain iframes to size to content.\\n *  Requires: iframeResizer.contentWindow.min.js to be loaded into the target frame.\\n *  Copyright: (c) 2017 David J. Bradshaw - dave@bradshaw.net\\n *  License: MIT\\n */\\n\\n!function(a){\"use strict\";function b(b,c,d){\"addEventListener\"in a?b.addEventListener(c,d,!1):\"attachEvent\"in a&&b.attachEvent(\"on\"+c,d)}function c(b,c,d){\"removeEventListener\"in a?b.removeEventListener(c,d,!1):\"detachEvent\"in a&&b.detachEvent(\"on\"+c,d)}function d(){var b,c=[\"moz\",\"webkit\",\"o\",\"ms\"];for(b=0;b<c.length&&!N;b+=1)N=a[c[b]+\"RequestAnimationFrame\"];N||h(\"setup\",\"RequestAnimationFrame not supported\")}function e(b){var c=\"Host page: \"+b;return a.top!==a.self&&(c=a.parentIFrame&&a.parentIFrame.getId?a.parentIFrame.getId()+\": \"+b:\"Nested host page: \"+b),c}function f(a){return K+\"[\"+e(a)+\"]\"}function g(a){return P[a]?P[a].log:G}function h(a,b){k(\"log\",a,b,g(a))}function i(a,b){k(\"info\",a,b,g(a))}function j(a,b){k(\"warn\",a,b,!0)}function k(b,c,d,e){!0===e&&\"object\"==typeof a.console&&console[b](f(c),d)}function l(d){function e(){function a(){s(V),p(W)}g(\"Height\"),g(\"Width\"),t(a,V,\"init\")}function f(){var a=U.substr(L).split(\":\");return{iframe:P[a[0]].iframe,id:a[0],height:a[1],width:a[2],type:a[3]}}function g(a){var b=Number(P[W][\"max\"+a]),c=Number(P[W][\"min\"+a]),d=a.toLowerCase(),e=Number(V[d]);h(W,\"Checking \"+d+\" is in range \"+c+\"-\"+b),c>e&&(e=c,h(W,\"Set \"+d+\" to min value\")),e>b&&(e=b,h(W,\"Set \"+d+\" to max value\")),V[d]=\"\"+e}function k(){function a(){function a(){var a=0,d=!1;for(h(W,\"Checking connection is from allowed list of origins: \"+c);a<c.length;a++)if(c[a]===b){d=!0;break}return d}function d(){var a=P[W].remoteHost;return h(W,\"Checking connection is from: \"+a),b===a}return c.constructor===Array?a():d()}var b=d.origin,c=P[W].checkOrigin;if(c&&\"\"+b!=\"null\"&&!a())throw new Error(\"Unexpected message received from: \"+b+\" for \"+V.iframe.id+\". Message was: \"+d.data+\". This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.\");return!0}function l(){return K===(\"\"+U).substr(0,L)&&U.substr(L).split(\":\")[0]in P}function w(){var a=V.type in{\"true\":1,\"false\":1,undefined:1};return a&&h(W,\"Ignoring init message from meta parent page\"),a}function y(a){return U.substr(U.indexOf(\":\")+J+a)}function z(a){h(W,\"MessageCallback passed: {iframe: \"+V.iframe.id+\", message: \"+a+\"}\"),N(\"messageCallback\",{iframe:V.iframe,message:JSON.parse(a)}),h(W,\"--\")}function A(){var b=document.body.getBoundingClientRect(),c=V.iframe.getBoundingClientRect();return JSON.stringify({iframeHeight:c.height,iframeWidth:c.width,clientHeight:Math.max(document.documentElement.clientHeight,a.innerHeight||0),clientWidth:Math.max(document.documentElement.clientWidth,a.innerWidth||0),offsetTop:parseInt(c.top-b.top,10),offsetLeft:parseInt(c.left-b.left,10),scrollTop:a.pageYOffset,scrollLeft:a.pageXOffset})}function B(a,b){function c(){u(\"Send Page Info\",\"pageInfo:\"+A(),a,b)}x(c,32)}function C(){function d(b,c){function d(){P[g]?B(P[g].iframe,g):e()}[\"scroll\",\"resize\"].forEach(function(e){h(g,b+e+\" listener for sendPageInfo\"),c(a,e,d)})}function e(){d(\"Remove \",c)}function f(){d(\"Add \",b)}var g=W;f(),P[g].stopPageInfo=e}function D(){P[W]&&P[W].stopPageInfo&&(P[W].stopPageInfo(),delete P[W].stopPageInfo)}function E(){var a=!0;return null===V.iframe&&(j(W,\"IFrame (\"+V.id+\") not found\"),a=!1),a}function F(a){var b=a.getBoundingClientRect();return o(W),{x:Math.floor(Number(b.left)+Number(M.x)),y:Math.floor(Number(b.top)+Number(M.y))}}function G(b){function c(){M=g,H(),h(W,\"--\")}function d(){return{x:Number(V.width)+f.x,y:Number(V.height)+f.y}}function e(){a.parentIFrame?a.parentIFrame[\"scrollTo\"+(b?\"Offset\":\"\")](g.x,g.y):j(W,\"Unable to scroll to requested position, window.parentIFrame not found\")}var f=b?F(V.iframe):{x:0,y:0},g=d();h(W,\"Reposition requested from iFrame (offset x:\"+f.x+\" y:\"+f.y+\")\"),a.top!==a.self?e():c()}function H(){!1!==N(\"scrollCallback\",M)?p(W):q()}function I(b){function c(){var a=F(g);h(W,\"Moving to in page link (#\"+e+\") at x: \"+a.x+\" y: \"+a.y),M={x:a.x,y:a.y},H(),h(W,\"--\")}function d(){a.parentIFrame?a.parentIFrame.moveToAnchor(e):h(W,\"In page link #\"+e+\" not found and window.parentIFrame not found\")}var e=b.split(\"#\")[1]||\"\",f=decodeURIComponent(e),g=document.getElementById(f)||document.getElementsByName(f)[0];g?c():a.top!==a.self?d():h(W,\"In page link #\"+e+\" not found\")}function N(a,b){return m(W,a,b)}function O(){switch(P[W].firstRun&&T(),V.type){case\"close\":n(V.iframe);break;case\"message\":z(y(6));break;case\"scrollTo\":G(!1);break;case\"scrollToOffset\":G(!0);break;case\"pageInfo\":B(P[W].iframe,W),C();break;case\"pageInfoStop\":D();break;case\"inPageLink\":I(y(9));break;case\"reset\":r(V);break;case\"init\":e(),N(\"initCallback\",V.iframe),N(\"resizedCallback\",V);break;default:e(),N(\"resizedCallback\",V)}}function Q(a){var b=!0;return P[a]||(b=!1,j(V.type+\" No settings for \"+a+\". Message was: \"+U)),b}function S(){for(var a in P)u(\"iFrame requested init\",v(a),document.getElementById(a),a)}function T(){P[W].firstRun=!1}var U=d.data,V={},W=null;\"[iFrameResizerChild]Ready\"===U?S():l()?(V=f(),W=R=V.id,!w()&&Q(W)&&(h(W,\"Received: \"+U),E()&&k()&&O())):i(W,\"Ignored: \"+U)}function m(a,b,c){var d=null,e=null;if(P[a]){if(d=P[a][b],\"function\"!=typeof d)throw new TypeError(b+\" on iFrame[\"+a+\"] is not a function\");e=d(c)}return e}function n(a){var b=a.id;h(b,\"Removing iFrame: \"+b),a.parentNode&&a.parentNode.removeChild(a),m(b,\"closedCallback\",b),h(b,\"--\"),delete P[b]}function o(b){null===M&&(M={x:void 0!==a.pageXOffset?a.pageXOffset:document.documentElement.scrollLeft,y:void 0!==a.pageYOffset?a.pageYOffset:document.documentElement.scrollTop},h(b,\"Get page position: \"+M.x+\",\"+M.y))}function p(b){null!==M&&(a.scrollTo(M.x,M.y),h(b,\"Set page position: \"+M.x+\",\"+M.y),q())}function q(){M=null}function r(a){function b(){s(a),u(\"reset\",\"reset\",a.iframe,a.id)}h(a.id,\"Size reset requested by \"+(\"init\"===a.type?\"host page\":\"iFrame\")),o(a.id),t(b,a,\"reset\")}function s(a){function b(b){a.iframe.style[b]=a[b]+\"px\",h(a.id,\"IFrame (\"+e+\") \"+b+\" set to \"+a[b]+\"px\")}function c(b){H||\"0\"!==a[b]||(H=!0,h(e,\"Hidden iFrame detected, creating visibility listener\"),y())}function d(a){b(a),c(a)}var e=a.iframe.id;P[e]&&(P[e].sizeHeight&&d(\"height\"),P[e].sizeWidth&&d(\"width\"))}function t(a,b,c){c!==b.type&&N?(h(b.id,\"Requesting animation frame\"),N(a)):a()}function u(a,b,c,d){function e(){var e=P[d].targetOrigin;h(d,\"[\"+a+\"] Sending msg to iframe[\"+d+\"] (\"+b+\") targetOrigin: \"+e),c.contentWindow.postMessage(K+b,e)}function f(){j(d,\"[\"+a+\"] IFrame(\"+d+\") not found\")}function g(){c&&\"contentWindow\"in c&&null!==c.contentWindow?e():f()}d=d||c.id,P[d]&&g()}function v(a){return a+\":\"+P[a].bodyMarginV1+\":\"+P[a].sizeWidth+\":\"+P[a].log+\":\"+P[a].interval+\":\"+P[a].enablePublicMethods+\":\"+P[a].autoResize+\":\"+P[a].bodyMargin+\":\"+P[a].heightCalculationMethod+\":\"+P[a].bodyBackground+\":\"+P[a].bodyPadding+\":\"+P[a].tolerance+\":\"+P[a].inPageLinks+\":\"+P[a].resizeFrom+\":\"+P[a].widthCalculationMethod}function w(a,c){function d(){function b(b){1/0!==P[w][b]&&0!==P[w][b]&&(a.style[b]=P[w][b]+\"px\",h(w,\"Set \"+b+\" = \"+P[w][b]+\"px\"))}function c(a){if(P[w][\"min\"+a]>P[w][\"max\"+a])throw new Error(\"Value for min\"+a+\" can not be greater than max\"+a)}c(\"Height\"),c(\"Width\"),b(\"maxHeight\"),b(\"minHeight\"),b(\"maxWidth\"),b(\"minWidth\")}function e(){var a=c&&c.id||S.id+F++;return null!==document.getElementById(a)&&(a+=F++),a}function f(b){return R=b,\"\"===b&&(a.id=b=e(),G=(c||{}).log,R=b,h(b,\"Added missing iframe ID: \"+b+\" (\"+a.src+\")\")),b}function g(){switch(h(w,\"IFrame scrolling \"+(P[w].scrolling?\"enabled\":\"disabled\")+\" for \"+w),a.style.overflow=!1===P[w].scrolling?\"hidden\":\"auto\",P[w].scrolling){case!0:a.scrolling=\"yes\";break;case!1:a.scrolling=\"no\";break;default:a.scrolling=P[w].scrolling}}function i(){(\"number\"==typeof P[w].bodyMargin||\"0\"===P[w].bodyMargin)&&(P[w].bodyMarginV1=P[w].bodyMargin,P[w].bodyMargin=\"\"+P[w].bodyMargin+\"px\")}function k(){var b=P[w].firstRun,c=P[w].heightCalculationMethod in O;!b&&c&&r({iframe:a,height:0,width:0,type:\"init\"})}function l(){Function.prototype.bind&&(P[w].iframe.iFrameResizer={close:n.bind(null,P[w].iframe),resize:u.bind(null,\"Window resize\",\"resize\",P[w].iframe),moveToAnchor:function(a){u(\"Move to anchor\",\"moveToAnchor:\"+a,P[w].iframe,w)},sendMessage:function(a){a=JSON.stringify(a),u(\"Send Message\",\"message:\"+a,P[w].iframe,w)}})}function m(c){function d(){u(\"iFrame.onload\",c,a),k()}b(a,\"load\",d),u(\"init\",c,a)}function o(a){if(\"object\"!=typeof a)throw new TypeError(\"Options is not an object\")}function p(a){for(var b in S)S.hasOwnProperty(b)&&(P[w][b]=a.hasOwnProperty(b)?a[b]:S[b])}function q(a){return\"\"===a||\"file://\"===a?\"*\":a}function s(b){b=b||{},P[w]={firstRun:!0,iframe:a,remoteHost:a.src.split(\"/\").slice(0,3).join(\"/\")},o(b),p(b),P[w].targetOrigin=!0===P[w].checkOrigin?q(P[w].remoteHost):\"*\"}function t(){return w in P&&\"iFrameResizer\"in a}var w=f(a.id);t()?j(w,\"Ignored iFrame, already setup.\"):(s(c),g(),d(),i(),m(v(w)),l())}function x(a,b){null===Q&&(Q=setTimeout(function(){Q=null,a()},b))}function y(){function b(){function a(a){function b(b){return\"0px\"===P[a].iframe.style[b]}function c(a){return null!==a.offsetParent}c(P[a].iframe)&&(b(\"height\")||b(\"width\"))&&u(\"Visibility change\",\"resize\",P[a].iframe,a)}for(var b in P)a(b)}function c(a){h(\"window\",\"Mutation observed: \"+a[0].target+\" \"+a[0].type),x(b,16)}function d(){var a=document.querySelector(\"body\"),b={attributes:!0,attributeOldValue:!1,characterData:!0,characterDataOldValue:!1,childList:!0,subtree:!0},d=new e(c);d.observe(a,b)}var e=a.MutationObserver||a.WebKitMutationObserver;e&&d()}function z(a){function b(){B(\"Window \"+a,\"resize\")}h(\"window\",\"Trigger event: \"+a),x(b,16)}function A(){function a(){B(\"Tab Visable\",\"resize\")}\"hidden\"!==document.visibilityState&&(h(\"document\",\"Trigger event: Visiblity change\"),x(a,16))}function B(a,b){function c(a){return\"parent\"===P[a].resizeFrom&&P[a].autoResize&&!P[a].firstRun}for(var d in P)c(d)&&u(a,b,document.getElementById(d),d)}function C(){b(a,\"message\",l),b(a,\"resize\",function(){z(\"resize\")}),b(document,\"visibilitychange\",A),b(document,\"-webkit-visibilitychange\",A),b(a,\"focusin\",function(){z(\"focus\")}),b(a,\"focus\",function(){z(\"focus\")})}function D(){function a(a,b){function d(){if(!b.tagName)throw new TypeError(\"Object is not a valid DOM element\");if(\"IFRAME\"!==b.tagName.toUpperCase())throw new TypeError(\"Expected <IFRAME> tag, found <\"+b.tagName+\">\")}b&&(d(),w(b,a),c.push(b))}function b(a){a&&a.enablePublicMethods&&j(\"enablePublicMethods option has been removed, public methods are now always available in the iFrame\")}var c;return d(),C(),function(d,e){switch(c=[],b(d),typeof e){case\"undefined\":case\"string\":Array.prototype.forEach.call(document.querySelectorAll(e||\"iframe\"),a.bind(void 0,d));break;case\"object\":a(d,e);break;default:throw new TypeError(\"Unexpected data type (\"+typeof e+\")\")}return c}}function E(a){a.fn?a.fn.iFrameResize||(a.fn.iFrameResize=function(a){function b(b,c){w(c,a)}return this.filter(\"iframe\").each(b).end()}):i(\"\",\"Unable to bind to jQuery, it is not fully loaded.\")}var F=0,G=!1,H=!1,I=\"message\",J=I.length,K=\"[iFrameSizer]\",L=K.length,M=null,N=a.requestAnimationFrame,O={max:1,scroll:1,bodyScroll:1,documentElementScroll:1},P={},Q=null,R=\"Host Page\",S={autoResize:!0,bodyBackground:null,bodyMargin:null,bodyMarginV1:8,bodyPadding:null,checkOrigin:!0,inPageLinks:!1,enablePublicMethods:!0,heightCalculationMethod:\"bodyOffset\",id:\"iFrameResizer\",interval:32,log:!1,maxHeight:1/0,maxWidth:1/0,minHeight:0,minWidth:0,resizeFrom:\"parent\",scrolling:!1,sizeHeight:!0,sizeWidth:!1,tolerance:0,widthCalculationMethod:\"scroll\",closedCallback:function(){},initCallback:function(){},messageCallback:function(){j(\"MessageCallback function not defined\")},resizedCallback:function(){},scrollCallback:function(){return!0}};a.jQuery&&E(jQuery),\"function\"==typeof define&&define.amd?define([],D):\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=D():a.iFrameResize=a.iFrameResize||D()}(window||{});\\n//# sourceMappingURL=iframeResizer.map\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/iframe-resizer/js/iframeResizer.min.js\\n// module id = 871\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/iframe-resizer/js/iframeResizer.min.js?')},function(module,exports,__webpack_require__){eval('var jQuery = __webpack_require__(3);\\n__webpack_require__(253);\\n__webpack_require__(254);\\n__webpack_require__(427);\\n__webpack_require__(426);\\n\\n/*!\\n * jQuery UI Autocomplete 1.10.4\\n * http://jqueryui.com\\n *\\n * Copyright 2014 jQuery Foundation and other contributors\\n * Released under the MIT license.\\n * http://jquery.org/license\\n *\\n * http://api.jqueryui.com/autocomplete/\\n *\\n * Depends:\\n *\\tjquery.ui.core.js\\n *\\tjquery.ui.widget.js\\n *\\tjquery.ui.position.js\\n *\\tjquery.ui.menu.js\\n */\\n(function( $, undefined ) {\\n\\n$.widget( \"ui.autocomplete\", {\\n\\tversion: \"1.10.4\",\\n\\tdefaultElement: \"<input>\",\\n\\toptions: {\\n\\t\\tappendTo: null,\\n\\t\\tautoFocus: false,\\n\\t\\tdelay: 300,\\n\\t\\tminLength: 1,\\n\\t\\tposition: {\\n\\t\\t\\tmy: \"left top\",\\n\\t\\t\\tat: \"left bottom\",\\n\\t\\t\\tcollision: \"none\"\\n\\t\\t},\\n\\t\\tsource: null,\\n\\n\\t\\t// callbacks\\n\\t\\tchange: null,\\n\\t\\tclose: null,\\n\\t\\tfocus: null,\\n\\t\\topen: null,\\n\\t\\tresponse: null,\\n\\t\\tsearch: null,\\n\\t\\tselect: null\\n\\t},\\n\\n\\trequestIndex: 0,\\n\\tpending: 0,\\n\\n\\t_create: function() {\\n\\t\\t// Some browsers only repeat keydown events, not keypress events,\\n\\t\\t// so we use the suppressKeyPress flag to determine if we\\'ve already\\n\\t\\t// handled the keydown event. #7269\\n\\t\\t// Unfortunately the code for & in keypress is the same as the up arrow,\\n\\t\\t// so we use the suppressKeyPressRepeat flag to avoid handling keypress\\n\\t\\t// events when we know the keydown event was used to modify the\\n\\t\\t// search term. #7799\\n\\t\\tvar suppressKeyPress, suppressKeyPressRepeat, suppressInput,\\n\\t\\t\\tnodeName = this.element[0].nodeName.toLowerCase(),\\n\\t\\t\\tisTextarea = nodeName === \"textarea\",\\n\\t\\t\\tisInput = nodeName === \"input\";\\n\\n\\t\\tthis.isMultiLine =\\n\\t\\t\\t// Textareas are always multi-line\\n\\t\\t\\tisTextarea ? true :\\n\\t\\t\\t// Inputs are always single-line, even if inside a contentEditable element\\n\\t\\t\\t// IE also treats inputs as contentEditable\\n\\t\\t\\tisInput ? false :\\n\\t\\t\\t// All other element types are determined by whether or not they\\'re contentEditable\\n\\t\\t\\tthis.element.prop( \"isContentEditable\" );\\n\\n\\t\\tthis.valueMethod = this.element[ isTextarea || isInput ? \"val\" : \"text\" ];\\n\\t\\tthis.isNewMenu = true;\\n\\n\\t\\tthis.element\\n\\t\\t\\t.addClass( \"ui-autocomplete-input\" )\\n\\t\\t\\t.attr( \"autocomplete\", \"off\" );\\n\\n\\t\\tthis._on( this.element, {\\n\\t\\t\\tkeydown: function( event ) {\\n\\t\\t\\t\\tif ( this.element.prop( \"readOnly\" ) ) {\\n\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\tsuppressInput = true;\\n\\t\\t\\t\\t\\tsuppressKeyPressRepeat = true;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tsuppressKeyPress = false;\\n\\t\\t\\t\\tsuppressInput = false;\\n\\t\\t\\t\\tsuppressKeyPressRepeat = false;\\n\\t\\t\\t\\tvar keyCode = $.ui.keyCode;\\n\\t\\t\\t\\tswitch( event.keyCode ) {\\n\\t\\t\\t\\tcase keyCode.PAGE_UP:\\n\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\tthis._move( \"previousPage\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.PAGE_DOWN:\\n\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\tthis._move( \"nextPage\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.UP:\\n\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\tthis._keyEvent( \"previous\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.DOWN:\\n\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\tthis._keyEvent( \"next\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.ENTER:\\n\\t\\t\\t\\tcase keyCode.NUMPAD_ENTER:\\n\\t\\t\\t\\t\\t// when menu is open and has focus\\n\\t\\t\\t\\t\\tif ( this.menu.active ) {\\n\\t\\t\\t\\t\\t\\t// #6055 - Opera still allows the keypress to occur\\n\\t\\t\\t\\t\\t\\t// which causes forms to submit\\n\\t\\t\\t\\t\\t\\tsuppressKeyPress = true;\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\tthis.menu.select( event );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.TAB:\\n\\t\\t\\t\\t\\tif ( this.menu.active ) {\\n\\t\\t\\t\\t\\t\\tthis.menu.select( event );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.ESCAPE:\\n\\t\\t\\t\\t\\tif ( this.menu.element.is( \":visible\" ) ) {\\n\\t\\t\\t\\t\\t\\tthis._value( this.term );\\n\\t\\t\\t\\t\\t\\tthis.close( event );\\n\\t\\t\\t\\t\\t\\t// Different browsers have different default behavior for escape\\n\\t\\t\\t\\t\\t\\t// Single press can mean undo or clear\\n\\t\\t\\t\\t\\t\\t// Double press in IE means clear the whole form\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tsuppressKeyPressRepeat = true;\\n\\t\\t\\t\\t\\t// search timeout should be triggered before the input value is changed\\n\\t\\t\\t\\t\\tthis._searchTimeout( event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tkeypress: function( event ) {\\n\\t\\t\\t\\tif ( suppressKeyPress ) {\\n\\t\\t\\t\\t\\tsuppressKeyPress = false;\\n\\t\\t\\t\\t\\tif ( !this.isMultiLine || this.menu.element.is( \":visible\" ) ) {\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( suppressKeyPressRepeat ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// replicate some key handlers to allow them to repeat in Firefox and Opera\\n\\t\\t\\t\\tvar keyCode = $.ui.keyCode;\\n\\t\\t\\t\\tswitch( event.keyCode ) {\\n\\t\\t\\t\\tcase keyCode.PAGE_UP:\\n\\t\\t\\t\\t\\tthis._move( \"previousPage\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.PAGE_DOWN:\\n\\t\\t\\t\\t\\tthis._move( \"nextPage\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.UP:\\n\\t\\t\\t\\t\\tthis._keyEvent( \"previous\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase keyCode.DOWN:\\n\\t\\t\\t\\t\\tthis._keyEvent( \"next\", event );\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tinput: function( event ) {\\n\\t\\t\\t\\tif ( suppressInput ) {\\n\\t\\t\\t\\t\\tsuppressInput = false;\\n\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis._searchTimeout( event );\\n\\t\\t\\t},\\n\\t\\t\\tfocus: function() {\\n\\t\\t\\t\\tthis.selectedItem = null;\\n\\t\\t\\t\\tthis.previous = this._value();\\n\\t\\t\\t},\\n\\t\\t\\tblur: function( event ) {\\n\\t\\t\\t\\tif ( this.cancelBlur ) {\\n\\t\\t\\t\\t\\tdelete this.cancelBlur;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tclearTimeout( this.searching );\\n\\t\\t\\t\\tthis.close( event );\\n\\t\\t\\t\\tthis._change( event );\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis._initSource();\\n\\t\\tthis.menu = $( \"<ul>\" )\\n\\t\\t\\t.addClass( \"ui-autocomplete ui-front\" )\\n\\t\\t\\t.appendTo( this._appendTo() )\\n\\t\\t\\t.menu({\\n\\t\\t\\t\\t// disable ARIA support, the live region takes care of that\\n\\t\\t\\t\\trole: null\\n\\t\\t\\t})\\n\\t\\t\\t.hide()\\n\\t\\t\\t.data( \"ui-menu\" );\\n\\n\\t\\tthis._on( this.menu.element, {\\n\\t\\t\\tmousedown: function( event ) {\\n\\t\\t\\t\\t// prevent moving focus out of the text field\\n\\t\\t\\t\\tevent.preventDefault();\\n\\n\\t\\t\\t\\t// IE doesn\\'t prevent moving focus even with event.preventDefault()\\n\\t\\t\\t\\t// so we set a flag to know when we should ignore the blur event\\n\\t\\t\\t\\tthis.cancelBlur = true;\\n\\t\\t\\t\\tthis._delay(function() {\\n\\t\\t\\t\\t\\tdelete this.cancelBlur;\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// clicking on the scrollbar causes focus to shift to the body\\n\\t\\t\\t\\t// but we can\\'t detect a mouseup or a click immediately afterward\\n\\t\\t\\t\\t// so we have to track the next mousedown and close the menu if\\n\\t\\t\\t\\t// the user clicks somewhere outside of the autocomplete\\n\\t\\t\\t\\tvar menuElement = this.menu.element[ 0 ];\\n\\t\\t\\t\\tif ( !$( event.target ).closest( \".ui-menu-item\" ).length ) {\\n\\t\\t\\t\\t\\tthis._delay(function() {\\n\\t\\t\\t\\t\\t\\tvar that = this;\\n\\t\\t\\t\\t\\t\\tthis.document.one( \"mousedown\", function( event ) {\\n\\t\\t\\t\\t\\t\\t\\tif ( event.target !== that.element[ 0 ] &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tevent.target !== menuElement &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t!$.contains( menuElement, event.target ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthat.close();\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tmenufocus: function( event, ui ) {\\n\\t\\t\\t\\t// support: Firefox\\n\\t\\t\\t\\t// Prevent accidental activation of menu items in Firefox (#7024 #9118)\\n\\t\\t\\t\\tif ( this.isNewMenu ) {\\n\\t\\t\\t\\t\\tthis.isNewMenu = false;\\n\\t\\t\\t\\t\\tif ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {\\n\\t\\t\\t\\t\\t\\tthis.menu.blur();\\n\\n\\t\\t\\t\\t\\t\\tthis.document.one( \"mousemove\", function() {\\n\\t\\t\\t\\t\\t\\t\\t$( event.target ).trigger( event.originalEvent );\\n\\t\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar item = ui.item.data( \"ui-autocomplete-item\" );\\n\\t\\t\\t\\tif ( false !== this._trigger( \"focus\", event, { item: item } ) ) {\\n\\t\\t\\t\\t\\t// use value to match what will end up in the input, if it was a key event\\n\\t\\t\\t\\t\\tif ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {\\n\\t\\t\\t\\t\\t\\tthis._value( item.value );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Normally the input is populated with the item\\'s value as the\\n\\t\\t\\t\\t\\t// menu is navigated, causing screen readers to notice a change and\\n\\t\\t\\t\\t\\t// announce the item. Since the focus event was canceled, this doesn\\'t\\n\\t\\t\\t\\t\\t// happen, so we update the live region so that screen readers can\\n\\t\\t\\t\\t\\t// still notice the change and announce it.\\n\\t\\t\\t\\t\\tthis.liveRegion.text( item.value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tmenuselect: function( event, ui ) {\\n\\t\\t\\t\\tvar item = ui.item.data( \"ui-autocomplete-item\" ),\\n\\t\\t\\t\\t\\tprevious = this.previous;\\n\\n\\t\\t\\t\\t// only trigger when focus was lost (click on menu)\\n\\t\\t\\t\\tif ( this.element[0] !== this.document[0].activeElement ) {\\n\\t\\t\\t\\t\\tthis.element.focus();\\n\\t\\t\\t\\t\\tthis.previous = previous;\\n\\t\\t\\t\\t\\t// #6109 - IE triggers two focus events and the second\\n\\t\\t\\t\\t\\t// is asynchronous, so we need to reset the previous\\n\\t\\t\\t\\t\\t// term synchronously and asynchronously :-(\\n\\t\\t\\t\\t\\tthis._delay(function() {\\n\\t\\t\\t\\t\\t\\tthis.previous = previous;\\n\\t\\t\\t\\t\\t\\tthis.selectedItem = item;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( false !== this._trigger( \"select\", event, { item: item } ) ) {\\n\\t\\t\\t\\t\\tthis._value( item.value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// reset the term after the select event\\n\\t\\t\\t\\t// this allows custom select handling to work properly\\n\\t\\t\\t\\tthis.term = this._value();\\n\\n\\t\\t\\t\\tthis.close( event );\\n\\t\\t\\t\\tthis.selectedItem = item;\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.liveRegion = $( \"<span>\", {\\n\\t\\t\\t\\trole: \"status\",\\n\\t\\t\\t\\t\"aria-live\": \"polite\"\\n\\t\\t\\t})\\n\\t\\t\\t.addClass( \"ui-helper-hidden-accessible\" )\\n\\t\\t\\t.insertBefore( this.element );\\n\\n\\t\\t// turning off autocomplete prevents the browser from remembering the\\n\\t\\t// value when navigating through history, so we re-enable autocomplete\\n\\t\\t// if the page is unloaded before the widget is destroyed. #7790\\n\\t\\tthis._on( this.window, {\\n\\t\\t\\tbeforeunload: function() {\\n\\t\\t\\t\\tthis.element.removeAttr( \"autocomplete\" );\\n\\t\\t\\t}\\n\\t\\t});\\n\\t},\\n\\n\\t_destroy: function() {\\n\\t\\tclearTimeout( this.searching );\\n\\t\\tthis.element\\n\\t\\t\\t.removeClass( \"ui-autocomplete-input\" )\\n\\t\\t\\t.removeAttr( \"autocomplete\" );\\n\\t\\tthis.menu.element.remove();\\n\\t\\tthis.liveRegion.remove();\\n\\t},\\n\\n\\t_setOption: function( key, value ) {\\n\\t\\tthis._super( key, value );\\n\\t\\tif ( key === \"source\" ) {\\n\\t\\t\\tthis._initSource();\\n\\t\\t}\\n\\t\\tif ( key === \"appendTo\" ) {\\n\\t\\t\\tthis.menu.element.appendTo( this._appendTo() );\\n\\t\\t}\\n\\t\\tif ( key === \"disabled\" && value && this.xhr ) {\\n\\t\\t\\tthis.xhr.abort();\\n\\t\\t}\\n\\t},\\n\\n\\t_appendTo: function() {\\n\\t\\tvar element = this.options.appendTo;\\n\\n\\t\\tif ( element ) {\\n\\t\\t\\telement = element.jquery || element.nodeType ?\\n\\t\\t\\t\\t$( element ) :\\n\\t\\t\\t\\tthis.document.find( element ).eq( 0 );\\n\\t\\t}\\n\\n\\t\\tif ( !element ) {\\n\\t\\t\\telement = this.element.closest( \".ui-front\" );\\n\\t\\t}\\n\\n\\t\\tif ( !element.length ) {\\n\\t\\t\\telement = this.document[0].body;\\n\\t\\t}\\n\\n\\t\\treturn element;\\n\\t},\\n\\n\\t_initSource: function() {\\n\\t\\tvar array, url,\\n\\t\\t\\tthat = this;\\n\\t\\tif ( $.isArray(this.options.source) ) {\\n\\t\\t\\tarray = this.options.source;\\n\\t\\t\\tthis.source = function( request, response ) {\\n\\t\\t\\t\\tresponse( $.ui.autocomplete.filter( array, request.term ) );\\n\\t\\t\\t};\\n\\t\\t} else if ( typeof this.options.source === \"string\" ) {\\n\\t\\t\\turl = this.options.source;\\n\\t\\t\\tthis.source = function( request, response ) {\\n\\t\\t\\t\\tif ( that.xhr ) {\\n\\t\\t\\t\\t\\tthat.xhr.abort();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthat.xhr = $.ajax({\\n\\t\\t\\t\\t\\turl: url,\\n\\t\\t\\t\\t\\tdata: request,\\n\\t\\t\\t\\t\\tdataType: \"json\",\\n\\t\\t\\t\\t\\tsuccess: function( data ) {\\n\\t\\t\\t\\t\\t\\tresponse( data );\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\terror: function() {\\n\\t\\t\\t\\t\\t\\tresponse( [] );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t};\\n\\t\\t} else {\\n\\t\\t\\tthis.source = this.options.source;\\n\\t\\t}\\n\\t},\\n\\n\\t_searchTimeout: function( event ) {\\n\\t\\tclearTimeout( this.searching );\\n\\t\\tthis.searching = this._delay(function() {\\n\\t\\t\\t// only search if the value has changed\\n\\t\\t\\tif ( this.term !== this._value() ) {\\n\\t\\t\\t\\tthis.selectedItem = null;\\n\\t\\t\\t\\tthis.search( null, event );\\n\\t\\t\\t}\\n\\t\\t}, this.options.delay );\\n\\t},\\n\\n\\tsearch: function( value, event ) {\\n\\t\\tvalue = value != null ? value : this._value();\\n\\n\\t\\t// always save the actual value, not the one passed as an argument\\n\\t\\tthis.term = this._value();\\n\\n\\t\\tif ( value.length < this.options.minLength ) {\\n\\t\\t\\treturn this.close( event );\\n\\t\\t}\\n\\n\\t\\tif ( this._trigger( \"search\", event ) === false ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\treturn this._search( value );\\n\\t},\\n\\n\\t_search: function( value ) {\\n\\t\\tthis.pending++;\\n\\t\\tthis.element.addClass( \"ui-autocomplete-loading\" );\\n\\t\\tthis.cancelSearch = false;\\n\\n\\t\\tthis.source( { term: value }, this._response() );\\n\\t},\\n\\n\\t_response: function() {\\n\\t\\tvar index = ++this.requestIndex;\\n\\n\\t\\treturn $.proxy(function( content ) {\\n\\t\\t\\tif ( index === this.requestIndex ) {\\n\\t\\t\\t\\tthis.__response( content );\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.pending--;\\n\\t\\t\\tif ( !this.pending ) {\\n\\t\\t\\t\\tthis.element.removeClass( \"ui-autocomplete-loading\" );\\n\\t\\t\\t}\\n\\t\\t}, this );\\n\\t},\\n\\n\\t__response: function( content ) {\\n\\t\\tif ( content ) {\\n\\t\\t\\tcontent = this._normalize( content );\\n\\t\\t}\\n\\t\\tthis._trigger( \"response\", null, { content: content } );\\n\\t\\tif ( !this.options.disabled && content && content.length && !this.cancelSearch ) {\\n\\t\\t\\tthis._suggest( content );\\n\\t\\t\\tthis._trigger( \"open\" );\\n\\t\\t} else {\\n\\t\\t\\t// use ._close() instead of .close() so we don\\'t cancel future searches\\n\\t\\t\\tthis._close();\\n\\t\\t}\\n\\t},\\n\\n\\tclose: function( event ) {\\n\\t\\tthis.cancelSearch = true;\\n\\t\\tthis._close( event );\\n\\t},\\n\\n\\t_close: function( event ) {\\n\\t\\tif ( this.menu.element.is( \":visible\" ) ) {\\n\\t\\t\\tthis.menu.element.hide();\\n\\t\\t\\tthis.menu.blur();\\n\\t\\t\\tthis.isNewMenu = true;\\n\\t\\t\\tthis._trigger( \"close\", event );\\n\\t\\t}\\n\\t},\\n\\n\\t_change: function( event ) {\\n\\t\\tif ( this.previous !== this._value() ) {\\n\\t\\t\\tthis._trigger( \"change\", event, { item: this.selectedItem } );\\n\\t\\t}\\n\\t},\\n\\n\\t_normalize: function( items ) {\\n\\t\\t// assume all items have the right format when the first item is complete\\n\\t\\tif ( items.length && items[0].label && items[0].value ) {\\n\\t\\t\\treturn items;\\n\\t\\t}\\n\\t\\treturn $.map( items, function( item ) {\\n\\t\\t\\tif ( typeof item === \"string\" ) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\tlabel: item,\\n\\t\\t\\t\\t\\tvalue: item\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t\\treturn $.extend({\\n\\t\\t\\t\\tlabel: item.label || item.value,\\n\\t\\t\\t\\tvalue: item.value || item.label\\n\\t\\t\\t}, item );\\n\\t\\t});\\n\\t},\\n\\n\\t_suggest: function( items ) {\\n\\t\\tvar ul = this.menu.element.empty();\\n\\t\\tthis._renderMenu( ul, items );\\n\\t\\tthis.isNewMenu = true;\\n\\t\\tthis.menu.refresh();\\n\\n\\t\\t// size and position menu\\n\\t\\tul.show();\\n\\t\\tthis._resizeMenu();\\n\\t\\tul.position( $.extend({\\n\\t\\t\\tof: this.element\\n\\t\\t}, this.options.position ));\\n\\n\\t\\tif ( this.options.autoFocus ) {\\n\\t\\t\\tthis.menu.next();\\n\\t\\t}\\n\\t},\\n\\n\\t_resizeMenu: function() {\\n\\t\\tvar ul = this.menu.element;\\n\\t\\tul.outerWidth( Math.max(\\n\\t\\t\\t// Firefox wraps long text (possibly a rounding bug)\\n\\t\\t\\t// so we add 1px to avoid the wrapping (#7513)\\n\\t\\t\\tul.width( \"\" ).outerWidth() + 1,\\n\\t\\t\\tthis.element.outerWidth()\\n\\t\\t) );\\n\\t},\\n\\n\\t_renderMenu: function( ul, items ) {\\n\\t\\tvar that = this;\\n\\t\\t$.each( items, function( index, item ) {\\n\\t\\t\\tthat._renderItemData( ul, item );\\n\\t\\t});\\n\\t},\\n\\n\\t_renderItemData: function( ul, item ) {\\n\\t\\treturn this._renderItem( ul, item ).data( \"ui-autocomplete-item\", item );\\n\\t},\\n\\n\\t_renderItem: function( ul, item ) {\\n\\t\\treturn $( \"<li>\" )\\n\\t\\t\\t.append( $( \"<a>\" ).text( item.label ) )\\n\\t\\t\\t.appendTo( ul );\\n\\t},\\n\\n\\t_move: function( direction, event ) {\\n\\t\\tif ( !this.menu.element.is( \":visible\" ) ) {\\n\\t\\t\\tthis.search( null, event );\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( this.menu.isFirstItem() && /^previous/.test( direction ) ||\\n\\t\\t\\t\\tthis.menu.isLastItem() && /^next/.test( direction ) ) {\\n\\t\\t\\tthis._value( this.term );\\n\\t\\t\\tthis.menu.blur();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tthis.menu[ direction ]( event );\\n\\t},\\n\\n\\twidget: function() {\\n\\t\\treturn this.menu.element;\\n\\t},\\n\\n\\t_value: function() {\\n\\t\\treturn this.valueMethod.apply( this.element, arguments );\\n\\t},\\n\\n\\t_keyEvent: function( keyEvent, event ) {\\n\\t\\tif ( !this.isMultiLine || this.menu.element.is( \":visible\" ) ) {\\n\\t\\t\\tthis._move( keyEvent, event );\\n\\n\\t\\t\\t// prevents moving cursor to beginning/end of the text field in some browsers\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t}\\n\\t}\\n});\\n\\n$.extend( $.ui.autocomplete, {\\n\\tescapeRegex: function( value ) {\\n\\t\\treturn value.replace(/[\\\\-\\\\[\\\\]{}()*+?.,\\\\\\\\\\\\^$|#\\\\s]/g, \"\\\\\\\\$&\");\\n\\t},\\n\\tfilter: function(array, term) {\\n\\t\\tvar matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), \"i\" );\\n\\t\\treturn $.grep( array, function(value) {\\n\\t\\t\\treturn matcher.test( value.label || value.value || value );\\n\\t\\t});\\n\\t}\\n});\\n\\n\\n// live region extension, adding a `messages` option\\n// NOTE: This is an experimental API. We are still investigating\\n// a full solution for string manipulation and internationalization.\\n$.widget( \"ui.autocomplete\", $.ui.autocomplete, {\\n\\toptions: {\\n\\t\\tmessages: {\\n\\t\\t\\tnoResults: \"No search results.\",\\n\\t\\t\\tresults: function( amount ) {\\n\\t\\t\\t\\treturn amount + ( amount > 1 ? \" results are\" : \" result is\" ) +\\n\\t\\t\\t\\t\\t\" available, use up and down arrow keys to navigate.\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\t__response: function( content ) {\\n\\t\\tvar message;\\n\\t\\tthis._superApply( arguments );\\n\\t\\tif ( this.options.disabled || this.cancelSearch ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif ( content && content.length ) {\\n\\t\\t\\tmessage = this.options.messages.results( content.length );\\n\\t\\t} else {\\n\\t\\t\\tmessage = this.options.messages.noResults;\\n\\t\\t}\\n\\t\\tthis.liveRegion.text( message );\\n\\t}\\n});\\n\\n}( jQuery ));\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/jquery-ui/autocomplete.js\\n// module id = 872\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/jquery-ui/autocomplete.js?');\n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(factory) {\\n    if (true) {\\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \\'function\\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n    }\\n    else if (typeof exports === \\'object\\') {\\n        module.exports = factory(require(\"jquery\"));\\n    }\\n    else {\\n        factory(jQuery);\\n    }\\n}\\n(function($) {\\n    \"use strict\";\\n\\n    var pluginName = \"tinyscrollbar\"\\n    ,   defaults = {\\n            axis : \\'y\\'\\n        ,   wheel : true\\n        ,   wheelSpeed : 40\\n        ,   wheelLock : true\\n        ,   touchLock : true\\n        ,   trackSize : false\\n        ,   thumbSize : false\\n        ,   thumbSizeMin : 20\\n        }\\n    ;\\n\\n    function Plugin($container, options) {\\n        /**\\n         * The options of the carousel extend with the defaults.\\n         *\\n         * @property options\\n         * @type Object\\n         */\\n        this.options = $.extend({}, defaults, options);\\n\\n        /**\\n         * @property _defaults\\n         * @type Object\\n         * @private\\n         * @default defaults\\n         */\\n        this._defaults = defaults;\\n\\n        /**\\n         * @property _name\\n         * @type String\\n         * @private\\n         * @final\\n         * @default \\'tinyscrollbar\\'\\n         */\\n        this._name = pluginName;\\n\\n        var self = this\\n        ,   $viewport = $container.find(\".viewport\")\\n        ,   $overview = $container.find(\".overview\")\\n        ,   $scrollbar = $container.find(\".scrollbar\")\\n        ,   $track = $scrollbar.find(\".track\")\\n        ,   $thumb = $scrollbar.find(\".thumb\")\\n\\n        ,   hasTouchEvents = (\"ontouchstart\" in document.documentElement)\\n        ,   wheelEvent = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\\n                         document.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\\n                         \"DOMMouseScroll\" // let\\'s assume that remaining browsers are older Firefox\\n        ,   isHorizontal = this.options.axis === \\'x\\'\\n        ,   sizeLabel = isHorizontal ? \"width\" : \"height\"\\n        ,   posiLabel = isHorizontal ? \"left\" : \"top\"\\n\\n        ,   mousePosition = 0\\n        ;\\n\\n        /**\\n         * The position of the content relative to the viewport.\\n         *\\n         * @property contentPosition\\n         * @type Number\\n         */\\n        this.contentPosition = 0;\\n\\n        /**\\n         * The height or width of the viewport.\\n         *\\n         * @property viewportSize\\n         * @type Number\\n         */\\n        this.viewportSize = 0;\\n\\n        /**\\n         * The height or width of the content.\\n         *\\n         * @property contentSize\\n         * @type Number\\n         */\\n        this.contentSize = 0;\\n\\n        /**\\n         * The ratio of the content size relative to the viewport size.\\n         *\\n         * @property contentRatio\\n         * @type Number\\n         */\\n        this.contentRatio = 0;\\n\\n        /**\\n         * The height or width of the content.\\n         *\\n         * @property trackSize\\n         * @type Number\\n         */\\n        this.trackSize = 0;\\n\\n        /**\\n         * The size of the track relative to the size of the content.\\n         *\\n         * @property trackRatio\\n         * @type Number\\n         */\\n        this.trackRatio = 0;\\n\\n        /**\\n         * The height or width of the thumb.\\n         *\\n         * @property thumbSize\\n         * @type Number\\n         */\\n        this.thumbSize = 0;\\n\\n        /**\\n         * The position of the thumb relative to the track.\\n         *\\n         * @property thumbPosition\\n         * @type Number\\n         */\\n        this.thumbPosition = 0;\\n\\n        /**\\n         * Will be true if there is content to scroll.\\n         *\\n         * @property hasContentToSroll\\n         * @type Boolean\\n         */\\n        this.hasContentToSroll = false;\\n\\n        /**\\n         * @method _initialize\\n         * @private\\n         */\\n        function _initialize() {\\n            self.update();\\n            _setEvents();\\n\\n            return self;\\n        }\\n\\n        /**\\n         * You can use the update method to adjust the scrollbar to new content or to move the scrollbar to a certain point.\\n         *\\n         * @method update\\n         * @chainable\\n         * @param {Number|String} [scrollTo] Number in pixels or the values \"relative\" or \"bottom\". If you dont specify a parameter it will default to top\\n         */\\n        this.update = function(scrollTo) {\\n            var sizeLabelCap = sizeLabel.charAt(0).toUpperCase() + sizeLabel.slice(1).toLowerCase();\\n            this.viewportSize = $viewport[0][\\'offset\\'+ sizeLabelCap];\\n            this.contentSize = $overview[0][\\'scroll\\'+ sizeLabelCap];\\n            this.contentRatio = this.viewportSize / this.contentSize;\\n            this.trackSize = this.options.trackSize || this.viewportSize;\\n            this.thumbSize = Math.min(this.trackSize, Math.max(this.options.thumbSizeMin, (this.options.thumbSize || (this.trackSize * this.contentRatio))));\\n            this.trackRatio = (this.contentSize - this.viewportSize) / (this.trackSize - this.thumbSize);\\n            this.hasContentToSroll = this.contentRatio < 1;\\n\\n            $scrollbar.toggleClass(\"disable\", !this.hasContentToSroll);\\n\\n            switch (scrollTo) {\\n                case \"bottom\":\\n                    this.contentPosition = Math.max(this.contentSize - this.viewportSize, 0);\\n                    break;\\n\\n                case \"relative\":\\n                    this.contentPosition = Math.min(Math.max(this.contentSize - this.viewportSize, 0), Math.max(0, this.contentPosition));\\n                    break;\\n\\n                default:\\n                    this.contentPosition = parseInt(scrollTo, 10) || 0;\\n            }\\n\\n            this.thumbPosition = this.contentPosition / this.trackRatio;\\n\\n            _setCss();\\n\\n            return self;\\n        };\\n\\n        /**\\n         * @method _setCss\\n         * @private\\n         */\\n        function _setCss() {\\n            $thumb.css(posiLabel, self.thumbPosition);\\n            $overview.css(posiLabel, -self.contentPosition);\\n            $scrollbar.css(sizeLabel, self.trackSize);\\n            $track.css(sizeLabel, self.trackSize);\\n            $thumb.css(sizeLabel, self.thumbSize);\\n        }\\n\\n        /**\\n         * @method _setEvents\\n         * @private\\n         */\\n        function _setEvents() {\\n            if(hasTouchEvents) {\\n                $viewport[0].ontouchstart = function(event) {\\n                    if(1 === event.touches.length) {\\n                        event.stopPropagation();\\n\\n                        _start(event.touches[0]);\\n                    }\\n                };\\n            }\\n            else {\\n                $thumb.bind(\"mousedown\", function(event){\\n                    event.stopPropagation();\\n                    _start(event);\\n                });\\n                $track.bind(\"mousedown\", function(event){\\n                    _start(event, true);\\n                });\\n            }\\n\\n            $(window).resize(function() {\\n                self.update(\"relative\");\\n            });\\n\\n            if(self.options.wheel && window.addEventListener) {\\n                $container[0].addEventListener(wheelEvent, _wheel, false);\\n            }\\n            else if(self.options.wheel) {\\n                $container[0].onmousewheel = _wheel;\\n            }\\n        }\\n\\n        /**\\n         * @method _isAtBegin\\n         * @private\\n         */\\n        function _isAtBegin() {\\n            return self.contentPosition > 0;\\n        }\\n\\n        /**\\n         * @method _isAtEnd\\n         * @private\\n         */\\n        function _isAtEnd() {\\n            return self.contentPosition <= (self.contentSize - self.viewportSize) - 5;\\n        }\\n\\n        /**\\n         * @method _start\\n         * @private\\n         */\\n        function _start(event, gotoMouse) {\\n            if(self.hasContentToSroll) {\\n                $(\"body\").addClass(\"noSelect\");\\n\\n                mousePosition = gotoMouse ? $thumb.offset()[posiLabel] : (isHorizontal ? event.pageX : event.pageY);\\n\\n                if(hasTouchEvents) {\\n                    document.ontouchmove = function(event) {\\n                        if(self.options.touchLock || _isAtBegin() && _isAtEnd()) {\\n                            event.preventDefault();\\n                        }\\n                        _drag(event.touches[0]);\\n                    };\\n                    document.ontouchend = _end;\\n                }\\n                else {\\n                    $(document).bind(\"mousemove\", _drag);\\n                    $(document).bind(\"mouseup\", _end);\\n                    $thumb.bind(\"mouseup\", _end);\\n                    $track.bind(\"mouseup\", _end);\\n                }\\n\\n                _drag(event);\\n            }\\n        }\\n\\n        /**\\n         * @method _wheel\\n         * @private\\n         */\\n        function _wheel(event) {\\n            if(self.hasContentToSroll) {\\n                // Trying to make sense of all the different wheel event implementations..\\n                //\\n                var evntObj = event || window.event\\n                ,   wheelDelta = -(evntObj.deltaY || evntObj.detail || (-1 / 3 * evntObj.wheelDelta)) / 40\\n                ,   multiply = (evntObj.deltaMode === 1) ? self.options.wheelSpeed : 1\\n                ;\\n\\n                self.contentPosition -= wheelDelta * multiply * self.options.wheelSpeed;\\n                self.contentPosition = Math.min((self.contentSize - self.viewportSize), Math.max(0, self.contentPosition));\\n                self.thumbPosition = self.contentPosition / self.trackRatio;\\n\\n                /**\\n                 * The move event will trigger when the carousel slides to a new slide.\\n                 *\\n                 * @event move\\n                 */\\n                $container.trigger(\"move\");\\n\\n                $thumb.css(posiLabel, self.thumbPosition);\\n                $overview.css(posiLabel, -self.contentPosition);\\n\\n                if(self.options.wheelLock || _isAtBegin() && _isAtEnd()) {\\n                    evntObj = $.event.fix(evntObj);\\n                    evntObj.preventDefault();\\n                }\\n            }\\n        }\\n\\n        /**\\n         * @method _drag\\n         * @private\\n         */\\n        function _drag(event) {\\n            if(self.hasContentToSroll) {\\n                var mousePositionNew = isHorizontal ? event.pageX : event.pageY\\n                ,   thumbPositionDelta = hasTouchEvents ? (mousePosition - mousePositionNew) : (mousePositionNew - mousePosition)\\n                ,   thumbPositionNew = Math.min((self.trackSize - self.thumbSize), Math.max(0, self.thumbPosition + thumbPositionDelta))\\n                ;\\n\\n                self.contentPosition = thumbPositionNew * self.trackRatio;\\n\\n                $container.trigger(\"move\");\\n\\n                $thumb.css(posiLabel, thumbPositionNew);\\n                $overview.css(posiLabel, -self.contentPosition);\\n            }\\n        }\\n\\n        /**\\n         * @method _end\\n         * @private\\n         */\\n        function _end() {\\n            self.thumbPosition = parseInt($thumb.css(posiLabel), 10) || 0;\\n\\n            $(\"body\").removeClass(\"noSelect\");\\n            $(document).unbind(\"mousemove\", _drag);\\n            $(document).unbind(\"mouseup\", _end);\\n            $thumb.unbind(\"mouseup\", _end);\\n            $track.unbind(\"mouseup\", _end);\\n            document.ontouchmove = document.ontouchend = null;\\n        }\\n\\n        return _initialize();\\n    }\\n\\n    /**\\n    * @class tinyscrollbar\\n    * @constructor\\n    * @param {Object} options\\n        @param {String} [options.axis=\\'y\\'] Vertical or horizontal scroller? ( x || y ).\\n        @param {Boolean} [options.wheel=true] Enable or disable the mousewheel.\\n        @param {Boolean} [options.wheelSpeed=40] How many pixels must the mouswheel scroll at a time.\\n        @param {Boolean} [options.wheelLock=true] Lock default window wheel scrolling when there is no more content to scroll.\\n        @param {Number} [options.touchLock=true] Lock default window touch scrolling when there is no more content to scroll.\\n        @param {Boolean|Number} [options.trackSize=false] Set the size of the scrollbar to auto(false) or a fixed number.\\n        @param {Boolean|Number} [options.thumbSize=false] Set the size of the thumb to auto(false) or a fixed number\\n        @param {Boolean} [options.thumbSizeMin=20] Minimum thumb size.\\n    */\\n    $.fn[pluginName] = function(options) {\\n        return this.each(function() {\\n            if(!$.data(this, \"plugin_\" + pluginName)) {\\n                $.data(this, \"plugin_\" + pluginName, new Plugin($(this), options));\\n            }\\n        });\\n    };\\n}));\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/tinyscrollbar/lib/jquery.tinyscrollbar.js\\n// module id = 953\\n// module chunks = 1\\n//# sourceURL=webpack:///./~/tinyscrollbar/lib/jquery.tinyscrollbar.js?')}]);"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 280523
        },
        "cache": {},
        "timings": {
          "blocked": 0.413000117987394,
          "dns": -1,
          "connect": -1,
          "send": 0.078999903053046,
          "wait": 1121.9540000893196,
          "receive": 86934.83799998648,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.812Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "https://www.google-analytics.com/analytics.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_CONNECTION_CLOSED"
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.814Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "https://www.googletagservices.com/tag/js/gpt.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_TIMED_OUT"
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.815Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "https://connect.facebook.net/en_US/fbevents.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_TIMED_OUT"
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.822Z",
        "time": 6754.438000032678,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/9gag.com/index.html",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "last-modified",
              "value": "Tue, 31 Jan 2017 00:24:51 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588fd953-1dcdd\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            }
          ],
          "cookies": [],
          "content": {
            "size": 926,
            "mimeType": "text/html",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 926
        },
        "cache": {},
        "timings": {
          "blocked": 0.542000168934465,
          "dns": -1,
          "connect": -1,
          "send": 0.12300000526010901,
          "wait": 6295.506999827925,
          "receive": 458.26600003055864,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.824Z",
        "time": 6856.226000003517,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/header-logo.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:34 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b8a-313\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "787"
            }
          ],
          "cookies": [],
          "content": {
            "size": 787,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAQAAADa613fAAAC2klEQVR4Ae3aA5B0SRBG0WyM17Zt27Zt27b527Zt27axtr3jmbtvrUY2X3VEngr7hqO+lGwwxhhjjDHGGGPYgxGMYA/JZWxIQ6oAqKIhG0ouIsRdfMU/fcVdhCS3cApLiWQpp0iuYBcGE8tgdhHXsR51qSCeCuqynriKILfyOVqfcytBcQ8nsIhELeIEcQk70o9k9WNHcQHr8BrlpKKc11hH/ESAG/iUdPiUGwiIPziaeaTTPI6WbGM7eqE10HtavdhOsoUSXqIUnSWcLB5OZgk6pbxEiWQaAa7hI3S+5E5C8gdC3MmX6HzENQQkk5iFTiUN2ED+gw1oQCU6syST0BnG7hIFuzMMFb9DVnC6xMHprHA9pAthUSBMF7dDoCfbShxsS09wPQRKeZFiiYJiXqQU/A75Ep0PuZqA/AcBruZDAP9DNqARlejM5DD5Bw5jJnpIprE7I9CppQtbiYet6UItCZFs4AxWoPMTz3jvJxIm2UGY+/iGDJLsYWOaUe1+iAp7M4bU1BCRZB/nsoZkTeNgV0I85PEw35Goj7haPEQkfmFTWlODVhmvUCLiXshv2J8JaAxgR/G4GvIbLuJtYlnKSeJxPcRDAU/wA5F8zT2ERFwJUWAL2lPDP1XTnI3F41aIAgcxlT9NYF/xuBmiwGW8x7tcIh6XQxQopFDE/RA9C8kK1uFFzk5p/b2DiPyZFUazlySB41lEFH7NClU0ZSNJANvRmxj8nBW+5l7CokARL1AKvoZQzEuUpvRlehnvE5evs4LiE/sAJgP4HdIopVlhE1pRg85MySQCXKsferjjH0NPmPv5Fp2PuJaAa9PbSeLhVJY7M72lMIYOSn0MtXlagwA3pu1g4EYC4ifW4fWUTzheZx1xATvSn2T1Z0c7c8oMgtyW0OHZbQTFVaxHPdUpYD3WE9exa9zjzF3tXNYOmFPChjT666S8ERvakb8xxhhjjDHGGGNy2C/rc4AoRrBU2gAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 923
        },
        "cache": {},
        "timings": {
          "blocked": 0.423999968916178,
          "dns": -1,
          "connect": -1,
          "send": 0.08700019679963594,
          "wait": 6559.079999802634,
          "receive": 296.63500003516674,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.825Z",
        "time": 7097.221000120044,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/sprite-search.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:46 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b96-393\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "915"
            }
          ],
          "cookies": [],
          "content": {
            "size": 915,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAADwAAAB4CAQAAAAEPFmDAAADWklEQVR4Ae3UNbQjNxTGcS0zdcEN41Ib5lRhhjbM7sJMy7w79wbcH1ePX2f3YVzGR9VjaExfQHPHPGruBPVTe4/+ZyxZxvt38zzP84LzOUW9fIDHeYaPUo7eoQ0maXvXUCejcdHXwS0mKe/Npo1UYrRcmS1LjL59S7mL4Vg/8mr1r63LfsObgheDZ/gDzlKBEa0Du5cbTbSx6jw7964xVfhM4soRULeZpXmlZOMip0wTwZ08GaUfMVoqN9lmm6HbuRjOHON5RsOeCyo/sokRfBzN3WM0cEo2lLNtbvdyHgnDaaOBeuUmOyfT4eSQ0cAHwu/Y6Jx8PAyX35uvER632wUvGof910eHcp5GeCYMP2Mc6GoJ0yUa4aPhZu8bh+ABCe9fpRCmXLhd1jm5w07SqMrrRe+E2xX4zNj3fC6ftpPcbjTQhujkOHbueZnjJ40O+joMl4I7W85cSRNhdowXGx3BLdG3TNLtLbIno5nXjB7ORNsWg483Las9W3o++lrQAM8zerYs4R8Z0RrhL/nx/dfT1cEDtEOulKzgTaOJV8vT6Vj66d3LqTsuRwP6aTGLHuFjTbNj/BrPC97UT0d4Ht1DaR7isrxS3M5Pyh8owbR4b/7e8/Zeun9V5XFMNu3m0x8ZB/V0ollH+q/Oep7neZ7neZ7neTgfKfTiAMYxg6PI4R1sSD66Bp1o5mvcklx0NjaihNYyWJJEdim64PIjVqt/bV32G2zCi3gGHyCLAioOYLlueCMqOrHGVMGZYJQgujFL80rJxkWkmk7ciUmIR/TCnRCpljO3owjrGObpZC+A6Iyd+xjiHp1wCmJN7NxyjMBK64R75SY7J9OwhnTCB2BtdE4+DquM+RrhcVgvOievhzhPIzwD6xnn5NUQl2iEj8J63zn5AMQqjXAOVtY5uQPWqMrrhXdgFXBm7NxcnIbVbjRgAwTHzj0P8aTRga9hlXBny5krMQFrDIu1wrdATOL2FtmTEK8ZPchAFPExltWd7fOYgBjAPM3wEvyIihF8icdxPa7GA9gRXSnxptGE1TgAh6TSy9GNOAPJpWfhERxDM2N4DfPwpn46gnm4B2kMoRy9Uu14Uv5ACaYF5uM8XIpVlccx8bSDT39k1DnSiWYd6eSznud5nqfuN8ZcYncu21O2AAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1052
        },
        "cache": {},
        "timings": {
          "blocked": 0.345000065863133,
          "dns": -1,
          "connect": -1,
          "send": 0.07000006735324804,
          "wait": 6558.817999903114,
          "receive": 537.9880000837138,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.825Z",
        "time": 6625.222000060603,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/sticky-vote.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:47 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b97-139\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "313"
            }
          ],
          "cookies": [],
          "content": {
            "size": 313,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAFQAAABACAYAAACELFBMAAABAElEQVR4Ae3ap1JEURRE0XM9oS3qfC5ZTvpTcsYM0OTQj9q7qt1Vy7xYRERERET/odVqdf04VXA7x9fXj1M8pkGNwzSoOZhmSsM0UySmmdIwzRSJaaY0TDNFYpopDdNMkZhmSsM0Ux6mWRamH6ATBtWzecB+evYXQfVsHrCfnq0/i/tQQAEFFFBAfylAiYiIiIiIiIiIiIgXzNsH59dmAhRQQAEFFFBAAQ37nTEA710DdMKg+gJo/yKovgDaZUpC7cViMcoUhNpb+2ejTAGoBjMG1WOmovZ8Ph9lCkA1mDGoHjMYtTf3TkeZAlANZgyqx4xCdZjBqB6TiIiIiGgi3QDzliu30cUS2AAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 449
        },
        "cache": {},
        "timings": {
          "blocked": 0.808000098913908,
          "dns": -1,
          "connect": -1,
          "send": 0.07299985736608494,
          "wait": 6292.61900018901,
          "receive": 331.72199991531306,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.825Z",
        "time": 6855.000999988988,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/other-buttons.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:40 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b90-9f\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "159"
            }
          ],
          "cookies": [],
          "content": {
            "size": 159,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACoAAABACAQAAADGpS3sAAAAZklEQVR4Ae3URwHAIBBEUXSgBGdoGT1xsi72knpOT0j9b060ubEBAC6gqLi82kRZTZe8vNpAPjz05dUGsuGhLa82UFLVJS2vAADAxdRMp0BlH0oppbT8N91UXGCoFJhUBcZf+CSgBctVgj67QvS0AAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 295
        },
        "cache": {},
        "timings": {
          "blocked": 0.90499990619719,
          "dns": -1,
          "connect": -1,
          "send": 0.07000006735324904,
          "wait": 6578.81999993697,
          "receive": 275.2060000784677,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.826Z",
        "time": 6854.90300017409,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/sharing-button-a.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:43 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b93-117\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "279"
            }
          ],
          "cookies": [],
          "content": {
            "size": 279,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACIAAABECAQAAABO4y8OAAAA3klEQVR4Ae3RGWDEQBSA4YfFcek4xWmc4tJ1d7csVXddGqpmXaq1rEsGa3+7vc+5e7/vSc5/ckgbSvFMgwQ0SPyIyDHmMHURI/l431WLyGWLyHmLyGlexNzNq79z1OTv/NCIRv4UpZTCMQKeLeZ2z0oYOzp5gZ4nnj0XsUQHeHp5Bs9zCyN9LHNni318ldcGiWHiwcgK9zYSTxgcCyFLPGIBT8hO4pgIW0sclpmQTlLgOOMjk6RhxcecpGIg/j3isO+ENnmJjjW+OIFjZM9rM73k4YQNM3cmBpz8FEpdA5dxmQn9CwTeAAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 415
        },
        "cache": {},
        "timings": {
          "blocked": 0.776000088080764,
          "dns": -1,
          "connect": -1,
          "send": 0.066000036895275,
          "wait": 6749.122000066564,
          "receive": 104.93899998254983,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.827Z",
        "time": 7170.9950000513345,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/post-type-icon.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:42 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b92-9d\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "157"
            }
          ],
          "cookies": [],
          "content": {
            "size": 157,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACwAAAAsCAYAAAAehFoBAAAAZElEQVR42u3SMQqAMAxAUY/v6OoFHL1i7aYUWh0EE3wPsmX4LZkAAPidtcx1Sm/SRaf76a9iynDOvS18cLsTKvjhg5Y6e8jgNra96XDBvdO4RocMHu2FvGHBgnME349gAAB4zwGVWSkQUF2eUAAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 293
        },
        "cache": {},
        "timings": {
          "blocked": 0.568000134080648,
          "dns": -1,
          "connect": -1,
          "send": 0.07299985736608605,
          "wait": 6852.496000006793,
          "receive": 317.85800005309466,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.827Z",
        "time": 7095.261999871582,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/expand-crook.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:32 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b88-e4\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "228"
            }
          ],
          "cookies": [],
          "content": {
            "size": 228,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAeCAQAAAC/fEe7AAAAq0lEQVR4Ad3QJ5bCYBiF4XeqnWg0GmywoNHoYMEGHR1P73UBMUxVUf9moqJT7hT6CuY856vywrPwhEpdhcXLCQsVhRso3kDpTBkVNpWcrTqgdqaKivoNNG7AoZlzVAe0aMsu2AVoEzq4uKvXOI3T1SsuuvHw5l96yfxLN/jTUOefaYjPyJy+ZGT+cXSrYHUZ3ew1SqN0dhrd+EsvGf9FNwx1/hkqup45fUnPZGOUoyEf4igoAAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 363
        },
        "cache": {},
        "timings": {
          "blocked": 0.536999898031354,
          "dns": -1,
          "connect": -1,
          "send": 0.06700004450976804,
          "wait": 6748.573000077159,
          "receive": 346.08499985188155,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.829Z",
        "time": 7169.026999967173,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/hair.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:33 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b89-4f\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "79"
            }
          ],
          "cookies": [],
          "content": {
            "size": 79,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGCAYAAADgzO9IAAAAFklEQVQIW2NgQAJKSkr/kfnUECQLAAA/pgWVNrZk1QAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 214
        },
        "cache": {},
        "timings": {
          "blocked": 0.349000096321106,
          "dns": -1,
          "connect": -1,
          "send": 0.066999811679125,
          "wait": 6858.342000050469,
          "receive": 310.2690000087032,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.830Z",
        "time": 8903.182999929413,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/appstore-icon-alt-145.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:27 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b83-143c\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "5180"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5180,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 5317
        },
        "cache": {},
        "timings": {
          "blocked": 0.399999786168337,
          "dns": -1,
          "connect": -1,
          "send": 0.06500002928078202,
          "wait": 7090.049999998881,
          "receive": 1812.6680001150835,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.831Z",
        "time": 7516.923999879509,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/instagram-follow.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:36 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b8c-f1\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "241"
            }
          ],
          "cookies": [],
          "content": {
            "size": 241,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAUBAMAAACzEviQAAAAMFBMVEUxaZkxaZkxaZkxaZkxaZkxaZkxaZkxaZkxaZkxaZkxaZkxaZkvZ5cxaZkxaZkxaZleXdMNAAAAEHRSTlMAV+z/8B8QwCj6JBEB954K2e5c1gAAAGBJREFUeAFjGCaAUdkYCIwEyDeBxRgMHMg3gRmk3zTZgEITzJgpMgEMKDOhop0yE0wzF3DNpigczM4u4LrDTJEJfBXtDygzgf/tvQ+UmcDAc4CBMhPApMEApmpEzhrRAABDoxfumMucJwAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 376
        },
        "cache": {},
        "timings": {
          "blocked": 0.39399997331202,
          "dns": -1,
          "connect": -1,
          "send": 0.069999834522605,
          "wait": 7165.237000212075,
          "receive": 351.22299985959944,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:02.831Z",
        "time": 7516.899000154808,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/back-to-top.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:27 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b83-7f\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "127"
            }
          ],
          "cookies": [],
          "content": {
            "size": 127,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAAAAACpleexAAAAAnRSTlMAAHaTzTgAAAA4SURBVHgBY6AKGAWjYCYGoFQhQgPxLiDepUSpgxCE1UEpgurgDELqEExC6hAcPArRePQFo2AUAAC61TEDV5J2awAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 262
        },
        "cache": {},
        "timings": {
          "blocked": 0.429000006988645,
          "dns": -1,
          "connect": -1,
          "send": 0.05799997597932799,
          "wait": 7089.728000108152,
          "receive": 426.6840000636885,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:03.049Z",
        "time": 34554.81799994595,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/img-9gag-fun.9cache.com/photo/aRm6zAM_460svwm.webm",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "Accept-Encoding",
              "value": "identity;q=1, *;q=0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "Range",
              "value": "bytes=0-"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 206,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Sat, 28 Jan 2017 18:31:15 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"588ce373-747c5\""
            },
            {
              "name": "status",
              "value": "206"
            },
            {
              "name": "content-type",
              "value": "video/webm"
            },
            {
              "name": "content-range",
              "value": "bytes 0-477124/477125"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "477125"
            }
          ],
          "cookies": [],
          "content": {
            "size": 477125,
            "mimeType": "video/webm",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 485913
        },
        "cache": {},
        "timings": {
          "blocked": 1.73399993218482,
          "dns": -1,
          "connect": -1,
          "send": 0.14400016516447,
          "wait": 6946.509999921551,
          "receive": 27606.42999992705,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.436Z",
        "time": 9421.285000164062,
        "request": {
          "method": "GET",
          "url": "https://connect.facebook.net/en_US/sdk.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/en_US/sdk.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "connect.facebook.net"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:54 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 4918.08500001207,
          "dns": -1,
          "connect": 1717.76799997315,
          "send": 0.2600001171203985,
          "wait": 2784.5890000462505,
          "receive": 0.5830000154710433,
          "ssl": 1717.0859999023396
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3407",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.436Z",
        "time": 6633.882000111043,
        "request": {
          "method": "GET",
          "url": "https://platform.twitter.com/widgets.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/widgets.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "platform.twitter.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:53 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 4917.57800010964,
          "dns": -1,
          "connect": 649.2319998797102,
          "send": 0.15800003892945824,
          "wait": 1065.9519999753702,
          "receive": 0.9620001073935782,
          "ssl": 649.00400000624
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3409",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.436Z",
        "time": 4143.061999930069,
        "request": {
          "method": "GET",
          "url": "https://apis.google.com/js/platform.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/js/platform.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "apis.google.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:51 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 0.782999908551574,
          "dns": 0.005000038072467072,
          "connect": 3568.589000031356,
          "send": 0.15900004654986333,
          "wait": 572.97399989329,
          "receive": 0.5520000122487545,
          "ssl": 1884.92999994196
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3366",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.437Z",
        "time": 2898.423000006005,
        "request": {
          "method": "GET",
          "url": "https://www.google.com/recaptcha/api.js?onload=onCaptchaLoadedCallback&render=explicit&hl=en",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/recaptcha/api.js?onload=onCaptchaLoadedCallback&render=explicit&hl=en"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "www.google.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [
            {
              "name": "onload",
              "value": "onCaptchaLoadedCallback"
            },
            {
              "name": "render",
              "value": "explicit"
            },
            {
              "name": "hl",
              "value": "en"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:50 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 0.653000082820654,
          "dns": 0.0070000533014539235,
          "connect": 2349.148999899628,
          "send": 0.16700010746990301,
          "wait": 547.7620000019601,
          "receive": 0.6849998608249734,
          "ssl": 831.1760001815901
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3373",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.437Z",
        "time": 7007.396999979392,
        "request": {
          "method": "GET",
          "url": "https://js-webt-lol.9cache.com/piwik.7688214.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/piwik.7688214.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "js-webt-lol.9cache.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:54 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 4957.54000009038,
          "dns": -1,
          "connect": 807.6160000637101,
          "send": 0.23399991914993734,
          "wait": 1241.03499995545,
          "receive": 0.9719999507015018,
          "ssl": 807.2540001012394
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3415",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.438Z",
        "time": 9419.903999892995,
        "request": {
          "method": "GET",
          "url": "https://sb.scorecardresearch.com/beacon.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/beacon.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "sb.scorecardresearch.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:54 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 5673.25100000016,
          "dns": -1,
          "connect": 1359.02399988845,
          "send": 0.1050001010298729,
          "wait": 2387.1180000714994,
          "receive": 0.4059998318552971,
          "ssl": 1358.80700009875
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3417",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.443Z",
        "time": 9414.688999997452,
        "request": {
          "method": "GET",
          "url": "https://www.googletagservices.com/tag/js/gpt.js",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/tag/js/gpt.js"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "www.googletagservices.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:54 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 5177.8279999271,
          "dns": -1,
          "connect": 1701.2720000930203,
          "send": 0.10300008579997666,
          "wait": 2535.0719999987605,
          "receive": 0.41399989277124405,
          "ssl": 1701.0579998604999
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3392",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.486Z",
        "time": 7004.0499998722225,
        "request": {
          "method": "GET",
          "url": "https://ajax-9gag-lol.9cache.com/read/ajax-featured?pageType=desktop&callback=data",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": ":path",
              "value": "/read/ajax-featured?pageType=desktop&callback=data"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, sdch, br"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            },
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": ":authority",
              "value": "ajax-9gag-lol.9cache.com"
            },
            {
              "name": "referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": ":method",
              "value": "GET"
            }
          ],
          "queryString": [
            {
              "name": "pageType",
              "value": "desktop"
            },
            {
              "name": "callback",
              "value": "data"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 404,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "date",
              "value": "Fri, 17 Feb 2017 15:17:54 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "status",
              "value": "404"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "20"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/plain",
            "text": ""
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 152,
          "_error": ""
        },
        "cache": {},
        "timings": {
          "blocked": 4762.97200005502,
          "dns": -1,
          "connect": 795.8699997980102,
          "send": 0.1050001010298729,
          "wait": 1444.26500005648,
          "receive": 0.8379998616828743,
          "ssl": 795.6570000387701
        },
        "serverIPAddress": "192.168.100.1",
        "connection": "3421",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:47.489Z",
        "time": 2055.9120001271367,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/img/spin-white.gif",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/web6/css/gag.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:44 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b94-2358\""
            },
            {
              "name": "content-type",
              "value": "image/gif"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "9048"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9048,
            "mimeType": "image/gif",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 9185
        },
        "cache": {},
        "timings": {
          "blocked": 0.379000091925263,
          "dns": -1,
          "connect": -1,
          "send": 0.08299993351101898,
          "wait": 1589.4260001368837,
          "receive": 466.02399996481677,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      },
      {
        "startedDateTime": "2017-02-17T15:17:56.865Z",
        "time": 1140.7170000020415,
        "request": {
          "method": "GET",
          "url": "https://web.hfelo.se/assets-9gag-fun.9cache.com/s/fab0aa49/5a4d5ba8d75a8056277ba16a160971c7b0cec27d/static/dist/core/img/favicon_v2.png",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "Referer",
              "value": "https://web.hfelo.se/9gag.com/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36 OPR/43.0.2442.806"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "unknown",
          "headers": [
            {
              "name": "last-modified",
              "value": "Thu, 26 Jan 2017 02:14:51 GMT"
            },
            {
              "name": "server",
              "value": "Caddy"
            },
            {
              "name": "etag",
              "value": "W/\"58895b9b-ef\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "alternate-protocol",
              "value": "443:quic"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "quic=\":443\"; ma=2592000; v=\"36,35,34\""
            },
            {
              "name": "content-length",
              "value": "239"
            }
          ],
          "cookies": [],
          "content": {
            "size": 239,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAtklEQVR42p2TsQ3EIAxFswITsAh73BoZIV2WyA5Z4Qahv5IuTSQcW/JJlr/vEoH0UgD/Y8j3RERTNFJKK3Mqq10TzRf5eOGLaQw5mqyFBirMTAUhUplsDUS8MD3Y/FbI0UVjDchxMMVcq+gcWdAAT88CVoEGhfkEm06F/hqYUmcQ4NXQwA8tubtH22Xt1sA9XFWyToMB5MCnDtOJBlHJDX4jpBMMRoI0HuUy2kwzNNPDdt5+tfMFWCwpcwpJDi0AAAAASUVORK5CYII=",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 375
        },
        "cache": {},
        "timings": {
          "blocked": 0.415000133216381,
          "dns": -1,
          "connect": -1,
          "send": 0.10699988342821604,
          "wait": 1139.7019999567453,
          "receive": 0.49300002865152237,
          "ssl": -1
        },
        "serverIPAddress": "192.168.100.1",
        "pageref": "page_8"
      }
    ]
  }
}