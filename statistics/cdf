#!/usr/bin/env python3

import statistics
import sys
import os
import json
from scenarios import scenarios, \
                      bandwidth_scenarios, \
                      latency_scenarios, \
                      loss_scenarios, \
                      baseline_scenarios
import subprocess
from matplotlib import pyplot, rcParams, ticker
import numpy


this_folder = os.path.dirname(os.path.realpath(__file__))
fig_nr = 1
axis_label_offset = -1.0
axis_unit_offset = 0.0
legend_size = 28
rcParams.update({'font.size': legend_size})
nbins_x = 6
nbins_y = 5
plot = False

compare_keys = {
    "Time (ms)": "time",
    "Bytes fetched (kB)": "total_bytes_fetched"
}

scenarios_to_check = scenarios
compare_key = "Time (ms)"

if len(sys.argv) > 1:
    if sys.argv[1] == "--res-count":
        compare_key = "resource_count"
    elif sys.argv[1] == "--bytes":
        compare_key = "Bytes fetched (kB)"
if len(sys.argv) >= 3:
    if sys.argv[2] == "--bandwidth":
        print("Plotting bandwidth scenarios. ")
        scenarios_to_check = bandwidth_scenarios
    elif sys.argv[2] == "--loss":
        print("Plotting loss scenarios. ")
        scenarios_to_check = loss_scenarios
    elif sys.argv[2] == "--latency":
        print("Plotting latency scenarios. ")
        scenarios_to_check = latency_scenarios
    elif sys.argv[2] == "--baseline":
        print("Plotting baseline scenarios. ")
        scenarios_to_check = baseline_scenarios
    else:
        print("Plotting all scenarios. ")

if len(sys.argv) == 4:
    if sys.argv[3] == "--plot":
        plot = True

for conn_type in ["open", "close"]:
    for scen in scenarios_to_check:
        # Open connections
        process = subprocess.Popen(
            [this_folder + os.path.sep + "generate-stats"] +
            scen[1] +
            ["--" + conn_type + "-connection", "-h1"],
            stdout=subprocess.PIPE
            )
        http1_out, http1_err = process.communicate()
        process = subprocess.Popen(
            [this_folder + os.path.sep + "generate-stats"] +
            scen[1] +
            ["--" + conn_type + "-connection", "-h2"],
            stdout=subprocess.PIPE
            )
        http2_out, http2_err = process.communicate()
        process = subprocess.Popen(
            [this_folder + os.path.sep + "generate-stats"] +
            scen[1] +
            ["--" + conn_type + "-connection", "-q", "-pq"],
            stdout=subprocess.PIPE
            )
        quic_out, quic_err = process.communicate()

        outs = []
        outs.append(json.loads(http1_out.decode('utf-8')))
        outs.append(json.loads(http2_out.decode('utf-8')))
        outs.append(json.loads(quic_out.decode('utf-8')))

        # Create plot
        fig, ax = pyplot.subplots()
        fig.set_size_inches(1150/96.0, 762/96.0)
        min_value = 0
        max_value = 0

        for data in outs:
            nr_urls = 0
            urls = []
            url_means = []
            values = list()

            for url, stats_list in data["webpages"].items():
                new_values = []
                for stat in stats_list:
                    if stat["status"] is True:
                        if compare_keys[compare_key] == "total_bytes_fetched":
                            new_values.append(stat[compare_keys[compare_key]] / 1000.0)
                        else:
                            new_values.append(stat[compare_keys[compare_key]])
                if len(new_values) != 0:
                    url_means.append(
                        statistics.mean(new_values)
                        )
                    urls.append(url)
                    nr_urls = nr_urls + 1
                values += new_values

            url_means.sort()
            values.sort()
            cdf_scaler = []
            y_value = 0
            for i in range(0, len(values)):
                cdf_scaler.append(y_value)
                y_value += 1/float(len(values))

            protocol = data["identifiers"]["web_protocol"]
            if protocol == "HTTP":
                line_color = "b"
            elif protocol == "HTTP2":
                line_color = "r"
            elif protocol == "PROTO-QUIC":
                line_color = "k"

            if scen[0] == "scen40" and compare_keys[compare_key] == "time" and conn_type == "open":
                smaller_values = numpy.array(values) / 1000.0
                print(smaller_values)
                ax.errorbar(
                    smaller_values,
                    cdf_scaler,
                    label=data["identifiers"]["web_protocol"],
                    color=line_color
                    )
            elif scen[0] == "scen7" and compare_keys[compare_key] == "time":
                smaller_values = numpy.array(values) / 1000.0
                print(smaller_values)
                ax.errorbar(
                    smaller_values,
                    cdf_scaler,
                    label=data["identifiers"]["web_protocol"],
                    color=line_color
                    )
            else:
                ax.errorbar(
                    values,
                    cdf_scaler,
                    label=data["identifiers"]["web_protocol"],
                    color=line_color
                    )

            #pyplot.plot(url_means, cdf_scaler)
            #ax.locator_params(axis='y', tight=True, nbins=nbins_x)
            #ax.locator_params(axis='x', tight=True, nbins=nbins_y)

            if len(values) != 0:
                max_value = max(max_value, max(values))
                min_value = min(min_value, min(values))
            # Plor
            pyplot.yticks(numpy.arange(0.0, 1.2, 1 / float(nbins_y)))
            pyplot.xlabel(compare_key, labelpad=axis_label_offset)
            pyplot.ylabel('P(X < x)', labelpad=axis_label_offset)
            #pyplot.title('CDF ' + conn_type + ' connection ' + scen[0])
            pyplot.legend(
                bbox_to_anchor=(0.98, 0.3), #285),
                loc=1,
                borderaxespad=axis_unit_offset,
                prop={"size": legend_size}
                )

            if scen[0] == "scen7" and compare_keys[compare_key] == "total_bytes_fetched" and conn_type == "open":
                scen7_upper = 4000
                pyplot.xticks(numpy.around(numpy.arange(0, scen7_upper, (scen7_upper) / nbins_x), decimals=-2))
                pyplot.xlim(0, scen7_upper)
            elif scen[0] == "scen7" and compare_keys[compare_key] == "time":
                pyplot.xlabel("Time (s)", labelpad=axis_label_offset)
                scen7_upper = 80
                pyplot.xlim(0, scen7_upper)
                pyplot.xticks(numpy.around(numpy.arange(0, scen7_upper, (scen7_upper) / nbins_x)))
            elif scen[0] == "scen40" and compare_keys[compare_key] == "time" and conn_type == "open":
                pyplot.xlabel("Time (s)", labelpad=axis_label_offset)
                scen8_upper = 80
                pyplot.xticks(numpy.around(numpy.arange(0, scen8_upper, (scen8_upper) / nbins_x)))
                pyplot.xlim(0, scen8_upper)
            elif scen[0] == "scen8" and compare_keys[compare_key] == "time" and conn_type == "open":
                #pyplot.xlabel("Time (s)", labelpad=axis_label_offset)
                scen40_upper = 8000
                pyplot.xticks(numpy.around(numpy.arange(0, scen40_upper, (scen40_upper) / nbins_x)))
                pyplot.xlim(0, scen40_upper)
            else:
                pyplot.xticks(numpy.around(numpy.arange(min_value, max_value+1, (max_value - min_value) / nbins_x), decimals=-2))
            pyplot.grid(True)

        figure_path = this_folder + \
            os.path.sep + \
            ".." + \
            os.path.sep + \
            ".." + \
            os.path.sep + \
            "master-thesis" + \
            os.path.sep + \
            "cdf" + \
            os.path.sep + \
            scen[0] + \
            "_" + \
            conn_type + \
            "_" + \
            compare_keys[compare_key] + \
            ".png"
        pyplot.savefig(figure_path, bbox_inches='tight')
if plot:
    pyplot.show()
