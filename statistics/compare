#!/usr/bin/env python3

import sys
import json


if len(sys.argv) != 3:
    sys.stderr.write("Usage: \n")
    sys.stderr.write("      " + sys.argv[0] + \
                     " path/to/statistics/file1 path/to/file2\n")
    sys.exit(1)

proto1_filename = sys.argv[1]
proto2_filename = sys.argv[2]

with open(proto1_filename) as proto1_file:
    with open(proto2_filename) as proto2_file:
        proto1_data = json.load(proto1_file)
        proto2_data = json.load(proto2_file)
        proto1_name = proto1_data["identifiers"]["web_protocol"]
        proto2_name = proto2_data["identifiers"]["web_protocol"]

        for key in proto1_data["identifiers"].keys():
            if key != "web_protocol":
                if proto1_data["identifiers"][key] != \
                  proto2_data["identifiers"][key]:
                    sys.stderr.write("You are comparing apples and pears!\n")
                    sys.stderr.write(str(proto1_data["identifiers"]) + "\n")
                    sys.stderr.write(str(proto2_data["identifiers"]) + "\n")
                    sys.exit(1)

        proto1_time_wins = 0
        proto2_time_wins = 0
        proto1_resources_wins = 0
        proto2_resources_wins = 0
        proto1_bytes_wins = 0
        proto2_bytes_wins = 0
        proto1_same_resource_wins = 0
        proto2_same_resource_wins = 0
        total_pages = 0
        buffer_bytes = 10*1024
        grand_proto1_failed_resources = 0
        grand_proto2_failed_resources = 0
        grand_proto1_resources = 0
        grand_proto2_resources = 0

        print_line = '{:>25}  {:>25}  {:>25}  {:>25}'.format("URL",
                                                             "Fastest",
                                                             "Most_resources",
                                                             "Most_bytes")
        print(print_line)
        print("---------------------------------")

        for url, proto1_stats_list in proto1_data["webpages"].items():
            if url not in proto2_data["webpages"]:
                continue

            proto2_stats_list = proto2_data["webpages"][url]
            total_proto1_time = 0
            total_proto2_time = 0
            total_proto1_resources = 0
            total_proto2_resources = 0
            total_proto1_bytes = 0
            total_proto2_bytes = 0
            divisor_proto1 = 0
            divisor_proto2 = 0
            proto1_fails = 0
            proto2_fails = 0

            for stat in proto1_stats_list:
                if stat["status"] is True:
                    total_proto1_time = \
                        total_proto1_time + stat["time"]
                    total_proto1_resources = \
                        total_proto1_resources + stat["resource_count"]
                    grand_proto1_resources = \
                        grand_proto1_resources + stat["resource_count"]
                    grand_proto1_failed_resources += \
                        stat["failed_count"]
                    total_proto1_bytes = \
                        total_proto1_bytes + stat["total_bytes_fetched"]
                    divisor_proto1 = divisor_proto1 + 1
            for stat in proto2_stats_list:
                if stat["status"] is True:
                    total_proto2_time = total_proto2_time + stat["time"]
                    total_proto2_resources = \
                        total_proto2_resources + stat["resource_count"]
                    grand_proto2_resources = \
                        grand_proto2_resources + stat["resource_count"]
                    grand_proto2_failed_resources = \
                        grand_proto2_failed_resources + stat["failed_count"]
                    total_proto2_bytes = \
                        total_proto2_bytes + stat["total_bytes_fetched"]
                    divisor_proto2 = divisor_proto2 + 1
            if divisor_proto1 == 0 or divisor_proto2 == 0:
                continue

            # Mean stats for proto1
            proto1_mean_time = sys.maxsize
            proto1_mean_resources = 0
            proto1_mean_bytes = 0
            if divisor_proto1 != 0:
                proto1_mean_time = total_proto1_time / divisor_proto1
                proto1_mean_resources = total_proto1_resources / divisor_proto1
                proto1_mean_bytes = total_proto1_bytes / divisor_proto1
            # Mean stats for proto2
            proto2_mean_time = sys.maxsize
            proto2_mean_resources = 0
            proto2_mean_bytes = 0
            if divisor_proto2 != 0:
                proto2_mean_resources = total_proto2_resources / divisor_proto2
                proto2_mean_time = total_proto2_time / divisor_proto2
                proto2_mean_bytes = total_proto2_bytes / divisor_proto2

            fastest = "Tie"
            most_resources = "Tie"
            most_bytes = "Tie"
            percentage_faster = 0
            percentage_bytes = 0
            nr_resources_more = 0

            if proto1_mean_time < proto2_mean_time:
                fastest = proto1_name
                proto1_time_wins = proto1_time_wins + 1
                percentage_faster = 1 - \
                    proto1_mean_time / float(proto2_mean_time)
            elif proto2_mean_time < proto1_mean_time:
                fastest = proto2_name
                proto2_time_wins = proto2_time_wins + 1
                percentage_faster = 1 - \
                    proto2_mean_time / float(proto1_mean_time)

            if proto1_mean_resources > proto2_mean_resources:
                most_resources = proto1_name
                proto1_resources_wins = proto1_resources_wins + 1
            elif proto2_mean_resources > proto1_mean_resources:
                most_resources = proto2_name
                proto2_resources_wins = proto2_resources_wins + 1
            else:
                if fastest == proto1_name:
                    proto1_same_resource_wins = proto1_same_resource_wins + 1
                elif fastest == proto2_name:
                    proto2_same_resource_wins = proto2_same_resource_wins + 1
            nr_resources_more = round(abs(proto1_mean_resources -
                proto2_mean_resources), 2)

            perc_diff = 1 - min(
                abs(
                    proto2_mean_bytes /
                    proto1_mean_bytes
                ),
                abs(
                    proto1_mean_bytes /
                    proto2_mean_bytes
                )
            )
            if perc_diff > 0.01:
                if proto1_mean_bytes > proto2_mean_bytes:
                    most_bytes = proto1_name
                    proto1_bytes_wins = proto1_bytes_wins + 1
                elif proto2_mean_bytes > proto1_mean_resources:
                    most_bytes = proto2_name
                    proto2_bytes_wins = proto2_bytes_wins + 1

            total_pages = total_pages + 1
            print_line = \
                '{:>25}  {:>25}  {:>25}  {:>25}'.format(
                    url,
                    fastest + " " + \
                        str(round(100 * percentage_faster, 2)) + "%",
                    most_resources + " " +\
                        str(nr_resources_more),
                    most_bytes + " " + \
                        str(round(100*perc_diff,2)) + "%"
                    )

            print(print_line)
        print("")
        print("SUMMARY - ALL RESULTS BASED ON AVERAGES PER WEBSITE")
        print("----------------------")
        proto1_data["identifiers"].pop("web_protocol", None)
        for key in proto1_data["identifiers"].keys():
            value = proto1_data["identifiers"][key]
            if value != "":
                print(key + " = " + value)
        print("----------------------")
        print("")
        print(
            proto1_name +
            " fails to load resources " +
            str(grand_proto1_failed_resources / float(
                                                     grand_proto1_failed_resources +
                                                     grand_proto1_resources)) +
            " % of the time."
            )
        print(
            proto2_name +
            " fails to load resources " +
            str(grand_proto2_failed_resources / float(
                                                     grand_proto2_failed_resources +
                                                     grand_proto2_resources)) +
            " % of the time."
            )
        print("")
        print("In case both fetches same ammount of resources (" +
              str(total_pages - proto1_resources_wins - proto2_resources_wins) +
              " websites), " +
              proto1_name + " is faster on " +
              str(proto1_same_resource_wins) +
              " sites and " +
              proto2_name + " is faster on " +
              str(proto2_same_resource_wins) +
              " sites")
        print("")
        print(proto1_name + \
            " is faster on " + \
            str(proto1_time_wins) + \
            " of the tested web pages.")
        print(proto2_name + \
            " is faster on " + \
            str(proto2_time_wins) + \
            " of the tested web pages.")
        print("")
        print(proto1_name + \
            " fetches more resources on " + \
            str(proto1_resources_wins) + \
            " of the tested web pages.")
        print(proto2_name + \
            " fetches more resources on " + \
            str(proto2_resources_wins) + \
            " of the tested web pages.")
        print("")
        print(proto1_name + \
            " fetches more bytes on " + \
            str(proto1_bytes_wins) + \
            " of the tested web pages.")
        print(proto2_name + \
            " fetches more bytes on " + \
            str(proto2_bytes_wins) + \
            " of the tested web pages.")

        print("")
        print("Total nr of tested web-pages: " + str(total_pages))
